NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

1 
1 
1 
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
18135      %let eminfo= %str();
18136      data _null_;
18137      set EMWS1.EMCODE_ExportSet;
18138      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
18139      call symput('eminfo', strip(eminfo));
18140      run;

NOTE: There were 1 observations read from the data set EMWS1.EMCODE_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18141      %let prescoreid = %str();
18142      data _null_;
18143      set EMWS1.Ids2_EMINFO;
18144      where key = 'PRESCORECODE';
18145      if DATA ne '' then call symput('prescoreid', strip(DATA));
18146      run;

NOTE: There were 0 observations read from the data set EMWS1.IDS2_EMINFO.
      WHERE key='PRESCORECODE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code Ids2 
traverser_readyNode_note 
Retrieving Score Code EMCODE 
18147      *------------------------------------------------------------*;
18148      * Report: Determine If validvarname ANY variables are score inputs;
18149      *------------------------------------------------------------*;
18150      filename _pref "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_35SHIA3score.sas";
18151      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
18152      %INCLUDE _pref;
18177      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18178      quit;
18179      filename _pref;
NOTE: Fileref _PREF has been deassigned.
18180      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
18181      by NAME;
18182      run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Run Completed 
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_35SHIA3score.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: upitsctxsh013;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: \\filer.uncc.edu\home\hkatrag1\Project_lab;
MPRINT(SCOREXML):   * Project Name: Predictive Analytics;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: RFM_ANALYSIS;
MPRINT(SCOREXML):   * Generated by: hkatrag1;
MPRINT(SCOREXML):   * Date: 28NOV2017:13:39:28;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Input Data Source;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Ids2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(SCOREXML):   * TYPE: UTILITY;
MPRINT(SCOREXML):   * NODE: EMCODE;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
WARNING: ScoreXML: No variable dependencies found in code.
ERROR: ScoreXML: Terminating because of previous errors. SYSCC= 4

MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Determine score inputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   __rc = dmginpts("WORK.SCOREVARS");
MPRINT(EM_DIAGRAM):   length BOTHPAYM CCPAYM METHPAYM PCPAYM STATE ZIP $1;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: upitsctxsh013;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: \\filer.uncc.edu\home\hkatrag1\Project_lab;
MPRINT(EM_DIAGRAM):   * Project Name: Predictive Analytics;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: RFM_ANALYSIS;
MPRINT(EM_DIAGRAM):   * Generated by: hkatrag1;
MPRINT(EM_DIAGRAM):   * Date: 28NOV2017:13:39:28;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
INPUT> BOTHPAYM
INPUT> CCPAYM
INPUT> METHPAYM
INPUT> PCPAYM
INPUT> STATE
INPUT> ZIP
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids2_CMeta_DATA;
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "BOTHPAYM" "CCPAYM" "METHPAYM" "PCPAYM" "STATE" "ZIP" );
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   dsid = open('BIA.CATALOG2010');
MPRINT(EM_DIAGRAM):   if dsid then do;
MPRINT(EM_DIAGRAM):   call symput('_inputEngine', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Determine score outputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=BIA.CATALOG2010 noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data work.scoreoutput;
MPRINT(EM_DIAGRAM):   set BIA.CATALOG2010;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: upitsctxsh013;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: \\filer.uncc.edu\home\hkatrag1\Project_lab;
MPRINT(EM_DIAGRAM):   * Project Name: Predictive Analytics;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: RFM_ANALYSIS;
MPRINT(EM_DIAGRAM):   * Generated by: hkatrag1;
MPRINT(EM_DIAGRAM):   * Date: 28NOV2017:13:39:28;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: SASHELP.EMCORE.EMCODETOOL.CLASS;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMCODE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   drop 'ACTBUY'n 'BOTHPAYM'n 'BUYPROP'n 'CATALOGCNT'n 'CCPAYM'n 'COUNTY'n 'CUST_ID'n 'DAYLAST'n 'DEPT01'n 'DEPT02'n 'DEPT03'n 'DEPT04'n 'DEPT05'n 'DEPT06'n 'DEPT07'n 'DEPT08'n 'DEPT09'n 'DEPT10'n 'DEPT11'n 'DEPT12'n 'DEPT13'n 'DEPT14'n 
'DEPT15'n 'DEPT16'n 'DEPT17'n 'DEPT18'n 'DEPT19'n 'DEPT20'n 'DEPT21'n 'DEPT22'n 'DEPT23'n 'DEPT24'n 'DEPT25'n 'DEPT26'n 'DEPT27'n 'DOLINDEA'n 'DOLINDET'n 'DOLL24'n 'DOLLARQ01'n 'DOLLARQ02'n 'DOLLARQ03'n 'DOLLARQ04'n 'DOLLARQ05'n 'DOLLARQ06'n 'DOLLARQ07'n 
'DOLLARQ08'n 'DOLLARQ09'n 'DOLLARQ10'n 'DOLLARQ11'n 'DOLLARQ12'n 'DOLLARQ13'n 'DOLLARQ14'n 'DOLLARQ15'n 'DOLLARQ16'n 'DOLLARQ17'n 'DOLLARQ18'n 'DOLLARQ19'n 'DOLLARQ20'n 'DOLLARQ21'n 'DOLLARQ22'n 'DOLNETDA'n 'DOLNETDT'n 'DTBUYLST'n 'DTBUYORG'n 'FREQPRCH'n 
'METHPAYM'n 'MONLAST'n 'ORDERSIZE'n 'PCPAYM'n 'RESPOND'n 'STATE'n 'TENURE'n 'TOTORDQ01'n 'TOTORDQ02'n 'TOTORDQ03'n 'TOTORDQ04'n 'TOTORDQ05'n 'TOTORDQ06'n 'TOTORDQ07'n 'TOTORDQ08'n 'TOTORDQ09'n 'TOTORDQ10'n 'TOTORDQ11'n 'TOTORDQ12'n 'TOTORDQ13'n 
'TOTORDQ14'n 'TOTORDQ15'n 'TOTORDQ16'n 'TOTORDQ17'n 'TOTORDQ18'n 'TOTORDQ19'n 'TOTORDQ20'n 'TOTORDQ21'n 'TOTORDQ22'n 'UNITSIDD'n 'UNITSLAP'n 'UNTLANPO'n 'ZIP'n ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _emrprt "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\tablemeta.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.rootmeta;
MPRINT(EM_DIAGRAM):   set EMDS.catalog_TM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _pckger_ '\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Reports\correlation_3V3TC\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* Ids2 : Beginning creation of SPK report 
* datetime : 28NOV2017:13:39:29 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
*------------------------------------------------------------* 
* Path is out of synch 
* Path needs to be run 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ '\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\Ids2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28NOV2017:13:39:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=BIA.CATALOG2010 out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('BIA.CATALOG2010');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set BIA.CATALOG2010;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=BIA.CATALOG2010 out=WORK.M0H57KKK noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0H57KKK;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0H57KKK(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0H57KKK;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0H57KKK;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1EU428R NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1EU428R;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1EU428R;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M375G2LF(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1EU428R;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1EU428R;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1EU428R;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1EU428R;
MPRINT(EMADVISECOLUMNS):   set WORK.M1EU428R;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.Ids2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.Ids2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   retain drop 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3SOFOQG as select * from WORK.M38YDQXG order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3SOFOQG as select * from WORK.M1N522KL order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3SOFOQG compare=work._comp3SOFOQG out=WORK._DIFF18ZRGIL noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10LLB6IN as select * from WORK._DIFF18ZRGIL where NAME in (select NAME from WORK._DIFF18ZRGIL where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1T954P_ as select * from WORK._DIFF18ZRGIL where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF18ZRGIL where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1T954P_ as select * from WORK._DIFF18ZRGIL where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF18ZRGIL where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1T954P_;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1T954P_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1T954P_;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1T954P_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* EMCODE : Beginning creation of SPK report 
* datetime : 28NOV2017:13:39:31 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
*------------------------------------------------------------* 
* Path is out of synch 
* Path needs to be run 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ '\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\EMCODE_ReportDataModel.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28NOV2017:13:39:31 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.EMCODE_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Ids2_CMeta_DATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1KW6X0S as select * from WORK.M1WNA4FM order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1KW6X0S as select * from WORK.M0038XQK order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1KW6X0S compare=work._comp1KW6X0S out=WORK._DIFF04SQQIZ noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN00388;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Reports\correlation_3V3TC;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack28RT = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack28RT, "SASCode", ' type="EM Result" version="14.1" Report="correlation_3V3TC" nodeid="EMCODE" description="SAS Code" component="SASCode"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASCode began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3QPU = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3QPU, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack28RT, Pack3QPU, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2TQZLW0 "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QPU, "fileref:F2TQZLW0", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WCTU94 "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\tablemeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QPU, "fileref:F0WCTU94", "BINARY", "text/xml", 'TABLEMETA', 'NAME=TABLEMETA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\tablemeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1JXPNZN "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Reports\correlation_3V3TC\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3QPU, "fileref:F1JXPNZN", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Reports\correlation_3V3TC\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack36ZA = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack36ZA, "CATALOG2010", ' NAME="Ids2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package CATALOG2010 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3WFA_QU "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\Ids2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack36ZA, "fileref:F3WFA_QU", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\Ids2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3JC7S3N "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack36ZA, "fileref:F3JC7S3N", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3HYZ6KN "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack36ZA, "fileref:F3HYZ6KN", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack28RT, Pack36ZA, rc, "NESTED_NAME", "Ids2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack077G = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack077G, "SAS Code", ' NAME="EMCODE"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SAS Code began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F08BE7EV "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\EMCODE_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack077G, "fileref:F08BE7EV", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\EMCODE_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2FFGX31 "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack077G, "fileref:F2FFGX31", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F048XJLA "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack077G, "fileref:F048XJLA", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F08POYPI "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack077G, "fileref:F08POYPI", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WYELKX "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack077G, "fileref:F0WYELKX", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2IDCT6I "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack077G, "fileref:F2IDCT6I", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3S_2AUR "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack077G, "fileref:F3S_2AUR", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack28RT, Pack077G, rc, "NESTED_NAME", "EMCODE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0CLJ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0CLJ, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack28RT, Pack0CLJ, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F373VN1H "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CLJ, "fileref:F373VN1H", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F201K77A "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CLJ, "fileref:F201K77A", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Q1L9UK "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CLJ, "fileref:F2Q1L9UK", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3VEVAPD "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack28RT, "fileref:F3VEVAPD", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack13KU = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack13KU, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack28RT, Pack13KU, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2HNT = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2HNT, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack13KU, Pack2HNT, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0CGFGEQ "C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_35SHIA3score.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2HNT, "fileref:F0CGFGEQ", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_35SHIA3score.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1OYY = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1OYY, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack13KU, Pack1OYY, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "\\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Reports\correlation_3V3TC";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack28RT, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack28RT successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack28RT, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack28RT ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package SASCode began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\input.xml inserted successfully.
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\tablemeta.xml inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Reports\correlation_3V3TC\miningResult.xml inserted successfully.
Package CATALOG2010 began successfully.
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\Ids2_ReportDataModel.xml inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMRUNSTATUS.xml inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\Ids2\EMNOTES.txt inserted successfully.
spk_PACKAGEINSERT_note
Package SAS Code began successfully.
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\EMCODE_ReportDataModel.xml inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMRUNSTATUS.xml inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMNOTES.txt inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMTRAINCODE.sas inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMFLOWSCORE.sas inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMPUBLISHSCORE.sas inserted successfully.
File \\filer.uncc.edu\home\hkatrag1\Project_lab\Predictive Analytics\Workspaces\EMWS1\EMCODE\EMCUSTOMGRAPH.xml inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\dsapi.sas inserted successfully.
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\dsapimeta.xml inserted successfully.
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_3I3A4QY\layout.xml inserted successfully.
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\hkatrag1\AppData\Local\Temp\117\SAS Temporary Files\_TD8356_UPITSCTXSH013_\Prc2\P_35SHIA3score.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack28RT successfully.
Package Pack28RT ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F2TQZLW0;
MPRINT(EM_DIAGRAM):   filename F0WCTU94;
MPRINT(EM_DIAGRAM):   filename F1JXPNZN;
MPRINT(EM_DIAGRAM):   filename F3WFA_QU;
MPRINT(EM_DIAGRAM):   filename F3JC7S3N;
MPRINT(EM_DIAGRAM):   filename F3HYZ6KN;
MPRINT(EM_DIAGRAM):   filename F08BE7EV;
MPRINT(EM_DIAGRAM):   filename F2FFGX31;
MPRINT(EM_DIAGRAM):   filename F048XJLA;
MPRINT(EM_DIAGRAM):   filename F08POYPI;
MPRINT(EM_DIAGRAM):   filename F0WYELKX;
MPRINT(EM_DIAGRAM):   filename F2IDCT6I;
MPRINT(EM_DIAGRAM):   filename F3S_2AUR;
MPRINT(EM_DIAGRAM):   filename F373VN1H;
MPRINT(EM_DIAGRAM):   filename F201K77A;
MPRINT(EM_DIAGRAM):   filename F2Q1L9UK;
MPRINT(EM_DIAGRAM):   filename F3VEVAPD;
MPRINT(EM_DIAGRAM):   filename F0CGFGEQ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
1 
19283      proc printto;
MPRINT(EM_DIAGRAM):    proc printto;
19284      run;
MPRINT(EM_DIAGRAM):   run;

