*------------------------------------------------------------*
User:                srajan4
Date:                December 12, 2017
Time:                01:39:22
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 12, 2017
Time:                01:33:30
*------------------------------------------------------------*
14716  proc freq data=EMWS3.Tree_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.TreeMETA;
14718  run;
 
NOTE: There were 99 observations read from the data set EMWS3.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
14719  proc print data=WORK.TreeMETA label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14755  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14756  length ORDER $20;
14757  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14758     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14759  set EMWS3.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
14760  NumLevels=2;
14761  select(upcase(ORDER));
14762  when('DESC') ORDER = 'Descending';
14763  when('ASC') ORDER = 'Ascending';
14764  when('FMTDESC') ORDER = 'Formatted Descending';
14765  when('FMTASC') ORDER = 'Formatted Ascending';
14766  otherwise ORDER = 'Descending';
14767  end;
14768  output;
14769  run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
14770  title9 ' ';
14771  proc print data=WORK.Tree_EVENT noobs label;
14772  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14773  title9 ' ';
14774  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14775  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14776  title10;
 
"No decisions defined for target "RESPOND"."
14777  proc print data = EMWS3.Ids_RESPOND_DM noobs label;
14778  var _type_ variable label;
14779  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14780  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14781  title9 ' ';
14782  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14783  run;
 
NOTE: There were 7 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
14784  title10;
 
14785  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15328  *------------------------------------------------------------*;
15329  * Tree: Generation of macros and macro variables;
15330  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15331  *------------------------------------------------------------*;
 
15332  %let EMEXCEPTIONSTRING=;
15333  *------------------------------------------------------------*;
15334  * TRAIN: Tree;
15335  *------------------------------------------------------------*;
15336  %let EM_ACTION = TRAIN;
15337  %let syscc = 0;
15338  %macro main;
15339
15340    %if %upcase(&EM_ACTION) = CREATE %then %do;
15341      filename temp catalog 'sashelp.emmodl.tree_create.source';
15342      %include temp;
15343      filename temp;
15344
15345      %em_tree_create;
15346    %end;
15347
15348     %else
15349     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15350
15351         filename temp catalog 'sashelp.emmodl.tree_train.source';
15352         %include temp;
15353         filename temp;
15354         %em_tree_train;
15355     %end;
15356
15357    %else
15358    %if %upcase(&EM_ACTION) = SCORE %then %do;
15359      filename temp catalog 'sashelp.emmodl.tree_score.source';
15360      %include temp;
15361      filename temp;
15362
15363      %em_tree_score;
15364
15365    %end;
15366
15367    %else
15368    %if %upcase(&EM_ACTION) = REPORT %then %do;
15369
15370         filename temp catalog 'sashelp.emmodl.tree_report.source';
15371         %include temp;
15372         filename temp;
15373
15374         %em_tree_report;
15375     %end;
15376
15377    %else
15378    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15379
15380         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15381         %include temp;
15382         filename temp;
15383         %EM_TREE_OPENTREEVIEWER;
15384
15385     %end;
15386
15387    %else
15388    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15389
15390         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15391         %include temp;
15392         filename temp;
15393         %EM_TREE_CLOSETREEVIEWER;
15394
15395     %end;
15396
15397
15398     %doendm:
15399  %mend main;
15400
15401  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15403 +%macro em_tree_train;
15405 +   %if &EM_IMPORT_DATA eq %then %do;
15406 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15407 +       %put &em_codebar;
15408 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15409 +       %put &errormsg;
15410 +       %put &em_codebar;
15411 +       %goto doendm;
15412 +   %end;
15413 +   %else
15414 +       %let EMEXCEPTIONSTRING =;
15416 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15417 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15418 +        %put &em_codebar;
15419 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15420 +        %put &errormsg;
15421 +        %put &em_codebar;
15422 +        %goto doendm;
15423 +   %end;
15425 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15426 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15427 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15428 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15429 +        %put &em_codebar;
15430 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15431 +        %put &errormsg;
15432 +        %put &em_codebar;
15433 +        %goto doendm;
15434 +   %end;
15436 +   /* Initialize property macro variables */
15437 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15438 +   %include temp;
15439 +   filename temp;
15441 +   %EM_SetProperties;
15443 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15444 +   %EM_GETNAME(key=EMTREE, type=DATA);
15445 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15446 +     /* if import eq Y and no importtable defined, throw an exception */
15447 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15448 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15449 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15450 +         %put &em_codebar;
15451 +         %put &errmsg;
15452 +         %put &em_codebar;
15453 +         %goto doendm;
15454 +      %end;
15455 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15456 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15457 +         %put &em_codebar;
15458 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15459 +         %put &errormsg;
15460 +         %put &em_codebar;
15461 +         %goto doendm;
15462 +      %end;
15463 +      %else %do;
15464 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15465 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15466 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15467 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15468 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15469 +         %let dsid = %sysfunc(close(&dsid));
15470 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15471 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15472 +            %put &em_codebar;
15473 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15474 +            %put &errormsg;
15475 +            %put &em_codebar;
15476 +            %goto doendm;
15477 +         %end;
15478 +      %end;
15479 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15480 +         proc delete data=&EM_USER_EMTREE;
15481 +         run;
15482 +      %end;
15483 +   %end;
15484 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15485 +      proc delete data=&EM_USER_EMTREE;
15486 +      run;
15487 +   %end;
15489 +   /* load tree macros */
15490 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15491 +   %include temp;
15492 +   filename temp;
15494 +   /* data sets */
15495 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15496 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15497 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15499 +   /* files */
15500 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15502 +   /* check actual num of target levels */
15503 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15504 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15505 +                              nLevel=_nTargetLevel );
15506 +      %if &_nTargetLevel  > 2 %then %do;
15507 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15508 +        %put &em_codebar;
15509 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15510 +        %put &errormsg;
15511 +        %put &em_codebar;
15512 +        %goto doendm;
15513 +      %end;
15514 +   %end;
15516 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15517 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15518 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15519 +        %let costflag=0;
15520 +        data _null_;
15521 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15522 +          if eof then call symput("costflag", _N_);
15523 +        run;
15524 +        %if &costflag gt 0 %then %do;
15525 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15526 +          %put &em_codebar;
15527 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15528 +          %put &errormsg;
15529 +          %put &em_codebar;
15530 +          %goto doendm;
15531 +       %end;
15532 +     %end;
15533 +   %end;
15535 +   /* determine if multiple targets will be processed */
15536 +   %let em_tree_multipleTargets=N;
15537 +   %let em_tree_numTarget = 1;
15538 +   %let em_tree_targetVars=;
15540 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15541 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15542 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15543 +         %let em_tree_multipleTargets=N;
15544 +      %end;
15545 +      %else %do;
15546 +         /* create macro array of targets  */
15547 +         data _null_;
15548 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15549 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15550 +           if eof then
15551 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15552 +        run;
15554 +        %if &em_tree_numTarget gt 1 %then %do;
15555 +           %let em_tree_multipleTargets=Y;
15556 +        %end;
15557 +      %end;
15558 +   %end;
15560 +   /* create view of only necessary variable for performance reasons */
15561 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15562 +   data &tempData / view=&tempData;
15563 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15564 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15565 +       %EM_TARGET
15566 +     %end;
15567 +     %else %do;
15568 +       %if &em_tree_numTarget ne 0 %then %do;
15569 +         %do i=1 %to &em_tree_numTarget;
15570 +            &&em_tree_targetVars&i
15571 +         %end;
15572 +       %end;
15573 +     %end;
15574 +     );
15575 +   run;
15577 +   /* run Tree procedure */
15578 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15580 +   /* Check return code and throw exception if error is detected */
15581 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15582 +   %if &syserr %then %do;
15583 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15584 +     %goto doendm;
15585 +   %end;
15587 +   /* add decision score code if multiple targets are processed */
15588 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15589 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15590 +   %end;
15592 +   /* create outfit dataset if multiple score statements have been executed */
15593 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15595 +   /* create English Rules */
15596 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15597 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15598 +       %em_tree_makeEnglishRules;
15600 +       /* English Rules */
15601 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15603 +     %end;
15604 +   filename x;
15606 +   %doendm:
15607 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15608 +%macro EM_SetProperties;
15610 +   /* train properties */
15611 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15653 +   /* properties for interactive sample */
15654 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15659 +   /* report properties */
15660 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15674 +   /* score properties */
15675 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15678 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15680 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15681 +  %global &nLevel;
15682 +  proc dmdb batch data=&indata
15683 +    classout=_tmp_dmdbout;
15684 +    class &target;
15685 +  run;
15686 +  data _tmp_dmdbout;
15687 +    set _tmp_dmdbout;
15688 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15689 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15690 +  run;
15691 +  data _null_;
15692 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15693 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15694 +    %let dsid = %sysfunc(close(&dsid));
15695 +     call symput("&nLevel", put(&_obs, Best12.));
15696 +  run;
15698 +  proc datasets lib=work nolist;
15699 +     delete _tmp_dmdbout;
15700 +  run;
15701 +  quit;
15702 +%Mend EM_CheckBinaryTargetLevel;
15705 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15707 +  /* determine the number of obs in training data */
15708 +  proc sql;
15709 +    reset noprint;
15710 +    select count(*) into :em_nobs from &indata;
15711 +  quit;
15713 +  /* determine the number of input variables */
15714 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15715 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15717 +  /* retrieve targetEvent from decmeta */
15718 +  %let targetEvent=;
15719 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15720 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15721 +      data _null_;
15722 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15723 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15724 +      run;
15725 +    %end;
15726 +  %end;
15728 +  /* create targetTable if multipleTar eq Y */
15729 +  data temptarget;
15730 +    set &EM_DATA_VARIABLESET;
15731 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15732 +  run;
15734 + /* data sets */
15735 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15736 + %EM_GETNAME(key=EMTREE,        type=DATA);
15737 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15738 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15739 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15740 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15741 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15742 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15743 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15744 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15746 + /* files */
15747 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15748 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15750 + /* turn on pmml if requested */
15751 + %let nnpmml=0;
15752 + %if %symexist(EM_PMML) %then %do;
15753 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15754 +       %let nnpmml=1;
15756 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15757 +%end;
15759 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15761 + %if &nnpmml or &numClassTarget %then %do;
15763 +       /* create dmdb needed for pmml generation */
15764 +       %let tree_maxlevel = 512;
15765 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15766 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15767 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15768 +         %end;
15769 +       %end;
15770 +       %if &tree_maxlevel gt 0 %then %do;
15771 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15772 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15773 +       %end;
15775 +       %let targetOrderString =;
15776 +       %let targetString = ;
15777 +       data _null_;
15778 +          length orderString nameString $10000;
15779 +          retain orderString nameString;
15780 +          set &em_data_variableset end=eof;
15781 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15782 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15783 +          %end;
15784 +          %else %do;
15785 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15786 +          %end;          select(order);
15787 +            when('')        order ='DESC';
15788 +            when('FMTASC')  order='ASCFMT';
15789 +            when('FMTDESC') order='DESFMT';
15790 +            otherwise;
15791 +          end;
15792 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15793 +          nameString = trim(nameString)!!' '!!trim(NAME);
15795 +          if eof then do;
15796 +             call symput('targetOrderString', trim(orderString));
15797 +             call symput('targetString', trim(nameString));
15798 +          end;
15799 +       run;
15801 +       %let arborkluge= "work._treeDMDB";
15803 +       proc dmdb batch data=&indata
15804 +       %if &nnpmml %then %do;
15805 +           PMML
15806 +       %end;
15807 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15810 +   %if &nnpmml %then %do;
15811 +        %if "%EM_ID" ne "" %then %do;
15812 +          id %EM_ID;
15813 +        %end;
15814 +        %if &EM_NUM_CLASS gt 0 %then %do;
15815 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15816 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15817 +               &targetOrderString;
15818 +        %end;
15819 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15820 +          var %EM_INTERVAL;
15821 +        %end;
15822 +        target &targetString %EM_INTERVAL_TARGET;
15823 +        %if "%EM_FREQ" ne "" %then %do;
15824 +          freq %EM_FREQ;
15825 +        %end;
15826 +  %end;
15827 +  %else %do;
15828 +      class  &targetOrderString;
15829 +      target &targetString %EM_INTERVAL_TARGET;
15830 +  %end;
15831 +       run;
15832 +       quit;
15834 +       proc datasets lib=work nolist;
15835 +          delete classout varout;
15836 +       run;
15837 +       quit;
15839 +    %end;
15840 + %end;
15842 + /* run Arbor procedure */
15843 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15844 +  proc arbor data=&INDATA
15846 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15847 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15848 +  %end;
15850 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15851 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15852 +  %end;
15854 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15855 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15856 +  %end;
15858 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15859 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15860 +  %end;
15862 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15863 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15864 +  %end;
15866 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15867 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15868 +  %end;
15869 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15870 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15871 +  %end;
15872 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15873 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15874 +  %end;
15876 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15877 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15878 +      alpha = &EM_PROPERTY_SIGLEVEL
15879 +    %end;
15880 +  %end;
15882 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15883 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15884 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15885 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15886 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15888 +        padjust =
15889 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15890 +          &chaid
15891 +        %end;
15892 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15893 +          DEPTH
15894 +        %end;
15895 +      %end;
15896 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15897 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15898 +         pvars = &num_inputs
15899 +      %end;
15900 +    %end;
15901 +  %end;
15902 +  %else %do;
15903 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15904 +         padjust = NONE
15905 +      %end;
15906 +  %end;
15908 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15909 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15910 +    Maxrules = &num_nrules
15911 +  %end;
15913 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15914 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15915 +    Maxsurrs = &num_nsurrs
15916 +  %end;
15918 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15919 +     Missing=&EM_PROPERTY_MISSINGVALUE
15920 +  %end;
15922 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15923 +     USEVARONCE
15924 +  %end;
15926 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15927 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15928 +  %end;
15931 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15932 +    event = "&targetEvent"
15933 +  %end;
15935 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15936 +     DECSEARCH
15937 +  %end;
15939 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15940 +     PRIORSSEARCH
15941 +  %end;
15943 +  %if &arbor_1 ne %then %do;
15944 +    &arbor_1
15945 +  %end;
15947 +  %if &em_arbor ne %then %do;
15948 +     &em_arbor
15949 +  %end;
15950 +  ;
15951 + %end;
15952 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15953 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15954 +       interact;
15955 + %end;
15956 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15957 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15958 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15959 +    %put &em_codebar;
15960 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15961 +    %put &errormsg;
15962 +    %put &em_codebar;
15963 +    %goto doendm;
15964 +   %end;
15965 +   %else %do;
15966 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15967 +       interact;
15968 +   %end;
15969 + %end;
15971 + %else %do;
15972 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15973 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15974 +    %put &em_codebar;
15975 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15976 +    %put &errormsg;
15977 +    %put &em_codebar;
15978 +    %goto doendm;
15979 +   %end;
15980 +   %else %do;
15981 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15982 +        interact;
15983 +   %end;
15984 + %end;
15986 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15987 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15988 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15989 +    %end;
15991 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15992 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15993 +    %end;
15995 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15996 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15997 +    %end;
15999 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16000 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16001 +    %end;
16003 +    %if "%EM_FREQ" ne "" %then %do;
16004 +       freq %EM_FREQ;
16005 +    %end;
16007 +    %if "&multipleTar" eq "Y" %then %do;
16008 +       /* cycle through all target vars in variableset */
16009 +       %let tdsid = %sysfunc(open(temptarget));
16010 +       %if &tdsid %then %do;
16011 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16012 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16013 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16014 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16015 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16016 +             target &var / level = &lvl
16017 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16018 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16019 +             %end;
16020 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16021 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16022 +             %end;
16023 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16024 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16025 +             %end;
16026 +          %end;
16027 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16028 +       %end;
16029 +       useTarget variable = %EM_TARGET;
16030 +    %end;
16031 +    %else %do;
16032 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16033 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16034 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16035 +      %end;
16036 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16037 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16038 +      %end;
16039 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16040 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16041 +      %end;
16042 +    %end;
16044 +    %if "&multipleTar" eq "N" %then %do;
16045 +      &EM_DEC_STATEMENT;
16046 +    %end;
16048 +    Performance &EM_PROPERTY_PERFORMANCE
16049 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16050 +      nodesize=&EM_PROPERTY_NODESAMPLE
16051 +    %end;
16052 +    ;
16054 +    %if "&intFlag" eq "Y" %then %do;
16055 +       INTERACT Largest;
16056 +       Train maxnewdepth=0;
16057 +    %end;
16059 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16060 +         Assess
16061 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16062 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16063 +              %put &em_codebar;
16064 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16065 +              %put &errormsg;
16066 +              %put &em_codebar;
16067 +            %end;
16068 +            %else %do;
16069 +               Validata=&EM_IMPORT_VALIDATE
16070 +            %end;
16071 +         %end;
16072 +         %else %do;
16073 +           NoValidata
16074 +         %end;
16075 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16076 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16077 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16078 +               %if &dsid %then %do;
16079 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16080 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16081 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16082 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16083 +                   %else %do;
16084 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16085 +                      %else %let measure= MISC;
16086 +                   %end;
16087 +                 %end;
16088 +               %end;
16089 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16090 +            %end;
16091 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16092 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16093 +                 %let measure=ASE;
16094 +              %end;
16095 +              %else %do;
16096 +                 %let measure=MISC;
16097 +              %end;
16098 +            %end;
16099 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16100 +              %let measure=ASE;
16101 +            %end;
16102 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16103 +               %let measure = LIFT;
16104 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16105 +               %if &dsid %then %do;
16106 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16107 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16108 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16109 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16110 +                 %end;
16111 +               %end;
16112 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16113 +            %end;
16114 +            measure=&measure
16115 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16116 +               event = "&targetEvent"
16117 +            %end;
16118 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16119 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16120 +            %end;
16121 +         %end;
16122 +         %if "&multipleTar" eq "N" %then %do;
16123 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16124 +               CV
16125 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16126 +                 CVNITer = &EM_PROPERTY_CVNITER
16127 +               %end;
16128 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16129 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16130 +               %end;
16131 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16132 +                 CVSeed = &EM_PROPERTY_CVSEED
16133 +               %end;
16134 +            %end;
16135 +         %end;
16136 +       %end;
16137 +      ;
16139 +      %if "&intFlag" ne "Y" %then %do;
16140 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16141 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16142 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16143 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16145 +          SUBTREE &subtree
16146 +          %if "&subtree" eq "NLEAVES" %then %do;
16147 +            =&EM_PROPERTY_NSUBTREE
16148 +          %end;
16149 +          ;
16150 +        %end;
16152 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16153 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16154 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16155 +          %end;
16156 +       %end;
16157 +      %end;
16158 + %end;
16161 + MakeMacro nleaves = nleaves;
16162 + save
16163 + %if "&EM_USER_EMTREE" ne "" %then %do;
16164 +   MODEL=&EM_USER_EMTREE
16165 + %end;
16166 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16167 +   SEQUENCE=&EM_USER_OUTSEQ
16168 + %end;
16169 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16170 +   IMPORTANCE=&EM_USER_OUTIMPORT
16171 + %end;
16172 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16173 +   NODESTAT=&EM_USER_OUTNODES
16174 + %end;
16175 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16176 +   SUMMARY=&EM_USER_OUTSUMMARY
16177 + %end;
16178 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16179 +   STATSBYNODE=&EM_USER_OUTSTATS
16180 + %end;
16181 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16182 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16183 + %end;
16184 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16185 +   Pathlistnonmissing=&EM_USER_OUTPATH
16186 + %end;
16187 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16188 +   RULES = &EM_USER_OUTRULES
16189 + %end;
16190 + ;
16192 + %if "&intFlag" ne "Y" %then %do;
16194 +   %let lookupString = ;
16195 +   %if ^%symexist(EM_OPTION) %then
16196 +      %let EM_OPTION=;
16198 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16199 +      %let lookupString = LOOKUP=SELECT;
16200 +   %end;
16202 +   %let codetext=;
16203 +   %let norescodetxt=;
16205 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16206 +     %let codetext=&codetext DUMMY;
16207 +     %let norescodetxt=&norescodetxt DUMMY;
16208 +   %end;
16209 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16210 +     %let codetext=&codetext NOLEAFID;
16211 +     %let norescodetxt=&norescodetxt NOLEAFID;
16212 +   %end;
16213 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16214 +     %let norescodetxt=&norescodetxt NOPRED;
16215 +   %end;
16217 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16218 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16220 +   %if &nnpmml %then %do;
16221 +     code pmml;
16222 +   %end;
16224 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16225 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16226 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16227 +   %end;
16228 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16229 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16230 +   %end;
16231 + %end;
16233 + run;
16234 + quit;
16236 + /*%em_checkerror(); */
16237 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16238 +   /* Delete DMDB catalog */
16239 +   proc datasets lib=work nolist;
16240 +       delete _treeDMDB / mt=cat;
16241 +  run;
16242 +  %end;
16244 + %if &nnpmml %then %do;
16245 +    ods pmml close;
16246 + %end;
16248 +  %doendm:
16250 +%mend em_tree_runTreeProcedure;
16252 +%macro em_tree_createFitStats( multipleTar= );
16255 +  /* create targetTable is multipleTar eq Y */
16256 +  data temptarget;
16257 +    set &EM_DATA_VARIABLESET;
16258 +    where ROLE="TARGET";
16259 +  run;
16261 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16262 +   data &EM_USER_EMOUTFIT;
16263 +     length target $32;
16264 +     merge work.fit_train
16265 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16266 +       work.fit_valid
16267 +     %end;
16268 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16269 +       work.fit_test
16270 +     %end;
16271 +     ;
16272 +     %if "&multipleTar" eq "N" %then %do;
16273 +       target="%EM_TARGET";
16274 +     %end;
16275 +     %else %do;
16276 +       target = _TARGET_;
16277 +     %end;
16278 +     drop _NW_ _SUMW_
16279 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16280 +        _VSUMW_
16281 +     %end;
16282 +     ;
16283 +   run;
16285 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16286 +     proc datasets library=work nolist;
16287 +       delete fit_valid;
16288 +     run;
16289 +   %end;
16290 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16291 +     proc datasets library=work nolist;
16292 +       delete fit_test;
16293 +     run;
16294 +   %end;
16296 +%mend em_tree_createFitStats;
16299 +%macro em_tree_makeEnglishRules;
16301 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16302 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16304 +  /* verify that necessary tables exist and if not, skip processing */
16305 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16306 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16307 +    %goto doendm;
16308 +  %end;
16309 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16310 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16311 +    %goto doendm;
16312 +  %end;
16314 +  /* determine length of variable in outpath dataset */
16315 +  %let vlength= ;
16316 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16317 +  %if &dsid ne %then %do;
16318 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16319 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16320 +  %end;
16321 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16323 +  data tempoutpath;
16324 +    length varname $&vlength;
16325 +    retain varname;
16326 +    set &EM_USER_OUTPATH;
16328 +    if ^missing(variable) then varname=variable;
16329 +    else if ^missing(var_name) then varname=var_name;
16330 +    output;
16331 +  run;
16333 +  /* create an array of generated predicted variable names */
16334 +  %let tree_pred_vars = ;
16335 +  %let tree_pred_label = ;
16336 +  %let numpred= 0;
16337 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16339 +    data _null_;
16340 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16341 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16342 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16343 +     if eof then
16344 +       call symput('numpred', strip(put(_N_, BEST.)));
16345 +    run;
16346 +  %end;
16348 +  /* determine if NPRIORS exists in outnodes  */
16349 +  %local nprior_flag;
16350 +  data _null_;
16351 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16352 +    if eof then do;
16353 +      call symput('nprior_flag', strip(put(npriors, best.)));
16354 +    end;
16355 +  run;
16357 +  proc sort data=tempoutpath; by node; run;
16358 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16360 +  data tempoutpath;
16361 +    merge tempoutpath(in=_a) outnodes(keep= node
16362 +    %if "&nprior_flag" ne "." %then %do;
16363 +      NPRIORS
16364 +    %end;
16365 +    %else %do;
16366 +      N
16367 +    %end;
16368 +    %if &numpred gt 0 %then %do;
16369 +      %do i=1 %to &numpred;
16370 +        &&tree_pred_vars&i
16371 +      %end;
16372 +    %end;
16373 +    );
16374 +    by node;
16375 +    if _a;
16376 +  run;
16378 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16380 +  data _null_;
16381 +    file x;
16382 +    set tempoutpath;
16383 +    by node descending varname;
16384 +    retain origvar oldnode string;
16385 +    length origvar $32 oldnode 8 string $200;
16387 +    if _N_ = 1 then do;
16388 +      origvar = varname;
16389 +      oldnode = node;
16390 +    end;
16392 +    if first.node then do;
16393 +       put "&EM_CODEBAR";
16394 +       put " Node = " node;
16395 +       put "&EM_CODEBAR";
16396 +    end;
16398 +      if first.varname then do;
16399 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16400 +            if MISSING(CHARACTER_VALUE) then do;
16401 +             if NUMERIC_VALUE ne .  then do;
16402 +              if ^first.node then do;
16403 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16404 +              end;
16405 +              else do;
16406 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16407 +              end;
16408 +             end;
16409 +            end;
16410 +            else do;
16411 +              if ^first.node then do;
16412 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16413 +              end;
16414 +              else do;
16415 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16416 +              end;
16417 +             end;
16418 +         end;
16419 +         else if RELATION in ("=") then do;
16420 +            if ^first.node then do;
16421 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16422 +            end;
16423 +            else do;
16424 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16425 +            end;
16426 +         end;
16427 +         else if RELATION in ("ISMISSING") then do;
16428 +            if ^first.node then do;
16429 +              string = " AND "|| strip(varname) || " equals Missing";
16430 +            end;
16431 +            else do;
16432 +              string = "if "|| strip(varname) ||" equals Missing";
16433 +            end;
16434 +         end;
16435 +         else if RELATION in ("ISNOTMISSING") then do;
16436 +            if ^first.node then do;
16437 +              string = " AND "|| strip(varname) || " equals All Values";
16438 +            end;
16439 +            else do;
16440 +              string = "if "|| strip(varname) ||" equals All Values";
16441 +            end;
16442 +         end;
16443 +         if ^missing(varname) then origvar = varname;
16444 +         oldnode=node;
16446 +      end;
16447 +      else do;
16448 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16449 +          if MISSING(CHARACTER_VALUE) then do;
16450 +           if  NUMERIC_VALUE ne .  then do;
16451 +            if ^MISSING(string) then
16452 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16453 +            else
16454 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16455 +           end;
16456 +          end;
16457 +          else do;
16458 +            if ^MISSING(string) then
16459 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16460 +            else
16461 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16462 +          end;
16464 +         end;
16465 +         else if RELATION in ("=") then do;
16466 +           string = strip(string)||", "||strip(character_value);
16467 +         end;
16468 +         else if RELATION in ("ISMISSING") then do;
16470 +         end;
16471 +         if ^missing(varname) then origvar = varname;
16472 +         oldnode=node;
16473 +      end;
16474 +      if last.varname then do;
16475 +         if RELATION in ("ISMISSING") then do;
16476 +           if ^first.varname then do;
16477 +             string = strip(string) || " or MISSING";
16478 +           end;
16479 +         end;
16480 +         put string;
16481 +         if ^missing(varname) then origvar = varname;
16482 +         oldnode=node;
16483 +      end;
16485 +      if last.node then do;
16486 +         put "then ";
16487 +         put " Tree Node Identifier   = " node;
16489 +         %if "&nprior_flag" ne "." %then %do;
16490 +           put " Number of Observations = " NPRIORS;
16491 +         %end;
16492 +         %else %do;
16493 +           put " Number of Observations = " N;
16494 +         %end;
16496 +         %if &numpred gt 0 %then %do;
16497 +           %do i=1 %to &numpred;
16498 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16499 +           %end;
16500 +         %end;
16502 +         put " ";
16503 +         if ^missing(varname) then origvar = varname;
16504 +         oldnode=node;
16505 +      end;
16507 +  run;
16509 +  proc datasets lib=work nolist;
16510 +    delete tempoutpath outnodes;
16511 +  run;
16513 +  %doendm:
16514 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           19.93 seconds
      cpu time            0.20 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS3.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           1.46 seconds
      cpu time            0.04 seconds
 
 
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           20.25 seconds
      cpu time            0.25 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           20.53 seconds
      cpu time            0.25 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           20.01 seconds
      cpu time            0.23 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           20.17 seconds
      cpu time            0.25 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596687 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633958912 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 70699408 bytes of work memory.
NOTE: The subtree sequence contains 26 subtrees. The largest has 51 nodes and 26 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS3.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: The data set EMWS3.TREE_EMTREE has 2269 observations and 4 variables.
NOTE: The data set EMWS3.TREE_OUTNODES has 7 observations and 24 variables.
NOTE: The data set EMWS3.TREE_OUTPATH has 23 observations and 7 variables.
NOTE: The data set EMWS3.TREE_OUTRULES has 141 observations and 6 variables.
NOTE: The data set EMWS3.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: The data set EMWS3.TREE_OUTSTATS has 49 observations and 5 variables.
NOTE: The data set EMWS3.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS3.TREE_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file \\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\Tree\TREEFLOW.sas opened.
NOTE: External file \\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           21.71 seconds
      cpu time            0.26 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS3.EM_TREE.VIEW used (Total process time):
      real time           1:16.76
      cpu time            4.20 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1:16.93
      cpu time            4.21 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           1.25 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS3.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      (no system-specific pathname available),
      (no system-specific file attributes available)
 
NOTE: 45 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.32 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16516
16517  *------------------------------------------------------------*;
16518  * End TRAIN: Tree;
16519  *------------------------------------------------------------*;
 
16520  *------------------------------------------------------------*;
16521  * Close any missing semi colons;
16522  *------------------------------------------------------------*;
16523  ;
16524  ;
16525  ;
16526  ;
16527  quit;
16528  *------------------------------------------------------------*;
16529  * Close any unbalanced quotes;
16530  *------------------------------------------------------------*;
16531  /*; *"; *'; */
16532  ;
16533  run;
16534  quit;
16535  /* Reset EM Options */
16536  options formchar="|----|+|---+=|-/\<>*";
16537  options nocenter ls=256 ps=10000;
16538  goptions reset=all device=GIF NODISPLAY;
 
16539  proc sort data=WORK.EM_USER_REPORT;
16540  by ID VIEW;
16541  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 12, 2017
Time:                01:37:10
*------------------------------------------------------------*
16643  %let EMEXCEPTIONSTRING=;
16644  *------------------------------------------------------------*;
16645  * SCORE: Tree;
16646  *------------------------------------------------------------*;
16647  %let EM_ACTION = SCORE;
16648  %let syscc = 0;
16649  %macro main;
16650
16651    %if %upcase(&EM_ACTION) = CREATE %then %do;
16652      filename temp catalog 'sashelp.emmodl.tree_create.source';
16653      %include temp;
16654      filename temp;
16655
16656      %em_tree_create;
16657    %end;
16658
16659     %else
16660     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16661
16662         filename temp catalog 'sashelp.emmodl.tree_train.source';
16663         %include temp;
16664         filename temp;
16665         %em_tree_train;
16666     %end;
16667
16668    %else
16669    %if %upcase(&EM_ACTION) = SCORE %then %do;
16670      filename temp catalog 'sashelp.emmodl.tree_score.source';
16671      %include temp;
16672      filename temp;
16673
16674      %em_tree_score;
16675
16676    %end;
16677
16678    %else
16679    %if %upcase(&EM_ACTION) = REPORT %then %do;
16680
16681         filename temp catalog 'sashelp.emmodl.tree_report.source';
16682         %include temp;
16683         filename temp;
16684
16685         %em_tree_report;
16686     %end;
16687
16688    %else
16689    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16690
16691         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16692         %include temp;
16693         filename temp;
16694         %EM_TREE_OPENTREEVIEWER;
16695
16696     %end;
16697
16698    %else
16699    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16700
16701         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16702         %include temp;
16703         filename temp;
16704         %EM_TREE_CLOSETREEVIEWER;
16705
16706     %end;
16707
16708
16709     %doendm:
16710  %mend main;
16711
16712  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16714 +%macro em_tree_score;
16716 +   /* determine if multiple targets will be processed */
16717 +   %let em_tree_multipleTargets=N;
16718 +   %let em_tree_numTarget=1;
16719 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16720 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16721 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16722 +         %let em_tree_multipleTargets=N;
16723 +      %end;
16724 +      %else %do;
16725 +         /* create macro array of targets  */
16726 +         data _null_;
16727 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16728 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16729 +           if eof then
16730 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16731 +        run;
16733 +        %if &em_tree_numTarget gt 1 %then %do;
16734 +           %let em_tree_multipleTargets=Y;
16735 +        %end;
16736 +      %end;
16737 +   %end;
16739 +   /* build flow and publish scoring code */
16740 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16741 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16743 +   filename treeflow "&EM_USER_TREEFLOW";
16744 +   filename treepub "&EM_USER_TREEPUBLISH";
16746 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16747 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16749 +   %em_copyfile(infref=treeflow, outfref=flowref);
16750 +   %em_copyfile(infref=treepub, outfref=pubref);
16752 +   filename treeflow;
16753 +   filename treepub;
16755 +   /* if priors are used, add code to generate unadjusted residuals in export */
16756 +   %let useAdjPriors = N;
16757 +   data _null_;
16758 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16759 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16760 +   run;
16761 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16762 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16763 +      %include temp;
16764 +      filename temp;
16766 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16767 +      filename adjref "&EM_USER_adjResidualCode";
16768 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16770 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16772 +      filename adjref;
16773 +   %end;
16775 +   /* LEAF */
16776 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16777 +      data _null_;
16778 +        file flowref mod;
16779 +        put 'drop _LEAF_;';
16780 +      run;
16782 +      data _null_;
16783 +        file pubref mod;
16784 +        put 'drop _LEAF_;';
16785 +      run;
16787 +   %end;
16789 +   filename flowref;
16790 +   filename pubref;
16792 +   /* em_metachange code */
16793 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16794 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16795 +   %end;
16797 +   /* variable selection based on importance stat    */
16798 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16799 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16800 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16801 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16802 +     %let obs = %sysfunc(fetch(&dsid));
16803 +     %do %while(&obs=0);
16804 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16805 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16806 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16807 +       %let obs = %sysfunc(fetch(&dsid));
16808 +     %end;
16809 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16810 +   %end;
16812 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16813 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16814 +    %let tree_pred_vars = ;
16815 +    %let tree_pred_lvl =;
16816 +    %let numpred= 0;
16818 +    data _null_;
16819 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16820 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16821 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16822 +     if eof then
16823 +       call symput('numpred', strip(put(_N_, BEST.)));
16824 +    run;
16825 +   %end;
16827 +   %if &numpred ne 0 %then %do;
16828 +    %do i=1 %to &numpred;
16829 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16830 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16831 +    %end;
16832 +   %end;
16834 +   /* determine if multiple targets will be processed */
16835 +   %let em_tree_multipleTargets=N;
16836 +   %let em_tree_numTarget=1;
16837 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16838 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16839 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16840 +         %let em_tree_multipleTargets=N;
16841 +      %end;
16842 +      %else %do;
16843 +        data _null_;
16844 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16845 +          if eof then
16846 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16847 +        run;
16849 +        %if &em_tree_numTarget gt 1 %then %do;
16850 +           %let em_tree_multipleTargets=Y;
16851 +        %end;
16852 +     %end;
16853 +   %end;
16855 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16856 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16858 +      /* variable importance */
16859 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16860 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16862 +         %let validexist=0;
16863 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16864 +           %let validexist=1;
16865 +         %end;
16867 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16868 +         /* and the columns may not be generated                                                                                 */
16869 +         %let em_tree_cvexists=;
16870 +         %let em_tree_surrexists=.;
16871 +         data _null_;
16872 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16873 +            if eof then do ;
16874 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16875 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16876 +            end;
16877 +         run;
16879 +         data &EM_USER_OUTIMPORT;
16880 +            set &EM_USER_OUTIMPORT;
16882 +            /* format columns based on Precison value specified */
16883 +            format importance 15.&EM_PROPERTY_PRECISION
16884 +                 %if &validexist %then %do;
16885 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16886 +                 %end;
16887 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16888 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16889 +                 %end;
16890 +            ;
16891 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16892 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16893 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16894 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16895 +                 %if "&em_tree_surrexists" ne "" %then %do;
16896 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16897 +                 %end;
16898 +                 %if &validexist %then %do;
16899 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16900 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16901 +                 %end;
16902 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16903 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16904 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16905 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16906 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16907 +                 %end;
16908 +            ;
16909 +         run;
16911 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16912 +      %end;
16913 +   %end;
16915 +   %doendm:
16916 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      (no system-specific pathname available),
      (no system-specific file attributes available)
 
NOTE: 110 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           1.21 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      (no system-specific pathname available),
      (no system-specific file attributes available)
 
NOTE: 88 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           1.15 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      (no system-specific pathname available),
      (no system-specific file attributes available)
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.28 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      (no system-specific pathname available),
      (no system-specific file attributes available)
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.31 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 87 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 87 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 88 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 88 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 89 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 89 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 90 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 90 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: The data set EMWS3.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           1.63 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
16917
16918  *------------------------------------------------------------*;
16919  * End SCORE: Tree;
16920  *------------------------------------------------------------*;
 
16921  proc sort data=WORK.EM_METACHANGE;
16922  by key uname;
16923  run;
 
NOTE: There were 90 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 90 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16924  filename x "\\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\Tree\CDELTA_TRAIN.sas";
16925  data _null_;
16926  file x;
16927  put 'if upcase(NAME) = "ACTBUY" then do;';
16928  put 'ROLE = "REJECTED";';
16929  put 'end;';
16930  put 'else ';
16931  put 'if upcase(NAME) = "BOTHPAYM" then do;';
16932  put 'ROLE = "REJECTED";';
16933  put 'end;';
16934  put 'else ';
16935  put 'if upcase(NAME) = "BUYPROP" then do;';
16936  put 'ROLE = "REJECTED";';
16937  put 'end;';
16938  put 'else ';
16939  put 'if upcase(NAME) = "CATALOGCNT" then do;';
16940  put 'ROLE = "REJECTED";';
16941  put 'end;';
16942  put 'else ';
16943  put 'if upcase(NAME) = "CCPAYM" then do;';
16944  put 'ROLE = "REJECTED";';
16945  put 'end;';
16946  put 'else ';
16947  put 'if upcase(NAME) = "DEPT01" then do;';
16948  put 'ROLE = "REJECTED";';
16949  put 'end;';
16950  put 'else ';
16951  put 'if upcase(NAME) = "DEPT02" then do;';
16952  put 'ROLE = "REJECTED";';
16953  put 'end;';
16954  put 'else ';
16955  put 'if upcase(NAME) = "DEPT03" then do;';
16956  put 'ROLE = "REJECTED";';
16957  put 'end;';
16958  put 'else ';
16959  put 'if upcase(NAME) = "DEPT04" then do;';
16960  put 'ROLE = "REJECTED";';
16961  put 'end;';
16962  put 'else ';
16963  put 'if upcase(NAME) = "DEPT05" then do;';
16964  put 'ROLE = "REJECTED";';
16965  put 'end;';
16966  put 'else ';
16967  put 'if upcase(NAME) = "DEPT06" then do;';
16968  put 'ROLE = "REJECTED";';
16969  put 'end;';
16970  put 'else ';
16971  put 'if upcase(NAME) = "DEPT07" then do;';
16972  put 'ROLE = "REJECTED";';
16973  put 'end;';
16974  put 'else ';
16975  put 'if upcase(NAME) = "DEPT08" then do;';
16976  put 'ROLE = "REJECTED";';
16977  put 'end;';
16978  put 'else ';
16979  put 'if upcase(NAME) = "DEPT09" then do;';
16980  put 'ROLE = "REJECTED";';
16981  put 'end;';
16982  put 'else ';
16983  put 'if upcase(NAME) = "DEPT10" then do;';
16984  put 'ROLE = "REJECTED";';
16985  put 'end;';
16986  put 'else ';
16987  put 'if upcase(NAME) = "DEPT11" then do;';
16988  put 'ROLE = "REJECTED";';
16989  put 'end;';
16990  put 'else ';
16991  put 'if upcase(NAME) = "DEPT12" then do;';
16992  put 'ROLE = "REJECTED";';
16993  put 'end;';
16994  put 'else ';
16995  put 'if upcase(NAME) = "DEPT13" then do;';
16996  put 'ROLE = "REJECTED";';
16997  put 'end;';
16998  put 'else ';
16999  put 'if upcase(NAME) = "DEPT14" then do;';
17000  put 'ROLE = "REJECTED";';
17001  put 'end;';
17002  put 'else ';
17003  put 'if upcase(NAME) = "DEPT15" then do;';
17004  put 'ROLE = "REJECTED";';
17005  put 'end;';
17006  put 'else ';
17007  put 'if upcase(NAME) = "DEPT16" then do;';
17008  put 'ROLE = "REJECTED";';
17009  put 'end;';
17010  put 'else ';
17011  put 'if upcase(NAME) = "DEPT17" then do;';
17012  put 'ROLE = "REJECTED";';
17013  put 'end;';
17014  put 'else ';
17015  put 'if upcase(NAME) = "DEPT18" then do;';
17016  put 'ROLE = "REJECTED";';
17017  put 'end;';
17018  put 'else ';
17019  put 'if upcase(NAME) = "DEPT19" then do;';
17020  put 'ROLE = "REJECTED";';
17021  put 'end;';
17022  put 'else ';
17023  put 'if upcase(NAME) = "DEPT20" then do;';
17024  put 'ROLE = "REJECTED";';
17025  put 'end;';
17026  put 'else ';
17027  put 'if upcase(NAME) = "DEPT21" then do;';
17028  put 'ROLE = "REJECTED";';
17029  put 'end;';
17030  put 'else ';
17031  put 'if upcase(NAME) = "DEPT22" then do;';
17032  put 'ROLE = "REJECTED";';
17033  put 'end;';
17034  put 'else ';
17035  put 'if upcase(NAME) = "DEPT23" then do;';
17036  put 'ROLE = "REJECTED";';
17037  put 'end;';
17038  put 'else ';
17039  put 'if upcase(NAME) = "DEPT24" then do;';
17040  put 'ROLE = "REJECTED";';
17041  put 'end;';
17042  put 'else ';
17043  put 'if upcase(NAME) = "DEPT25" then do;';
17044  put 'ROLE = "REJECTED";';
17045  put 'end;';
17046  put 'else ';
17047  put 'if upcase(NAME) = "DEPT26" then do;';
17048  put 'ROLE = "REJECTED";';
17049  put 'end;';
17050  put 'else ';
17051  put 'if upcase(NAME) = "DEPT27" then do;';
17052  put 'ROLE = "REJECTED";';
17053  put 'end;';
17054  put 'else ';
17055  put 'if upcase(NAME) = "DOLINDEA" then do;';
17056  put 'ROLE = "REJECTED";';
17057  put 'end;';
17058  put 'else ';
17059  put 'if upcase(NAME) = "DOLINDET" then do;';
17060  put 'ROLE = "REJECTED";';
17061  put 'end;';
17062  put 'else ';
17063  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17064  put 'ROLE = "REJECTED";';
17065  put 'end;';
17066  put 'else ';
17067  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17068  put 'ROLE = "REJECTED";';
17069  put 'end;';
17070  put 'else ';
17071  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17072  put 'ROLE = "REJECTED";';
17073  put 'end;';
17074  put 'else ';
17075  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17076  put 'ROLE = "REJECTED";';
17077  put 'end;';
17078  put 'else ';
17079  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17080  put 'ROLE = "REJECTED";';
17081  put 'end;';
17082  put 'else ';
17083  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17084  put 'ROLE = "REJECTED";';
17085  put 'end;';
17086  put 'else ';
17087  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17088  put 'ROLE = "REJECTED";';
17089  put 'end;';
17090  put 'else ';
17091  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17092  put 'ROLE = "REJECTED";';
17093  put 'end;';
17094  put 'else ';
17095  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17096  put 'ROLE = "REJECTED";';
17097  put 'end;';
17098  put 'else ';
17099  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17100  put 'ROLE = "REJECTED";';
17101  put 'end;';
17102  put 'else ';
17103  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17104  put 'ROLE = "REJECTED";';
17105  put 'end;';
17106  put 'else ';
17107  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17108  put 'ROLE = "REJECTED";';
17109  put 'end;';
17110  put 'else ';
17111  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17112  put 'ROLE = "REJECTED";';
17113  put 'end;';
17114  put 'else ';
17115  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17116  put 'ROLE = "REJECTED";';
17117  put 'end;';
17118  put 'else ';
17119  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17120  put 'ROLE = "REJECTED";';
17121  put 'end;';
17122  put 'else ';
17123  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17124  put 'ROLE = "REJECTED";';
17125  put 'end;';
17126  put 'else ';
17127  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17128  put 'ROLE = "REJECTED";';
17129  put 'end;';
17130  put 'else ';
17131  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17132  put 'ROLE = "REJECTED";';
17133  put 'end;';
17134  put 'else ';
17135  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17136  put 'ROLE = "REJECTED";';
17137  put 'end;';
17138  put 'else ';
17139  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17140  put 'ROLE = "REJECTED";';
17141  put 'end;';
17142  put 'else ';
17143  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17144  put 'ROLE = "REJECTED";';
17145  put 'end;';
17146  put 'else ';
17147  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17148  put 'ROLE = "REJECTED";';
17149  put 'end;';
17150  put 'else ';
17151  put 'if upcase(NAME) = "DOLNETDA" then do;';
17152  put 'ROLE = "REJECTED";';
17153  put 'end;';
17154  put 'else ';
17155  put 'if upcase(NAME) = "DOLNETDT" then do;';
17156  put 'ROLE = "REJECTED";';
17157  put 'end;';
17158  put 'else ';
17159  put 'if upcase(NAME) = "FREQPRCH" then do;';
17160  put 'ROLE = "REJECTED";';
17161  put 'end;';
17162  put 'else ';
17163  put 'if upcase(NAME) = "METHPAYM" then do;';
17164  put 'ROLE = "REJECTED";';
17165  put 'end;';
17166  put 'else ';
17167  put 'if upcase(NAME) = "MONLAST" then do;';
17168  put 'ROLE = "REJECTED";';
17169  put 'end;';
17170  put 'else ';
17171  put 'if upcase(NAME) = "PCPAYM" then do;';
17172  put 'ROLE = "REJECTED";';
17173  put 'end;';
17174  put 'else ';
17175  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17176  put 'ROLE = "ASSESS";';
17177  put 'end;';
17178  put 'else ';
17179  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17180  put 'ROLE = "ASSESS";';
17181  put 'end;';
17182  put 'else ';
17183  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17184  put 'ROLE = "REJECTED";';
17185  put 'end;';
17186  put 'else ';
17187  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17188  put 'ROLE = "REJECTED";';
17189  put 'end;';
17190  put 'else ';
17191  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17192  put 'ROLE = "REJECTED";';
17193  put 'end;';
17194  put 'else ';
17195  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17196  put 'ROLE = "REJECTED";';
17197  put 'end;';
17198  put 'else ';
17199  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17200  put 'ROLE = "REJECTED";';
17201  put 'end;';
17202  put 'else ';
17203  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17204  put 'ROLE = "REJECTED";';
17205  put 'end;';
17206  put 'else ';
17207  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17208  put 'ROLE = "REJECTED";';
17209  put 'end;';
17210  put 'else ';
17211  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17212  put 'ROLE = "REJECTED";';
17213  put 'end;';
17214  put 'else ';
17215  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17216  put 'ROLE = "REJECTED";';
17217  put 'end;';
17218  put 'else ';
17219  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17220  put 'ROLE = "REJECTED";';
17221  put 'end;';
17222  put 'else ';
17223  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17224  put 'ROLE = "REJECTED";';
17225  put 'end;';
17226  put 'else ';
17227  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17228  put 'ROLE = "REJECTED";';
17229  put 'end;';
17230  put 'else ';
17231  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17232  put 'ROLE = "REJECTED";';
17233  put 'end;';
17234  put 'else ';
17235  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17236  put 'ROLE = "REJECTED";';
17237  put 'end;';
17238  put 'else ';
17239  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17240  put 'ROLE = "REJECTED";';
17241  put 'end;';
17242  put 'else ';
17243  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17244  put 'ROLE = "REJECTED";';
17245  put 'end;';
17246  put 'else ';
17247  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17248  put 'ROLE = "REJECTED";';
17249  put 'end;';
17250  put 'else ';
17251  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17252  put 'ROLE = "REJECTED";';
17253  put 'end;';
17254  put 'else ';
17255  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17256  put 'ROLE = "REJECTED";';
17257  put 'end;';
17258  put 'else ';
17259  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17260  put 'ROLE = "REJECTED";';
17261  put 'end;';
17262  put 'else ';
17263  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17264  put 'ROLE = "REJECTED";';
17265  put 'end;';
17266  put 'else ';
17267  put 'if upcase(NAME) = "TOTORDQ22" then do;';
17268  put 'ROLE = "REJECTED";';
17269  put 'end;';
17270  put 'else ';
17271  put 'if upcase(NAME) = "UNITSIDD" then do;';
17272  put 'ROLE = "REJECTED";';
17273  put 'end;';
17274  put 'else ';
17275  put 'if upcase(NAME) = "UNITSLAP" then do;';
17276  put 'ROLE = "REJECTED";';
17277  put 'end;';
17278  put 'else ';
17279  put 'if upcase(NAME) = "UNTLANPO" then do;';
17280  put 'ROLE = "REJECTED";';
17281  put 'end;';
17282  put 'else ';
17283  put 'if upcase(NAME) = "_NODE_" then do;';
17284  put 'ROLE = "SEGMENT";';
17285  put 'LEVEL = "NOMINAL";';
17286  put 'end;';
17287  run;
 
NOTE: The file X is:
      (no system-specific pathname available),
      (no system-specific file attributes available)
 
NOTE: 360 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.28 seconds
      cpu time            0.01 seconds
 
 
17288  filename x;
NOTE: Fileref X has been deassigned.
 
17289  filename emflow "\\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas";
17290  *------------------------------------------------------------*;
17291  * Tree: Scoring DATA data;
17292  *------------------------------------------------------------*;
17293  data EMWS3.Tree_TRAIN
17294  / view=EMWS3.Tree_TRAIN
17295  ;
17296  set EMWS3.Part_TRAIN
17297  ;
17298  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas.
17299 +****************************************************************;
17300 +******             DECISION TREE SCORING CODE             ******;
17301 +****************************************************************;
17302 +
17303 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17304 +LENGTH F_RESPOND  $   12;
17305 +LENGTH I_RESPOND  $   12;
17306 +LENGTH _WARN_  $    4;
17307 +
17308 +******              LABELS FOR NEW VARIABLES              ******;
17309 +label _NODE_ = 'Node' ;
17310 +label _LEAF_ = 'Leaf' ;
17311 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17312 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17313 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17314 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17315 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17316 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17317 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17318 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17319 +label F_RESPOND = 'From: RESPOND' ;
17320 +label I_RESPOND = 'Into: RESPOND' ;
17321 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17322 +label _WARN_ = 'Warnings' ;
17323 +
17324 +
17325 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17326 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17327 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17328 +
17329 +
17330 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17331 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17332 +
17333 +******             ASSIGN OBSERVATION TO NODE             ******;
17334 +IF  NOT MISSING(DOLL24 ) AND
17335 +                 121.2 <= DOLL24  THEN DO;
17336 +  _NODE_  =                    3;
17337 +  _LEAF_  =                    4;
17338 +  P_RESPOND1  =     0.13338973491257;
17339 +  P_RESPOND0  =     0.86661026508742;
17340 +  Q_RESPOND1  =     0.13338973491257;
17341 +  Q_RESPOND0  =     0.86661026508742;
17342 +  V_RESPOND1  =     0.12445414847161;
17343 +  V_RESPOND0  =     0.87554585152838;
17344 +  I_RESPOND  = '0' ;
17345 +  U_RESPOND  =                    0;
17346 +  END;
17347 +ELSE DO;
17348 +  IF  NOT MISSING(TENURE ) AND
17349 +    TENURE  <                  1.5 THEN DO;
17350 +    IF  NOT MISSING(DAYLAST ) AND
17351 +                      46.5 <= DAYLAST  THEN DO;
17352 +      _NODE_  =                    9;
17353 +      _LEAF_  =                    2;
17354 +      P_RESPOND1  =     0.11111111111111;
17355 +      P_RESPOND0  =     0.88888888888888;
17356 +      Q_RESPOND1  =     0.11111111111111;
17357 +      Q_RESPOND0  =     0.88888888888888;
17358 +      V_RESPOND1  =                    0;
17359 +      V_RESPOND0  =                    1;
17360 +      I_RESPOND  = '0' ;
17361 +      U_RESPOND  =                    0;
17362 +      END;
17363 +    ELSE DO;
17364 +      _NODE_  =                    8;
17365 +      _LEAF_  =                    1;
17366 +      P_RESPOND1  =     0.95454545454545;
17367 +      P_RESPOND0  =     0.04545454545454;
17368 +      Q_RESPOND1  =     0.95454545454545;
17369 +      Q_RESPOND0  =     0.04545454545454;
17370 +      V_RESPOND1  =                    1;
17371 +      V_RESPOND0  =                    0;
17372 +      I_RESPOND  = '1' ;
17373 +      U_RESPOND  =                    1;
17374 +      END;
17375 +    END;
17376 +  ELSE DO;
17377 +    _NODE_  =                    5;
17378 +    _LEAF_  =                    3;
17379 +    P_RESPOND1  =     0.04640937957987;
17380 +    P_RESPOND0  =     0.95359062042012;
17381 +    Q_RESPOND1  =     0.04640937957987;
17382 +    Q_RESPOND0  =     0.95359062042012;
17383 +    V_RESPOND1  =     0.04756567425569;
17384 +    V_RESPOND0  =      0.9524343257443;
17385 +    I_RESPOND  = '0' ;
17386 +    U_RESPOND  =                    0;
17387 +    END;
17388 +  END;
17389 +
17390 +*****  RESIDUALS R_ *************;
17391 +IF  F_RESPOND  NE '1'
17392 +AND F_RESPOND  NE '0'  THEN DO;
17393 +        R_RESPOND1  = .;
17394 +        R_RESPOND0  = .;
17395 + END;
17396 + ELSE DO;
17397 +       R_RESPOND1  =  -P_RESPOND1 ;
17398 +       R_RESPOND0  =  -P_RESPOND0 ;
17399 +       SELECT( F_RESPOND  );
17400 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17401 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17402 +       END;
17403 + END;
17404 +
17405 +****************************************************************;
17406 +******          END OF DECISION TREE SCORING CODE         ******;
17407 +****************************************************************;
17408 +
17409 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17410  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           1.92 seconds
      cpu time            0.03 seconds
 
 
17411  quit;
17412  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17413  filename emflow "\\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas";
17414  *------------------------------------------------------------*;
17415  * Tree: Scoring VALIDATE data;
17416  *------------------------------------------------------------*;
17417  data EMWS3.Tree_VALIDATE
17418  / view=EMWS3.Tree_VALIDATE
17419  ;
17420  set EMWS3.Part_VALIDATE
17421  ;
17422  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\Tree\EMFLOWSCORE.sas.
17423 +****************************************************************;
17424 +******             DECISION TREE SCORING CODE             ******;
17425 +****************************************************************;
17426 +
17427 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17428 +LENGTH F_RESPOND  $   12;
17429 +LENGTH I_RESPOND  $   12;
17430 +LENGTH _WARN_  $    4;
17431 +
17432 +******              LABELS FOR NEW VARIABLES              ******;
17433 +label _NODE_ = 'Node' ;
17434 +label _LEAF_ = 'Leaf' ;
17435 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17436 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17437 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17438 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17439 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17440 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17441 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17442 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17443 +label F_RESPOND = 'From: RESPOND' ;
17444 +label I_RESPOND = 'Into: RESPOND' ;
17445 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17446 +label _WARN_ = 'Warnings' ;
17447 +
17448 +
17449 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17450 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17451 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17452 +
17453 +
17454 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17455 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17456 +
17457 +******             ASSIGN OBSERVATION TO NODE             ******;
17458 +IF  NOT MISSING(DOLL24 ) AND
17459 +                 121.2 <= DOLL24  THEN DO;
17460 +  _NODE_  =                    3;
17461 +  _LEAF_  =                    4;
17462 +  P_RESPOND1  =     0.13338973491257;
17463 +  P_RESPOND0  =     0.86661026508742;
17464 +  Q_RESPOND1  =     0.13338973491257;
17465 +  Q_RESPOND0  =     0.86661026508742;
17466 +  V_RESPOND1  =     0.12445414847161;
17467 +  V_RESPOND0  =     0.87554585152838;
17468 +  I_RESPOND  = '0' ;
17469 +  U_RESPOND  =                    0;
17470 +  END;
17471 +ELSE DO;
17472 +  IF  NOT MISSING(TENURE ) AND
17473 +    TENURE  <                  1.5 THEN DO;
17474 +    IF  NOT MISSING(DAYLAST ) AND
17475 +                      46.5 <= DAYLAST  THEN DO;
17476 +      _NODE_  =                    9;
17477 +      _LEAF_  =                    2;
17478 +      P_RESPOND1  =     0.11111111111111;
17479 +      P_RESPOND0  =     0.88888888888888;
17480 +      Q_RESPOND1  =     0.11111111111111;
17481 +      Q_RESPOND0  =     0.88888888888888;
17482 +      V_RESPOND1  =                    0;
17483 +      V_RESPOND0  =                    1;
17484 +      I_RESPOND  = '0' ;
17485 +      U_RESPOND  =                    0;
17486 +      END;
17487 +    ELSE DO;
17488 +      _NODE_  =                    8;
17489 +      _LEAF_  =                    1;
17490 +      P_RESPOND1  =     0.95454545454545;
17491 +      P_RESPOND0  =     0.04545454545454;
17492 +      Q_RESPOND1  =     0.95454545454545;
17493 +      Q_RESPOND0  =     0.04545454545454;
17494 +      V_RESPOND1  =                    1;
17495 +      V_RESPOND0  =                    0;
17496 +      I_RESPOND  = '1' ;
17497 +      U_RESPOND  =                    1;
17498 +      END;
17499 +    END;
17500 +  ELSE DO;
17501 +    _NODE_  =                    5;
17502 +    _LEAF_  =                    3;
17503 +    P_RESPOND1  =     0.04640937957987;
17504 +    P_RESPOND0  =     0.95359062042012;
17505 +    Q_RESPOND1  =     0.04640937957987;
17506 +    Q_RESPOND0  =     0.95359062042012;
17507 +    V_RESPOND1  =     0.04756567425569;
17508 +    V_RESPOND0  =      0.9524343257443;
17509 +    I_RESPOND  = '0' ;
17510 +    U_RESPOND  =                    0;
17511 +    END;
17512 +  END;
17513 +
17514 +*****  RESIDUALS R_ *************;
17515 +IF  F_RESPOND  NE '1'
17516 +AND F_RESPOND  NE '0'  THEN DO;
17517 +        R_RESPOND1  = .;
17518 +        R_RESPOND0  = .;
17519 + END;
17520 + ELSE DO;
17521 +       R_RESPOND1  =  -P_RESPOND1 ;
17522 +       R_RESPOND0  =  -P_RESPOND0 ;
17523 +       SELECT( F_RESPOND  );
17524 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17525 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17526 +       END;
17527 + END;
17528 +
17529 +****************************************************************;
17530 +******          END OF DECISION TREE SCORING CODE         ******;
17531 +****************************************************************;
17532 +
17533 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17534  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           2.00 seconds
      cpu time            0.03 seconds
 
 
17535  quit;
17536  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           0.53 seconds
      cpu time            0.06 seconds
 
17538  proc sort data=WORK.EM_USER_REPORT;
17539  by ID VIEW;
17540  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17541  *------------------------------------------------------------*;
17542  * Tree: Computing metadata for TRAIN data;
17543  *------------------------------------------------------------*;
 
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           0.53 seconds
      cpu time            0.03 seconds
 
18248  data EMWS3.Tree_EMINFO;
18249  length TARGET KEY $32 DATA $43;
18250  input TARGET KEY DATA $;
18251  cards;
 
NOTE: The data set EMWS3.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           1.25 seconds
      cpu time            0.00 seconds
 
 
18255  run;
18256  proc sort data = EMWS3.Tree_EMINFO NOTHREADS;
18257  by TARGET KEY;
18258  run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_EMINFO.
NOTE: The data set EMWS3.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           1.76 seconds
      cpu time            0.03 seconds
 
 
18259  proc sort data = EMWS3.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18260  by TARGET KEY;
18261  run;
 
NOTE: There were 3 observations read from the data set EMWS3.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.03 seconds
 
 
18262  proc sort data = EMWS3.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18263  by TARGET KEY;
18264  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS3.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
18265  data EMWS3.Tree_EMINFO;
18266  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18267  by TARGET KEY;
18268  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           1.78 seconds
      cpu time            0.01 seconds
 
 
18269  proc datasets lib=work nolist;
18270  delete TEMP_INFO SORTEDEMINFO;
18271  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18272  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           0.51 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS3.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.50 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                01:37:51
*------------------------------------------------------------*
18296  data EMWS3.Tree_EMOUTFIT;
18297  set EMWS3.Tree_EMOUTFIT;
18298  length TargetLabel $200;
18299  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18300  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18301  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_EMOUTFIT.
NOTE: The data set EMWS3.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           1.67 seconds
      cpu time            0.03 seconds
 
 
18302  proc sort data=EMWS3.Tree_EMREPORTFIT nothreads;
18303  by TARGET;
18304  run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE_EMREPORTFIT.
NOTE: The data set EMWS3.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           1.84 seconds
      cpu time            0.00 seconds
 
 
18305  %let _EMwarndup = 0;
18306  %let _EMtargetdup =;
18307  %let _EMASEtargetdup =;
18308  data _null_;
18309  set EMWS3.Tree_EMOUTFIT;
18310  if .<_ASE_<0.000001 then do;
18311  call symput('_EMwarndup', '1');
18312  call symput('_EMtargetdup', target);
18313  call symput('_EMASEtargetdup', put(_ASE_, best.));
18314  end;
18315  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
18316  %let EMEXCEPTIONSTRING=;
18317  *------------------------------------------------------------*;
18318  * REPORT: Tree;
18319  *------------------------------------------------------------*;
18320  %let EM_ACTION = REPORT;
18321  %let syscc = 0;
18322  %macro main;
18323
18324    %if %upcase(&EM_ACTION) = CREATE %then %do;
18325      filename temp catalog 'sashelp.emmodl.tree_create.source';
18326      %include temp;
18327      filename temp;
18328
18329      %em_tree_create;
18330    %end;
18331
18332     %else
18333     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18334
18335         filename temp catalog 'sashelp.emmodl.tree_train.source';
18336         %include temp;
18337         filename temp;
18338         %em_tree_train;
18339     %end;
18340
18341    %else
18342    %if %upcase(&EM_ACTION) = SCORE %then %do;
18343      filename temp catalog 'sashelp.emmodl.tree_score.source';
18344      %include temp;
18345      filename temp;
18346
18347      %em_tree_score;
18348
18349    %end;
18350
18351    %else
18352    %if %upcase(&EM_ACTION) = REPORT %then %do;
18353
18354         filename temp catalog 'sashelp.emmodl.tree_report.source';
18355         %include temp;
18356         filename temp;
18357
18358         %em_tree_report;
18359     %end;
18360
18361    %else
18362    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18363
18364         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18365         %include temp;
18366         filename temp;
18367         %EM_TREE_OPENTREEVIEWER;
18368
18369     %end;
18370
18371    %else
18372    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18373
18374         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18375         %include temp;
18376         filename temp;
18377         %EM_TREE_CLOSETREEVIEWER;
18378
18379     %end;
18380
18381
18382     %doendm:
18383  %mend main;
18384
18385  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18387 +%macro em_tree_makePlotDs( multipleTar= );
18389 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18390 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18391 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18392 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18394 +  /* determine if validation statistics will be displayed */
18395 +  %let validflag=N;
18396 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18397 +    /* determine if validation data exists */
18398 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18399 +      %let validflag=Y;
18400 +    %end;
18401 +  %end;
18403 +   /* retrieve name of decmeta even in presence of multiple targets */
18404 +   %let decmeta = ;
18405 +   %if &EM_DEC_DECMETA eq %then %do;
18406 +     data _Target;
18407 +       set &em_data_variableset;
18408 +       where ROLE='TARGET' and USE in('D', 'Y');
18409 +       keep NAME;
18410 +     run;
18411 +     proc sort data=_Target;
18412 +       by NAME;
18413 +     run;
18414 +     proc sort data=EM_TARGETDECINFO;
18415 +       by TARGET;
18416 +     run;
18417 +     data _Target;
18418 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18419 +       by NAME;
18420 +       if _a then do;
18421 +         call symput('decmeta', trim(DECMETA));
18422 +       end;
18423 +     run;
18424 +     proc delete data=_Target;run;
18425 +   %end;
18426 +   %else %let decmeta = &EM_DEC_DECMETA;
18429 +  /* retrieve targetEvent from decmeta */
18430 +  %let targetEvent=;
18431 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18432 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18433 +      data _null_;
18434 +       set &DECMETA(where=(_TYPE_="TARGET"));
18435 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18436 +      run;
18437 +    %end;
18438 +  %end;
18440 +  /* retrieve predicted var for targetEvent from decmeta */
18441 +  %let predTarget=;
18442 +  %let predLvl=;
18443 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18444 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18445 +      data _null_;
18446 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18447 +       call symput('predTarget', strip(VARIABLE));
18448 +       call symput('predLvl', strip(LEVEL));
18449 +      run;
18450 +    %end;
18451 +  %end;
18452 +  %else %do;
18453 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18454 +      data _null_;
18455 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18456 +       call symput('predTarget', strip(VARIABLE));
18457 +      run;
18458 +    %end;
18459 +  %end;
18461 +  /* create BelowText value */
18462 +  data belowtext;
18463 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18464 +    keep node belowtext;
18465 +  run;
18467 +  /* relace belowtext with variable label if it exists */
18468 +  data belowtext2;
18469 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18470 +    keep node belowtextlbl;
18471 +  run;
18473 +  proc sort data=belowtext; by node; run;
18474 +  proc sort data=belowtext2; by node; run;
18476 +  data belowtext;
18477 +    merge belowtext belowtext2(in=_a);
18478 +    by node;
18479 +    if _a then belowtext=belowtextlbl;
18480 +    keep node belowtext;
18481 +  run;
18483 +  /* create AboveText value */
18484 +  data abovetext;
18485 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18486 +  run;
18487 +  proc sort data=abovetext; by node numeric_value; run;
18489 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18490 +  data abovetext;
18491 +    set abovetext(rename=(node=parent));
18492 +    by parent numeric_value;
18493 +    retain abovetext tempstring flag branch origval origchar ;
18494 +    length abovetext $256;
18495 +    length tempstring origchar $64;
18497 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18498 +      if first.parent then do;
18499 +        if missing(character_value) then do;
18500 +          numeric_value = round(numeric_value, &sp_precision);
18501 +          abovetext = "< "||strip(NUMERIC_VALUE);
18502 +          branch = 1;
18503 +          origval = numeric_value;
18504 +          output;
18505 +        end;
18506 +        else do;
18507 +          abovetext = "< "||strip(CHARACTER_VALUE);
18508 +          branch = 1;
18509 +          origchar = character_value;
18510 +          output;
18511 +        end;
18513 +        if first.parent AND last.parent then do;
18514 +          if missing(character_value) then do;
18515 +            numeric_value = round(numeric_value, &sp_precision);
18516 +            branch = branch + 1;
18517 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18518 +            output;
18519 +          end;
18520 +          else do;
18521 +            branch = branch + 1;
18522 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18523 +            output;
18524 +          end;
18525 +        end;
18526 +      end;
18527 +      else if last.parent then do;
18528 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18529 +          if missing(character_value) then do;
18530 +            numeric_value = round(numeric_value, &sp_precision);
18531 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18532 +          end;
18533 +          else do;
18534 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18535 +          end;
18536 +          branch = branch + 1;
18537 +          output;
18539 +          if missing(character_value) then do;
18540 +            numeric_value = round(numeric_value, &sp_precision);
18541 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18542 +          end;
18543 +          else do;
18544 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18545 +          end;
18546 +          branch = branch + 1;
18547 +          output;
18548 +        end;
18549 +        else do;
18550 +          if missing(character_value) then do;
18551 +            numeric_value = round(numeric_value, &sp_precision);
18552 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18553 +          end;
18554 +          else do;
18555 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18556 +          end;
18557 +          branch = branch + 1;
18558 +          output;
18559 +        end;
18560 +      end;
18561 +      else do;
18562 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18563 +          if missing(character_value) then do;
18564 +            numeric_value = round(numeric_value,&sp_precision);
18565 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18566 +            origval = numeric_value;
18567 +          end;
18568 +          else do;
18569 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18570 +            origchar = character_value;
18571 +          end;
18572 +          branch = branch + 1;
18573 +          output;
18575 +        end;
18576 +        else do;
18577 +          if missing(character_value) then do;
18578 +            numeric_value = round(numeric_value, &sp_precision);
18579 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18580 +            origval = numeric_value;
18581 +          end;
18582 +          else do;
18583 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18584 +            origval = character_value;
18585 +          end;
18586 +          branch = branch + 1;
18587 +          output;
18588 +        end;
18589 +      end;
18590 +    end;
18591 +    else do;
18592 +       if first.numeric_value then do;
18593 +         flag = 0;
18594 +         abovetext = strip(CHARACTER_VALUE);
18595 +         branch = numeric_value;
18596 +         if first.numeric_value AND last.numeric_value then do;
18597 +           output;
18598 +         end;
18599 +       end;
18600 +       else if last.numeric_value then do;
18601 +         if flag=0 then do;
18602 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18603 +           length = length(strip(tempstring));
18604 +           if length < 32 then do;
18605 +             abovetext = strip(tempstring);
18606 +           end;
18607 +           else do;
18608 +             abovetext = strip(abovetext)||", ...";
18609 +             flag = 1;
18610 +           end;
18611 +         end;
18612 +         branch = numeric_value;
18613 +         output;
18614 +       end;
18615 +       else do;
18616 +         if flag=0 then do;
18617 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18618 +           length = length(strip(tempstring));
18619 +           if length < 32 then do;
18620 +             abovetext = strip(tempstring);
18621 +           end;
18622 +           else do;
18623 +             abovetext = strip(abovetext)||", ...";
18624 +             flag=1;
18625 +           end;
18626 +         end;
18627 +         branch = numeric_value;
18628 +       end;
18629 +    end;
18630 +    keep parent branch abovetext;
18631 +  run;
18633 +  /* MIssing value to abovetext */
18634 +  data tempmissing;
18635 +    set &EM_USER_OUTRULES;
18636 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18637 +    rename node=parent numeric_value=branch character_value=misschar;
18638 +  run;
18641 +  proc sort data=abovetext; by parent branch; run;
18642 +  proc sort data=tempmissing; by parent branch; run;
18643 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18645 +  data tempoutnodes;
18646 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18647 +    by parent branch;
18648 +    length traintotal validtotal 8;
18649 +    retain traintotal validtotal;
18651 +    if _a then do;
18652 +      if ^MISSING(abovetext) then do;
18653 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18654 +      end;
18655 +      else do;
18656 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18657 +      end;
18658 +    end;
18659 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18661 +    if node=1 then do;
18662 +      traintotal = N;
18663 +      validtotal=VN;
18664 +    end;
18666 +    drop role rank stat misschar belowtext;
18667 +  run;
18668 +  proc sort data=tempoutnodes; by node; run;
18669 +  proc sort data=belowtext; by node; run;
18671 +  data tempoutnodes;
18672 +    merge tempoutnodes belowtext;
18673 +    by node;
18675 +  run;
18677 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18678 +  %let adjusted = N;
18679 +  %let npriors = 0;
18680 +  data _null_ ;
18681 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18682 +    if eof then do ;
18683 +      call symput("npriors" , strip(put(_N_,best.))) ;
18684 +    end;
18685 +  run;
18686 +  %if &npriors gt 0 %then %let adjusted=Y;
18689 +  /* create a table with targetUsed and targetLevel columns for each node */
18690 +  data temptarmeta;
18691 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18692 +    %if &multipleTar eq N %then %do;
18693 +      AND USE in ('D', 'Y')
18694 +    %end;
18695 +    ));
18696 +    length TARGET $32;
18697 +    Target=name;
18698 +    keep target level;
18699 +  run;
18701 +  %if &multipleTar eq Y %then %do;
18702 +    data temptargetused;
18703 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18704 +      keep node target;
18705 +    run;
18706 +    proc sort data=temptargetused; by target; run;
18707 +    proc sort data=temptarmeta; by target; run;
18708 +    data temptargetused;
18709 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18710 +      by target;
18711 +      if _a and _b;
18712 +    run;
18713 +  %end;
18714 +  %else %do;
18715 +    data temptargetused;
18716 +      set &EM_USER_OUTSTATS;
18717 +      length target $32 tarlevel $10;
18718 +      target="%EM_TARGET";
18719 +      tarlevel="%EM_TARGET_LEVEL";
18720 +      keep node target tarlevel;
18721 +    run;
18722 +    proc sort data=temptargetused nodupkey; by node; run;
18723 +  %end;
18725 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18726 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18727 +  proc sort data=temptargetused; by node; run;
18730 +  /* create tables for all interval targets as well as all class targets */
18731 +  data tempinterval tempclass;
18732 +    merge tempoutstats temptargetused( rename=(target=targetused));
18733 +    by node;
18734 +    %if "&multipleTar" eq "Y" %then %do;
18735 +      if ((missing(Target)) OR (target=targetused ));
18736 +    %end;
18738 +    if tarlevel="INTERVAL" then output tempinterval;
18739 +    else output tempclass;
18740 +  run;
18742 +  /* iniitalize intTarget and classTarget flags */
18743 +  %let em_intNobs =0;
18744 +  %let em_classNobs = 0;
18745 +  %let em_intTarget= N;
18746 +  %let em_classTarget= N;
18748 +  proc sql;
18749 +    reset noprint;
18750 +    select count(*) into :em_intNobs from tempinterval;
18751 +  quit;
18752 +  proc sql;
18753 +    reset noprint;
18754 +    select count(*) into :em_classNobs from tempclass;
18755 +  quit;
18757 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18758 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18760 +  /* retrieve all information for interval targets */
18761 +  %if &em_intTarget eq Y %then %do;
18763 +    /* determine if leaf variable exists */
18764 +    %let dsid=%sysfunc(open(tempinterval,i));
18765 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18766 +    %let rc=%sysfunc(close(&dsid));
18768 +    proc transpose data=tempinterval
18769 +      %if &leafexists %then %do;
18770 +        (drop=leaf)
18771 +      %end;
18772 +      %if &validexist %then %do;
18773 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18774 +      %end;
18775 +      %else %do;
18776 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18777 +      %end;
18778 +      by node;
18779 +      id statname;
18780 +    run;
18781 +    data tempinterval;
18782 +      set tempinterval;
18783 +      if missing(N) then delete;
18784 +    run;
18785 +  %end;
18787 +  /* retrieve all information for class targets */
18788 +  %if &em_classTarget eq Y %then %do;
18789 +    proc sort data=tempclass; by node category; run;
18790 +    %if &validflag eq N %then %do;
18791 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18792 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18793 +    %end;
18794 +    %else %do;
18795 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18796 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18797 +    %end;
18798 +      set tempclass;
18800 +      %if &validflag eq N %then %do;
18801 +        %if "&adjusted" eq "N" %then %do;
18802 +          if statname="N" then output tempn;
18803 +        %end;
18804 +        %else %do;
18805 +          if statname="NPRIORS" then output tempn;
18806 +        %end;
18807 +        else if statname="PREDICTION" then output temppredict;
18808 +        else if statname="PROBABILITY" then output tempprob;
18809 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18810 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18811 +      %end;
18812 +      %else %do;
18813 +        %if "&adjusted" eq "N" %then %do;
18814 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18815 +        %end;
18816 +        %else %do;
18817 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18818 +        %end;
18819 +        else if statname="PREDICTION" then output temppredict;
18820 +        else if statname="PROBABILITY" then output tempprob;
18821 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18822 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18823 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18824 +      %end;
18825 +    run;
18828 +    /* determine if profit/loss exists in tempprofit */
18829 +    %let em_profitflag=0;
18830 +    %let em_lossflag=0;
18831 +    proc sql;
18832 +      reset noprint;
18833 +      select count(*) into :em_profitflag from tempprofit;
18834 +    quit;
18835 +    proc sql;
18836 +      reset noprint;
18837 +      select count(*) into :em_lossflag from temploss;
18838 +    quit;
18840 +    %if &validFlag eq Y %then %do;
18841 +      proc transpose data=tempn
18842 +        %if "&adjusted" eq "N" %then %do;
18843 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18844 +        %end;
18845 +        %else %do;
18846 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18847 +        %end;
18848 +        by node;
18849 +        id statname;
18850 +      run;
18851 +      %if &em_profitflag ne 0 %then %do;
18852 +        proc transpose data=tempprofit out=tempprofit;
18853 +          by node category;
18854 +          id statname ;
18855 +        run;
18856 +      %end;
18857 +      %if &em_lossflag ne 0 %then %do;
18858 +        proc transpose data=temploss out=temploss;
18859 +          by node category;
18860 +          id statname ;
18861 +        run;
18862 +      %end;
18863 +      data tempprob;
18864 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18865 +        by node
18866 +        %if &multipleTar eq Y %then %do;
18867 +          target
18868 +        %end;
18869 +        category;
18870 +      run;
18871 +    %end;
18873 +    /* store percentcorrect value */
18874 +    data temppredict;
18875 +      merge tempprob temppredict(in=_a);
18876 +      by node category;
18877 +      if _a then do;
18878 +        percentCorrect = statvalue;
18879 +        %if &validFlag eq Y %then %do;
18880 +          vpercentCorrect= vstatvalue;
18881 +        %end;
18882 +      end;
18883 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18884 +      %if &validFlag eq Y %then %do;
18885 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18886 +      %end;
18887 +      ;
18888 +      if missing(percentCorrect) then delete;
18889 +      drop target;
18890 +    run;
18892 +    /* build profittext */
18893 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18894 +      data tempprofittext(keep= node profittext profitloss);
18895 +        length profittext $800 profitloss 8.;
18896 +        retain profittext profitloss;
18898 +        merge tempprob
18899 +        %if &em_profitflag ne 0 %then %do;
18900 +          tempprofit
18901 +        %end;
18902 +        %else %if &em_lossflag ne 0 %then %do;
18903 +          temploss
18904 +        %end;
18905 +        ;
18906 +        by node category;
18908 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18909 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18910 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18911 +          %let profittype = ALL;
18912 +        %end;
18914 +        /* create the profitloss variable for nodecolor if selected */
18915 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18917 +        %if "&profittype" eq "ALL" %then %do;
18918 +          if strip(CATEGORY)="&targetEvent" then do;
18919 +            profitloss=statvalue;
18920 +          end;
18921 +          if first.node then do;
18922 +            %if &validFlag eq N %then %do;
18923 +             %if &em_profitflag ne 0 %then %do;
18924 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18925 +             %end;
18926 +             %if &em_lossflag ne 0 %then %do;
18927 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18928 +             %end;
18929 +            %end;
18930 +            %else %do;
18931 +             %if &em_profitflag ne 0 %then %do;
18932 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18932!+;
18933 +             %end;
18934 +             %if &em_lossflag ne 0 %then %do;
18935 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18936 +             %end;
18937 +            %end;
18938 +          end;
18939 +          else if last.node then do;
18940 +            %if &validFlag eq N %then %do;
18941 +             %if &em_profitflag ne 0 %then %do;
18942 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18943 +             %end;
18944 +             %if &em_lossflag ne 0 %then %do;
18945 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18946 +             %end;
18947 +             /*if CATEGORY="&targetEvent" then do;
18948 +               profitloss=statvalue;
18949 +             end;*/
18950 +            %end;
18951 +            %else %do;
18952 +             %if &em_profitflag ne 0 %then %do;
18953 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18953!+14.&EM_PROPERTY_SPLITPRECISION);
18954 +                if CATEGORY="&targetEvent" then do;
18955 +                 profitloss=ALTERNATIVE_PROFIT;
18956 +                end;
18957 +             %end;
18958 +             %if &em_lossflag ne 0 %then %do;
18959 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18959!+14.&EM_PROPERTY_SPLITPRECISION);
18960 +                if CATEGORY="&targetEvent" then do;
18961 +                  profitloss=ALTERNATIVE_LOSS;
18962 +                end;
18963 +             %end;
18964 +            %end;
18965 +            output;
18966 +          end;
18967 +          else do;
18968 +            %if &validFlag eq N %then %do;
18969 +             %if &em_profitflag ne 0 %then %do;
18970 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18971 +             %end;
18972 +             %if &em_lossflag ne 0 %then %do;
18973 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18974 +             %end;
18975 +            %end;
18976 +            %else %do;
18977 +             %if &em_profitflag ne 0 %then %do;
18978 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18978!+14.&EM_PROPERTY_SPLITPRECISION);
18979 +             %end;
18980 +             %if &em_lossflag ne 0 %then %do;
18981 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18981!+14.&EM_PROPERTY_SPLITPRECISION);
18982 +             %end;
18983 +            %end;
18984 +          end;
18985 +        %end;
18986 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18987 +          if strip(CATEGORY) = "&targetevent" then do;
18988 +            %if &validFlag eq N %then %do;
18989 +             %if &em_profitflag ne 0 %then %do;
18990 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18991 +             %end;
18992 +             %if &em_lossflag ne 0 %then %do;
18993 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18994 +             %end;
18995 +             profitloss=statvalue;
18996 +            %end;
18997 +            %else %do;
18998 +             %if &em_profitflag ne 0 %then %do;
18999 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18999!+;
19000 +                profitloss=ALTERNATIVE_PROFIT;
19001 +             %end;
19002 +             %if &em_lossflag ne 0 %then %do;
19003 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19004 +                profitloss=ALTERNATIVE_LOSS;
19005 +             %end;
19006 +            %end;
19007 +            output;
19008 +          end;
19009 +        %end;
19010 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19011 +          if strip(CATEGORY) = "&targetevent" then do;
19012 +            %if &validFlag eq N %then %do;
19013 +             profitloss=statvalue;
19014 +            %end;
19015 +            %else %do;
19016 +             %if &em_profitflag ne 0 %then %do;
19017 +                profitloss=ALTERNATIVE_PROFIT;
19018 +             %end;
19019 +             %if &em_lossflag ne 0 %then %do;
19020 +                profitloss=ALTERNATIVE_LOSS;
19021 +             %end;
19022 +            %end;
19023 +            output;
19024 +          end;
19025 +        %end;
19026 +      run;
19027 +    %end;
19029 +    data tempprob(keep= node probtext);
19030 +      length probtext $800;
19031 +      retain probtext;
19032 +      set tempprob ;
19033 +      by node;
19035 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19036 +      %let probtype = &EM_PROPERTY_TARGET;
19037 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19038 +        %let probtype = ALL;
19039 +      %end;
19041 +      %if "&probtype" eq "ALL" %then %do;
19042 +        if first.node then do;
19043 +          %if &validFlag eq N %then %do;
19044 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19045 +          %end;
19046 +          %else %do;
19047 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19048 +          %end;
19049 +        end;
19050 +        else if last.node then do;
19051 +          %if &validFlag eq N %then %do;
19052 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19053 +          %end;
19054 +          %else %do;
19055 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19056 +          %end;
19057 +          output;
19058 +        end;
19059 +        else do;
19060 +          %if &validFlag eq N %then %do;
19061 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19062 +          %end;
19063 +          %else %do;
19064 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19065 +          %end;
19066 +        end;
19067 +      %end;
19068 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19069 +        if strip(CATEGORY) = "&targetevent" then do;
19070 +          %if &validFlag eq N %then %do;
19071 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19072 +          %end;
19073 +          %else %do;
19074 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19075 +          %end;
19076 +          output;
19077 +        end;
19078 +      %end;
19079 +      %else %if "&probtype" eq "NONE" %then %do;
19080 +        if last.node then do;
19081 +          output;
19082 +        end;
19083 +      %end;
19084 +    run;
19085 +  %end;
19087 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19089 +  %let oldexists=0;
19090 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19091 +     data old_tree_plot;
19092 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19093 +        rename nodecolor=oldnodecolor;
19094 +     run;
19096 +     proc sort data=old_tree_plot;
19097 +        by node;
19098 +     run;
19100 +     %let oldexists=1;
19101 +  %end;
19103 +  data &EM_USER_TREE_PLOT;
19104 +    length textall $800;
19105 +    merge tempoutnodes temptargetused
19107 +    %if &em_intTarget eq Y %then %do;
19108 +      tempinterval
19109 +    %end;
19111 +    %if &em_classTarget eq Y %then %do;
19113 +      %if &validFlag eq N %then %do;
19114 +        tempn(rename=(statvalue=N))
19115 +      %end;
19116 +      %else %do;
19117 +        tempn
19118 +      %end;
19120 +      temppredict tempprob
19122 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19123 +        tempprofittext
19124 +      %end;
19125 +    %end;
19126 +    ;
19127 +    by node;
19129 +    /* build nodetext based on user selection */
19130 +    textall="";
19132 +    %if &em_intTarget eq Y %then %do;
19133 +    if tarlevel="INTERVAL" then do;
19134 +      /* Nodeid */
19135 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19136 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19137 +      %end;
19139 +      /* Target identifier if multiple targets are used */
19140 +      %if "&multipleTar" eq "Y" %then %do;
19141 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19142 +      %end;
19144 +      %if &validFlag eq Y %then %do;
19145 +         /* Column labels displayed in validflag eq Y only */
19146 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19147 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19147!+noquote ))";
19148 +         %end;
19150 +         /* Average values */
19151 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19152 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19153 +         %end;
19155 +         /* RASE */
19156 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19157 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19158 +         %end;
19160 +         /* Count */
19161 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19162 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19163 +         %end;
19164 +      %end;
19165 +      %else %do;
19166 +         /* Average values */
19167 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19168 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19169 +         %end;
19171 +         /* RASE */
19172 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19173 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19174 +         %end;
19176 +         /* Count */
19177 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19178 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19179 +         %end;
19180 +      %end;
19182 +      /* nodecolor */
19183 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19184 +        nodecolor=PREDICTION;
19185 +      %end;
19186 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19187 +        nodecolor=RASE;
19188 +      %end;
19189 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19190 +        nodecolor=1;
19191 +      %end;
19193 +    end;
19194 +    %end;
19195 +    %if &em_classTarget eq Y %then %do;
19196 +    if tarlevel^="INTERVAL" then  do;
19198 +      /* Nodeid */
19199 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19200 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19201 +      %end;
19202 +      /* Target identifier if multiple targets are used */
19203 +      %if "&multipleTar" eq "Y" %then %do;
19204 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19205 +      %end;
19207 +      /* Predicted values */
19208 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19209 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19210 +      %end;
19212 +      /* Column labels displayed in validflag eq Y only */
19213 +      %if "&ValidFlag" eq "Y" %then %do;
19214 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19215 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19215!+noquote ))";
19216 +        %end;
19217 +      %end;
19219 +      /* Target Values */
19220 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19221 +        textall=strip(textall)||"0A"x||strip(probtext);
19222 +      %end;
19224 +      /* include profit or loss for all target levels */
19225 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19226 +        textall=strip(textall)||"0A"x||strip(profittext);
19227 +      %end;
19229 +      %if &validFlag eq N %then %do;
19230 +        /* Percent Correct */
19231 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19232 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19233 +        %end;
19235 +         /* Count */
19236 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19237 +          %if "&adjusted" eq "N" %then %do;
19238 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19239 +          %end;
19240 +          %else %do;
19241 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19242 +          %end;
19243 +         %end;
19244 +      %end;
19245 +      %else %do;
19246 +        /* Percent Correct */
19247 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19248 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19249 +        %end;
19251 +         /* Count */
19252 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19253 +          %if "&adjusted" eq "N" %then %do;
19254 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19255 +          %end;
19256 +          %else %do;
19257 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19258 +          %end;
19259 +         %end;
19260 +      %end;
19262 +      /* nodecolor */
19263 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19264 +       %if &multipleTar ne Y %then %do;
19265 +        nodecolor=&predTarget;
19266 +       %end;
19267 +       %else %do;
19268 +         nodecolor=percentcorrect;
19269 +       %end;
19270 +      %end;
19271 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19272 +        nodecolor=percentcorrect;
19273 +      %end;
19274 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19275 +        nodecolor=1;
19276 +      %end;
19277 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19278 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19279 +          nodecolor=percentcorrect;
19280 +        %end;
19281 +        %else %do;
19282 +          nodecolor=profitloss;
19283 +        %end;
19284 +      %end;
19286 +    end;
19287 +    %end;
19288 +    %if &em_intTarget eq Y %then %do;
19289 +     drop  PREDICTION  TARGET TARLEVEL
19290 +     %if &ValidFlag eq Y %then %do;
19291 +         VPREDICTION
19292 +     %end;
19293 +     ;
19294 +    %end;
19295 +    %if &em_classTarget eq Y %then %do;
19296 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19297 +     %if &ValidFlag eq Y %then %do;
19298 +         VSTATVALUE
19299 +     %end;
19300 +     ;
19301 +    %end;
19303 +  run;
19305 +  /* add leaf index information to plotds - based on primary target only*/
19306 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19307 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19308 +      set &EM_USER_OUTSTATS;
19309 +      if ((statname="PROBABILITY"
19310 +      %if &validexist %then %do;
19311 +       or statname="VALID: PROBABILITY"
19312 +      %end;
19313 +      ) AND (CATEGORY="&TARGETEVENT")
19314 +      %if "&multipleTar" eq "Y" %then %do;
19315 +        AND (Target="%EM_TARGET")
19316 +      %end;
19317 +      );
19318 +    run;
19320 +    %if &validexist %then %do;
19321 +      proc sort data=tempprob; by node; run;
19322 +      %let vpredTarget = V%substr(&predTarget, 2);
19323 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19324 +         by node;
19325 +         id statname;
19326 +      run;
19327 +    %end;
19328 +  %end;
19329 +  %else %do;
19330 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19331 +      set &EM_USER_OUTSTATS;
19332 +      if ((statname="PREDICTION"
19333 +      %if &validexist %then %do;
19334 +       or statname="VALID: PREDICTION"
19335 +      %end;
19336 +      )
19337 +      %if "&multipleTar" eq "Y" %then %do;
19338 +        AND (Target="%EM_TARGET")
19339 +      %end;
19340 +      );
19341 +    run;
19342 +    %if &validexist %then %do;
19343 +      proc sort data=tempprob; by node; run;
19344 +      %let vpredTarget = V%substr(&predTarget, 2);
19345 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19346 +         by node;
19347 +         id statname;
19348 +      run;
19349 +    %end;
19350 +  %end;
19352 +  proc sort data=tempprob; by node; run;
19353 +  data tempoutnodes;
19354 +    merge tempoutnodes tempprob;
19355 +    by node;
19356 +  run;
19358 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19359 +  data tempnodes;
19360 +    retain traintotal validtotal;
19361 +    set tempnodes(where=(leaf ne . ));
19362 +    tprob=round(&predTarget, .01);
19363 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19364 +      percevent_train=round(tprob*100, .01);
19365 +    %end;
19366 +    %else %do;
19367 +      percevent_train=tprob;
19368 +    %end;
19370 +    perc_train=round((n/traintotal)*100, 0.01);
19371 +    /* leafwidth already has a *10 multiplier */
19372 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19374 +    %if &validexist %then %do;
19375 +      %let vpredTarget = V%substr(&predTarget,2);
19376 +      vprob=round(&vpredTarget, .01);
19377 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19378 +        percevent_valid=round(vprob*100, .01);
19379 +      %end;
19380 +      %else %do;
19381 +        percevent_valid=vprob;
19382 +      %end;
19383 +      perc_valid=round((vn/validtotal)*100, .01);
19384 +    %end;
19386 +    index=_N_;
19387 +    keep node index tprob perc_train percevent_train
19388 +    %if &validexist %then %do;
19389 +        vprob percevent_valid perc_valid
19390 +    %end;
19391 +    ;
19392 +  run;
19393 +  proc sort data=tempnodes; by node; run;
19394 +  data &EM_USER_TREE_PLOT;
19395 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19396 +    by node;
19397 +    if missing(node) then delete;
19398 +    %if &oldexists %then %do;
19399 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19400 +      drop oldnodecolor;
19401 +    %end;
19402 +    abovetext = compbl(abovetext);
19404 +    /* add variable labels */
19405 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19406 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19407 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19408 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19409 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19410 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19412 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19413 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19414 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19415 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19416 +          %end;
19417 +          %else %do;
19418 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19419 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19420 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19421 +          %end;
19422 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19424 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19425 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19426 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19427 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19428 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19429 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19430 +          %end;
19431 +          %else %do;
19432 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19433 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19434 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19435 +          %end;
19436 +    ;
19437 +  run;
19439 +  /* delete temporary tables */
19440 +  proc datasets lib=work nolist;
19441 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19442 +  run;
19444 +%mend em_tree_makePlotDs;
19448 +%macro em_tree_report;
19450 +   /* report properties */
19451 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19452 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19453 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19454 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19455 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19456 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19457 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19458 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19459 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19460 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19461 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19462 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19463 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19465 +   %let validexist=0;
19466 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19467 +     %let validexist=1;
19468 +   %end;
19470 +   /* determine if multiple targets will be processed */
19471 +   %let em_tree_multipleTargets=N;
19472 +   %let em_tree_numTarget=1;
19473 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19474 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19475 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19476 +         %let em_tree_multipleTargets=N;
19477 +      %end;
19478 +      %else %do;
19479 +        data _null_;
19480 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19481 +          if eof then
19482 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19483 +        run;
19485 +        %if &em_tree_numTarget gt 1 %then %do;
19486 +           %let em_tree_multipleTargets=Y;
19487 +        %end;
19488 +     %end;
19489 +   %end;
19491 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19493 +   /* variable importance */
19494 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19495 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19497 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19498 +     /* and the columns may not be generated                                                                                 */
19499 +     %let em_tree_cvexists=;
19500 +     %let em_tree_surrexists=.;
19501 +     data _null_;
19502 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19503 +       if eof then do ;
19504 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19505 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19506 +       end;
19507 +     run;
19509 +     data &EM_USER_OUTIMPORT;
19510 +         set &EM_USER_OUTIMPORT;
19511 +         /* format columns based on Precison value specified */
19512 +         format importance 15.&EM_PROPERTY_PRECISION
19513 +              %if &validexist %then %do;
19514 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19515 +              %end;
19516 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19517 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19518 +              %end;
19519 +         ;
19520 +     run;
19522 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19523 +     proc print data=&EM_USER_OUTIMPORT
19524 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19525 +          (where=((nrules>0) OR (nsurrogates>0)))
19526 +        %end;
19527 +        %else %do;
19528 +           (where=(nrules>0))
19529 +        %end;
19530 +        label noobs
19531 +        ;
19532 +     run;
19533 +     title10;
19535 +   %end;
19537 +   /* Sequence */
19538 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19539 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19540 +   data _null_ ;
19541 +      set &EM_USER_outseq (obs=2) end=eof ;
19542 +      if eof then do ;
19543 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19544 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19545 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19546 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19547 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19548 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19549 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19550 +      end;
19551 +    run;
19553 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19554 +      data &EM_USER_OUTSEQ;
19555 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19556 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19557 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19558 +           _XMISC_=_VMISC_
19559 +        %end;
19560 +        %if "&em_tree_aprof" ne "."  %then %do;
19561 +           _XAPROF_=_VAPROF_
19562 +           _XPROF_ = _VPROF_
19563 +        %end;
19564 +        %if "&em_tree_aloss" ne "."  %then %do;
19565 +           _XALOSS_=_VALOSS_
19566 +        %end;
19567 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19568 +           _XPASE_ = _VPASE_
19569 +           _XPMISC_ = _VPMISC_
19570 +        %end;
19572 +        ));
19573 +     %end;
19574 +     %else %do;
19575 +        set &EM_USER_OUTSEQ;
19576 +     %end;
19578 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19579 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19580 +            _MISC_   15.&EM_PROPERTY_PRECISION
19581 +         %end;
19582 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19583 +            _PASE_  15.&EM_PROPERTY_PRECISION
19584 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19585 +         %end;
19586 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19587 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19588 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19589 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19590 +            %end;
19591 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19592 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19593 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19594 +            %end;
19595 +         %end;
19596 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19597 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19598 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19599 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19600 +            %end;
19601 +         %end;
19602 +         %if "&em_tree_seq" ne "." %then %do;
19603 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19604 +         %end;
19605 +         %if "&em_tree_vseq" ne "." %then %do;
19606 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19607 +         %end;
19608 +         %if "&em_tree_aprof" ne "." %then %do;
19609 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19610 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19611 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19612 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19613 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19614 +           %end;
19615 +         %end;
19616 +         %else %if "&em_tree_aloss" ne "." %then %do;
19617 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19618 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19619 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19620 +           %end;
19621 +         %end;
19622 +      ;
19623 +    run;
19624 +   %end;
19626 +   /* Observation Based Importance */
19627 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19629 +      /* need to check for 0 obs */
19630 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19631 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19632 +      %let rc=%sysfunc(close(&dsid));
19634 +      %if &onobs %then %do;
19635 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19636 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19638 +         data &EM_USER_OUTOBSIMP;
19639 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19640 +           if _a;
19641 +           by _INPUT1_;
19642 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19643 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19644 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19645 +                   %end;
19646 +                   ;
19647 +         run;
19648 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19649 +      %end;
19650 +   %end;
19652 +  %end;
19654 +  /* create dataset to support tree diagram and icicle plot */
19655 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19656 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19658 +  /* display tree diagram */
19659 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19660 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19662 +  /* display icicle diagram */
19663 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19664 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19666 +  /* Leaf Statistics Plot */
19667 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19669 +  /* print leaf information to output window */
19670 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19672 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19673 +       by descending N;
19674 +     run;
19676 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19677 +     %local vn;
19678 +     data _null_;
19679 +       set t (obs=2) end=eof;
19680 +       if eof then do;
19681 +         call symput("vn", strip(put(vn, best.)));
19682 +       end;
19683 +     run;
19685 +     data t;
19686 +       set t;
19687 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19688 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19689 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19690 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19691 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19692 +       %end;
19693 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19694 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19695 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19696 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19697 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19698 +          %end;
19699 +       %end;
19700 +       ;
19701 +     run;
19703 +     /* determine if rase is found in t */
19704 +    %let dsid=%sysfunc(open(t,i));
19705 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19706 +    %let rc=%sysfunc(close(&dsid));
19708 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19709 +     proc print data=t noobs label;
19710 +       where tprob ne .;
19711 +       var node depth N tprob
19712 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19713 +         %if "&vn" ne "." %then %do;
19714 +           VN
19715 +         %end;
19716 +         vprob
19717 +       %end;
19718 +       %if &raseexists %then %do;
19719 +            RASE
19720 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19721 +              VRASE
19722 +            %end;
19723 +       %end;
19724 +       ;
19725 +     run;
19726 +     title10;
19727 +  %end;
19729 +  /* create plots that are done during training of node */
19730 +  /* display iterative plot, including reference line */
19731 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19732 +   /* %if &nleaves eq  %then %do; */
19733 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19734 +      data _null_;
19735 +        set &EM_USER_OUTTOPOLOGY end=eof;
19736 +        if eof then do;
19737 +          call symput('nleaves', LEAF);
19738 +        end;
19739 +      run;
19740 +   /* %end; */
19742 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19743 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19744 +  %end;
19746 +  /* display leaf statistics */
19747 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19749 +  /* stats by node if multiple targets = Y */
19750 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19751 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19752 +    data &EM_USER_OUTSTATS;
19753 +      set &EM_USER_OUTSTATS;
19755 +     * if STATNAME="TARGET" then delete;
19756 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19757 +      drop leaf;
19758 +    run;
19759 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19761 +  %end;
19762 +  %else %do;
19763 +    /* add outstats and outdescribe to spk but not results */
19764 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19765 +  %end;
19767 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS3.TREE_OUTIMPORT.
NOTE: The data set EMWS3.TREE_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           1.46 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set EMWS3.TREE_OUTSEQ.
NOTE: The data set EMWS3.TREE_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           1.81 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 141 observations read from the data set EMWS3.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS3.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 49 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 42 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS3.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 49 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 49 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 49 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 14 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 14 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 7 observations read from the data set WORK.TEMPN.
NOTE: There were 7 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE_TREE_PLOT has 7 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           1.12 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS3.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE_TREE_PLOT.
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE_TREE_PLOT has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           1.75 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 7 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 7 observations read from the data set EMWS3.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
19768
19769  *------------------------------------------------------------*;
19770  * End REPORT: Tree;
19771  *------------------------------------------------------------*;
 
19772  /* Reset EM Options */
19773  options formchar="|----|+|---+=|-/\<>*";
19774  options nocenter ls=256 ps=10000;
19775  goptions reset=all device=GIF NODISPLAY;
 
19776  proc sort data=WORK.EM_USER_REPORT;
19777  by ID VIEW;
19778  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19779  proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19780  by NAME;
19781  run;
 
NOTE: There were 99 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
19782  proc sort data=EMWS3.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19783  by NAME;
19784  run;
 
NOTE: There were 99 observations read from the data set EMWS3.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
19785  data WORK.ASSESS_META;
19786  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19787  by NAME;
19788  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19789  data EM_temp_assessMeta;
19790  set EMWS3.Tree_CMeta_TRAIN;
19791  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19792  run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.03 seconds
 
 
19793  data EM_temp_assessdata;
19794  set EMWS3.Tree_TRAIN(keep=
19795  F_RESPOND
19796  I_RESPOND
19797  P_RESPOND0
19798  P_RESPOND1
19799  Q_RESPOND0
19800  Q_RESPOND1
19801  R_RESPOND0
19802  R_RESPOND1
19803  U_RESPOND
19804  V_RESPOND0
19805  V_RESPOND1
19806  _WARN_
19807  RESPOND
19808  );
19809  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE_TRAIN.VIEW used (Total process time):
      real time           20.31 seconds
      cpu time            0.25 seconds
 
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           20.46 seconds
      cpu time            0.26 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24094   data EM_temp_assessMeta;
24095   set EMWS3.Tree_CMeta_TRAIN;
24096   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24097   run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
24098   data EM_temp_assessdata;
24099   set EMWS3.Tree_VALIDATE(keep=
24100   F_RESPOND
24101   I_RESPOND
24102   P_RESPOND0
24103   P_RESPOND1
24104   Q_RESPOND0
24105   Q_RESPOND1
24106   R_RESPOND0
24107   R_RESPOND1
24108   U_RESPOND
24109   V_RESPOND0
24110   V_RESPOND1
24111   _WARN_
24112   RESPOND
24113   );
24114   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE_VALIDATE.VIEW used (Total process time):
      real time           10.37 seconds
      cpu time            0.17 seconds
 
NOTE: There were 16121 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS3.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           10.53 seconds
      cpu time            0.20 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28408   %let _cn = %sysfunc(getoption(CENTER));
28409   options nocenter;
28410   proc print data=EMWS3.Tree_EMREPORTFIT noobs label;
28411   var STAT LABEL TRAIN
28412   VALIDATE
28413   ;
28414   by TARGET TARGETLABEL;
28415   title9 ' ';
28416   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28417   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
28418   title10;
28419   options &_cn;
 
28420   proc sort data=EMWS3.Tree_EMCLASSIFICATION nothreads;
28421   by DATAROLE TARGET TARGETLABEL;
28422   run;
 
NOTE: There were 7 observations read from the data set EMWS3.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           1.89 seconds
      cpu time            0.01 seconds
 
 
28423   %let _cn = %sysfunc(getoption(CENTER));
28424   options nocenter;
28425   proc print data=EMWS3.Tree_EMCLASSIFICATION noobs label;
28426   var from into pct_row pct_col count percent
28427   ;
28428   by DATAROLE TARGET TARGETLABEL;
28429   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28430   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28431   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28432   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28433   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28434   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28435   where _TYPE_='PREDICTION';
28436   title9 ' ';
28437   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28438   run;
 
NOTE: There were 7 observations read from the data set EMWS3.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.25 seconds
      cpu time            0.01 seconds
 
 
28439   title9;
28440   title10;
28441   options &_cn;
 
28442   %let _cn = %sysfunc(getoption(CENTER));
28443   options nocenter;
28444   data EMWS3.Tree_EMEVENTREPORT;
28445   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28445 !  8;
28446   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28446 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28446 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28446 ! FALSEEVENT
28447   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28447 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28447 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28448      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28449   FALSEEVENT=0;
28450   FALSENEVENT=0;
28451   TRUEEVENT=0;
28452   TRUENEVENT=0;
28453   set EMWS3.Tree_EMEVENTREPORT;
28454   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           1.76 seconds
      cpu time            0.01 seconds
 
 
28455   proc print data=EMWS3.Tree_EMEVENTREPORT noobs label;
28456   title9 ' ';
28457   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28458   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28459   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
28460   title10;
28461   options &_cn;
 
28462   proc datasets library=EMWS3 nolist;
28463   modify Tree_EMRANK;
28464   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28465   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28466   run;
 
NOTE: MODIFY was successful for EMWS3.TREE_EMRANK.DATA.
28467   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.71 seconds
      cpu time            0.01 seconds
 
 
28468   %let _cn = %sysfunc(getoption(CENTER));
28469   options nocenter;
28470   proc print data=EMWS3.Tree_EMRANK label noobs;
28471   var
28472   decile gain lift liftc resp respc N _meanP_;
28473   by
28474   notsorted DATAROLE
28475   notsorted TARGET
28476   notsorted TARGETLABEL
28477   ;
28478   title9 ' ';
28479   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28480   run;
 
NOTE: There were 40 observations read from the data set EMWS3.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
28481   title10;
28482   options &_cn;
 
28483   proc datasets library=EMWS3 nolist;
28484   modify Tree_EMSCOREDIST;
28485   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28486   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28487   run;
 
NOTE: MODIFY was successful for EMWS3.TREE_EMSCOREDIST.DATA.
28488   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.75 seconds
      cpu time            0.01 seconds
 
 
