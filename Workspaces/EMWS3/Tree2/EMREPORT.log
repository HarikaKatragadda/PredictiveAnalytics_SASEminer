*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                02:14:12
*------------------------------------------------------------*
18392  data EMWS3.Tree2_EMOUTFIT;
18393  set EMWS3.Tree2_EMOUTFIT;
18394  length TargetLabel $200;
18395  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18396  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18397  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           1.51 seconds
      cpu time            0.01 seconds
      

18398  proc sort data=EMWS3.Tree2_EMREPORTFIT nothreads;
18399  by TARGET;
18400  run;

NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The data set EMWS3.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           1.78 seconds
      cpu time            0.03 seconds
      

18401  %let _EMwarndup = 0;
18402  %let _EMtargetdup =;
18403  %let _EMASEtargetdup =;
18404  data _null_;
18405  set EMWS3.Tree2_EMOUTFIT;
18406  if .<_ASE_<0.000001 then do;
18407  call symput('_EMwarndup', '1');
18408  call symput('_EMtargetdup', target);
18409  call symput('_EMASEtargetdup', put(_ASE_, best.));
18410  end;
18411  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      

18412  %let EMEXCEPTIONSTRING=;
18413  *------------------------------------------------------------*;
18414  * REPORT: Tree2;
18415  *------------------------------------------------------------*;
18416  %let EM_ACTION = REPORT;
18417  %let syscc = 0;
18418  %macro main;
18419  
18420    %if %upcase(&EM_ACTION) = CREATE %then %do;
18421      filename temp catalog 'sashelp.emmodl.tree_create.source';
18422      %include temp;
18423      filename temp;
18424  
18425      %em_tree_create;
18426    %end;
18427  
18428     %else
18429     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18430  
18431         filename temp catalog 'sashelp.emmodl.tree_train.source';
18432         %include temp;
18433         filename temp;
18434         %em_tree_train;
18435     %end;
18436  
18437    %else
18438    %if %upcase(&EM_ACTION) = SCORE %then %do;
18439      filename temp catalog 'sashelp.emmodl.tree_score.source';
18440      %include temp;
18441      filename temp;
18442  
18443      %em_tree_score;
18444  
18445    %end;
18446  
18447    %else
18448    %if %upcase(&EM_ACTION) = REPORT %then %do;
18449  
18450         filename temp catalog 'sashelp.emmodl.tree_report.source';
18451         %include temp;
18452         filename temp;
18453  
18454         %em_tree_report;
18455     %end;
18456  
18457    %else
18458    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18459  
18460         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18461         %include temp;
18462         filename temp;
18463         %EM_TREE_OPENTREEVIEWER;
18464  
18465     %end;
18466  
18467    %else
18468    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18469  
18470         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18471         %include temp;
18472         filename temp;
18473         %EM_TREE_CLOSETREEVIEWER;
18474  
18475     %end;
18476  
18477  
18478     %doendm:
18479  %mend main;
18480  
18481  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18483 +%macro em_tree_makePlotDs( multipleTar= );
18485 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18486 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18487 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18488 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18490 +  /* determine if validation statistics will be displayed */
18491 +  %let validflag=N;
18492 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18493 +    /* determine if validation data exists */
18494 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18495 +      %let validflag=Y;
18496 +    %end;
18497 +  %end;
18499 +   /* retrieve name of decmeta even in presence of multiple targets */
18500 +   %let decmeta = ;
18501 +   %if &EM_DEC_DECMETA eq %then %do;
18502 +     data _Target;
18503 +       set &em_data_variableset;
18504 +       where ROLE='TARGET' and USE in('D', 'Y');
18505 +       keep NAME;
18506 +     run;
18507 +     proc sort data=_Target;
18508 +       by NAME;
18509 +     run;
18510 +     proc sort data=EM_TARGETDECINFO;
18511 +       by TARGET;
18512 +     run;
18513 +     data _Target;
18514 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18515 +       by NAME;
18516 +       if _a then do;
18517 +         call symput('decmeta', trim(DECMETA));
18518 +       end;
18519 +     run;
18520 +     proc delete data=_Target;run;
18521 +   %end;
18522 +   %else %let decmeta = &EM_DEC_DECMETA;
18525 +  /* retrieve targetEvent from decmeta */
18526 +  %let targetEvent=;
18527 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18528 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18529 +      data _null_;
18530 +       set &DECMETA(where=(_TYPE_="TARGET"));
18531 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18532 +      run;
18533 +    %end;
18534 +  %end;
18536 +  /* retrieve predicted var for targetEvent from decmeta */
18537 +  %let predTarget=;
18538 +  %let predLvl=;
18539 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18540 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18541 +      data _null_;
18542 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18543 +       call symput('predTarget', strip(VARIABLE));
18544 +       call symput('predLvl', strip(LEVEL));
18545 +      run;
18546 +    %end;
18547 +  %end;
18548 +  %else %do;
18549 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18550 +      data _null_;
18551 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18552 +       call symput('predTarget', strip(VARIABLE));
18553 +      run;
18554 +    %end;
18555 +  %end;
18557 +  /* create BelowText value */
18558 +  data belowtext;
18559 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18560 +    keep node belowtext;
18561 +  run;
18563 +  /* relace belowtext with variable label if it exists */
18564 +  data belowtext2;
18565 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18566 +    keep node belowtextlbl;
18567 +  run;
18569 +  proc sort data=belowtext; by node; run;
18570 +  proc sort data=belowtext2; by node; run;
18572 +  data belowtext;
18573 +    merge belowtext belowtext2(in=_a);
18574 +    by node;
18575 +    if _a then belowtext=belowtextlbl;
18576 +    keep node belowtext;
18577 +  run;
18579 +  /* create AboveText value */
18580 +  data abovetext;
18581 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18582 +  run;
18583 +  proc sort data=abovetext; by node numeric_value; run;
18585 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18586 +  data abovetext;
18587 +    set abovetext(rename=(node=parent));
18588 +    by parent numeric_value;
18589 +    retain abovetext tempstring flag branch origval origchar ;
18590 +    length abovetext $256;
18591 +    length tempstring origchar $64;
18593 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18594 +      if first.parent then do;
18595 +        if missing(character_value) then do;
18596 +          numeric_value = round(numeric_value, &sp_precision);
18597 +          abovetext = "< "||strip(NUMERIC_VALUE);
18598 +          branch = 1;
18599 +          origval = numeric_value;
18600 +          output;
18601 +        end;
18602 +        else do;
18603 +          abovetext = "< "||strip(CHARACTER_VALUE);
18604 +          branch = 1;
18605 +          origchar = character_value;
18606 +          output;
18607 +        end;
18609 +        if first.parent AND last.parent then do;
18610 +          if missing(character_value) then do;
18611 +            numeric_value = round(numeric_value, &sp_precision);
18612 +            branch = branch + 1;
18613 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18614 +            output;
18615 +          end;
18616 +          else do;
18617 +            branch = branch + 1;
18618 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18619 +            output;
18620 +          end;
18621 +        end;
18622 +      end;
18623 +      else if last.parent then do;
18624 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18625 +          if missing(character_value) then do;
18626 +            numeric_value = round(numeric_value, &sp_precision);
18627 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18628 +          end;
18629 +          else do;
18630 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18631 +          end;
18632 +          branch = branch + 1;
18633 +          output;
18635 +          if missing(character_value) then do;
18636 +            numeric_value = round(numeric_value, &sp_precision);
18637 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18638 +          end;
18639 +          else do;
18640 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18641 +          end;
18642 +          branch = branch + 1;
18643 +          output;
18644 +        end;
18645 +        else do;
18646 +          if missing(character_value) then do;
18647 +            numeric_value = round(numeric_value, &sp_precision);
18648 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18649 +          end;
18650 +          else do;
18651 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18652 +          end;
18653 +          branch = branch + 1;
18654 +          output;
18655 +        end;
18656 +      end;
18657 +      else do;
18658 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18659 +          if missing(character_value) then do;
18660 +            numeric_value = round(numeric_value,&sp_precision);
18661 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18662 +            origval = numeric_value;
18663 +          end;
18664 +          else do;
18665 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18666 +            origchar = character_value;
18667 +          end;
18668 +          branch = branch + 1;
18669 +          output;
18671 +        end;
18672 +        else do;
18673 +          if missing(character_value) then do;
18674 +            numeric_value = round(numeric_value, &sp_precision);
18675 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18676 +            origval = numeric_value;
18677 +          end;
18678 +          else do;
18679 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18680 +            origval = character_value;
18681 +          end;
18682 +          branch = branch + 1;
18683 +          output;
18684 +        end;
18685 +      end;
18686 +    end;
18687 +    else do;
18688 +       if first.numeric_value then do;
18689 +         flag = 0;
18690 +         abovetext = strip(CHARACTER_VALUE);
18691 +         branch = numeric_value;
18692 +         if first.numeric_value AND last.numeric_value then do;
18693 +           output;
18694 +         end;
18695 +       end;
18696 +       else if last.numeric_value then do;
18697 +         if flag=0 then do;
18698 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18699 +           length = length(strip(tempstring));
18700 +           if length < 32 then do;
18701 +             abovetext = strip(tempstring);
18702 +           end;
18703 +           else do;
18704 +             abovetext = strip(abovetext)||", ...";
18705 +             flag = 1;
18706 +           end;
18707 +         end;
18708 +         branch = numeric_value;
18709 +         output;
18710 +       end;
18711 +       else do;
18712 +         if flag=0 then do;
18713 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18714 +           length = length(strip(tempstring));
18715 +           if length < 32 then do;
18716 +             abovetext = strip(tempstring);
18717 +           end;
18718 +           else do;
18719 +             abovetext = strip(abovetext)||", ...";
18720 +             flag=1;
18721 +           end;
18722 +         end;
18723 +         branch = numeric_value;
18724 +       end;
18725 +    end;
18726 +    keep parent branch abovetext;
18727 +  run;
18729 +  /* MIssing value to abovetext */
18730 +  data tempmissing;
18731 +    set &EM_USER_OUTRULES;
18732 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18733 +    rename node=parent numeric_value=branch character_value=misschar;
18734 +  run;
18737 +  proc sort data=abovetext; by parent branch; run;
18738 +  proc sort data=tempmissing; by parent branch; run;
18739 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18741 +  data tempoutnodes;
18742 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18743 +    by parent branch;
18744 +    length traintotal validtotal 8;
18745 +    retain traintotal validtotal;
18747 +    if _a then do;
18748 +      if ^MISSING(abovetext) then do;
18749 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18750 +      end;
18751 +      else do;
18752 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18753 +      end;
18754 +    end;
18755 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18757 +    if node=1 then do;
18758 +      traintotal = N;
18759 +      validtotal=VN;
18760 +    end;
18762 +    drop role rank stat misschar belowtext;
18763 +  run;
18764 +  proc sort data=tempoutnodes; by node; run;
18765 +  proc sort data=belowtext; by node; run;
18767 +  data tempoutnodes;
18768 +    merge tempoutnodes belowtext;
18769 +    by node;
18771 +  run;
18773 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18774 +  %let adjusted = N;
18775 +  %let npriors = 0;
18776 +  data _null_ ;
18777 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18778 +    if eof then do ;
18779 +      call symput("npriors" , strip(put(_N_,best.))) ;
18780 +    end;
18781 +  run;
18782 +  %if &npriors gt 0 %then %let adjusted=Y;
18785 +  /* create a table with targetUsed and targetLevel columns for each node */
18786 +  data temptarmeta;
18787 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18788 +    %if &multipleTar eq N %then %do;
18789 +      AND USE in ('D', 'Y')
18790 +    %end;
18791 +    ));
18792 +    length TARGET $32;
18793 +    Target=name;
18794 +    keep target level;
18795 +  run;
18797 +  %if &multipleTar eq Y %then %do;
18798 +    data temptargetused;
18799 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18800 +      keep node target;
18801 +    run;
18802 +    proc sort data=temptargetused; by target; run;
18803 +    proc sort data=temptarmeta; by target; run;
18804 +    data temptargetused;
18805 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18806 +      by target;
18807 +      if _a and _b;
18808 +    run;
18809 +  %end;
18810 +  %else %do;
18811 +    data temptargetused;
18812 +      set &EM_USER_OUTSTATS;
18813 +      length target $32 tarlevel $10;
18814 +      target="%EM_TARGET";
18815 +      tarlevel="%EM_TARGET_LEVEL";
18816 +      keep node target tarlevel;
18817 +    run;
18818 +    proc sort data=temptargetused nodupkey; by node; run;
18819 +  %end;
18821 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18822 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18823 +  proc sort data=temptargetused; by node; run;
18826 +  /* create tables for all interval targets as well as all class targets */
18827 +  data tempinterval tempclass;
18828 +    merge tempoutstats temptargetused( rename=(target=targetused));
18829 +    by node;
18830 +    %if "&multipleTar" eq "Y" %then %do;
18831 +      if ((missing(Target)) OR (target=targetused ));
18832 +    %end;
18834 +    if tarlevel="INTERVAL" then output tempinterval;
18835 +    else output tempclass;
18836 +  run;
18838 +  /* iniitalize intTarget and classTarget flags */
18839 +  %let em_intNobs =0;
18840 +  %let em_classNobs = 0;
18841 +  %let em_intTarget= N;
18842 +  %let em_classTarget= N;
18844 +  proc sql;
18845 +    reset noprint;
18846 +    select count(*) into :em_intNobs from tempinterval;
18847 +  quit;
18848 +  proc sql;
18849 +    reset noprint;
18850 +    select count(*) into :em_classNobs from tempclass;
18851 +  quit;
18853 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18854 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18856 +  /* retrieve all information for interval targets */
18857 +  %if &em_intTarget eq Y %then %do;
18859 +    /* determine if leaf variable exists */
18860 +    %let dsid=%sysfunc(open(tempinterval,i));
18861 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18862 +    %let rc=%sysfunc(close(&dsid));
18864 +    proc transpose data=tempinterval
18865 +      %if &leafexists %then %do;
18866 +        (drop=leaf)
18867 +      %end;
18868 +      %if &validexist %then %do;
18869 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18870 +      %end;
18871 +      %else %do;
18872 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18873 +      %end;
18874 +      by node;
18875 +      id statname;
18876 +    run;
18877 +    data tempinterval;
18878 +      set tempinterval;
18879 +      if missing(N) then delete;
18880 +    run;
18881 +  %end;
18883 +  /* retrieve all information for class targets */
18884 +  %if &em_classTarget eq Y %then %do;
18885 +    proc sort data=tempclass; by node category; run;
18886 +    %if &validflag eq N %then %do;
18887 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18888 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18889 +    %end;
18890 +    %else %do;
18891 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18892 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18893 +    %end;
18894 +      set tempclass;
18896 +      %if &validflag eq N %then %do;
18897 +        %if "&adjusted" eq "N" %then %do;
18898 +          if statname="N" then output tempn;
18899 +        %end;
18900 +        %else %do;
18901 +          if statname="NPRIORS" then output tempn;
18902 +        %end;
18903 +        else if statname="PREDICTION" then output temppredict;
18904 +        else if statname="PROBABILITY" then output tempprob;
18905 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18906 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18907 +      %end;
18908 +      %else %do;
18909 +        %if "&adjusted" eq "N" %then %do;
18910 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18911 +        %end;
18912 +        %else %do;
18913 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18914 +        %end;
18915 +        else if statname="PREDICTION" then output temppredict;
18916 +        else if statname="PROBABILITY" then output tempprob;
18917 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18918 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18919 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18920 +      %end;
18921 +    run;
18924 +    /* determine if profit/loss exists in tempprofit */
18925 +    %let em_profitflag=0;
18926 +    %let em_lossflag=0;
18927 +    proc sql;
18928 +      reset noprint;
18929 +      select count(*) into :em_profitflag from tempprofit;
18930 +    quit;
18931 +    proc sql;
18932 +      reset noprint;
18933 +      select count(*) into :em_lossflag from temploss;
18934 +    quit;
18936 +    %if &validFlag eq Y %then %do;
18937 +      proc transpose data=tempn
18938 +        %if "&adjusted" eq "N" %then %do;
18939 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18940 +        %end;
18941 +        %else %do;
18942 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18943 +        %end;
18944 +        by node;
18945 +        id statname;
18946 +      run;
18947 +      %if &em_profitflag ne 0 %then %do;
18948 +        proc transpose data=tempprofit out=tempprofit;
18949 +          by node category;
18950 +          id statname ;
18951 +        run;
18952 +      %end;
18953 +      %if &em_lossflag ne 0 %then %do;
18954 +        proc transpose data=temploss out=temploss;
18955 +          by node category;
18956 +          id statname ;
18957 +        run;
18958 +      %end;
18959 +      data tempprob;
18960 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18961 +        by node
18962 +        %if &multipleTar eq Y %then %do;
18963 +          target
18964 +        %end;
18965 +        category;
18966 +      run;
18967 +    %end;
18969 +    /* store percentcorrect value */
18970 +    data temppredict;
18971 +      merge tempprob temppredict(in=_a);
18972 +      by node category;
18973 +      if _a then do;
18974 +        percentCorrect = statvalue;
18975 +        %if &validFlag eq Y %then %do;
18976 +          vpercentCorrect= vstatvalue;
18977 +        %end;
18978 +      end;
18979 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18980 +      %if &validFlag eq Y %then %do;
18981 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18982 +      %end;
18983 +      ;
18984 +      if missing(percentCorrect) then delete;
18985 +      drop target;
18986 +    run;
18988 +    /* build profittext */
18989 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18990 +      data tempprofittext(keep= node profittext profitloss);
18991 +        length profittext $800 profitloss 8.;
18992 +        retain profittext profitloss;
18994 +        merge tempprob
18995 +        %if &em_profitflag ne 0 %then %do;
18996 +          tempprofit
18997 +        %end;
18998 +        %else %if &em_lossflag ne 0 %then %do;
18999 +          temploss
19000 +        %end;
19001 +        ;
19002 +        by node category;
19004 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19005 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19006 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19007 +          %let profittype = ALL;
19008 +        %end;
19010 +        /* create the profitloss variable for nodecolor if selected */
19011 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19013 +        %if "&profittype" eq "ALL" %then %do;
19014 +          if strip(CATEGORY)="&targetEvent" then do;
19015 +            profitloss=statvalue;
19016 +          end;
19017 +          if first.node then do;
19018 +            %if &validFlag eq N %then %do;
19019 +             %if &em_profitflag ne 0 %then %do;
19020 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19021 +             %end;
19022 +             %if &em_lossflag ne 0 %then %do;
19023 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19024 +             %end;
19025 +            %end;
19026 +            %else %do;
19027 +             %if &em_profitflag ne 0 %then %do;
19028 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19028!+;
19029 +             %end;
19030 +             %if &em_lossflag ne 0 %then %do;
19031 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19032 +             %end;
19033 +            %end;
19034 +          end;
19035 +          else if last.node then do;
19036 +            %if &validFlag eq N %then %do;
19037 +             %if &em_profitflag ne 0 %then %do;
19038 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19039 +             %end;
19040 +             %if &em_lossflag ne 0 %then %do;
19041 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19042 +             %end;
19043 +             /*if CATEGORY="&targetEvent" then do;
19044 +               profitloss=statvalue;
19045 +             end;*/
19046 +            %end;
19047 +            %else %do;
19048 +             %if &em_profitflag ne 0 %then %do;
19049 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19049!+14.&EM_PROPERTY_SPLITPRECISION);
19050 +                if CATEGORY="&targetEvent" then do;
19051 +                 profitloss=ALTERNATIVE_PROFIT;
19052 +                end;
19053 +             %end;
19054 +             %if &em_lossflag ne 0 %then %do;
19055 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19055!+14.&EM_PROPERTY_SPLITPRECISION);
19056 +                if CATEGORY="&targetEvent" then do;
19057 +                  profitloss=ALTERNATIVE_LOSS;
19058 +                end;
19059 +             %end;
19060 +            %end;
19061 +            output;
19062 +          end;
19063 +          else do;
19064 +            %if &validFlag eq N %then %do;
19065 +             %if &em_profitflag ne 0 %then %do;
19066 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19067 +             %end;
19068 +             %if &em_lossflag ne 0 %then %do;
19069 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19070 +             %end;
19071 +            %end;
19072 +            %else %do;
19073 +             %if &em_profitflag ne 0 %then %do;
19074 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19074!+14.&EM_PROPERTY_SPLITPRECISION);
19075 +             %end;
19076 +             %if &em_lossflag ne 0 %then %do;
19077 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19077!+14.&EM_PROPERTY_SPLITPRECISION);
19078 +             %end;
19079 +            %end;
19080 +          end;
19081 +        %end;
19082 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19083 +          if strip(CATEGORY) = "&targetevent" then do;
19084 +            %if &validFlag eq N %then %do;
19085 +             %if &em_profitflag ne 0 %then %do;
19086 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19087 +             %end;
19088 +             %if &em_lossflag ne 0 %then %do;
19089 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19090 +             %end;
19091 +             profitloss=statvalue;
19092 +            %end;
19093 +            %else %do;
19094 +             %if &em_profitflag ne 0 %then %do;
19095 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19095!+;
19096 +                profitloss=ALTERNATIVE_PROFIT;
19097 +             %end;
19098 +             %if &em_lossflag ne 0 %then %do;
19099 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19100 +                profitloss=ALTERNATIVE_LOSS;
19101 +             %end;
19102 +            %end;
19103 +            output;
19104 +          end;
19105 +        %end;
19106 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19107 +          if strip(CATEGORY) = "&targetevent" then do;
19108 +            %if &validFlag eq N %then %do;
19109 +             profitloss=statvalue;
19110 +            %end;
19111 +            %else %do;
19112 +             %if &em_profitflag ne 0 %then %do;
19113 +                profitloss=ALTERNATIVE_PROFIT;
19114 +             %end;
19115 +             %if &em_lossflag ne 0 %then %do;
19116 +                profitloss=ALTERNATIVE_LOSS;
19117 +             %end;
19118 +            %end;
19119 +            output;
19120 +          end;
19121 +        %end;
19122 +      run;
19123 +    %end;
19125 +    data tempprob(keep= node probtext);
19126 +      length probtext $800;
19127 +      retain probtext;
19128 +      set tempprob ;
19129 +      by node;
19131 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19132 +      %let probtype = &EM_PROPERTY_TARGET;
19133 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19134 +        %let probtype = ALL;
19135 +      %end;
19137 +      %if "&probtype" eq "ALL" %then %do;
19138 +        if first.node then do;
19139 +          %if &validFlag eq N %then %do;
19140 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19141 +          %end;
19142 +          %else %do;
19143 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19144 +          %end;
19145 +        end;
19146 +        else if last.node then do;
19147 +          %if &validFlag eq N %then %do;
19148 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19149 +          %end;
19150 +          %else %do;
19151 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19152 +          %end;
19153 +          output;
19154 +        end;
19155 +        else do;
19156 +          %if &validFlag eq N %then %do;
19157 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19158 +          %end;
19159 +          %else %do;
19160 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19161 +          %end;
19162 +        end;
19163 +      %end;
19164 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19165 +        if strip(CATEGORY) = "&targetevent" then do;
19166 +          %if &validFlag eq N %then %do;
19167 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19168 +          %end;
19169 +          %else %do;
19170 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19171 +          %end;
19172 +          output;
19173 +        end;
19174 +      %end;
19175 +      %else %if "&probtype" eq "NONE" %then %do;
19176 +        if last.node then do;
19177 +          output;
19178 +        end;
19179 +      %end;
19180 +    run;
19181 +  %end;
19183 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19185 +  %let oldexists=0;
19186 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19187 +     data old_tree_plot;
19188 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19189 +        rename nodecolor=oldnodecolor;
19190 +     run;
19192 +     proc sort data=old_tree_plot;
19193 +        by node;
19194 +     run;
19196 +     %let oldexists=1;
19197 +  %end;
19199 +  data &EM_USER_TREE_PLOT;
19200 +    length textall $800;
19201 +    merge tempoutnodes temptargetused
19203 +    %if &em_intTarget eq Y %then %do;
19204 +      tempinterval
19205 +    %end;
19207 +    %if &em_classTarget eq Y %then %do;
19209 +      %if &validFlag eq N %then %do;
19210 +        tempn(rename=(statvalue=N))
19211 +      %end;
19212 +      %else %do;
19213 +        tempn
19214 +      %end;
19216 +      temppredict tempprob
19218 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19219 +        tempprofittext
19220 +      %end;
19221 +    %end;
19222 +    ;
19223 +    by node;
19225 +    /* build nodetext based on user selection */
19226 +    textall="";
19228 +    %if &em_intTarget eq Y %then %do;
19229 +    if tarlevel="INTERVAL" then do;
19230 +      /* Nodeid */
19231 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19232 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19233 +      %end;
19235 +      /* Target identifier if multiple targets are used */
19236 +      %if "&multipleTar" eq "Y" %then %do;
19237 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19238 +      %end;
19240 +      %if &validFlag eq Y %then %do;
19241 +         /* Column labels displayed in validflag eq Y only */
19242 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19243 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19243!+noquote ))";
19244 +         %end;
19246 +         /* Average values */
19247 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19248 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19249 +         %end;
19251 +         /* RASE */
19252 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19253 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19254 +         %end;
19256 +         /* Count */
19257 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19258 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19259 +         %end;
19260 +      %end;
19261 +      %else %do;
19262 +         /* Average values */
19263 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19264 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19265 +         %end;
19267 +         /* RASE */
19268 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19269 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19270 +         %end;
19272 +         /* Count */
19273 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19274 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19275 +         %end;
19276 +      %end;
19278 +      /* nodecolor */
19279 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19280 +        nodecolor=PREDICTION;
19281 +      %end;
19282 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19283 +        nodecolor=RASE;
19284 +      %end;
19285 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19286 +        nodecolor=1;
19287 +      %end;
19289 +    end;
19290 +    %end;
19291 +    %if &em_classTarget eq Y %then %do;
19292 +    if tarlevel^="INTERVAL" then  do;
19294 +      /* Nodeid */
19295 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19296 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19297 +      %end;
19298 +      /* Target identifier if multiple targets are used */
19299 +      %if "&multipleTar" eq "Y" %then %do;
19300 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19301 +      %end;
19303 +      /* Predicted values */
19304 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19305 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19306 +      %end;
19308 +      /* Column labels displayed in validflag eq Y only */
19309 +      %if "&ValidFlag" eq "Y" %then %do;
19310 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19311 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19311!+noquote ))";
19312 +        %end;
19313 +      %end;
19315 +      /* Target Values */
19316 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19317 +        textall=strip(textall)||"0A"x||strip(probtext);
19318 +      %end;
19320 +      /* include profit or loss for all target levels */
19321 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19322 +        textall=strip(textall)||"0A"x||strip(profittext);
19323 +      %end;
19325 +      %if &validFlag eq N %then %do;
19326 +        /* Percent Correct */
19327 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19328 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19329 +        %end;
19331 +         /* Count */
19332 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19333 +          %if "&adjusted" eq "N" %then %do;
19334 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19335 +          %end;
19336 +          %else %do;
19337 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19338 +          %end;
19339 +         %end;
19340 +      %end;
19341 +      %else %do;
19342 +        /* Percent Correct */
19343 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19344 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19345 +        %end;
19347 +         /* Count */
19348 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19349 +          %if "&adjusted" eq "N" %then %do;
19350 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19351 +          %end;
19352 +          %else %do;
19353 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19354 +          %end;
19355 +         %end;
19356 +      %end;
19358 +      /* nodecolor */
19359 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19360 +       %if &multipleTar ne Y %then %do;
19361 +        nodecolor=&predTarget;
19362 +       %end;
19363 +       %else %do;
19364 +         nodecolor=percentcorrect;
19365 +       %end;
19366 +      %end;
19367 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19368 +        nodecolor=percentcorrect;
19369 +      %end;
19370 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19371 +        nodecolor=1;
19372 +      %end;
19373 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19374 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19375 +          nodecolor=percentcorrect;
19376 +        %end;
19377 +        %else %do;
19378 +          nodecolor=profitloss;
19379 +        %end;
19380 +      %end;
19382 +    end;
19383 +    %end;
19384 +    %if &em_intTarget eq Y %then %do;
19385 +     drop  PREDICTION  TARGET TARLEVEL
19386 +     %if &ValidFlag eq Y %then %do;
19387 +         VPREDICTION
19388 +     %end;
19389 +     ;
19390 +    %end;
19391 +    %if &em_classTarget eq Y %then %do;
19392 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19393 +     %if &ValidFlag eq Y %then %do;
19394 +         VSTATVALUE
19395 +     %end;
19396 +     ;
19397 +    %end;
19399 +  run;
19401 +  /* add leaf index information to plotds - based on primary target only*/
19402 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19403 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19404 +      set &EM_USER_OUTSTATS;
19405 +      if ((statname="PROBABILITY"
19406 +      %if &validexist %then %do;
19407 +       or statname="VALID: PROBABILITY"
19408 +      %end;
19409 +      ) AND (CATEGORY="&TARGETEVENT")
19410 +      %if "&multipleTar" eq "Y" %then %do;
19411 +        AND (Target="%EM_TARGET")
19412 +      %end;
19413 +      );
19414 +    run;
19416 +    %if &validexist %then %do;
19417 +      proc sort data=tempprob; by node; run;
19418 +      %let vpredTarget = V%substr(&predTarget, 2);
19419 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19420 +         by node;
19421 +         id statname;
19422 +      run;
19423 +    %end;
19424 +  %end;
19425 +  %else %do;
19426 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19427 +      set &EM_USER_OUTSTATS;
19428 +      if ((statname="PREDICTION"
19429 +      %if &validexist %then %do;
19430 +       or statname="VALID: PREDICTION"
19431 +      %end;
19432 +      )
19433 +      %if "&multipleTar" eq "Y" %then %do;
19434 +        AND (Target="%EM_TARGET")
19435 +      %end;
19436 +      );
19437 +    run;
19438 +    %if &validexist %then %do;
19439 +      proc sort data=tempprob; by node; run;
19440 +      %let vpredTarget = V%substr(&predTarget, 2);
19441 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19442 +         by node;
19443 +         id statname;
19444 +      run;
19445 +    %end;
19446 +  %end;
19448 +  proc sort data=tempprob; by node; run;
19449 +  data tempoutnodes;
19450 +    merge tempoutnodes tempprob;
19451 +    by node;
19452 +  run;
19454 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19455 +  data tempnodes;
19456 +    retain traintotal validtotal;
19457 +    set tempnodes(where=(leaf ne . ));
19458 +    tprob=round(&predTarget, .01);
19459 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19460 +      percevent_train=round(tprob*100, .01);
19461 +    %end;
19462 +    %else %do;
19463 +      percevent_train=tprob;
19464 +    %end;
19466 +    perc_train=round((n/traintotal)*100, 0.01);
19467 +    /* leafwidth already has a *10 multiplier */
19468 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19470 +    %if &validexist %then %do;
19471 +      %let vpredTarget = V%substr(&predTarget,2);
19472 +      vprob=round(&vpredTarget, .01);
19473 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19474 +        percevent_valid=round(vprob*100, .01);
19475 +      %end;
19476 +      %else %do;
19477 +        percevent_valid=vprob;
19478 +      %end;
19479 +      perc_valid=round((vn/validtotal)*100, .01);
19480 +    %end;
19482 +    index=_N_;
19483 +    keep node index tprob perc_train percevent_train
19484 +    %if &validexist %then %do;
19485 +        vprob percevent_valid perc_valid
19486 +    %end;
19487 +    ;
19488 +  run;
19489 +  proc sort data=tempnodes; by node; run;
19490 +  data &EM_USER_TREE_PLOT;
19491 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19492 +    by node;
19493 +    if missing(node) then delete;
19494 +    %if &oldexists %then %do;
19495 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19496 +      drop oldnodecolor;
19497 +    %end;
19498 +    abovetext = compbl(abovetext);
19500 +    /* add variable labels */
19501 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19502 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19503 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19504 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19505 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19506 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19508 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19509 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19510 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19511 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19512 +          %end;
19513 +          %else %do;
19514 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19515 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19516 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19517 +          %end;
19518 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19520 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19521 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19522 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19523 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19524 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19525 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19526 +          %end;
19527 +          %else %do;
19528 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19529 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19530 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19531 +          %end;
19532 +    ;
19533 +  run;
19535 +  /* delete temporary tables */
19536 +  proc datasets lib=work nolist;
19537 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19538 +  run;
19540 +%mend em_tree_makePlotDs;
19544 +%macro em_tree_report;
19546 +   /* report properties */
19547 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19548 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19549 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19550 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19551 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19552 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19553 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19554 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19555 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19556 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19557 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19558 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19559 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19561 +   %let validexist=0;
19562 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19563 +     %let validexist=1;
19564 +   %end;
19566 +   /* determine if multiple targets will be processed */
19567 +   %let em_tree_multipleTargets=N;
19568 +   %let em_tree_numTarget=1;
19569 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19570 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19571 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19572 +         %let em_tree_multipleTargets=N;
19573 +      %end;
19574 +      %else %do;
19575 +        data _null_;
19576 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19577 +          if eof then
19578 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19579 +        run;
19581 +        %if &em_tree_numTarget gt 1 %then %do;
19582 +           %let em_tree_multipleTargets=Y;
19583 +        %end;
19584 +     %end;
19585 +   %end;
19587 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19589 +   /* variable importance */
19590 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19591 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19593 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19594 +     /* and the columns may not be generated                                                                                 */
19595 +     %let em_tree_cvexists=;
19596 +     %let em_tree_surrexists=.;
19597 +     data _null_;
19598 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19599 +       if eof then do ;
19600 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19601 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19602 +       end;
19603 +     run;
19605 +     data &EM_USER_OUTIMPORT;
19606 +         set &EM_USER_OUTIMPORT;
19607 +         /* format columns based on Precison value specified */
19608 +         format importance 15.&EM_PROPERTY_PRECISION
19609 +              %if &validexist %then %do;
19610 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19611 +              %end;
19612 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19613 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19614 +              %end;
19615 +         ;
19616 +     run;
19618 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19619 +     proc print data=&EM_USER_OUTIMPORT
19620 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19621 +          (where=((nrules>0) OR (nsurrogates>0)))
19622 +        %end;
19623 +        %else %do;
19624 +           (where=(nrules>0))
19625 +        %end;
19626 +        label noobs
19627 +        ;
19628 +     run;
19629 +     title10;
19631 +   %end;
19633 +   /* Sequence */
19634 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19635 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19636 +   data _null_ ;
19637 +      set &EM_USER_outseq (obs=2) end=eof ;
19638 +      if eof then do ;
19639 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19640 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19641 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19642 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19643 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19644 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19645 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19646 +      end;
19647 +    run;
19649 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19650 +      data &EM_USER_OUTSEQ;
19651 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19652 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19653 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19654 +           _XMISC_=_VMISC_
19655 +        %end;
19656 +        %if "&em_tree_aprof" ne "."  %then %do;
19657 +           _XAPROF_=_VAPROF_
19658 +           _XPROF_ = _VPROF_
19659 +        %end;
19660 +        %if "&em_tree_aloss" ne "."  %then %do;
19661 +           _XALOSS_=_VALOSS_
19662 +        %end;
19663 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19664 +           _XPASE_ = _VPASE_
19665 +           _XPMISC_ = _VPMISC_
19666 +        %end;
19668 +        ));
19669 +     %end;
19670 +     %else %do;
19671 +        set &EM_USER_OUTSEQ;
19672 +     %end;
19674 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19675 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19676 +            _MISC_   15.&EM_PROPERTY_PRECISION
19677 +         %end;
19678 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19679 +            _PASE_  15.&EM_PROPERTY_PRECISION
19680 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19681 +         %end;
19682 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19683 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19684 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19685 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19686 +            %end;
19687 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19688 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19689 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19690 +            %end;
19691 +         %end;
19692 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19693 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19694 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19695 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19696 +            %end;
19697 +         %end;
19698 +         %if "&em_tree_seq" ne "." %then %do;
19699 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19700 +         %end;
19701 +         %if "&em_tree_vseq" ne "." %then %do;
19702 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19703 +         %end;
19704 +         %if "&em_tree_aprof" ne "." %then %do;
19705 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19706 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19707 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19708 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19709 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19710 +           %end;
19711 +         %end;
19712 +         %else %if "&em_tree_aloss" ne "." %then %do;
19713 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19714 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19715 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19716 +           %end;
19717 +         %end;
19718 +      ;
19719 +    run;
19720 +   %end;
19722 +   /* Observation Based Importance */
19723 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19725 +      /* need to check for 0 obs */
19726 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19727 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19728 +      %let rc=%sysfunc(close(&dsid));
19730 +      %if &onobs %then %do;
19731 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19732 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19734 +         data &EM_USER_OUTOBSIMP;
19735 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19736 +           if _a;
19737 +           by _INPUT1_;
19738 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19739 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19740 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19741 +                   %end;
19742 +                   ;
19743 +         run;
19744 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19745 +      %end;
19746 +   %end;
19748 +  %end;
19750 +  /* create dataset to support tree diagram and icicle plot */
19751 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19752 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19754 +  /* display tree diagram */
19755 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19756 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19758 +  /* display icicle diagram */
19759 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19760 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19762 +  /* Leaf Statistics Plot */
19763 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19765 +  /* print leaf information to output window */
19766 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19768 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19769 +       by descending N;
19770 +     run;
19772 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19773 +     %local vn;
19774 +     data _null_;
19775 +       set t (obs=2) end=eof;
19776 +       if eof then do;
19777 +         call symput("vn", strip(put(vn, best.)));
19778 +       end;
19779 +     run;
19781 +     data t;
19782 +       set t;
19783 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19784 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19785 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19786 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19787 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19788 +       %end;
19789 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19790 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19791 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19792 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19793 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19794 +          %end;
19795 +       %end;
19796 +       ;
19797 +     run;
19799 +     /* determine if rase is found in t */
19800 +    %let dsid=%sysfunc(open(t,i));
19801 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19802 +    %let rc=%sysfunc(close(&dsid));
19804 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19805 +     proc print data=t noobs label;
19806 +       where tprob ne .;
19807 +       var node depth N tprob
19808 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19809 +         %if "&vn" ne "." %then %do;
19810 +           VN
19811 +         %end;
19812 +         vprob
19813 +       %end;
19814 +       %if &raseexists %then %do;
19815 +            RASE
19816 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19817 +              VRASE
19818 +            %end;
19819 +       %end;
19820 +       ;
19821 +     run;
19822 +     title10;
19823 +  %end;
19825 +  /* create plots that are done during training of node */
19826 +  /* display iterative plot, including reference line */
19827 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19828 +   /* %if &nleaves eq  %then %do; */
19829 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19830 +      data _null_;
19831 +        set &EM_USER_OUTTOPOLOGY end=eof;
19832 +        if eof then do;
19833 +          call symput('nleaves', LEAF);
19834 +        end;
19835 +      run;
19836 +   /* %end; */
19838 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19839 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19840 +  %end;
19842 +  /* display leaf statistics */
19843 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19845 +  /* stats by node if multiple targets = Y */
19846 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19847 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19848 +    data &EM_USER_OUTSTATS;
19849 +      set &EM_USER_OUTSTATS;
19851 +     * if STATNAME="TARGET" then delete;
19852 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19853 +      drop leaf;
19854 +    run;
19855 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19857 +  %end;
19858 +  %else %do;
19859 +    /* add outstats and outdescribe to spk but not results */
19860 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19861 +  %end;
19863 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
      


NOTE: There were 90 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 90 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           1.98 seconds
      cpu time            0.06 seconds
      


NOTE: There were 6 observations read from the data set EMWS3.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
      


NOTE: There were 26 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 26 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           1.70 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      


NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 7 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 386 observations read from the data set EMWS3.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      


NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 90 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 105 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 105 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 30 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 30 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 15 observations read from the data set WORK.TEMPN.
NOTE: There were 15 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 15 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           1.18 seconds
      cpu time            0.01 seconds
      


NOTE: There were 105 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 30 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 15 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 15 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 15 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: There were 8 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           1.68 seconds
      cpu time            0.03 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 15 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 15 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 15 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 8 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 15 observations read from the data set EMWS3.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

19864  
19865  *------------------------------------------------------------*;
19866  * End REPORT: Tree2;
19867  *------------------------------------------------------------*;

19868  /* Reset EM Options */
19869  options formchar="|----|+|---+=|-/\<>*";
19870  options nocenter ls=256 ps=10000;
19871  goptions reset=all device=GIF NODISPLAY;

19872  proc sort data=WORK.EM_USER_REPORT;
19873  by ID VIEW;
19874  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19875  proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19876  by NAME;
19877  run;

NOTE: There were 99 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
      

19878  proc sort data=EMWS3.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19879  by NAME;
19880  run;

NOTE: There were 99 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
      

19881  data WORK.ASSESS_META;
19882  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19883  by NAME;
19884  run;

NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19885  data EM_temp_assessMeta;
19886  set EMWS3.Tree2_CMeta_TRAIN;
19887  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19888  run;

NOTE: There were 12 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.00 seconds
      

19889  data EM_temp_assessdata;
19890  set EMWS3.Tree2_TRAIN(keep=
19891  F_RESPOND
19892  I_RESPOND
19893  P_RESPOND0
19894  P_RESPOND1
19895  Q_RESPOND0
19896  Q_RESPOND1
19897  R_RESPOND0
19898  R_RESPOND1
19899  U_RESPOND
19900  V_RESPOND0
19901  V_RESPOND1
19902  _WARN_
19903  RESPOND
19904  );
19905  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           20.71 seconds
      cpu time            0.23 seconds
      
NOTE: There were 32235 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS3.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           20.92 seconds
      cpu time            0.25 seconds
      
















24190   data EM_temp_assessMeta;
24191   set EMWS3.Tree2_CMeta_TRAIN;
24192   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24193   run;

NOTE: There were 12 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.00 seconds
      

24194   data EM_temp_assessdata;
24195   set EMWS3.Tree2_VALIDATE(keep=
24196   F_RESPOND
24197   I_RESPOND
24198   P_RESPOND0
24199   P_RESPOND1
24200   Q_RESPOND0
24201   Q_RESPOND1
24202   R_RESPOND0
24203   R_RESPOND1
24204   U_RESPOND
24205   V_RESPOND0
24206   V_RESPOND1
24207   _WARN_
24208   RESPOND
24209   );
24210   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_VALIDATE.VIEW used (Total process time):
      real time           10.46 seconds
      cpu time            0.15 seconds
      
NOTE: There were 16121 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS3.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           10.65 seconds
      cpu time            0.17 seconds
      
















28504   %let _cn = %sysfunc(getoption(CENTER));
28505   options nocenter;
28506   proc print data=EMWS3.Tree2_EMREPORTFIT noobs label;
28507   var STAT LABEL TRAIN
28508   VALIDATE
28509   ;
28510   by TARGET TARGETLABEL;
28511   title9 ' ';
28512   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28513   run;

NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.25 seconds
      cpu time            0.01 seconds
      

28514   title10;
28515   options &_cn;

28516   proc sort data=EMWS3.Tree2_EMCLASSIFICATION nothreads;
28517   by DATAROLE TARGET TARGETLABEL;
28518   run;

NOTE: There were 7 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE2_EMCLASSIFICATION has 7 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           2.20 seconds
      cpu time            0.01 seconds
      

28519   %let _cn = %sysfunc(getoption(CENTER));
28520   options nocenter;
28521   proc print data=EMWS3.Tree2_EMCLASSIFICATION noobs label;
28522   var from into pct_row pct_col count percent
28523   ;
28524   by DATAROLE TARGET TARGETLABEL;
28525   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28526   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28527   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28528   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28529   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28530   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28531   where _TYPE_='PREDICTION';
28532   title9 ' ';
28533   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28534   run;

NOTE: There were 7 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.26 seconds
      cpu time            0.01 seconds
      

28535   title9;
28536   title10;
28537   options &_cn;

28538   %let _cn = %sysfunc(getoption(CENTER));
28539   options nocenter;
28540   data EMWS3.Tree2_EMEVENTREPORT;
28541   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28541 !  8;
28542   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28542 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28542 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28542 ! FALSEEVENT
28543   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28543 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28543 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28544      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28545   FALSEEVENT=0;
28546   FALSENEVENT=0;
28547   TRUEEVENT=0;
28548   TRUENEVENT=0;
28549   set EMWS3.Tree2_EMEVENTREPORT;
28550   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           1.92 seconds
      cpu time            0.06 seconds
      

28551   proc print data=EMWS3.Tree2_EMEVENTREPORT noobs label;
28552   title9 ' ';
28553   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28554   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28555   run;

NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.28 seconds
      cpu time            0.00 seconds
      

28556   title10;
28557   options &_cn;

28558   proc datasets library=EMWS3 nolist;
28559   modify Tree2_EMRANK;
28560   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28561   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28562   run;

NOTE: MODIFY was successful for EMWS3.TREE2_EMRANK.DATA.
28563   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.89 seconds
      cpu time            0.03 seconds
      

28564   %let _cn = %sysfunc(getoption(CENTER));
28565   options nocenter;
28566   proc print data=EMWS3.Tree2_EMRANK label noobs;
28567   var
28568   decile gain lift liftc resp respc N _meanP_;
28569   by
28570   notsorted DATAROLE
28571   notsorted TARGET
28572   notsorted TARGETLABEL
28573   ;
28574   title9 ' ';
28575   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28576   run;

NOTE: There were 40 observations read from the data set EMWS3.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.20 seconds
      cpu time            0.00 seconds
      

28577   title10;
28578   options &_cn;

28579   proc datasets library=EMWS3 nolist;
28580   modify Tree2_EMSCOREDIST;
28581   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28582   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28583   run;

NOTE: MODIFY was successful for EMWS3.TREE2_EMSCOREDIST.DATA.
28584   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.85 seconds
      cpu time            0.01 seconds
      

