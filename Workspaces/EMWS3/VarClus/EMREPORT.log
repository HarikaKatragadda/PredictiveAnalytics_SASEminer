*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                10:48:35
*------------------------------------------------------------*
25704   %let EMEXCEPTIONSTRING=;
25705   *------------------------------------------------------------*;
25706   * REPORT: VarClus;
25707   *------------------------------------------------------------*;
25708   %let EM_ACTION = REPORT;
25709   %let syscc = 0;
25710   
25711   %macro main;
25712   
25713      filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
25714      %include temp;
25715      filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
25716      %include temp;
25717      filename temp;
25718   
25719     %SetProperties;
25720   
25721      %if %upcase(&EM_ACTION) = CREATE %then %do;
25722          filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
25723          %include temp;
25724          filename temp;
25725          %create;
25726      %end;
25727      %else
25728      %if %upcase(&EM_ACTION) = TRAIN %then %do;
25729           filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
25730              %include temp;
25731              filename temp;
25732              %train;
25733      %end;
25734      %else
25735      %if %upcase(&EM_ACTION) = SCORE %then %do;
25736              filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
25737              %include temp;
25738              filename temp;
25739              %score;
25740      %end;
25741      %else
25742      %if %upcase(&EM_ACTION) = REPORT %then %do;
25743              filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
25744              %include temp;
25745              filename temp;
25746              %report;
25747      %end;
25748      /*
25749      %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
25750          %put 'OPENING TABLE';
25751      %end;
25752      %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
25753          %put 'CLOSE TABLE';
25754      %end;
25755      */
25756   %mend main;
25757   %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
25758  +
25759  +/* Initialize property macro variables */
25760  +%macro SetProperties;
25761  +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
25762  +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
25763  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
25764  +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
25765  +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
25766  +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
25767  +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
25768  +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
25769  +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
25770  +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
25771  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
25772  +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
25773  +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
25774  +
25775  +%mend SetProperties;
25776  +
25777  +%Macro MakeDummyVariables(indata=,
25778  +                          outvar=,
25779  +                          outdata=,
25780  +                          fileref=,
25781  +                          recreatecmeta=N, /* optional */
25782  +                          incmeta=,     /* optional */
25783  +                          outcmeta=,    /* optional */
25784  +                          ndummyvars=_ndummyvars
25785  +                          );
25786  +    %global &ndummyvars;
25787  +
25788  +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
25789  +       class
25790  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
25791  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
25792  +    ;
25793  +    run;
25794  +    %let &ndummyvars = 0;
25795  +    data _null_;
25796  +    %let dsid = %sysfunc(open(work._classout));
25797  +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
25798  +    %let dsid = %sysfunc(close(&dsid));
25799  +    run;
25800  +
25801  +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
25802  +       input
25803  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
25804  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
25805  +        / level=nominal stdize=no;
25806  +       make outvar = &outvar;
25807  +       score data = &indata out =&outdata;
25808  +       code  file=  "&fileref";
25809  +    run;
25810  +    %if &recreatecmeta eq Y %then %do;
25811  +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
25812  +    data _tmpds;
25813  +        set _tmpds;
25814  +           ROLE = 'INPUT';
25815  +           LEVEL = 'INTERVAL';
25816  +           CREATOR='DMZIP';
25817  +           if NAME = '_TYPE_' then delete;
25818  +    run;
25819  +    data &outcmeta;
25820  +         set &incmeta _tmpds;
25821  +    run;
25822  +    %end;
25823  +    proc datasets lib=work nolist;
25824  +      delete  _dmdbdat _dmdbcat _classout
25825  +    %if &recreatecmeta eq Y %then %do;
25826  +    _tmpds
25827  +    %end;
25828  +    ;
25829  +    quit;
25830  +%Mend MakeDummyVariables;
25831  +
25832  +/*--- Determine Optimal Number of Cluster ----
25833  +%macro FindClusNum(statds=, groupds=, minvariation=);
25834  +   %global optnclus;
25835  +   data varclus_tmp(drop=_NAME_);
25836  +      set &statDs;
25837  +      where _type_ ='PROPOR';
25838  +   run;
25839  +   proc sort data=varclus_tmp;
25840  +      by _NCL_;
25841  +   run;
25842  +   proc transpose data=varclus_tmp out=varclus_tmp;
25843  +      by _NCL_;
25844  +      var %EM_INTERVAL_INPUT
25845  +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25846  +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
25847  +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
25848  +          %do i = 2 %to &nvar;
25849  +          %let varname = %sysfunc(varname(&dsid, &i));
25850  +          &varname
25851  +          %end;
25852  +      %end;
25853  +   ;
25854  +   run;
25855  +
25856  +   %if &minVariation eq %then %do;
25857  +       %let minVariation = &EM_PROPERTY_MINVARIATION;
25858  +   %end;
25859  +   %if ^(0<&minVariation<100) %then %do;
25860  +       %let minVariation = 90;
25861  +   %end;
25862  +
25863  +   data _null_;
25864  +      set varclus_tmp end=eof;
25865  +      by _NCL_;
25866  +      retain flag 0;
25867  +      if first._ncl_ then flag=0;
25868  +      if .<col1 < &minVariation then flag=1;
25869  +      if last._ncl_ and ^flag then do;
25870  +         call symput('OPTNCL', _ncl_);
25871  +         stop;
25872  +      end;
25873  +     if eof then call symput('OPTNCL', _ncl_);
25874  +   run;
25875  +
25876  +   %let optnclus = &OPTNCL;
25877  +
25878  +   data varclus_tmp(drop=_NCL_ _NAME_);
25879  +      set &statDs;
25880  +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
25881  +   run;
25882  +   proc sort data=varclus_tmp;
25883  +      by _TYPE_;
25884  +   run;
25885  +   proc transpose data=varclus_tmp out=varclus_tmp;
25886  +      by _TYPE_;
25887  +   run;
25888  +   proc sort data=varclus_tmp;
25889  +      by _name_ _type_;
25890  +   run;
25891  +
25892  +  proc transpose data=varclus_tmp out=&groupds;
25893  +      by _NAME_;
25894  +   run;
25895  +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
25896  +      by Cluster descending Rsquare;
25897  +      where Cluster ne 0;
25898  +   run;
25899  +   proc datasets lib=work nolist mt=(DATA VIEW);
25900  +      delete varclus_tmp;
25901  +   run;
25902  +   quit;
25903  +%mend findClusNum;
25904  +*/
25905  +
25906  +%macro getNclusfromTrain(inoutstat=, nc=);
25907  +%global &nc;
25908  +data _null_;
25909  +    set &inoutstat end=eof;
25910  +    if eof then do;
25911  +    call symput("&nc", _ncl_);
25912  +    end;
25913  +run;
25914  +%mend  getNclusfromTrain;
25915  +
25916  +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
25917  +
25918  +     *--- Build Code to Modify Metadata ---*;
25919  +     filename X "&deltacodefile";
25920  +     data _null_;
25921  +        FILE X;
25922  +        set &groupds end=eof;
25923  +        /*by Cluster;*/
25924  +         if _N_=1 then do;
25925  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
25926  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
25927  +           %end;
25928  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
25929  +           put "if upcase(strip(NAME)) in (";
25930  +        end;
25931  +        if Strip(upcase(Selected)) eq 'YES' then do;
25932  +           string = '"'!!trim(left(VARIABLE))!!'"';
25933  +           put string;
25934  +        end;
25935  +        if eof then do;
25936  +           put ') then ROLE="INPUT";';
25937  +           put 'else ROLE="REJECTED";';
25938  +           put 'end;';
25939  +
25940  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
25941  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
25942  +           %end;
25943  +        end;
25944  +     run;
25945  +     quit;
25946  +
25947  +     filename X;
25948  +
25949  +     quit;
25950  +%mend MakeDeltaCode;
25951  +
25952  +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
25953  +    %if ^%sysfunc(exist(&statds)) %then %do;
25954  +         %goto doendc;
25955  +    %end;
25956  +
25957  +    data &corrds(drop=_TYPE_ _NCL_) ;
25958  +       set &statds;
25959  +       where _type_ eq 'CORR' ;
25960  +    run ;
25961  +    proc sort data=&corrds;
25962  +       by _NAME_ ;
25963  +    run ;
25964  +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
25965  +      BY _NAME_ ;
25966  +    run ;
25967  +    data &corrplotds;
25968  +       length _Y_ $100;
25969  +       set &corrplotDs;
25970  +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
25971  +    run ;
25972  +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
25973  +       set &corrplotds;
25974  +       where _LABEL_ ne '' ;
25975  +       keep _TMP_ _LABEL_ ;
25976  +    run ;
25977  +    data _null_;
25978  +       nobs=0;
25979  +       dsid = open('varclus_match');
25980  +       if dsid then do;
25981  +          nobs = attrn(dsid, 'NOBS');
25982  +          dsid = close(dsid);
25983  +       end;
25984  +       call symput ('CORR_NOBS', nobs);
25985  +    run;
25986  +    %if &corr_nobs %then %do;
25987  +        proc sort data=varclus_match;
25988  +           by _name_;
25989  +        run ;
25990  +        proc sort data=&corrplotds;
25991  +           by _name_;
25992  +        run ;
25993  +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
25994  +           merge varclus_match &corrplotds;
25995  +           by _NAME_ ;
25996  +           if _X_ eq '' then _X_=_NAME_ ;
25997  +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
25998  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
25999  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
26000  +
26001  +       run ;
26002  +    %end;
26003  +    %else %do;
26004  +        proc sort data=&corrplotds;
26005  +           by _name_;
26006  +        run ;
26007  +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
26008  +           set &corrplotds;
26009  +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26010  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26011  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
26012  +
26013  +        run ;
26014  +    %end;
26015  +    proc sort data=&corrplotds;
26016  +       by _X_ _Y_;
26017  +    run ;
26018  +    proc datasets lib=work nolist mt=(DATA VIEW);
26019  +       delete varclus_match;
26020  +    run;
26021  +    quit;
26022  +
26023  +%doendc:
26024  +
26025  +%mend MakeVarClusCorrData;
26026  +
26027  +%macro MakeStatPlotData(statds= , outstatplotds=);
26028  +   %if %sysfunc(exist(&statds)) %then %do;
26029  +
26030  +       data varclus_tmp(drop=_NAME_ _NCL_) ;
26031  +          set &statDs;
26032  +          where _type_ in('MEAN', 'STD', 'N');
26033  +       run ;
26034  +       proc transpose data=varclus_tmp out=&outstatplotds;
26035  +          id _TYPE_ ;
26036  +       run ;
26037  +       data &outstatplotds;
26038  +          set &outstatplotds(obs=1000);
26039  +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
26040  +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
26041  +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
26042  +          else SCALEDSTD= STD ;
26043  +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
26044  +       run ;
26045  +       proc sort data=&outstatplotds;
26046  +          by descending SCALEDSTD ;
26047  +       run ;
26048  +       proc datasets lib=work nolist mt=(DATA VIEW);
26049  +          delete varclus_tmp;
26050  +       run;
26051  +       quit;
26052  +    %end;
26053  +
26054  +%mend MakeStatPlotData;
26055  +
26056  +
26057  +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
26058  +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
26059  +    data &EM_USER_OUTSTATSCORE;
26060  +          set &indata;
26061  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
26062  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
26063  +          if _TYPE_ = 'STD' then _NAME_='STD';
26064  +          DROP _TYPE_ _NCL_;
26065  +     run;
26066  +
26067  +     filename _file_  "&fileRef";
26068  +
26069  +     data _null_;
26070  +        FILE _file_ MOD;
26071  +        put ' ';
26072  +        put '/*-------------------------------------------------*/';
26073  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
26074  +        put '/*-------------------------------------------------*/';
26075  +        put ' ';
26076  +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
26077  +
26078  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
26079  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
26080  +
26081  +        %let k = 1;
26082  +        %do %while(^%sysfunc(fetch(&dsid)));
26083  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
26084  +                %if &k > 2 %then %do;
26085  +                 %let cn = %eval(&k-2);
26086  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
26087  +                %end;
26088  +                %let k = %eval(&k+1);
26089  +        %end;
26090  +
26091  +        %let rc = %sysfunc(rewind(&dsid));
26092  +
26093  +        %do i= 2 %to &nvar;
26094  +            %let _varname =  %sysfunc(varname(&dsid, &i));
26095  +            %do %while(^%sysfunc(fetch(&dsid)));
26096  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
26097  +                %if &_name = MEAN %then
26098  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
26099  +                %else %if &_name = STD %then
26100  +                %let _std = %sysfunc(getvarn(&dsid, &i));
26101  +                %else %do;
26102  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
26103  +                      %let abscoeff = %sysfunc(abs(&coeff));
26104  +                          %if &abscoeff >  0 %then %do;
26105  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
26106  +                           %end;
26107  +                 %end;
26108  +             %end;
26109  +             %let rc = %sysfunc(rewind(&dsid));
26110  +         %end;
26111  +
26112  +        %let dsid= %sysfunc(close(&dsid));
26113  +       run;
26114  +%mend CreateScoreCode;
26115  +
26116  +
26117  +
26118  +/*----------------------------------------------------------
26119  +    Instead of using %MakeRSquareData,
26120  +    %MakeVarClusResultTable at macro2.source is used
26121  + +----------------------------------------------------------*/
26122  +
26123  +
26124  +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
26125  +
26126  +/* modifying  from ods rsquare = data */
26127  +
26128  +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
26129  +    Length Cluster $16;
26130  +    length Variable $32;
26131  +    Length VariableLabel $64;
26132  +    set &indata; retain CurrentCluster;
26133  +    if NumberOfClusters ^= &ncluster then delete;
26134  +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
26135  +    CurrentCluster = Cluster;
26136  +   run;
26137  +proc sort data =&outdata ;
26138  +     by Cluster RsquareRatio;
26139  +run;
26140  +data _tmprsq(drop=index);
26141  +     set &outdata; by Cluster;
26142  +     if first.Cluster then do;
26143  +     index = strip(scan(Cluster,2 ));
26144  +     Variable = "Clus"||index;
26145  +     VariableLabel = "Cluster Component "||index;
26146  +     OwnCluster = 1;
26147  +     NextClosest = .;
26148  +     RsquareRatio = 0;
26149  +     output;
26150  +     end;
26151  +run;
26152  +
26153  +proc sort data = _tmprsq ;
26154  +     by Cluster RsquareRatio;
26155  +run;
26156  +data &outdata;
26157  +     set &outdata _tmprsq;
26158  +by Cluster;
26159  +run;
26160  +
26161  +
26162  +/* Just create the Selected variable with all YES */
26163  +
26164  +data &outdata;
26165  +    set &outdata; by cluster;
26166  +    length Selected $8;
26167  +    Selected = 'YES';
26168  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
26169  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
26170  +    rename OwnCluster = RSqWithClusterComp;
26171  +    rename NextClosest = RSqWithNextClusComp;
26172  +run;
26173  +
26174  +
26175  +/* Selected = Y/N will be done %score section -----
26176  +
26177  +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
26178  +data &outdata;
26179  +    set &outdata; by cluster;
26180  +    length Selected $8;
26181  +    if first.Cluster then Selected = 'YES';
26182  +    else Selected = 'NO';
26183  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
26184  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
26185  +    rename OwnCluster = RSqWithClusterComp;
26186  +    rename NextClosest = RSqWithNextClusComp;
26187  +run;
26188  +%end;
26189  +%else %do;
26190  +data &outdata;
26191  +    set &outdata; by cluster;
26192  +    if last.Cluster then Selected = 'YES';
26193  +    else Selected = 'NO';
26194  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
26195  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
26196  +    rename OwnCluster = RSqWithClusterComp;
26197  +    rename NextClosest = RSqWithNextClusComp;
26198  +run;
26199  +%end;
26200  +---------------------------------------------------------------*/
26201  +
26202  +%if %sysfunc(exist(&inClusRSquare)) %then %do;
26203  +/* to calculate NextClosestClusRsq */
26204  +proc transpose data = &inClusRSquare  out=_clusRsq;
26205  +      by cluster;
26206  +      run;
26207  +data _clusRsq;
26208  +     set _clusRsq;
26209  +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
26210  +run;
26211  +
26212  +proc sort data=_clusRsq;
26213  +    by cluster col1;
26214  +    run;
26215  +data _clusRsq(drop=_NAME_ _LABEL_);
26216  +     set _clusRsq; by cluster;
26217  +     if last.Cluster then output;
26218  +     label  COL1 = 'R-Sqaure with Next Cluster Component';
26219  +     rename COL1 = RSqWithNextClusComp;
26220  +     rename Cluster = Variable;
26221  +     label  Cluster = "Variable";
26222  +run;
26223  +
26224  +proc sort data =&outdata;
26225  +     by Variable;
26226  +run;
26227  +data &outdata;
26228  +    merge &outdata _clusRsq;
26229  +    by Variable;
26230  +run;
26231  +proc sort data =&outdata;
26232  +by Cluster  RsquareRatio;
26233  +run;
26234  +quit;
26235  +%end;
26236  +
26237  +proc datasets lib = work nolist;
26238  +     delete _tmprsq _clusRsq;
26239  +     run;
26240  +quit;
26241  +
26242  +%mend MakeRSquareData;
26243  +
26244  +
26245  +/*-------------------------------------------------------------------------*/
26246  +
26247  +
26248  +
26249  +%macro ModifyCorr(indata=,
26250  +                  outdata=,
26251  +                  rsquare = Y
26252  +                  );
26253  +    data corr_tmp;
26254  +        set &indata;
26255  +    run;
26256  +     proc sql;
26257  +           update &indata
26258  +           set
26259  +     %let dsid = %sysfunc(open(work.corr_tmp));
26260  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
26261  +          %do i = 4 %to &nvar;
26262  +          %let _name = %sysfunc(varname(&dsid, &i));
26263  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
26264  +            %else  %let _name_md = &_name;
26265  +            %if &i < &nvar %then %do;
26266  +               &_name = 1- &_name_md ,
26267  +            %end;
26268  +            %else %do;
26269  +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
26270  +            %end;
26271  +          %end;
26272  +      %let dsid= %sysfunc(close(&dsid));
26273  +
26274  +      select * from &indata;
26275  +      run;
26276  +      proc datasets lib = work nolist;
26277  +           delete corr_tmp;
26278  +      run;
26279  +      quit;
26280  +
26281  + %mend ModifyCorr;
26282  +
26283  + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
26284  +    data &outdata(drop= _NCL_  _TYPE_);
26285  +       set &indata;
26286  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
26287  +       rename _NAME_ = Cluster;
26288  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26289  +    run;
26290  +    %if &RSquare eq Y %then %do;
26291  +     data corr_tmp;
26292  +        set &outdata;
26293  +     run;
26294  +
26295  +     data &outdata(drop=i);
26296  +          set &outdata;
26297  +          %let dsid = %sysfunc(open(work.corr_tmp));
26298  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26299  +          %do i = 2 %to &nvar;
26300  +            %let _name = %sysfunc(varname(&dsid, &i));
26301  +            %let _name_md = &_name.**2;
26302  +                &_name = &_name_md;
26303  +          %end;
26304  +      %let dsid= %sysfunc(close(&dsid));
26305  +      run;
26306  +      proc datasets lib = work nolist;
26307  +           delete corr_tmp;
26308  +      run;
26309  +
26310  +    %end;
26311  +     quit;
26312  +%mend MakeClusStructCorrData;
26313  +
26314  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
26315  +    data &outdata(drop= _NCL_  _TYPE_);
26316  +       set &indata;
26317  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
26318  +       rename _NAME_ = Cluster;
26319  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26320  +    run;
26321  +    data corr_tmp;
26322  +        set &outdata;
26323  +    run;
26324  +
26325  +    %let dsid = %sysfunc(open(work.corr_tmp));
26326  +    %let nclus2= %eval(&ncluster+1);
26327  +    data &outdata;
26328  +         set &outdata;
26329  +          %do i = 2 %to &nclus2;
26330  +          %let i_1 = %eval(&i-1);
26331  +            %let _name = %sysfunc(varname(&dsid, &i));
26332  +            %let _newName = Clus&i_1;
26333  +                rename &_name = &_newName; ;
26334  +                *label &_name ="Cluster &i_1";
26335  +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
26336  +          %end;
26337  +          keep Cluster
26338  +          %do i = 2 %to &nclus2;
26339  +                %let _name = %sysfunc(varname(&dsid, &i));
26340  +                &_name
26341  +          %end;
26342  +          ;
26343  +    %let dsid= %sysfunc(close(&dsid));
26344  +     run;
26345  +     quit;
26346  +
26347  +    %if &RSquare eq Y %then %do;
26348  +
26349  +       data corr_tmp;
26350  +        set &outdata;
26351  +     run;
26352  +
26353  +     data &outdata(drop=i);
26354  +          set &outdata;
26355  +          %let dsid = %sysfunc(open(work.corr_tmp));
26356  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26357  +          %do i = 2 %to &nvar;
26358  +            %let _name = %sysfunc(varname(&dsid, &i));
26359  +            %let _name_md = &_name.**2;
26360  +                &_name = &_name_md;
26361  +          %end;
26362  +      %let dsid= %sysfunc(close(&dsid));
26363  +      run;
26364  +    %end;
26365  +
26366  +    %if &makeplotds eq Y %then %do;
26367  +     proc transpose data = &outdata
26368  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
26369  +          by cluster;
26370  +     run;
26371  +     data &plotds;
26372  +          set  &plotds;
26373  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26374  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26375  +     run;
26376  +     %end;
26377  +     proc datasets lib = work nolist;
26378  +           delete corr_tmp;
26379  +     run;
26380  +     quit;
26381  +%mend MakeInterClusCorrData;
26382  +
26383  +
26384  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
26385  +
26386  +data &outlink(drop = Selected);
26387  +     set &indata;
26388  +     LINKID = _N_;
26389  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
26390  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
26391  +run;
26392  +data &outnode(keep=NODEID TYPE LABEL);
26393  +    set &indata;
26394  +    length TYPE $16;
26395  +    rename Variable = NODEID;
26396  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
26397  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
26398  +    then  TYPE = "CLUSTER";
26399  +    else  TYPE="VARIABLE";
26400  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
26401  +run;
26402  +quit;
26403  +%mend MakeClusConstellData;
26404  +
26405  +
26406  +
26407  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
26408  +
26409  +data &outlink(drop = Selected);
26410  +     set &indata;
26411  +     LINKID = _N_;
26412  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
26413  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
26414  +run;
26415  +data &outnode(keep=NODEID TYPE LABEL);
26416  +    set &indata;
26417  +    length TYPE $16;
26418  +    rename Variable = NODEID;
26419  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
26420  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
26421  +    then  TYPE = "CLUSTER";
26422  +    else  TYPE="VARIABLE";
26423  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
26424  +run;
26425  +quit;
26426  +%mend MakeClusConstellData;
26427  +
26428  +
26429  +/*--- This will work only when inds is not a view data -------
26430  +
26431  +%macro getNVarNObs(inds=, nvar=, nobs=);
26432  +
26433  +    %global &nvar;
26434  +    %global &nobs;
26435  +    data _null_;
26436  +         dsid = open("&inds");
26437  +         nv = attrn(dsid, 'NVAR');
26438  +         no = attrn(dsid, 'NOBS');
26439  +         dsid = close(dsid);
26440  +         call symput("&nvar", nv);
26441  +         call symput("&nobs", no);
26442  +    run;
26443  +    quit;
26444  +%mend  getNVarNObs;
26445  +
26446  ++---------------------------------------------------------------*/
26447  +
26448  +
26449  +%macro getNVar(inds=, nvar=);
26450  +    %global &nvar;
26451  +    data _null_;
26452  +         dsid = open("&inds");
26453  +         nv = attrn(dsid, 'NVAR');
26454  +         dsid = close(dsid);
26455  +         call symput("&nvar", nv);
26456  +    run;
26457  +    quit;
26458  +%mend  getNVar;
26459  +
26460  +
26461  +
26462  +%macro getNObs(inds=, nobs=);
26463  +    %global &nobs;
26464  +    data _null_;
26465  +        set &inds end=eof;
26466  +        if eof then call symput("&nobs", _N_);
26467  +    run;
26468  +    quit;
26469  +%mend  getNObs;
26470  +
26471  +%Macro CreateVarclusMeta(trainnum=);
26472  +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
26473  +    data &EM_USER_VARCLUSMETA;
26474  +         length TrainNum 8.;
26475  +         length NewTrain $8;
26476  +         length NGCluster 8.;
26477  +         length ExportedComp $16;
26478  +         length HideVariable $8;
26479  +         TrainNum = &trainnum;
26480  +         NewTrain = "Y";
26481  +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
26482  +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
26483  +         NGCluster = 0; /* zero means no twostage */
26484  +   run;
26485  +   quit;
26486  +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
26487  +
26488  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
26489  +    data &outdata(drop= _NCL_  _TYPE_);
26490  +       set &indata;
26491  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
26492  +       %if &globalclusid ne %then %do;
26493  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
26494  +       rename _NAME_ = Cluster;
26495  +       %end;
26496  +       %else %do;
26497  +        _NAME_ = upcase(_NAME_);
26498  +       rename _NAME_ = Cluster;
26499  +       %end;
26500  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26501  +    run;
26502  +    data corr_tmp;
26503  +        set &outdata;
26504  +    run;
26505  +
26506  +    %let dsid = %sysfunc(open(work.corr_tmp));
26507  +    %let nclus2= %eval(&ncluster+1);
26508  +    data &outdata;
26509  +         set &outdata;
26510  +          %do i = 2 %to &nclus2;
26511  +          %let i_1 = %eval(&i-1);
26512  +            %let _name = %sysfunc(varname(&dsid, &i));
26513  +            %if &globalclusid ne %then
26514  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
26515  +                     rename &_name = &_newName;
26516  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
26517  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
26518  +                %end;
26519  +            %else
26520  +                %do; %let _newName = CLUS&i_1;
26521  +                     rename &_name = &_newName;
26522  +                     *label &_name ="Cluster &i_1";
26523  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
26524  +                %end;
26525  +          %end;
26526  +          keep Cluster
26527  +          %do i = 2 %to &nclus2;
26528  +                %let _name = %sysfunc(varname(&dsid, &i));
26529  +                &_name
26530  +          %end;
26531  +          ;
26532  +    %let dsid= %sysfunc(close(&dsid));
26533  +     run;
26534  +     quit;
26535  +
26536  +    %if &RSquare eq Y %then %do;
26537  +
26538  +       data corr_tmp;
26539  +        set &outdata;
26540  +     run;
26541  +
26542  +     data &outdata;
26543  +          set &outdata;
26544  +          %let dsid = %sysfunc(open(work.corr_tmp));
26545  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26546  +          %do i = 2 %to &nvar;
26547  +            %let _name = %sysfunc(varname(&dsid, &i));
26548  +            %let _name_md = &_name.**2;
26549  +                &_name = &_name_md;
26550  +          %end;
26551  +      %let dsid= %sysfunc(close(&dsid));
26552  +      run;
26553  +    %end;
26554  +
26555  +    %if &makeplotds eq Y %then %do;
26556  +     proc transpose data = &outdata
26557  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
26558  +          by cluster;
26559  +     run;
26560  +     data &plotds;
26561  +          set  &plotds;
26562  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26563  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
26564  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
26565  +     run;
26566  +     %end;
26567  +     proc datasets lib = work nolist;
26568  +           delete corr_tmp;
26569  +     run;
26570  +     quit;
26571  +%mend MakeInterClusCorrData;
26572  +
26573  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
26574  +    data _tmpds(drop= _NCL_);
26575  +       set &indata;
26576  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
26577  +       %if &globalclusid ne %then %do;
26578  +           _NAME_ = "GC&globalclusid.";
26579  +       rename _NAME_ = Cluster;
26580  +       %end;
26581  +       %else %do;
26582  +        _NAME_ = "CLUS";
26583  +        rename _NAME_ = Cluster;
26584  +       %end;
26585  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
26586  +    run;
26587  +    proc transpose data =_tmpds out =&outdata;
26588  +    run;
26589  +
26590  +    data &outdata(drop=COL1);
26591  +        %if &globalclusid ne %then %do;
26592  +        length GCluster $16;
26593  +        %end;
26594  +        length Cluster $32;
26595  +        length _NAME_ $32;
26596  +         set &outdata;
26597  +         _NAME_ = upcase(_NAME_);
26598  +         rename _NAME_=Variable;
26599  +         *label _NAME_="Variable";
26600  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26601  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26602  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26603  +
26604  +         %if &globalclusid ne %then %do;
26605  +          GCluster = "GC&globalclusid";
26606  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
26607  +         %end;
26608  +         %else %do;
26609  +         Cluster = "CLUS"||strip(COL1);
26610  +        %end;
26611  +         rename COL2 = RSqWithOwnClusComp;
26612  +         *label COL2 = "R-Square With Own Cluster Component";
26613  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
26614  +
26615  +   run;
26616  +   proc sort data =&outdata;
26617  +        by Cluster RSqWithOwnClusComp;
26618  +   run;
26619  +   proc datasets lib = work nolist;
26620  +           delete _tmpds;
26621  +   run;
26622  +   quit;
26623  +%mend MakeOwnRSquare;
26624  +
26625  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
26626  +    data &outdata(drop= _NCL_  _TYPE_);
26627  +       %if &globalclusid ne %then %do;
26628  +        length GCluster $16;
26629  +        %end;
26630  +       set &indata;
26631  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
26632  +       %if &globalclusid ne %then %do;
26633  +         GCluster = "GC&globalclusid";
26634  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
26635  +         rename _NAME_ = Cluster;
26636  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26637  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26638  +
26639  +       %end;
26640  +       %else %do;
26641  +         _NAME_ = upcase(_NAME_);
26642  +         rename _NAME_ = Cluster;
26643  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26644  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26645  +
26646  +       %end;
26647  +     run;
26648  +    %if &RSquare eq Y %then %do;
26649  +     data corr_tmp;
26650  +          set &outdata;
26651  +     run;
26652  +     %let istart = 2;
26653  +     %if &globalclusid ne %then %let istart = 3;
26654  +     data &outdata;
26655  +          set &outdata;
26656  +          %let dsid = %sysfunc(open(work.corr_tmp));
26657  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26658  +          %do i =&istart %to &nvar;
26659  +            %let _name = %sysfunc(varname(&dsid, &i));
26660  +            %let _name_md = &_name.**2;
26661  +                &_name = &_name_md;
26662  +          %end;
26663  +      %let dsid= %sysfunc(close(&dsid));
26664  +      run;
26665  +      proc datasets lib = work nolist;
26666  +           delete corr_tmp;
26667  +      run;
26668  +    %end;
26669  +     quit;
26670  +%mend MakeClusStructCorrData;
26671  +
26672  +/*
26673  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
26674  +*/
26675  +
26676  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
26677  +
26678  +     /* The indata should be the outdata
26679  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
26680  +
26681  +     proc sort data =&indata out=_tmpclusRsq;
26682  +     by cluster;
26683  +     run;
26684  +
26685  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
26686  +      by cluster;
26687  +     run;
26688  +
26689  +     proc sort data=_tmpclusRsq;
26690  +        by _NAME_ COL1;
26691  +     run;
26692  +
26693  +     data _tmpclusRsq;
26694  +         length _NAME_ $32;
26695  +         set _tmpclusRsq; by _NAME_;
26696  +          _NAME_ = upcase(_NAME_);
26697  +          %if &ncluster ne 1 %then %do;
26698  +             if last._NAME_ then delete;
26699  +          %end;
26700  +          %else %do;
26701  +             COL1 = 0;
26702  +          %end;
26703  +     run;
26704  +     /* need to sort again */
26705  +     proc sort data=_tmpclusRsq;
26706  +        by _NAME_ COL1;
26707  +     run;
26708  +
26709  +     data &outdata;
26710  +         set _tmpclusRsq; by _NAME_;
26711  +         Cluster = upcase(Cluster);
26712  +         if last._NAME_ then output;
26713  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
26714  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
26715  +         rename COL1 = RSqWithNextClusComp;
26716  +         Cluster = upcase(Cluster);
26717  +         rename Cluster = ClosestCluster;
26718  +         *label  Cluster = "Next Closest Cluster";
26719  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
26720  +         rename _NAME_ = Variable;
26721  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26722  +    run;
26723  +
26724  +
26725  +    %if &globalclusid ne %then %do;
26726  +    data &outdata;
26727  +       length GCluster $16;
26728  +       set &outdata;
26729  +       GCluster = "GC&globalclusid";
26730  +       run;
26731  +    %end;
26732  +    proc datasets lib = work nolist;
26733  +           delete _tmpclusRsq;
26734  +    run;
26735  +    quit;
26736  +%mend FindNextClosestClusByVar;
26737  +
26738  +
26739  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
26740  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
26741  +     proc sort data =&indata out=_tmpclusRsq;
26742  +     by cluster;
26743  +     run;
26744  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
26745  +     by cluster;
26746  +     run;
26747  +     proc sort data=_tmpclusRsq;
26748  +        by _NAME_ col1;
26749  +     run;
26750  +     data _tmpclusRsq;
26751  +         length _NAME_ $32;
26752  +         set _tmpclusRsq; by _NAME_;
26753  +          _NAME_ = upcase(_NAME_);
26754  +          %if &ncluster ne 1 %then %do;
26755  +             if last._NAME_ then delete;
26756  +          %end;
26757  +          %else %do;
26758  +             COL1 = 0;
26759  +          %end;
26760  +     run;
26761  +     data &outdata;
26762  +         set _tmpclusRsq; by _NAME_;
26763  +         Cluster = upcase(Cluster);
26764  +         if last._NAME_ then output;
26765  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
26766  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
26767  +         rename COL1 = RSqWithNextClusComp;
26768  +         Cluster = upcase(Cluster);
26769  +         rename Cluster = ClosestCluster;
26770  +         *label  Cluster = "Next Closest Cluster";
26771  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
26772  +         rename _NAME_ = Variable;
26773  +         *label  _NAME_ = "Variable";
26774  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
26775  +
26776  +    run;
26777  +    %if &globalclusid ne %then %do;
26778  +    data &outdata;
26779  +       length GCluster $16;
26780  +       set &outdata;
26781  +       GCluster = "GC&globalclusid";
26782  +       run;
26783  +    %end;
26784  +
26785  +    proc datasets lib = work nolist;
26786  +           delete _tmpclusRsq;
26787  +    run;
26788  +
26789  +    quit;
26790  +%mend FindNextClosestClusByCluster;
26791  +
26792  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
26793  +/*----
26794  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
26795  +-----------*/
26796  +
26797  +proc sort data =&indata1;
26798  +    by Variable;
26799  +run;
26800  +proc sort data =&indata2;
26801  +    by Variable;
26802  +run;
26803  +data &outdata;
26804  +    merge &indata1 &indata2;
26805  +    by Variable;
26806  +    length Type $16;
26807  +    Type = 'Variable';
26808  +    *label Type ='Type';
26809  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
26810  +run;
26811  +
26812  +
26813  +data &indata3;
26814  +    set  &indata3 ;
26815  +    length RSqWithOwnClusComp 8.;
26816  +    Cluster = Variable;
26817  +    RSqWithOwnClusComp = 1;
26818  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
26819  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
26820  +    length Type $16;
26821  +    Type = 'ClusterComp';
26822  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
26823  +
26824  +;
26825  +run;
26826  +
26827  +proc sort data=&outdata;
26828  +    by Cluster;
26829  +run;
26830  +proc sort data =&indata3;
26831  +    by Cluster;
26832  +run;
26833  +
26834  +data &outdata;
26835  +     set &outdata &indata3;
26836  +     by Cluster;
26837  +run;
26838  +
26839  +
26840  +/* Create the Selected variable with all YES */
26841  +
26842  +data &outdata;
26843  +     set &outdata;
26844  +     length RsqRatio 8.;
26845  +     length Selected $8;
26846  +     *label RSqRatio = "1-R**2 Ratio";
26847  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
26848  +     *label Selected = "Variable Selected";
26849  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
26850  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
26851  +     Selected ='YES';
26852  +     rename _LABEL_ = Label;
26853  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
26854  +run;
26855  +
26856  +
26857  +/*----  Selected = Y/N will be assigened at the %score                   -------+
26858  +        Just create the Selected variable with all YES at the step above
26859  + +------------------------------------------------------------------------------+
26860  +
26861  +proc sort data=&outdata;
26862  +    by Cluster RsqRatio;
26863  +run;
26864  +
26865  +%if &selectedcomp eq CLUSTERCOMP %then %do;
26866  +data &outdata;
26867  +     set &outdata; by Cluster;
26868  +     length Selected $8;
26869  +     label Selected = "Variable Selected";
26870  +     if  first.Cluster then Selected ='Yes';
26871  +     else Selected = 'No';
26872  +    run;
26873  +%end;
26874  +%else %do;
26875  +data &outdata(drop = _var _varchange);
26876  +     set &outdata; retain _var 0; by Cluster;
26877  +     length Selected $8;
26878  +     label Selected = "Variable Selected";
26879  +     if first.Cluster then  _varchange = 0;
26880  +     else _varchange =1;
26881  +     if _var ne _varchange then  Selected  = 'Yes';
26882  +     else Selected = 'No';
26883  +     if last.cluster then  _var = 0;
26884  +     else _var = _varchange;
26885  +run;
26886  +%end;
26887  +
26888  +--------------------------------------------------------------*/
26889  +
26890  +quit;
26891  +%mend MakeVarClusResultTable;
26892  +
26893  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
26894  +     proc sort data =&indata;
26895  +        by cluster;
26896  +     run;
26897  +     proc transpose data =&indata
26898  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
26899  +          by cluster;
26900  +     run;
26901  +     data &outdata;
26902  +          set  &outdata;
26903  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26904  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
26905  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
26906  +     run;
26907  +     %if &globalclusid ne %then %do;
26908  +     data &outdata;
26909  +          Length GCluster $16;
26910  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
26911  +          set  &outdata;
26912  +          GCluster ="GC&globalclusid.";
26913  +          run;
26914  +     %end;
26915  +
26916  +%Mend MakePlotDataFromCorrTable;
26917  +
26918  +
26919  +%macro MakeCorrelation(indata=,
26920  +                       outstat=_tmpoutstat,
26921  +                       corrmatrix=N,
26922  +                       outcorr=_tmpoutcorr,
26923  +                       includeclassvar=N,
26924  +                       target=,
26925  +                       freq=,
26926  +                       weight=);
26927  +   %if &target eq  %then %do;
26928  +
26929  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
26930  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
26931  +       %if &includeclassvar eq Y %then %do;
26932  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
26933  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
26934  +          %do i = 2 %to &nvar;
26935  +          %let varname = %sysfunc(varname(&dsid, &i));
26936  +          &varname
26937  +          %end;
26938  +       %end;
26939  +       ;
26940  +      %if &freq ne  %then %do;
26941  +          freq &freq;
26942  +      %end;
26943  +      %if &weight ne  %then %do;
26944  +          weight &weight;
26945  +      %end;
26946  +
26947  +      run;
26948  +      %if &corrmatrix eq Y %then %do;
26949  +      data  &outcorr (drop = _NCL_ _TYPE_);
26950  +           set  &outstat ;
26951  +           if _TYPE_ ='CORR' then output;
26952  +      run;
26953  +      %end;
26954  +    %end;
26955  +    %else %do;
26956  +       proc corr data=&indata outp=&outstat noprint;
26957  +            var
26958  +       %let dsid = %sysfunc(open(&indata));
26959  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
26960  +          %do i = 1 %to &nvar;
26961  +              %let _name = %sysfunc(varname(&dsid, &i));
26962  +              %if &_name ne &target %then;
26963  +              &_name
26964  +           %end;
26965  +        %let dsid= %sysfunc(close(&dsid));
26966  +        ;
26967  +        with &target;
26968  +        run;
26969  +    %end;
26970  +    quit;
26971  +%mend MakeCorrelation;
26972  +
26973  +
26974  +%macro MakeCorrelationDistance(indata=,
26975  +                               outdata=,
26976  +                               rsquare = N
26977  +                               );
26978  +    data corr_tmp;
26979  +        set &indata;
26980  +        if _N_ = 1 then do;
26981  +           output;
26982  +           stop;
26983  +         end;
26984  +    run;
26985  +    %if &outdata ne  %then %let  _outdata = &outdata;
26986  +    %else %let _outdata = &indata;
26987  +
26988  +    data &_outdata;
26989  +         set &indata;
26990  +
26991  +         %let dsid = %sysfunc(open(work.corr_tmp));
26992  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
26993  +          %do i = 2 %to &nvar;
26994  +              %let _name = %sysfunc(varname(&dsid, &i));
26995  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
26996  +              %else  %let _name_md = &_name;
26997  +              &_name = 1- &_name_md;
26998  +          %end;
26999  +      %let dsid= %sysfunc(close(&dsid));
27000  +      run;
27001  +      proc datasets lib = work nolist;
27002  +           delete corr_tmp;
27003  +      run;
27004  +      quit;
27005  +  %mend MakeCorrelationDistance;
27006  +
27007  +
27008  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
27009  +                                   rsquare = N
27010  +                                   );
27011  +    data corr_tmp;
27012  +        set &indata;
27013  +    run;
27014  +    proc sql noprint;
27015  +           update &indata
27016  +           set
27017  +     %let dsid = %sysfunc(open(work.corr_tmp));
27018  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
27019  +          %do i = 4 %to &nvar;
27020  +          %let _name = %sysfunc(varname(&dsid, &i));
27021  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
27022  +            %else  %let _name_md = &_name;
27023  +            %if &i < &nvar %then %do;
27024  +               &_name = 1- &_name_md ,
27025  +            %end;
27026  +            %else %do;
27027  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
27028  +            %end;
27029  +          %end;
27030  +      %let dsid= %sysfunc(close(&dsid));
27031  +
27032  +      select * from &indata;
27033  +      run;
27034  +     data &indata( drop = _NCL_);
27035  +           set &indata;
27036  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
27037  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
27038  +     run;
27039  +     data &indata(DROP = _NCL_);
27040  +           set &indata;
27041  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
27042  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
27043  +           rename _NAME_ = _VAR_;
27044  +     run;
27045  +     proc datasets lib = work nolist;
27046  +           delete corr_tmp;
27047  +     run;
27048  +     quit;
27049  + %mend UpdateOutStatCorrToDistance;
27050  +
27051  +
27052  +%macro HierClusWithCorr(indata= ,
27053  +                        ncluster=,
27054  +                        method = Ward,
27055  +                        outtree = _outtree,
27056  +                        idvar =_VAR_,
27057  +                        outdata=,
27058  +                        rescore = N,
27059  +                        newncluster=
27060  +                        );
27061  +      %global &newncluster;
27062  +      %if &rescore ne Y %then %do;
27063  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
27064  +                   method=&method outtree=&outtree noprint;
27065  +           id &idvar;
27066  +      run;
27067  +      %end;
27068  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
27069  +      run;
27070  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
27071  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
27072  +      run;
27073  +      data _outcontent;
27074  +          set _outcontent;
27075  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
27076  +          index = 1;
27077  +          rename NAME = _NAME_;
27078  +      run;
27079  +      proc sort data=_outcontent;
27080  +          by _NAME_;
27081  +      run;
27082  +      proc sort data =&outdata;
27083  +           by _NAME_;
27084  +      run;
27085  +      data &outdata(drop=index);
27086  +          merge &outdata _outcontent;
27087  +          by _NAME_;
27088  +          if index = . then delete;
27089  +      run;
27090  +      /*-----------------------------------------------------------*/
27091  +      data &outdata;
27092  +           length CLUSNAME $16;
27093  +           set &outdata;
27094  +           if CLUSTER > &ncluster then delete;
27095  +           CLUSNAME='GC'||strip(CLUSTER);
27096  +           *label CLUSNAME = "Cluster Name";
27097  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
27098  +           rename _NAME_ = VARIABLE ;
27099  +           *label _NAME_ = "Variable";
27100  +           *label CLUSTER = "Cluster";
27101  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
27102  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
27103  +      run;
27104  +      proc sort data=&outdata out=&outdata;
27105  +           by CLUSTER;
27106  +      run;
27107  +      proc means data =&outdata noprint;
27108  +           output out=_meanout;
27109  +      run;
27110  +      data _null_;
27111  +            set _meanout;
27112  +            if strip(_STAT_) eq 'MAX' then do;
27113  +            call symput("&newncluster", CLUSTER);
27114  +            stop;
27115  +            end;
27116  +      run;
27117  +
27118  +      proc datasets lib = work nolist;
27119  +           delete _outcontent _meanout;
27120  +      run;
27121  +      quit;
27122  +%mend  HierClusWithCorr;
27123  +
27124  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
27125  +
27126  +     data _tmpindata;
27127  +          set &indata;
27128  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
27129  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
27130  +          if _TYPE_ = 'STD' then _NAME_='STD';
27131  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
27132  +          DROP _TYPE_ _NCL_;
27133  +     run;
27134  +
27135  +     filename _file_  "&fileRef";
27136  +
27137  +     data _null_;
27138  +        FILE _file_ MOD;
27139  +        put ' ';
27140  +        put "/*-------------------------------------------------*/";
27141  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
27142  +        put "/*-------------------------------------------------*/";
27143  +        put ' ';
27144  +        %let dsid = %sysfunc(open(work._tmpindata));
27145  +
27146  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
27147  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
27148  +        %let k = 1;
27149  +        %do %while(^%sysfunc(fetch(&dsid)));
27150  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27151  +               %if &k > 2 %then %do;
27152  +                %let cn = %eval(&k-2);
27153  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
27154  +                %end;
27155  +                %let k = %eval(&k+1);
27156  +
27157  +        %end;
27158  +        %let rc = %sysfunc(rewind(&dsid));
27159  +
27160  +        %do j= 2 %to &nvar;
27161  +            %let _varname = %sysfunc(varname(&dsid, &j));
27162  +            %do %while(^%sysfunc(fetch(&dsid)));
27163  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27164  +                %if &_name = MEAN %then
27165  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
27166  +                %else %if &_name = STD %then
27167  +                %let _std = %sysfunc(getvarn(&dsid, &j));
27168  +                %else %do;
27169  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
27170  +                      %let abscoeff = %sysfunc(abs(&coeff));
27171  +                          %if &abscoeff >  0 %then %do;
27172  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
27173  +                           %end;
27174  +                 %end;
27175  +             %end;
27176  +             %let rc = %sysfunc(rewind(&dsid));
27177  +         %end;
27178  +
27179  +        %let dsid= %sysfunc(close(&dsid));
27180  +
27181  +     run;
27182  +
27183  +     filename _file_;
27184  +     proc datasets lib = work nolist;
27185  +           delete _tmpindata;
27186  +     run;
27187  +     quit;
27188  +%mend CreateScoreCode2;
27189  +
27190  +
27191  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
27192  +
27193  +     /*--- Build Code to Modify Metadata ---*/
27194  +     filename X "&deltacodefile";
27195  +     data _null_;
27196  +        FILE X;
27197  +        set &groupds end=eof;
27198  +        if _N_=1 then do;
27199  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
27200  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
27201  +           %end;
27202  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
27203  +           put "if upcase(strip(NAME)) in (";
27204  +        end;
27205  +        if Strip(upcase(Selected)) eq 'YES' then do;
27206  +           string = '"'!!trim(left(VARIABLE))!!'"';
27207  +           put string;
27208  +        end;
27209  +        if eof then do;
27210  +           put ') then ROLE="INPUT";';
27211  +           put 'else ROLE="REJECTED";';
27212  +           put 'end;';
27213  +
27214  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
27215  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
27216  +           %end;
27217  +        end;
27218  +     run;
27219  +     quit;
27220  +
27221  +     filename X;
27222  +     quit;
27223  +%mend MakeDeltaCode2;
27224  +
27225  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
27226  +  %global &ngc;
27227  +  data _null_;
27228  +  %if &indata ne %then %do;
27229  +      %let dsid = %sysfunc(open(&indata));
27230  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
27231  +      %let dsid = %sysfunc(close(&dsid));
27232  +  %end;
27233  +  %else %do;
27234  +       %let nvar = %eval(&ninput+&ndummy); ;
27235  +  %end;
27236  +  %let numgc = %eval(&nvar/&div+2);
27237  +  %let &ngc = &numgc;
27238  +   run;
27239  +  quit;
27240  +%mend getInitialGClusterNumber;
27241  +
27242  +
27243  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
27244  +data &outlink(drop = Selected);
27245  +     set &indata;
27246  +     LINKID = _N_;
27247  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
27248  +run;
27249  +data &outnode(keep=NODEID TYPE LABEL);
27250  +    set &indata;
27251  +    length TYPE $16;
27252  +    rename VARIABLE = NODEID;
27253  +    *label  CLUSNAME="Node ID";
27254  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
27255  +    TYPE = "VARIABLE";
27256  +    *label TYPE = "Node Type";
27257  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
27258  +    run;
27259  +data _tmp(keep=NODEID TYPE LABEL);
27260  +    set &indata;
27261  +    length TYPE $16;
27262  +    rename CLUSNAME = NODEID;
27263  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
27264  +    TYPE = "GCLUSTER";
27265  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
27266  +    run;
27267  +proc sort data=_tmp;
27268  +    by NODEID;
27269  +run;
27270  +data _tmp;
27271  +    set _tmp; by NODEID;
27272  +    if first.NODEID then output;
27273  +run;
27274  +proc sort data=&outnode;
27275  +    by NODEID;
27276  +run;
27277  +data  &outnode;
27278  +    set _tmp &outnode;
27279  +run;
27280  +proc datasets lib = work nolist;
27281  +     delete _tmp;
27282  +run;
27283  +quit;
27284  +%mend MakeGobalConstellData;
27285  +
27286  +/* Make contellation plot data among GCLUSTERS */
27287  +
27288  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
27289  +
27290  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
27291  +     set &indata;
27292  +     LINKID = _N_;
27293  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
27294  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
27295  +     end;
27296  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
27297  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
27298  +     end;
27299  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
27300  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
27301  +    end;
27302  +run;
27303  +
27304  +data _tmp_outrsquare;
27305  +        set &inoutrsq;
27306  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
27307  +run;
27308  +
27309  +proc freq data =_tmp_outrsquare noprint;
27310  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
27311  +run;
27312  +
27313  +data &outnode(keep=_NAME_ TYPE LABEL);
27314  +    set &outlink;
27315  +    length TYPE $16;
27316  +    length LABEL $100;
27317  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
27318  +
27319  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
27320  +    TYPE = "GCLUSTER";
27321  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
27322  +    end;
27323  +    else do;
27324  +    TYPE= "ROOT";
27325  +    LABEL= _NAME_;
27326  +    end;
27327  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
27328  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
27329  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
27330  +    run;
27331  +
27332  +proc sort data=&outnode;
27333  +     by _NAME_;
27334  +proc sort data=_tmp_GCLUSFREQ;
27335  +     by _NAME_;
27336  +run;
27337  +
27338  +data  &outnode;
27339  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
27340  +     if COUNT=. then COUNT=1;
27341  +run;
27342  +
27343  +proc datasets lib = work nolist;
27344  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
27345  +run;
27346  +
27347  +quit;
27348  +%Mend MakeGClusterConstData;
27349  +
27350  +
27351  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
27352  +
27353  +    data _gscoretmpds;
27354  +          set &indata;
27355  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
27356  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
27357  +          if _TYPE_ = 'STD' then _NAME_='STD';
27358  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
27359  +          DROP _TYPE_ _NCL_;
27360  +     run;
27361  +
27362  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
27363  +        GCluster Component &globalclusid ------ */
27364  +
27365  +    filename _file_  "&fileref";
27366  +
27367  +    data _null_;
27368  +        %if &globalclusid eq 1 %then %do;
27369  +          FILE _file_;
27370  +        %end;
27371  +        %else %do;
27372  +          FILE _file_ MOD;
27373  +        %end;
27374  +
27375  +        %let dsid = %sysfunc(open(work._gscoretmpds));
27376  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
27377  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
27378  +
27379  +        %let k = 1;
27380  +        %do %while(^%sysfunc(fetch(&dsid)));
27381  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27382  +                %if &k > 2 %then %do;
27383  +                put "&_name = 0 ; ";
27384  +                %end;
27385  +                %let k = %eval(&k+1);
27386  +        %end;
27387  +
27388  +        %let rc = %sysfunc(rewind(&dsid));
27389  +        %do i= 2 %to &nvar;
27390  +            %let _varname =  %sysfunc(varname(&dsid, &i));
27391  +            %do %while(^%sysfunc(fetch(&dsid)));
27392  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
27393  +                %if &_name = MEAN %then
27394  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
27395  +                %else %if &_name = STD %then
27396  +                %let _std = %sysfunc(getvarn(&dsid, &i));
27397  +                %else %do;
27398  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
27399  +                      %let abscoeff = %sysfunc(abs(&coeff));
27400  +                          %if &abscoeff >  0 %then %do;
27401  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
27402  +                           %end;
27403  +                 %end;
27404  +             %end;
27405  +             %let rc = %sysfunc(rewind(&dsid));
27406  +
27407  +         %end;
27408  +
27409  +        %let dsid= %sysfunc(close(&dsid));
27410  +       run;
27411  +
27412  +
27413  +       proc datasets lib=work nolist;
27414  +            delete _gscoretmpds;
27415  +       run;
27416  +      quit;
27417  +
27418  +%mend CreateGClusterScoreCode;
27419  +
27420  +
27421  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
27422  +
27423  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
27424  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
27425  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
27426  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
27427  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
27428  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
27429  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
27430  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
27431  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
27432  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
27433  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
27434  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
27435  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
27436  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
27437  +
27438  +   filename gsfile "&gscorecode";
27439  +
27440  +   data &EM_USER_GSCORE;
27441  +             set &indata;
27442  +             %include  gsfile;
27443  +        keep
27444  +        %do i=1 %to &ngcluster;
27445  +         %let gcvarname = GC&i;
27446  +         &gcvarname
27447  +        %end;
27448  +     ;
27449  +   run;
27450  +
27451  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
27452  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
27453  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
27454  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
27455  +    noprint  ;
27456  +     var
27457  +       %do i=1 %to &ngcluster;
27458  +         %let gcvarname = GC&i;
27459  +         &gcvarname
27460  +        %end;
27461  +   ;
27462  +   run;
27463  +
27464  +
27465  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
27466  +   data &EM_USER_GSCORECORRPLOT ;
27467  +        set &EM_USER_GSCORECORRPLOT;
27468  +        rename _X_ = X;
27469  +        rename _Y_ = Y;
27470  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
27471  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
27472  +   run;
27473  +
27474  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
27475  +
27476  +   data &EM_USER_GSCORETREE;
27477  +        length _NAME_ $32;
27478  +        length _LABEL_ $100;
27479  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
27480  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
27481  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
27482  +        end;else do;
27483  +         _LABEL_ = _NAME_;
27484  +        end;
27485  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
27486  +
27487  +   run;
27488  +
27489  +   quit;
27490  +
27491  +%mend MakeGClusterCorrelation;
27492  +
27493  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
27494  +%macro report;
27495  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
27496  +
27497  +    data _null_;
27498  +         set &EM_USER_VARCLUSMETA;
27499  +         if _N_=1 then
27500  +         call symput('_trainnum', TrainNum);
27501  +    run;
27502  +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
27503  +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
27504  +           %include temp;
27505  +           filename temp;
27506  +           %report1;
27507  +       %end;
27508  +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
27509  +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
27510  +           %include temp;
27511  +           filename temp;
27512  +           %report2;
27513  +    %end;
27514  +
27515  +   /* End of all runs, change the flag of newtrain to N */
27516  +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
27517  +    data &EM_USER_VARCLUSMETA;
27518  +         set &EM_USER_VARCLUSMETA;
27519  +         NewTrain = "N";
27520  +    run;
27521  +    quit;
27522  +%mend report;
27523  +
27524  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      120022:166   
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.03 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT2.SOURCE.
27525  +%macro report2;
27527  +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
27528  +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
27529  +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
27530  +   %EM_GETNAME(key=GCLUSFREQ, type=DATA) ;
27532  +   data &EM_USER_OUTVARSEL;
27533  +        set &EM_USER_OUTRSQUARE;
27534  +        if upcase(strip(SELECTED)) = 'YES' then output;
27535  +   run;
27537  +   proc freq data =&EM_USER_OUTRSQUARE noprint;
27538  +        tables GCluster*selected/out=&EM_USER_GCLUSFREQ sparse;
27539  +   run;
27541  +   run;
27542  +   data _tmp_outrsquare;
27543  +        set &EM_USER_OUTRSQUARE;
27544  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
27545  +        /*CLUSTER = scan(CLUSTER, 2,'_');*/
27546  +   run;
27548  +   proc freq data =_tmp_outrsquare noprint;
27549  +         tables GCluster*Cluster/out=&EM_USER_CLUSFREQ;
27550  +   run;
27552  +   proc datasets lib = work nolist;
27553  +     delete _tmp_outrsquare;
27554  +   run;
27556  +   data &EM_USER_CLUSFREQ;
27557  +       set &EM_USER_CLUSFREQ;
27558  +       label
27559  +           gcluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, NOQUOTE))"
27560  +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
27561  +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
27562  +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
27563  +       ;
27564  +   run;
27566  +    /*
27567  +    %EM_REPORT(key=GCLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=Global Frequency Table);
27568  +    %EM_REPORT(key=GOUTCORR, viewtype=DATA, block=MODEL,description=corrmatix) ;
27569  +    %EM_REPORT(key=GSCORECORR, viewtype=DATA, block=MODEL,description=gcluscorrmatrix) ;
27570  +    %EM_REPORT(linkkey=GOUTLINK, nodekey=GOUTNODE, viewtype=Constellation,  autodisplay=N, block=Constellation,  linkfrom=CLUSNAME, linkto=VARIABLE, linkid=LINKID, nodeid=NODEID, description=gclusplot);
27571  +    %EM_REPORT(KEY=GOUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, PARENT=_PARENT_, HEIGHT=_PROPOR_ , TipText = Variable, description=gdendrogram );
27572  +    */
27575  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
27576  +    data _null_;
27577  +         set &EM_USER_VARCLUSMETA;
27578  +         if _N_=1 then
27579  +         call symput('_reportngclus', NGCluster);
27580  +    run;
27582  +    %if &_reportngclus > 1 %then %do;  /* because there are problems when the number of GC is 1 */
27583  +    %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
27584  +    %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
27585  +    %EM_REPORT(key=GOUTGROUP, viewtype=DATA, block=MODEL, description=gclustervartable) ;
27586  +    %EM_REPORT(key=GCLUSFREQ, viewtype=BAR, block=MODEL, x=GCLUSTER, freq=COUNT , group=SELECTED, autodisplay=Y,  description=varfreqbygcluster) ;
27587  +    %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=varsel, autodisplay=N, description=varseltable);
27588  +    %EM_REPORT(KEY=GSCORETREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block=Dendrogram, Name=_NAME_, PARENT=_PARENT_, HEIGHT=_PROPOR_ , TipText = Variable, description=gclusdend );
27589  +    %EM_REPORT(key=GSCORECORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=cluscorr , description=gcluscorr);
27590  +    %EM_REPORT(linkkey=GCLUSLINK, nodekey=GCLUSNODE, viewtype=Constellation,  autodisplay=Y, block=Constellation,  linkfrom=_PARENT_, linkto=_NAME_, linkid=LINKID, nodeid=_NAME_ , nodesize=COUNT,  nodeshape=TYPE, description=gclusplot);
27591  +    %end;
27592  +    %else %do;
27593  +     %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
27594  +    %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
27595  +    %EM_REPORT(key=GOUTGROUP, viewtype=DATA, block=MODEL, description=gclustervartable) ;
27596  +    %EM_REPORT(key=GCLUSFREQ, viewtype=BAR, block=MODEL, x=GCLUSTER, freq=COUNT , group=SELECTED, autodisplay=Y,  description=varfreqbygcluster) ;
27597  +    %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=varsel, autodisplay=N, description=varseltable);
27598  +    *%EM_REPORT(KEY=GSCORETREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block=Dendrogram, Name=_NAME_, PARENT=_PARENT_, HEIGHT=_PROPOR_ , TipText = Variable, description=gclusdend );
27599  +    %EM_REPORT(key=GSCORECORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=cluscorr , description=gcluscorr);
27600  +    *%EM_REPORT(linkkey=GCLUSLINK, nodekey=GCLUSNODE, viewtype=Constellation,  autodisplay=Y, block=Constellation,  linkfrom=_PARENT_, linkto=_NAME_, linkid=LINKID, nodeid=_NAME_ , nodesize=COUNT, description=gclusplot);
27601  +    %end;
27604  +    %do ri =1 %to &_reportngclus;
27606  +    %let dendrogramds = outtree&ri;
27607  +    %let reportcluscorr = outcluscorrplot&ri;
27608  +    %let reportclusstruct = outclusstruct&ri;
27609  +    %let reportoutrsquare = outrsquare&ri;
27610  +    %let reportoutlink = outlink&ri;
27611  +    %let reportoutnode = outnode&ri;
27613  +    /*--- just to match the Yes/no color in group = Selected variable ---*/
27614  +    %EM_GETNAME(KEY=&reportoutrsquare , TYPE=DATA);
27615  +    %let emreportoutrsquare = &EM_USER_&reportoutrsquare.;
27616  +     proc sort data = &emreportoutrsquare;
27617  +          by SELECTED;
27618  +     run;
27620  +    %let descGClus_num_ClusPlot = %sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gc_num_clusplot, noquote, &ri));
27621  +    %let descGClus_num_Dendrogram = %sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gc_num_dendrogram, noquote, &ri));
27622  +    %let descGClus_num_ClusCorr  = %sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gc_num_cluscorr , noquote, &ri));
27623  +    %let descGClus_num_CorrStruct  = %sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gc_num_corrstruct , noquote, &ri));
27624  +    %let descGClus_num_VarSel  = %sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gc_num_varsel , noquote, &ri));
27625  +    %let descGClus_num_RSqPlot  = %sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gc_num_rsqplot , noquote, &ri));
27628  +      %if (&_reportngclus = 1) and ( &ri = 1 ) %then %do; /* because there are problems when the number of GC is 1 */
27629  +        %EM_REPORT(linkkey=&reportoutlink, nodekey=&reportoutnode, viewtype=Constellation,  autodisplay=Y, block=Constellation,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=&descGClus_num_ClusPlot);
27630  +        %EM_REPORT(KEY=&dendrogramds, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =Dendrogram, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=&descGClus_num_Dendrogram);
27631  +        %EM_REPORT(key=&reportcluscorr, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=cluscorr, description=&descGClus_num_ClusCorr);
27632  +        %EM_REPORT(key=&reportclusstruct, viewtype=BAR, block=corrstruct, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=&descGClus_num_CorrStruct) ;
27633  +        %EM_REPORT(key=&reportoutrsquare, viewtype=DATA, block=varsel, autodisplay=N, description=&descGClus_num_VarSel);
27634  +        %EM_REPORT(key=&reportoutrsquare, view =&ri, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=rsqplot, description=&descGClus_num_RSqPlot);
27635  +        %EM_REPORT(view =&ri, y=RsqWithOwnClusComp);
27636  +        %EM_REPORT(view=&ri, y=RsqWithNextClusComp);
27637  +      %end;
27638  +      %else %do;
27639  +        %EM_REPORT(linkkey=&reportoutlink, nodekey=&reportoutnode, viewtype=Constellation,  autodisplay=N, block=Constellation,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID,  nodeshape=TYPE, description=&descGClus_num_ClusPlot);
27640  +        %EM_REPORT(KEY=&dendrogramds, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description= &descGClus_num_Dendrogram);
27641  +        %EM_REPORT(key=&reportcluscorr, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=cluscorr, description=&descGClus_num_ClusCorr);
27642  +        %EM_REPORT(key=&reportclusstruct, viewtype=BAR, block=corrstruct, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=&descGClus_num_CorrStruct) ;
27643  +        %EM_REPORT(key=&reportoutrsquare, viewtype=DATA, block=varsel, autodisplay=N, description=&descGClus_num_VarSel);
27644  +        %EM_REPORT(key=&reportoutrsquare, view =&ri, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=rsqplot, description=&descGClus_num_RSqPlot);
27645  +        %EM_REPORT(view =&ri, y=RsqWithOwnClusComp);
27646  +        %EM_REPORT(view=&ri, y=RsqWithNextClusComp);
27647  +      %end;
27648  +    %end;
27652  +%mend report2;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTVARSEL has 5 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           1.67 seconds
      cpu time            0.06 seconds
      


NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_GCLUSFREQ has 10 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           1.79 seconds
      cpu time            0.01 seconds
      


NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 343 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.01 seconds
      


NOTE: There were 343 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           1.45 seconds
      cpu time            0.06 seconds
      


NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set EMWS3.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           2.26 seconds
      cpu time            0.03 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      119:147   
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.28 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 792 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 792 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 925 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 925 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1057 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 82 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE1.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE1 has 82 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           2.39 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1057 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1189 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1189 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1321 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1321 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1454 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1454 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1586 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1586 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1718 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1718 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1851 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1851 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1984 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1984 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 2117 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 208 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE2.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE2 has 208 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           2.28 seconds
      cpu time            0.04 seconds
      


NOTE: There were 2117 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 2249 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 2249 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 2381 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 2381 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 2514 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 2514 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 2646 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 2646 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 2778 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 2778 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 2911 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      


NOTE: There were 2911 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3044 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 3044 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3177 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 14 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE3.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE3 has 14 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           2.37 seconds
      cpu time            0.06 seconds
      


NOTE: There were 3177 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3309 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 3309 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3441 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 3441 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3574 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 3574 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3706 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 3706 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3838 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 3838 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 3971 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 3971 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 4104 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 4104 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 4237 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 5 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE4.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE4 has 5 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           2.39 seconds
      cpu time            0.01 seconds
      


NOTE: There were 4237 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 4369 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 4369 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 4501 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 4501 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 4634 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      


NOTE: There were 4634 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 4766 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 4766 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 4898 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 4898 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5031 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 5031 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5164 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 5164 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5297 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 39 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE5.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE5 has 39 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           2.36 seconds
      cpu time            0.04 seconds
      


NOTE: There were 5297 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5429 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 5429 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5561 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 5561 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5694 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 5694 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5826 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 5826 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 5958 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 5958 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 6091 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 6091 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 6224 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 6224 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 6357 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           2.37 seconds
      cpu time            0.03 seconds
      

27653   *------------------------------------------------------------*;
27654   * End REPORT: VarClus;
27655   *------------------------------------------------------------*;
27656   

27657   /* Reset EM Options */
27658   options formchar="|----|+|---+=|-/\<>*";
27659   options nocenter ls=256 ps=10000;
27660   goptions reset=all device=GIF NODISPLAY;

27661   proc sort data=WORK.EM_USER_REPORT;
27662   by ID VIEW;
27663   run;

NOTE: There were 6357 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 6357 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

