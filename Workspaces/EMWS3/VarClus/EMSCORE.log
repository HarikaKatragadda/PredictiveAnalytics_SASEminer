*------------------------------------------------------------*
* Score Log
Date:                December 12, 2017
Time:                10:47:07
*------------------------------------------------------------*
18150   %let EMEXCEPTIONSTRING=;
18151   *------------------------------------------------------------*;
18152   * SCORE: VarClus;
18153   *------------------------------------------------------------*;
18154   %let EM_ACTION = SCORE;
18155   %let syscc = 0;
18156   
18157   %macro main;
18158   
18159      filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
18160      %include temp;
18161      filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
18162      %include temp;
18163      filename temp;
18164   
18165     %SetProperties;
18166   
18167      %if %upcase(&EM_ACTION) = CREATE %then %do;
18168          filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
18169          %include temp;
18170          filename temp;
18171          %create;
18172      %end;
18173      %else
18174      %if %upcase(&EM_ACTION) = TRAIN %then %do;
18175           filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
18176              %include temp;
18177              filename temp;
18178              %train;
18179      %end;
18180      %else
18181      %if %upcase(&EM_ACTION) = SCORE %then %do;
18182              filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
18183              %include temp;
18184              filename temp;
18185              %score;
18186      %end;
18187      %else
18188      %if %upcase(&EM_ACTION) = REPORT %then %do;
18189              filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
18190              %include temp;
18191              filename temp;
18192              %report;
18193      %end;
18194      /*
18195      %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
18196          %put 'OPENING TABLE';
18197      %end;
18198      %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
18199          %put 'CLOSE TABLE';
18200      %end;
18201      */
18202   %mend main;
18203   %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
18204  +
18205  +/* Initialize property macro variables */
18206  +%macro SetProperties;
18207  +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
18208  +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
18209  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
18210  +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
18211  +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
18212  +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
18213  +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
18214  +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
18215  +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
18216  +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
18217  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
18218  +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
18219  +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
18220  +
18221  +%mend SetProperties;
18222  +
18223  +%Macro MakeDummyVariables(indata=,
18224  +                          outvar=,
18225  +                          outdata=,
18226  +                          fileref=,
18227  +                          recreatecmeta=N, /* optional */
18228  +                          incmeta=,     /* optional */
18229  +                          outcmeta=,    /* optional */
18230  +                          ndummyvars=_ndummyvars
18231  +                          );
18232  +    %global &ndummyvars;
18233  +
18234  +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
18235  +       class
18236  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18237  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18238  +    ;
18239  +    run;
18240  +    %let &ndummyvars = 0;
18241  +    data _null_;
18242  +    %let dsid = %sysfunc(open(work._classout));
18243  +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
18244  +    %let dsid = %sysfunc(close(&dsid));
18245  +    run;
18246  +
18247  +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
18248  +       input
18249  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18250  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18251  +        / level=nominal stdize=no;
18252  +       make outvar = &outvar;
18253  +       score data = &indata out =&outdata;
18254  +       code  file=  "&fileref";
18255  +    run;
18256  +    %if &recreatecmeta eq Y %then %do;
18257  +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
18258  +    data _tmpds;
18259  +        set _tmpds;
18260  +           ROLE = 'INPUT';
18261  +           LEVEL = 'INTERVAL';
18262  +           CREATOR='DMZIP';
18263  +           if NAME = '_TYPE_' then delete;
18264  +    run;
18265  +    data &outcmeta;
18266  +         set &incmeta _tmpds;
18267  +    run;
18268  +    %end;
18269  +    proc datasets lib=work nolist;
18270  +      delete  _dmdbdat _dmdbcat _classout
18271  +    %if &recreatecmeta eq Y %then %do;
18272  +    _tmpds
18273  +    %end;
18274  +    ;
18275  +    quit;
18276  +%Mend MakeDummyVariables;
18277  +
18278  +/*--- Determine Optimal Number of Cluster ----
18279  +%macro FindClusNum(statds=, groupds=, minvariation=);
18280  +   %global optnclus;
18281  +   data varclus_tmp(drop=_NAME_);
18282  +      set &statDs;
18283  +      where _type_ ='PROPOR';
18284  +   run;
18285  +   proc sort data=varclus_tmp;
18286  +      by _NCL_;
18287  +   run;
18288  +   proc transpose data=varclus_tmp out=varclus_tmp;
18289  +      by _NCL_;
18290  +      var %EM_INTERVAL_INPUT
18291  +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18292  +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18293  +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
18294  +          %do i = 2 %to &nvar;
18295  +          %let varname = %sysfunc(varname(&dsid, &i));
18296  +          &varname
18297  +          %end;
18298  +      %end;
18299  +   ;
18300  +   run;
18301  +
18302  +   %if &minVariation eq %then %do;
18303  +       %let minVariation = &EM_PROPERTY_MINVARIATION;
18304  +   %end;
18305  +   %if ^(0<&minVariation<100) %then %do;
18306  +       %let minVariation = 90;
18307  +   %end;
18308  +
18309  +   data _null_;
18310  +      set varclus_tmp end=eof;
18311  +      by _NCL_;
18312  +      retain flag 0;
18313  +      if first._ncl_ then flag=0;
18314  +      if .<col1 < &minVariation then flag=1;
18315  +      if last._ncl_ and ^flag then do;
18316  +         call symput('OPTNCL', _ncl_);
18317  +         stop;
18318  +      end;
18319  +     if eof then call symput('OPTNCL', _ncl_);
18320  +   run;
18321  +
18322  +   %let optnclus = &OPTNCL;
18323  +
18324  +   data varclus_tmp(drop=_NCL_ _NAME_);
18325  +      set &statDs;
18326  +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
18327  +   run;
18328  +   proc sort data=varclus_tmp;
18329  +      by _TYPE_;
18330  +   run;
18331  +   proc transpose data=varclus_tmp out=varclus_tmp;
18332  +      by _TYPE_;
18333  +   run;
18334  +   proc sort data=varclus_tmp;
18335  +      by _name_ _type_;
18336  +   run;
18337  +
18338  +  proc transpose data=varclus_tmp out=&groupds;
18339  +      by _NAME_;
18340  +   run;
18341  +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
18342  +      by Cluster descending Rsquare;
18343  +      where Cluster ne 0;
18344  +   run;
18345  +   proc datasets lib=work nolist mt=(DATA VIEW);
18346  +      delete varclus_tmp;
18347  +   run;
18348  +   quit;
18349  +%mend findClusNum;
18350  +*/
18351  +
18352  +%macro getNclusfromTrain(inoutstat=, nc=);
18353  +%global &nc;
18354  +data _null_;
18355  +    set &inoutstat end=eof;
18356  +    if eof then do;
18357  +    call symput("&nc", _ncl_);
18358  +    end;
18359  +run;
18360  +%mend  getNclusfromTrain;
18361  +
18362  +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
18363  +
18364  +     *--- Build Code to Modify Metadata ---*;
18365  +     filename X "&deltacodefile";
18366  +     data _null_;
18367  +        FILE X;
18368  +        set &groupds end=eof;
18369  +        /*by Cluster;*/
18370  +         if _N_=1 then do;
18371  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18372  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18373  +           %end;
18374  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18375  +           put "if upcase(strip(NAME)) in (";
18376  +        end;
18377  +        if Strip(upcase(Selected)) eq 'YES' then do;
18378  +           string = '"'!!trim(left(VARIABLE))!!'"';
18379  +           put string;
18380  +        end;
18381  +        if eof then do;
18382  +           put ') then ROLE="INPUT";';
18383  +           put 'else ROLE="REJECTED";';
18384  +           put 'end;';
18385  +
18386  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18387  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18388  +           %end;
18389  +        end;
18390  +     run;
18391  +     quit;
18392  +
18393  +     filename X;
18394  +
18395  +     quit;
18396  +%mend MakeDeltaCode;
18397  +
18398  +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18399  +    %if ^%sysfunc(exist(&statds)) %then %do;
18400  +         %goto doendc;
18401  +    %end;
18402  +
18403  +    data &corrds(drop=_TYPE_ _NCL_) ;
18404  +       set &statds;
18405  +       where _type_ eq 'CORR' ;
18406  +    run ;
18407  +    proc sort data=&corrds;
18408  +       by _NAME_ ;
18409  +    run ;
18410  +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18411  +      BY _NAME_ ;
18412  +    run ;
18413  +    data &corrplotds;
18414  +       length _Y_ $100;
18415  +       set &corrplotDs;
18416  +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18417  +    run ;
18418  +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18419  +       set &corrplotds;
18420  +       where _LABEL_ ne '' ;
18421  +       keep _TMP_ _LABEL_ ;
18422  +    run ;
18423  +    data _null_;
18424  +       nobs=0;
18425  +       dsid = open('varclus_match');
18426  +       if dsid then do;
18427  +          nobs = attrn(dsid, 'NOBS');
18428  +          dsid = close(dsid);
18429  +       end;
18430  +       call symput ('CORR_NOBS', nobs);
18431  +    run;
18432  +    %if &corr_nobs %then %do;
18433  +        proc sort data=varclus_match;
18434  +           by _name_;
18435  +        run ;
18436  +        proc sort data=&corrplotds;
18437  +           by _name_;
18438  +        run ;
18439  +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18440  +           merge varclus_match &corrplotds;
18441  +           by _NAME_ ;
18442  +           if _X_ eq '' then _X_=_NAME_ ;
18443  +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18444  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18445  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18446  +
18447  +       run ;
18448  +    %end;
18449  +    %else %do;
18450  +        proc sort data=&corrplotds;
18451  +           by _name_;
18452  +        run ;
18453  +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18454  +           set &corrplotds;
18455  +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18456  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18457  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18458  +
18459  +        run ;
18460  +    %end;
18461  +    proc sort data=&corrplotds;
18462  +       by _X_ _Y_;
18463  +    run ;
18464  +    proc datasets lib=work nolist mt=(DATA VIEW);
18465  +       delete varclus_match;
18466  +    run;
18467  +    quit;
18468  +
18469  +%doendc:
18470  +
18471  +%mend MakeVarClusCorrData;
18472  +
18473  +%macro MakeStatPlotData(statds= , outstatplotds=);
18474  +   %if %sysfunc(exist(&statds)) %then %do;
18475  +
18476  +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18477  +          set &statDs;
18478  +          where _type_ in('MEAN', 'STD', 'N');
18479  +       run ;
18480  +       proc transpose data=varclus_tmp out=&outstatplotds;
18481  +          id _TYPE_ ;
18482  +       run ;
18483  +       data &outstatplotds;
18484  +          set &outstatplotds(obs=1000);
18485  +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18486  +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18487  +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18488  +          else SCALEDSTD= STD ;
18489  +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18490  +       run ;
18491  +       proc sort data=&outstatplotds;
18492  +          by descending SCALEDSTD ;
18493  +       run ;
18494  +       proc datasets lib=work nolist mt=(DATA VIEW);
18495  +          delete varclus_tmp;
18496  +       run;
18497  +       quit;
18498  +    %end;
18499  +
18500  +%mend MakeStatPlotData;
18501  +
18502  +
18503  +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18504  +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18505  +    data &EM_USER_OUTSTATSCORE;
18506  +          set &indata;
18507  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18508  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18509  +          if _TYPE_ = 'STD' then _NAME_='STD';
18510  +          DROP _TYPE_ _NCL_;
18511  +     run;
18512  +
18513  +     filename _file_  "&fileRef";
18514  +
18515  +     data _null_;
18516  +        FILE _file_ MOD;
18517  +        put ' ';
18518  +        put '/*-------------------------------------------------*/';
18519  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18520  +        put '/*-------------------------------------------------*/';
18521  +        put ' ';
18522  +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18523  +
18524  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18525  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18526  +
18527  +        %let k = 1;
18528  +        %do %while(^%sysfunc(fetch(&dsid)));
18529  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18530  +                %if &k > 2 %then %do;
18531  +                 %let cn = %eval(&k-2);
18532  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18533  +                %end;
18534  +                %let k = %eval(&k+1);
18535  +        %end;
18536  +
18537  +        %let rc = %sysfunc(rewind(&dsid));
18538  +
18539  +        %do i= 2 %to &nvar;
18540  +            %let _varname =  %sysfunc(varname(&dsid, &i));
18541  +            %do %while(^%sysfunc(fetch(&dsid)));
18542  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18543  +                %if &_name = MEAN %then
18544  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18545  +                %else %if &_name = STD %then
18546  +                %let _std = %sysfunc(getvarn(&dsid, &i));
18547  +                %else %do;
18548  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18549  +                      %let abscoeff = %sysfunc(abs(&coeff));
18550  +                          %if &abscoeff >  0 %then %do;
18551  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18552  +                           %end;
18553  +                 %end;
18554  +             %end;
18555  +             %let rc = %sysfunc(rewind(&dsid));
18556  +         %end;
18557  +
18558  +        %let dsid= %sysfunc(close(&dsid));
18559  +       run;
18560  +%mend CreateScoreCode;
18561  +
18562  +
18563  +
18564  +/*----------------------------------------------------------
18565  +    Instead of using %MakeRSquareData,
18566  +    %MakeVarClusResultTable at macro2.source is used
18567  + +----------------------------------------------------------*/
18568  +
18569  +
18570  +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18571  +
18572  +/* modifying  from ods rsquare = data */
18573  +
18574  +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18575  +    Length Cluster $16;
18576  +    length Variable $32;
18577  +    Length VariableLabel $64;
18578  +    set &indata; retain CurrentCluster;
18579  +    if NumberOfClusters ^= &ncluster then delete;
18580  +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18581  +    CurrentCluster = Cluster;
18582  +   run;
18583  +proc sort data =&outdata ;
18584  +     by Cluster RsquareRatio;
18585  +run;
18586  +data _tmprsq(drop=index);
18587  +     set &outdata; by Cluster;
18588  +     if first.Cluster then do;
18589  +     index = strip(scan(Cluster,2 ));
18590  +     Variable = "Clus"||index;
18591  +     VariableLabel = "Cluster Component "||index;
18592  +     OwnCluster = 1;
18593  +     NextClosest = .;
18594  +     RsquareRatio = 0;
18595  +     output;
18596  +     end;
18597  +run;
18598  +
18599  +proc sort data = _tmprsq ;
18600  +     by Cluster RsquareRatio;
18601  +run;
18602  +data &outdata;
18603  +     set &outdata _tmprsq;
18604  +by Cluster;
18605  +run;
18606  +
18607  +
18608  +/* Just create the Selected variable with all YES */
18609  +
18610  +data &outdata;
18611  +    set &outdata; by cluster;
18612  +    length Selected $8;
18613  +    Selected = 'YES';
18614  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18615  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18616  +    rename OwnCluster = RSqWithClusterComp;
18617  +    rename NextClosest = RSqWithNextClusComp;
18618  +run;
18619  +
18620  +
18621  +/* Selected = Y/N will be done %score section -----
18622  +
18623  +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18624  +data &outdata;
18625  +    set &outdata; by cluster;
18626  +    length Selected $8;
18627  +    if first.Cluster then Selected = 'YES';
18628  +    else Selected = 'NO';
18629  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18630  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18631  +    rename OwnCluster = RSqWithClusterComp;
18632  +    rename NextClosest = RSqWithNextClusComp;
18633  +run;
18634  +%end;
18635  +%else %do;
18636  +data &outdata;
18637  +    set &outdata; by cluster;
18638  +    if last.Cluster then Selected = 'YES';
18639  +    else Selected = 'NO';
18640  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18641  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18642  +    rename OwnCluster = RSqWithClusterComp;
18643  +    rename NextClosest = RSqWithNextClusComp;
18644  +run;
18645  +%end;
18646  +---------------------------------------------------------------*/
18647  +
18648  +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18649  +/* to calculate NextClosestClusRsq */
18650  +proc transpose data = &inClusRSquare  out=_clusRsq;
18651  +      by cluster;
18652  +      run;
18653  +data _clusRsq;
18654  +     set _clusRsq;
18655  +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18656  +run;
18657  +
18658  +proc sort data=_clusRsq;
18659  +    by cluster col1;
18660  +    run;
18661  +data _clusRsq(drop=_NAME_ _LABEL_);
18662  +     set _clusRsq; by cluster;
18663  +     if last.Cluster then output;
18664  +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18665  +     rename COL1 = RSqWithNextClusComp;
18666  +     rename Cluster = Variable;
18667  +     label  Cluster = "Variable";
18668  +run;
18669  +
18670  +proc sort data =&outdata;
18671  +     by Variable;
18672  +run;
18673  +data &outdata;
18674  +    merge &outdata _clusRsq;
18675  +    by Variable;
18676  +run;
18677  +proc sort data =&outdata;
18678  +by Cluster  RsquareRatio;
18679  +run;
18680  +quit;
18681  +%end;
18682  +
18683  +proc datasets lib = work nolist;
18684  +     delete _tmprsq _clusRsq;
18685  +     run;
18686  +quit;
18687  +
18688  +%mend MakeRSquareData;
18689  +
18690  +
18691  +/*-------------------------------------------------------------------------*/
18692  +
18693  +
18694  +
18695  +%macro ModifyCorr(indata=,
18696  +                  outdata=,
18697  +                  rsquare = Y
18698  +                  );
18699  +    data corr_tmp;
18700  +        set &indata;
18701  +    run;
18702  +     proc sql;
18703  +           update &indata
18704  +           set
18705  +     %let dsid = %sysfunc(open(work.corr_tmp));
18706  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18707  +          %do i = 4 %to &nvar;
18708  +          %let _name = %sysfunc(varname(&dsid, &i));
18709  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18710  +            %else  %let _name_md = &_name;
18711  +            %if &i < &nvar %then %do;
18712  +               &_name = 1- &_name_md ,
18713  +            %end;
18714  +            %else %do;
18715  +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18716  +            %end;
18717  +          %end;
18718  +      %let dsid= %sysfunc(close(&dsid));
18719  +
18720  +      select * from &indata;
18721  +      run;
18722  +      proc datasets lib = work nolist;
18723  +           delete corr_tmp;
18724  +      run;
18725  +      quit;
18726  +
18727  + %mend ModifyCorr;
18728  +
18729  + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18730  +    data &outdata(drop= _NCL_  _TYPE_);
18731  +       set &indata;
18732  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18733  +       rename _NAME_ = Cluster;
18734  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18735  +    run;
18736  +    %if &RSquare eq Y %then %do;
18737  +     data corr_tmp;
18738  +        set &outdata;
18739  +     run;
18740  +
18741  +     data &outdata(drop=i);
18742  +          set &outdata;
18743  +          %let dsid = %sysfunc(open(work.corr_tmp));
18744  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18745  +          %do i = 2 %to &nvar;
18746  +            %let _name = %sysfunc(varname(&dsid, &i));
18747  +            %let _name_md = &_name.**2;
18748  +                &_name = &_name_md;
18749  +          %end;
18750  +      %let dsid= %sysfunc(close(&dsid));
18751  +      run;
18752  +      proc datasets lib = work nolist;
18753  +           delete corr_tmp;
18754  +      run;
18755  +
18756  +    %end;
18757  +     quit;
18758  +%mend MakeClusStructCorrData;
18759  +
18760  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18761  +    data &outdata(drop= _NCL_  _TYPE_);
18762  +       set &indata;
18763  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18764  +       rename _NAME_ = Cluster;
18765  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18766  +    run;
18767  +    data corr_tmp;
18768  +        set &outdata;
18769  +    run;
18770  +
18771  +    %let dsid = %sysfunc(open(work.corr_tmp));
18772  +    %let nclus2= %eval(&ncluster+1);
18773  +    data &outdata;
18774  +         set &outdata;
18775  +          %do i = 2 %to &nclus2;
18776  +          %let i_1 = %eval(&i-1);
18777  +            %let _name = %sysfunc(varname(&dsid, &i));
18778  +            %let _newName = Clus&i_1;
18779  +                rename &_name = &_newName; ;
18780  +                *label &_name ="Cluster &i_1";
18781  +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18782  +          %end;
18783  +          keep Cluster
18784  +          %do i = 2 %to &nclus2;
18785  +                %let _name = %sysfunc(varname(&dsid, &i));
18786  +                &_name
18787  +          %end;
18788  +          ;
18789  +    %let dsid= %sysfunc(close(&dsid));
18790  +     run;
18791  +     quit;
18792  +
18793  +    %if &RSquare eq Y %then %do;
18794  +
18795  +       data corr_tmp;
18796  +        set &outdata;
18797  +     run;
18798  +
18799  +     data &outdata(drop=i);
18800  +          set &outdata;
18801  +          %let dsid = %sysfunc(open(work.corr_tmp));
18802  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18803  +          %do i = 2 %to &nvar;
18804  +            %let _name = %sysfunc(varname(&dsid, &i));
18805  +            %let _name_md = &_name.**2;
18806  +                &_name = &_name_md;
18807  +          %end;
18808  +      %let dsid= %sysfunc(close(&dsid));
18809  +      run;
18810  +    %end;
18811  +
18812  +    %if &makeplotds eq Y %then %do;
18813  +     proc transpose data = &outdata
18814  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18815  +          by cluster;
18816  +     run;
18817  +     data &plotds;
18818  +          set  &plotds;
18819  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18820  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18821  +     run;
18822  +     %end;
18823  +     proc datasets lib = work nolist;
18824  +           delete corr_tmp;
18825  +     run;
18826  +     quit;
18827  +%mend MakeInterClusCorrData;
18828  +
18829  +
18830  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18831  +
18832  +data &outlink(drop = Selected);
18833  +     set &indata;
18834  +     LINKID = _N_;
18835  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18836  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18837  +run;
18838  +data &outnode(keep=NODEID TYPE LABEL);
18839  +    set &indata;
18840  +    length TYPE $16;
18841  +    rename Variable = NODEID;
18842  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18843  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18844  +    then  TYPE = "CLUSTER";
18845  +    else  TYPE="VARIABLE";
18846  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18847  +run;
18848  +quit;
18849  +%mend MakeClusConstellData;
18850  +
18851  +
18852  +
18853  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18854  +
18855  +data &outlink(drop = Selected);
18856  +     set &indata;
18857  +     LINKID = _N_;
18858  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18859  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18860  +run;
18861  +data &outnode(keep=NODEID TYPE LABEL);
18862  +    set &indata;
18863  +    length TYPE $16;
18864  +    rename Variable = NODEID;
18865  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18866  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18867  +    then  TYPE = "CLUSTER";
18868  +    else  TYPE="VARIABLE";
18869  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18870  +run;
18871  +quit;
18872  +%mend MakeClusConstellData;
18873  +
18874  +
18875  +/*--- This will work only when inds is not a view data -------
18876  +
18877  +%macro getNVarNObs(inds=, nvar=, nobs=);
18878  +
18879  +    %global &nvar;
18880  +    %global &nobs;
18881  +    data _null_;
18882  +         dsid = open("&inds");
18883  +         nv = attrn(dsid, 'NVAR');
18884  +         no = attrn(dsid, 'NOBS');
18885  +         dsid = close(dsid);
18886  +         call symput("&nvar", nv);
18887  +         call symput("&nobs", no);
18888  +    run;
18889  +    quit;
18890  +%mend  getNVarNObs;
18891  +
18892  ++---------------------------------------------------------------*/
18893  +
18894  +
18895  +%macro getNVar(inds=, nvar=);
18896  +    %global &nvar;
18897  +    data _null_;
18898  +         dsid = open("&inds");
18899  +         nv = attrn(dsid, 'NVAR');
18900  +         dsid = close(dsid);
18901  +         call symput("&nvar", nv);
18902  +    run;
18903  +    quit;
18904  +%mend  getNVar;
18905  +
18906  +
18907  +
18908  +%macro getNObs(inds=, nobs=);
18909  +    %global &nobs;
18910  +    data _null_;
18911  +        set &inds end=eof;
18912  +        if eof then call symput("&nobs", _N_);
18913  +    run;
18914  +    quit;
18915  +%mend  getNObs;
18916  +
18917  +%Macro CreateVarclusMeta(trainnum=);
18918  +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18919  +    data &EM_USER_VARCLUSMETA;
18920  +         length TrainNum 8.;
18921  +         length NewTrain $8;
18922  +         length NGCluster 8.;
18923  +         length ExportedComp $16;
18924  +         length HideVariable $8;
18925  +         TrainNum = &trainnum;
18926  +         NewTrain = "Y";
18927  +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18928  +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18929  +         NGCluster = 0; /* zero means no twostage */
18930  +   run;
18931  +   quit;
18932  +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18933  +
18934  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18935  +    data &outdata(drop= _NCL_  _TYPE_);
18936  +       set &indata;
18937  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18938  +       %if &globalclusid ne %then %do;
18939  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18940  +       rename _NAME_ = Cluster;
18941  +       %end;
18942  +       %else %do;
18943  +        _NAME_ = upcase(_NAME_);
18944  +       rename _NAME_ = Cluster;
18945  +       %end;
18946  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18947  +    run;
18948  +    data corr_tmp;
18949  +        set &outdata;
18950  +    run;
18951  +
18952  +    %let dsid = %sysfunc(open(work.corr_tmp));
18953  +    %let nclus2= %eval(&ncluster+1);
18954  +    data &outdata;
18955  +         set &outdata;
18956  +          %do i = 2 %to &nclus2;
18957  +          %let i_1 = %eval(&i-1);
18958  +            %let _name = %sysfunc(varname(&dsid, &i));
18959  +            %if &globalclusid ne %then
18960  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18961  +                     rename &_name = &_newName;
18962  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18963  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18964  +                %end;
18965  +            %else
18966  +                %do; %let _newName = CLUS&i_1;
18967  +                     rename &_name = &_newName;
18968  +                     *label &_name ="Cluster &i_1";
18969  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18970  +                %end;
18971  +          %end;
18972  +          keep Cluster
18973  +          %do i = 2 %to &nclus2;
18974  +                %let _name = %sysfunc(varname(&dsid, &i));
18975  +                &_name
18976  +          %end;
18977  +          ;
18978  +    %let dsid= %sysfunc(close(&dsid));
18979  +     run;
18980  +     quit;
18981  +
18982  +    %if &RSquare eq Y %then %do;
18983  +
18984  +       data corr_tmp;
18985  +        set &outdata;
18986  +     run;
18987  +
18988  +     data &outdata;
18989  +          set &outdata;
18990  +          %let dsid = %sysfunc(open(work.corr_tmp));
18991  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18992  +          %do i = 2 %to &nvar;
18993  +            %let _name = %sysfunc(varname(&dsid, &i));
18994  +            %let _name_md = &_name.**2;
18995  +                &_name = &_name_md;
18996  +          %end;
18997  +      %let dsid= %sysfunc(close(&dsid));
18998  +      run;
18999  +    %end;
19000  +
19001  +    %if &makeplotds eq Y %then %do;
19002  +     proc transpose data = &outdata
19003  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19004  +          by cluster;
19005  +     run;
19006  +     data &plotds;
19007  +          set  &plotds;
19008  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
19009  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
19010  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
19011  +     run;
19012  +     %end;
19013  +     proc datasets lib = work nolist;
19014  +           delete corr_tmp;
19015  +     run;
19016  +     quit;
19017  +%mend MakeInterClusCorrData;
19018  +
19019  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
19020  +    data _tmpds(drop= _NCL_);
19021  +       set &indata;
19022  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
19023  +       %if &globalclusid ne %then %do;
19024  +           _NAME_ = "GC&globalclusid.";
19025  +       rename _NAME_ = Cluster;
19026  +       %end;
19027  +       %else %do;
19028  +        _NAME_ = "CLUS";
19029  +        rename _NAME_ = Cluster;
19030  +       %end;
19031  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
19032  +    run;
19033  +    proc transpose data =_tmpds out =&outdata;
19034  +    run;
19035  +
19036  +    data &outdata(drop=COL1);
19037  +        %if &globalclusid ne %then %do;
19038  +        length GCluster $16;
19039  +        %end;
19040  +        length Cluster $32;
19041  +        length _NAME_ $32;
19042  +         set &outdata;
19043  +         _NAME_ = upcase(_NAME_);
19044  +         rename _NAME_=Variable;
19045  +         *label _NAME_="Variable";
19046  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19047  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19048  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19049  +
19050  +         %if &globalclusid ne %then %do;
19051  +          GCluster = "GC&globalclusid";
19052  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
19053  +         %end;
19054  +         %else %do;
19055  +         Cluster = "CLUS"||strip(COL1);
19056  +        %end;
19057  +         rename COL2 = RSqWithOwnClusComp;
19058  +         *label COL2 = "R-Square With Own Cluster Component";
19059  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
19060  +
19061  +   run;
19062  +   proc sort data =&outdata;
19063  +        by Cluster RSqWithOwnClusComp;
19064  +   run;
19065  +   proc datasets lib = work nolist;
19066  +           delete _tmpds;
19067  +   run;
19068  +   quit;
19069  +%mend MakeOwnRSquare;
19070  +
19071  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
19072  +    data &outdata(drop= _NCL_  _TYPE_);
19073  +       %if &globalclusid ne %then %do;
19074  +        length GCluster $16;
19075  +        %end;
19076  +       set &indata;
19077  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
19078  +       %if &globalclusid ne %then %do;
19079  +         GCluster = "GC&globalclusid";
19080  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
19081  +         rename _NAME_ = Cluster;
19082  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19083  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19084  +
19085  +       %end;
19086  +       %else %do;
19087  +         _NAME_ = upcase(_NAME_);
19088  +         rename _NAME_ = Cluster;
19089  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19090  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19091  +
19092  +       %end;
19093  +     run;
19094  +    %if &RSquare eq Y %then %do;
19095  +     data corr_tmp;
19096  +          set &outdata;
19097  +     run;
19098  +     %let istart = 2;
19099  +     %if &globalclusid ne %then %let istart = 3;
19100  +     data &outdata;
19101  +          set &outdata;
19102  +          %let dsid = %sysfunc(open(work.corr_tmp));
19103  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19104  +          %do i =&istart %to &nvar;
19105  +            %let _name = %sysfunc(varname(&dsid, &i));
19106  +            %let _name_md = &_name.**2;
19107  +                &_name = &_name_md;
19108  +          %end;
19109  +      %let dsid= %sysfunc(close(&dsid));
19110  +      run;
19111  +      proc datasets lib = work nolist;
19112  +           delete corr_tmp;
19113  +      run;
19114  +    %end;
19115  +     quit;
19116  +%mend MakeClusStructCorrData;
19117  +
19118  +/*
19119  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
19120  +*/
19121  +
19122  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
19123  +
19124  +     /* The indata should be the outdata
19125  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
19126  +
19127  +     proc sort data =&indata out=_tmpclusRsq;
19128  +     by cluster;
19129  +     run;
19130  +
19131  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
19132  +      by cluster;
19133  +     run;
19134  +
19135  +     proc sort data=_tmpclusRsq;
19136  +        by _NAME_ COL1;
19137  +     run;
19138  +
19139  +     data _tmpclusRsq;
19140  +         length _NAME_ $32;
19141  +         set _tmpclusRsq; by _NAME_;
19142  +          _NAME_ = upcase(_NAME_);
19143  +          %if &ncluster ne 1 %then %do;
19144  +             if last._NAME_ then delete;
19145  +          %end;
19146  +          %else %do;
19147  +             COL1 = 0;
19148  +          %end;
19149  +     run;
19150  +     /* need to sort again */
19151  +     proc sort data=_tmpclusRsq;
19152  +        by _NAME_ COL1;
19153  +     run;
19154  +
19155  +     data &outdata;
19156  +         set _tmpclusRsq; by _NAME_;
19157  +         Cluster = upcase(Cluster);
19158  +         if last._NAME_ then output;
19159  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19160  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19161  +         rename COL1 = RSqWithNextClusComp;
19162  +         Cluster = upcase(Cluster);
19163  +         rename Cluster = ClosestCluster;
19164  +         *label  Cluster = "Next Closest Cluster";
19165  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19166  +         rename _NAME_ = Variable;
19167  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19168  +    run;
19169  +
19170  +
19171  +    %if &globalclusid ne %then %do;
19172  +    data &outdata;
19173  +       length GCluster $16;
19174  +       set &outdata;
19175  +       GCluster = "GC&globalclusid";
19176  +       run;
19177  +    %end;
19178  +    proc datasets lib = work nolist;
19179  +           delete _tmpclusRsq;
19180  +    run;
19181  +    quit;
19182  +%mend FindNextClosestClusByVar;
19183  +
19184  +
19185  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
19186  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
19187  +     proc sort data =&indata out=_tmpclusRsq;
19188  +     by cluster;
19189  +     run;
19190  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
19191  +     by cluster;
19192  +     run;
19193  +     proc sort data=_tmpclusRsq;
19194  +        by _NAME_ col1;
19195  +     run;
19196  +     data _tmpclusRsq;
19197  +         length _NAME_ $32;
19198  +         set _tmpclusRsq; by _NAME_;
19199  +          _NAME_ = upcase(_NAME_);
19200  +          %if &ncluster ne 1 %then %do;
19201  +             if last._NAME_ then delete;
19202  +          %end;
19203  +          %else %do;
19204  +             COL1 = 0;
19205  +          %end;
19206  +     run;
19207  +     data &outdata;
19208  +         set _tmpclusRsq; by _NAME_;
19209  +         Cluster = upcase(Cluster);
19210  +         if last._NAME_ then output;
19211  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19212  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19213  +         rename COL1 = RSqWithNextClusComp;
19214  +         Cluster = upcase(Cluster);
19215  +         rename Cluster = ClosestCluster;
19216  +         *label  Cluster = "Next Closest Cluster";
19217  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19218  +         rename _NAME_ = Variable;
19219  +         *label  _NAME_ = "Variable";
19220  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19221  +
19222  +    run;
19223  +    %if &globalclusid ne %then %do;
19224  +    data &outdata;
19225  +       length GCluster $16;
19226  +       set &outdata;
19227  +       GCluster = "GC&globalclusid";
19228  +       run;
19229  +    %end;
19230  +
19231  +    proc datasets lib = work nolist;
19232  +           delete _tmpclusRsq;
19233  +    run;
19234  +
19235  +    quit;
19236  +%mend FindNextClosestClusByCluster;
19237  +
19238  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
19239  +/*----
19240  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
19241  +-----------*/
19242  +
19243  +proc sort data =&indata1;
19244  +    by Variable;
19245  +run;
19246  +proc sort data =&indata2;
19247  +    by Variable;
19248  +run;
19249  +data &outdata;
19250  +    merge &indata1 &indata2;
19251  +    by Variable;
19252  +    length Type $16;
19253  +    Type = 'Variable';
19254  +    *label Type ='Type';
19255  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19256  +run;
19257  +
19258  +
19259  +data &indata3;
19260  +    set  &indata3 ;
19261  +    length RSqWithOwnClusComp 8.;
19262  +    Cluster = Variable;
19263  +    RSqWithOwnClusComp = 1;
19264  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
19265  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
19266  +    length Type $16;
19267  +    Type = 'ClusterComp';
19268  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19269  +
19270  +;
19271  +run;
19272  +
19273  +proc sort data=&outdata;
19274  +    by Cluster;
19275  +run;
19276  +proc sort data =&indata3;
19277  +    by Cluster;
19278  +run;
19279  +
19280  +data &outdata;
19281  +     set &outdata &indata3;
19282  +     by Cluster;
19283  +run;
19284  +
19285  +
19286  +/* Create the Selected variable with all YES */
19287  +
19288  +data &outdata;
19289  +     set &outdata;
19290  +     length RsqRatio 8.;
19291  +     length Selected $8;
19292  +     *label RSqRatio = "1-R**2 Ratio";
19293  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
19294  +     *label Selected = "Variable Selected";
19295  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
19296  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
19297  +     Selected ='YES';
19298  +     rename _LABEL_ = Label;
19299  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19300  +run;
19301  +
19302  +
19303  +/*----  Selected = Y/N will be assigened at the %score                   -------+
19304  +        Just create the Selected variable with all YES at the step above
19305  + +------------------------------------------------------------------------------+
19306  +
19307  +proc sort data=&outdata;
19308  +    by Cluster RsqRatio;
19309  +run;
19310  +
19311  +%if &selectedcomp eq CLUSTERCOMP %then %do;
19312  +data &outdata;
19313  +     set &outdata; by Cluster;
19314  +     length Selected $8;
19315  +     label Selected = "Variable Selected";
19316  +     if  first.Cluster then Selected ='Yes';
19317  +     else Selected = 'No';
19318  +    run;
19319  +%end;
19320  +%else %do;
19321  +data &outdata(drop = _var _varchange);
19322  +     set &outdata; retain _var 0; by Cluster;
19323  +     length Selected $8;
19324  +     label Selected = "Variable Selected";
19325  +     if first.Cluster then  _varchange = 0;
19326  +     else _varchange =1;
19327  +     if _var ne _varchange then  Selected  = 'Yes';
19328  +     else Selected = 'No';
19329  +     if last.cluster then  _var = 0;
19330  +     else _var = _varchange;
19331  +run;
19332  +%end;
19333  +
19334  +--------------------------------------------------------------*/
19335  +
19336  +quit;
19337  +%mend MakeVarClusResultTable;
19338  +
19339  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
19340  +     proc sort data =&indata;
19341  +        by cluster;
19342  +     run;
19343  +     proc transpose data =&indata
19344  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19345  +          by cluster;
19346  +     run;
19347  +     data &outdata;
19348  +          set  &outdata;
19349  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19350  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19351  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
19352  +     run;
19353  +     %if &globalclusid ne %then %do;
19354  +     data &outdata;
19355  +          Length GCluster $16;
19356  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19357  +          set  &outdata;
19358  +          GCluster ="GC&globalclusid.";
19359  +          run;
19360  +     %end;
19361  +
19362  +%Mend MakePlotDataFromCorrTable;
19363  +
19364  +
19365  +%macro MakeCorrelation(indata=,
19366  +                       outstat=_tmpoutstat,
19367  +                       corrmatrix=N,
19368  +                       outcorr=_tmpoutcorr,
19369  +                       includeclassvar=N,
19370  +                       target=,
19371  +                       freq=,
19372  +                       weight=);
19373  +   %if &target eq  %then %do;
19374  +
19375  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19376  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19377  +       %if &includeclassvar eq Y %then %do;
19378  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19379  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19380  +          %do i = 2 %to &nvar;
19381  +          %let varname = %sysfunc(varname(&dsid, &i));
19382  +          &varname
19383  +          %end;
19384  +       %end;
19385  +       ;
19386  +      %if &freq ne  %then %do;
19387  +          freq &freq;
19388  +      %end;
19389  +      %if &weight ne  %then %do;
19390  +          weight &weight;
19391  +      %end;
19392  +
19393  +      run;
19394  +      %if &corrmatrix eq Y %then %do;
19395  +      data  &outcorr (drop = _NCL_ _TYPE_);
19396  +           set  &outstat ;
19397  +           if _TYPE_ ='CORR' then output;
19398  +      run;
19399  +      %end;
19400  +    %end;
19401  +    %else %do;
19402  +       proc corr data=&indata outp=&outstat noprint;
19403  +            var
19404  +       %let dsid = %sysfunc(open(&indata));
19405  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19406  +          %do i = 1 %to &nvar;
19407  +              %let _name = %sysfunc(varname(&dsid, &i));
19408  +              %if &_name ne &target %then;
19409  +              &_name
19410  +           %end;
19411  +        %let dsid= %sysfunc(close(&dsid));
19412  +        ;
19413  +        with &target;
19414  +        run;
19415  +    %end;
19416  +    quit;
19417  +%mend MakeCorrelation;
19418  +
19419  +
19420  +%macro MakeCorrelationDistance(indata=,
19421  +                               outdata=,
19422  +                               rsquare = N
19423  +                               );
19424  +    data corr_tmp;
19425  +        set &indata;
19426  +        if _N_ = 1 then do;
19427  +           output;
19428  +           stop;
19429  +         end;
19430  +    run;
19431  +    %if &outdata ne  %then %let  _outdata = &outdata;
19432  +    %else %let _outdata = &indata;
19433  +
19434  +    data &_outdata;
19435  +         set &indata;
19436  +
19437  +         %let dsid = %sysfunc(open(work.corr_tmp));
19438  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19439  +          %do i = 2 %to &nvar;
19440  +              %let _name = %sysfunc(varname(&dsid, &i));
19441  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19442  +              %else  %let _name_md = &_name;
19443  +              &_name = 1- &_name_md;
19444  +          %end;
19445  +      %let dsid= %sysfunc(close(&dsid));
19446  +      run;
19447  +      proc datasets lib = work nolist;
19448  +           delete corr_tmp;
19449  +      run;
19450  +      quit;
19451  +  %mend MakeCorrelationDistance;
19452  +
19453  +
19454  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19455  +                                   rsquare = N
19456  +                                   );
19457  +    data corr_tmp;
19458  +        set &indata;
19459  +    run;
19460  +    proc sql noprint;
19461  +           update &indata
19462  +           set
19463  +     %let dsid = %sysfunc(open(work.corr_tmp));
19464  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19465  +          %do i = 4 %to &nvar;
19466  +          %let _name = %sysfunc(varname(&dsid, &i));
19467  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19468  +            %else  %let _name_md = &_name;
19469  +            %if &i < &nvar %then %do;
19470  +               &_name = 1- &_name_md ,
19471  +            %end;
19472  +            %else %do;
19473  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19474  +            %end;
19475  +          %end;
19476  +      %let dsid= %sysfunc(close(&dsid));
19477  +
19478  +      select * from &indata;
19479  +      run;
19480  +     data &indata( drop = _NCL_);
19481  +           set &indata;
19482  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19483  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19484  +     run;
19485  +     data &indata(DROP = _NCL_);
19486  +           set &indata;
19487  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19488  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19489  +           rename _NAME_ = _VAR_;
19490  +     run;
19491  +     proc datasets lib = work nolist;
19492  +           delete corr_tmp;
19493  +     run;
19494  +     quit;
19495  + %mend UpdateOutStatCorrToDistance;
19496  +
19497  +
19498  +%macro HierClusWithCorr(indata= ,
19499  +                        ncluster=,
19500  +                        method = Ward,
19501  +                        outtree = _outtree,
19502  +                        idvar =_VAR_,
19503  +                        outdata=,
19504  +                        rescore = N,
19505  +                        newncluster=
19506  +                        );
19507  +      %global &newncluster;
19508  +      %if &rescore ne Y %then %do;
19509  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19510  +                   method=&method outtree=&outtree noprint;
19511  +           id &idvar;
19512  +      run;
19513  +      %end;
19514  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19515  +      run;
19516  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19517  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19518  +      run;
19519  +      data _outcontent;
19520  +          set _outcontent;
19521  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19522  +          index = 1;
19523  +          rename NAME = _NAME_;
19524  +      run;
19525  +      proc sort data=_outcontent;
19526  +          by _NAME_;
19527  +      run;
19528  +      proc sort data =&outdata;
19529  +           by _NAME_;
19530  +      run;
19531  +      data &outdata(drop=index);
19532  +          merge &outdata _outcontent;
19533  +          by _NAME_;
19534  +          if index = . then delete;
19535  +      run;
19536  +      /*-----------------------------------------------------------*/
19537  +      data &outdata;
19538  +           length CLUSNAME $16;
19539  +           set &outdata;
19540  +           if CLUSTER > &ncluster then delete;
19541  +           CLUSNAME='GC'||strip(CLUSTER);
19542  +           *label CLUSNAME = "Cluster Name";
19543  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19544  +           rename _NAME_ = VARIABLE ;
19545  +           *label _NAME_ = "Variable";
19546  +           *label CLUSTER = "Cluster";
19547  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19548  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19549  +      run;
19550  +      proc sort data=&outdata out=&outdata;
19551  +           by CLUSTER;
19552  +      run;
19553  +      proc means data =&outdata noprint;
19554  +           output out=_meanout;
19555  +      run;
19556  +      data _null_;
19557  +            set _meanout;
19558  +            if strip(_STAT_) eq 'MAX' then do;
19559  +            call symput("&newncluster", CLUSTER);
19560  +            stop;
19561  +            end;
19562  +      run;
19563  +
19564  +      proc datasets lib = work nolist;
19565  +           delete _outcontent _meanout;
19566  +      run;
19567  +      quit;
19568  +%mend  HierClusWithCorr;
19569  +
19570  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19571  +
19572  +     data _tmpindata;
19573  +          set &indata;
19574  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19575  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19576  +          if _TYPE_ = 'STD' then _NAME_='STD';
19577  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19578  +          DROP _TYPE_ _NCL_;
19579  +     run;
19580  +
19581  +     filename _file_  "&fileRef";
19582  +
19583  +     data _null_;
19584  +        FILE _file_ MOD;
19585  +        put ' ';
19586  +        put "/*-------------------------------------------------*/";
19587  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19588  +        put "/*-------------------------------------------------*/";
19589  +        put ' ';
19590  +        %let dsid = %sysfunc(open(work._tmpindata));
19591  +
19592  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19593  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19594  +        %let k = 1;
19595  +        %do %while(^%sysfunc(fetch(&dsid)));
19596  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19597  +               %if &k > 2 %then %do;
19598  +                %let cn = %eval(&k-2);
19599  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19600  +                %end;
19601  +                %let k = %eval(&k+1);
19602  +
19603  +        %end;
19604  +        %let rc = %sysfunc(rewind(&dsid));
19605  +
19606  +        %do j= 2 %to &nvar;
19607  +            %let _varname = %sysfunc(varname(&dsid, &j));
19608  +            %do %while(^%sysfunc(fetch(&dsid)));
19609  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19610  +                %if &_name = MEAN %then
19611  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19612  +                %else %if &_name = STD %then
19613  +                %let _std = %sysfunc(getvarn(&dsid, &j));
19614  +                %else %do;
19615  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19616  +                      %let abscoeff = %sysfunc(abs(&coeff));
19617  +                          %if &abscoeff >  0 %then %do;
19618  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19619  +                           %end;
19620  +                 %end;
19621  +             %end;
19622  +             %let rc = %sysfunc(rewind(&dsid));
19623  +         %end;
19624  +
19625  +        %let dsid= %sysfunc(close(&dsid));
19626  +
19627  +     run;
19628  +
19629  +     filename _file_;
19630  +     proc datasets lib = work nolist;
19631  +           delete _tmpindata;
19632  +     run;
19633  +     quit;
19634  +%mend CreateScoreCode2;
19635  +
19636  +
19637  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19638  +
19639  +     /*--- Build Code to Modify Metadata ---*/
19640  +     filename X "&deltacodefile";
19641  +     data _null_;
19642  +        FILE X;
19643  +        set &groupds end=eof;
19644  +        if _N_=1 then do;
19645  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19646  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19647  +           %end;
19648  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19649  +           put "if upcase(strip(NAME)) in (";
19650  +        end;
19651  +        if Strip(upcase(Selected)) eq 'YES' then do;
19652  +           string = '"'!!trim(left(VARIABLE))!!'"';
19653  +           put string;
19654  +        end;
19655  +        if eof then do;
19656  +           put ') then ROLE="INPUT";';
19657  +           put 'else ROLE="REJECTED";';
19658  +           put 'end;';
19659  +
19660  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19661  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19662  +           %end;
19663  +        end;
19664  +     run;
19665  +     quit;
19666  +
19667  +     filename X;
19668  +     quit;
19669  +%mend MakeDeltaCode2;
19670  +
19671  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19672  +  %global &ngc;
19673  +  data _null_;
19674  +  %if &indata ne %then %do;
19675  +      %let dsid = %sysfunc(open(&indata));
19676  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19677  +      %let dsid = %sysfunc(close(&dsid));
19678  +  %end;
19679  +  %else %do;
19680  +       %let nvar = %eval(&ninput+&ndummy); ;
19681  +  %end;
19682  +  %let numgc = %eval(&nvar/&div+2);
19683  +  %let &ngc = &numgc;
19684  +   run;
19685  +  quit;
19686  +%mend getInitialGClusterNumber;
19687  +
19688  +
19689  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19690  +data &outlink(drop = Selected);
19691  +     set &indata;
19692  +     LINKID = _N_;
19693  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19694  +run;
19695  +data &outnode(keep=NODEID TYPE LABEL);
19696  +    set &indata;
19697  +    length TYPE $16;
19698  +    rename VARIABLE = NODEID;
19699  +    *label  CLUSNAME="Node ID";
19700  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19701  +    TYPE = "VARIABLE";
19702  +    *label TYPE = "Node Type";
19703  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19704  +    run;
19705  +data _tmp(keep=NODEID TYPE LABEL);
19706  +    set &indata;
19707  +    length TYPE $16;
19708  +    rename CLUSNAME = NODEID;
19709  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19710  +    TYPE = "GCLUSTER";
19711  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19712  +    run;
19713  +proc sort data=_tmp;
19714  +    by NODEID;
19715  +run;
19716  +data _tmp;
19717  +    set _tmp; by NODEID;
19718  +    if first.NODEID then output;
19719  +run;
19720  +proc sort data=&outnode;
19721  +    by NODEID;
19722  +run;
19723  +data  &outnode;
19724  +    set _tmp &outnode;
19725  +run;
19726  +proc datasets lib = work nolist;
19727  +     delete _tmp;
19728  +run;
19729  +quit;
19730  +%mend MakeGobalConstellData;
19731  +
19732  +/* Make contellation plot data among GCLUSTERS */
19733  +
19734  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19735  +
19736  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19737  +     set &indata;
19738  +     LINKID = _N_;
19739  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19740  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19741  +     end;
19742  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19743  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19744  +     end;
19745  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19746  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19747  +    end;
19748  +run;
19749  +
19750  +data _tmp_outrsquare;
19751  +        set &inoutrsq;
19752  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19753  +run;
19754  +
19755  +proc freq data =_tmp_outrsquare noprint;
19756  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19757  +run;
19758  +
19759  +data &outnode(keep=_NAME_ TYPE LABEL);
19760  +    set &outlink;
19761  +    length TYPE $16;
19762  +    length LABEL $100;
19763  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19764  +
19765  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19766  +    TYPE = "GCLUSTER";
19767  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19768  +    end;
19769  +    else do;
19770  +    TYPE= "ROOT";
19771  +    LABEL= _NAME_;
19772  +    end;
19773  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19774  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19775  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19776  +    run;
19777  +
19778  +proc sort data=&outnode;
19779  +     by _NAME_;
19780  +proc sort data=_tmp_GCLUSFREQ;
19781  +     by _NAME_;
19782  +run;
19783  +
19784  +data  &outnode;
19785  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19786  +     if COUNT=. then COUNT=1;
19787  +run;
19788  +
19789  +proc datasets lib = work nolist;
19790  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19791  +run;
19792  +
19793  +quit;
19794  +%Mend MakeGClusterConstData;
19795  +
19796  +
19797  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19798  +
19799  +    data _gscoretmpds;
19800  +          set &indata;
19801  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19802  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19803  +          if _TYPE_ = 'STD' then _NAME_='STD';
19804  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19805  +          DROP _TYPE_ _NCL_;
19806  +     run;
19807  +
19808  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19809  +        GCluster Component &globalclusid ------ */
19810  +
19811  +    filename _file_  "&fileref";
19812  +
19813  +    data _null_;
19814  +        %if &globalclusid eq 1 %then %do;
19815  +          FILE _file_;
19816  +        %end;
19817  +        %else %do;
19818  +          FILE _file_ MOD;
19819  +        %end;
19820  +
19821  +        %let dsid = %sysfunc(open(work._gscoretmpds));
19822  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19823  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19824  +
19825  +        %let k = 1;
19826  +        %do %while(^%sysfunc(fetch(&dsid)));
19827  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19828  +                %if &k > 2 %then %do;
19829  +                put "&_name = 0 ; ";
19830  +                %end;
19831  +                %let k = %eval(&k+1);
19832  +        %end;
19833  +
19834  +        %let rc = %sysfunc(rewind(&dsid));
19835  +        %do i= 2 %to &nvar;
19836  +            %let _varname =  %sysfunc(varname(&dsid, &i));
19837  +            %do %while(^%sysfunc(fetch(&dsid)));
19838  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19839  +                %if &_name = MEAN %then
19840  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19841  +                %else %if &_name = STD %then
19842  +                %let _std = %sysfunc(getvarn(&dsid, &i));
19843  +                %else %do;
19844  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19845  +                      %let abscoeff = %sysfunc(abs(&coeff));
19846  +                          %if &abscoeff >  0 %then %do;
19847  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19848  +                           %end;
19849  +                 %end;
19850  +             %end;
19851  +             %let rc = %sysfunc(rewind(&dsid));
19852  +
19853  +         %end;
19854  +
19855  +        %let dsid= %sysfunc(close(&dsid));
19856  +       run;
19857  +
19858  +
19859  +       proc datasets lib=work nolist;
19860  +            delete _gscoretmpds;
19861  +       run;
19862  +      quit;
19863  +
19864  +%mend CreateGClusterScoreCode;
19865  +
19866  +
19867  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19868  +
19869  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19870  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19871  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19872  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19873  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19874  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19875  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19876  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19877  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19878  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19879  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19880  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19881  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19882  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19883  +
19884  +   filename gsfile "&gscorecode";
19885  +
19886  +   data &EM_USER_GSCORE;
19887  +             set &indata;
19888  +             %include  gsfile;
19889  +        keep
19890  +        %do i=1 %to &ngcluster;
19891  +         %let gcvarname = GC&i;
19892  +         &gcvarname
19893  +        %end;
19894  +     ;
19895  +   run;
19896  +
19897  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19898  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19899  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19900  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19901  +    noprint  ;
19902  +     var
19903  +       %do i=1 %to &ngcluster;
19904  +         %let gcvarname = GC&i;
19905  +         &gcvarname
19906  +        %end;
19907  +   ;
19908  +   run;
19909  +
19910  +
19911  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19912  +   data &EM_USER_GSCORECORRPLOT ;
19913  +        set &EM_USER_GSCORECORRPLOT;
19914  +        rename _X_ = X;
19915  +        rename _Y_ = Y;
19916  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19917  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19918  +   run;
19919  +
19920  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19921  +
19922  +   data &EM_USER_GSCORETREE;
19923  +        length _NAME_ $32;
19924  +        length _LABEL_ $100;
19925  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19926  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19927  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19928  +        end;else do;
19929  +         _LABEL_ = _NAME_;
19930  +        end;
19931  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19932  +
19933  +   run;
19934  +
19935  +   quit;
19936  +
19937  +%mend MakeGClusterCorrelation;
19938  +
19939  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19940  +%macro score;
19941  +
19942  +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19943  +%include temp;
19944  +filename temp;
19945  +
19946  +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19947  +
19948  +data _null_;
19949  +         set &EM_USER_VARCLUSMETA;
19950  +         if _N_=1 then
19951  +         call symput('_trainnum', TrainNum);
19952  +         call symput('_exportedcomp', ExportedComp);
19953  +         call symput('_hidevariable', HideVariable);
19954  +         call symput('_newTrain', NewTrain);
19955  +run;
19956  +
19957  +%if &_newTrain = N %then %do;
19958  +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19959  +        %else %let _exportedCompChanged = Y;
19960  +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19961  +        %else  %let _hideVariableChanged = Y;
19962  +%end;
19963  +%else %do;
19964  +        %let _exportedCompChanged = Y;
19965  +        %let _hideVariableChanged = Y;
19966  +%end;
19967  +
19968  +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19969  +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19970  +     %include temp;
19971  +     filename temp;
19972  +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19973  +%end;
19974  +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19975  +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19976  +     %include temp;
19977  +     filename temp;
19978  +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19979  +%end;
19980  +
19981  +  /* store  current property values */
19982  + data &EM_USER_VARCLUSMETA;
19983  +       set &EM_USER_VARCLUSMETA;
19984  +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19985  +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19986  + run;
19987  +
19988  +%mend score;
19989  +
19990  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19991  +
19992  +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19993  +     proc sort data =&indata;
19994  +              by Cluster RsqRatio Type;
19995  +     run;
19996  +     /*----------------------------------------------------------------------
19997  +      The Type variabe is used becuse the variable need to be selected
19998  +        instead of Cluster component when only one variable is in the cluster
19999  +     +-----------------------------------------------------------------------*/
20000  +
20001  +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
20002  +         data &indata;
20003  +              set &indata; by cluster;
20004  +              if first.Cluster then Selected = 'YES';
20005  +              else Selected = 'NO';
20006  +         run;
20007  +         quit;
20008  +    %end;
20009  +    %else %do;
20010  +         data &indata(drop = _var _varchange);
20011  +              set &indata; retain _var 0; by Cluster;
20012  +             if first.Cluster then  _varchange = 0;
20013  +                 else _varchange =1;
20014  +             if _var ne _varchange then  Selected  = 'YES';
20015  +             else Selected = 'NO';
20016  +             if last.cluster then  _var = 0;
20017  +             else _var = _varchange;
20018  +         run;
20019  +         quit;
20020  +    %end;
20021  +%mend ChangeVariableSelectionFlag;
20022  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15   
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE2.SOURCE.
20023  +
20024  +%macro score2(ExportedCompChanged=,
20025  +              HideVariableChanged=);
20026  +
20027  +    %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
20028  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA);
20029  +     data _null_;
20030  +             set &EM_USER_VARCLUSMETA;
20031  +             if _N_=1 then
20032  +             call symput('_ngclus', NGCluster);
20033  +     run;
20034  +
20035  +    %if &ExportedCompChanged = Y %then %do;
20036  +        %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
20037  +    %end;
20038  +
20039  +    %do i =1 %to &_ngclus;
20040  +            %let outrsquareds = OUTRSQUARE&i;
20041  +            %let gc = GC&i;
20042  +            %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
20043  +            %let emuseroutrsq = &EM_USER_&outrsquareds;
20044  +            data &emuseroutrsq;
20045  +                 set &EM_USER_OUTRSQUARE;
20046  +                 if strip(GCluster) ne "&gc" then delete;
20047  +            run;
20048  +            /*
20049  +            proc print data = &emuseroutrsq;
20050  +            run;
20051  +            */
20052  +    %end;
20053  +
20054  +    %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
20055  +
20056  +%mend score2;
20057  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      109072:212   
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.01 seconds
      


NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 348 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           2.64 seconds
      cpu time            0.01 seconds
      


NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 348 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           2.46 seconds
      cpu time            0.03 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE1 has 82 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           2.81 seconds
      cpu time            0.01 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE2 has 208 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           2.90 seconds
      cpu time            0.06 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE3 has 14 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           2.78 seconds
      cpu time            0.03 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE4 has 5 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           2.92 seconds
      cpu time            0.03 seconds
      

WARNING: Apparent symbolic reference EM_USER_ not resolved.

NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE5 has 39 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           2.79 seconds
      cpu time            0.04 seconds
      


NOTE: The file X is:
      (no system-specific pathname available), 
      (no system-specific file attributes available)

NOTE: 12 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 93.
NOTE: There were 348 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.59 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           2.18 seconds
      cpu time            0.03 seconds
      

20058   *------------------------------------------------------------*;
20059   * End SCORE: VarClus;
20060   *------------------------------------------------------------*;
20061   

20062   filename emflow "\\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
20063   *------------------------------------------------------------*;
20064   * VarClus: Scoring DATA data;
20065   *------------------------------------------------------------*;
20066   data EMWS3.VarClus_TRAIN
20067   / view=EMWS3.VarClus_TRAIN
20068   ;
20069   set EMWS3.Part_TRAIN
20070   ;
20071   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas.
20072  +*** Begin Class Look-up, Standardization, Replacement ;
20073  +
20074  +*** Generate dummy variables for BOTHPAYM ;
20075  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
20076  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
20077  +if missing( BOTHPAYM ) then do;
20078  +   BOTHPAYM0 = .;
20079  +   BOTHPAYM1 = .;
20080  +end;
20081  +else do;
20082  +   length _dm4 $ 4; drop _dm4 ;
20083  +   _dm4 = put( BOTHPAYM , $4. );
20084  +   %DMNORMIP( _dm4 )
20085  +   if _dm4 = '0'  then do;
20086  +      BOTHPAYM0 = 1;
20087  +      BOTHPAYM1 = 0;
20088  +   end;
20089  +   else if _dm4 = '1'  then do;
20090  +      BOTHPAYM0 = 0;
20091  +      BOTHPAYM1 = 1;
20092  +   end;
20093  +   else do;
20094  +      delete;
20095  +   end;
20096  +end;
20097  +
20098  +*** Generate dummy variables for CCPAYM ;
20099  +label CCPAYM0 = 'CCPAYM=0' ;
20100  +label CCPAYM1 = 'CCPAYM=1' ;
20101  +if missing( CCPAYM ) then do;
20102  +   CCPAYM0 = .;
20103  +   CCPAYM1 = .;
20104  +end;
20105  +else do;
20106  +   length _dm4 $ 4; drop _dm4 ;
20107  +   _dm4 = put( CCPAYM , $4. );
20108  +   %DMNORMIP( _dm4 )
20109  +   if _dm4 = '0'  then do;
20110  +      CCPAYM0 = 1;
20111  +      CCPAYM1 = 0;
20112  +   end;
20113  +   else if _dm4 = '1'  then do;
20114  +      CCPAYM0 = 0;
20115  +      CCPAYM1 = 1;
20116  +   end;
20117  +   else do;
20118  +      delete;
20119  +   end;
20120  +end;
20121  +
20122  +*** Generate dummy variables for PCPAYM ;
20123  +label PCPAYM0 = 'PCPAYM=0' ;
20124  +label PCPAYM1 = 'PCPAYM=1' ;
20125  +if missing( PCPAYM ) then do;
20126  +   PCPAYM0 = .;
20127  +   PCPAYM1 = .;
20128  +end;
20129  +else do;
20130  +   length _dm4 $ 4; drop _dm4 ;
20131  +   _dm4 = put( PCPAYM , $4. );
20132  +   %DMNORMIP( _dm4 )
20133  +   if _dm4 = '0'  then do;
20134  +      PCPAYM0 = 1;
20135  +      PCPAYM1 = 0;
20136  +   end;
20137  +   else if _dm4 = '1'  then do;
20138  +      PCPAYM0 = 0;
20139  +      PCPAYM1 = 1;
20140  +   end;
20141  +   else do;
20142  +      delete;
20143  +   end;
20144  +end;
20145  +
20146  +*** Generate dummy variables for ACTBUY ;
20147  +label ACTBUY0 = 'ACTBUY=0' ;
20148  +label ACTBUY1 = 'ACTBUY=1' ;
20149  +label ACTBUY2 = 'ACTBUY=2' ;
20150  +label ACTBUY3 = 'ACTBUY=3' ;
20151  +label ACTBUY4 = 'ACTBUY=4' ;
20152  +label ACTBUY5 = 'ACTBUY=5' ;
20153  +label ACTBUY6 = 'ACTBUY=6' ;
20154  +label ACTBUY7 = 'ACTBUY=7' ;
20155  +label ACTBUY8 = 'ACTBUY=8' ;
20156  +label ACTBUY9 = 'ACTBUY=9' ;
20157  +label ACTBUY10 = 'ACTBUY=10' ;
20158  +*** encoding is sparse, initialize to zero;
20159  +ACTBUY0 = 0;
20160  +ACTBUY1 = 0;
20161  +ACTBUY2 = 0;
20162  +ACTBUY3 = 0;
20163  +ACTBUY4 = 0;
20164  +ACTBUY5 = 0;
20165  +ACTBUY6 = 0;
20166  +ACTBUY7 = 0;
20167  +ACTBUY8 = 0;
20168  +ACTBUY9 = 0;
20169  +ACTBUY10 = 0;
20170  +if missing( ACTBUY ) then do;
20171  +   ACTBUY0 = .;
20172  +   ACTBUY1 = .;
20173  +   ACTBUY2 = .;
20174  +   ACTBUY3 = .;
20175  +   ACTBUY4 = .;
20176  +   ACTBUY5 = .;
20177  +   ACTBUY6 = .;
20178  +   ACTBUY7 = .;
20179  +   ACTBUY8 = .;
20180  +   ACTBUY9 = .;
20181  +   ACTBUY10 = .;
20182  +end;
20183  +else do;
20184  +   length _dm12 $ 12; drop _dm12 ;
20185  +   _dm12 = put( ACTBUY , BEST12. );
20186  +   %DMNORMIP( _dm12 )
20187  +   _dm_find = 0; drop _dm_find;
20188  +   if _dm12 <= '4'  then do;
20189  +      if _dm12 <= '10'  then do;
20190  +         if _dm12 <= '1'  then do;
20191  +            if _dm12 = '0'  then do;
20192  +               ACTBUY0 = 1;
20193  +               _dm_find = 1;
20194  +            end;
20195  +            else do;
20196  +               if _dm12 = '1'  then do;
20197  +                  ACTBUY1 = 1;
20198  +                  _dm_find = 1;
20199  +               end;
20200  +            end;
20201  +         end;
20202  +         else do;
20203  +            if _dm12 = '10'  then do;
20204  +               ACTBUY10 = 1;
20205  +               _dm_find = 1;
20206  +            end;
20207  +         end;
20208  +      end;
20209  +      else do;
20210  +         if _dm12 <= '3'  then do;
20211  +            if _dm12 = '2'  then do;
20212  +               ACTBUY2 = 1;
20213  +               _dm_find = 1;
20214  +            end;
20215  +            else do;
20216  +               if _dm12 = '3'  then do;
20217  +                  ACTBUY3 = 1;
20218  +                  _dm_find = 1;
20219  +               end;
20220  +            end;
20221  +         end;
20222  +         else do;
20223  +            if _dm12 = '4'  then do;
20224  +               ACTBUY4 = 1;
20225  +               _dm_find = 1;
20226  +            end;
20227  +         end;
20228  +      end;
20229  +   end;
20230  +   else do;
20231  +      if _dm12 <= '7'  then do;
20232  +         if _dm12 <= '6'  then do;
20233  +            if _dm12 = '5'  then do;
20234  +               ACTBUY5 = 1;
20235  +               _dm_find = 1;
20236  +            end;
20237  +            else do;
20238  +               if _dm12 = '6'  then do;
20239  +                  ACTBUY6 = 1;
20240  +                  _dm_find = 1;
20241  +               end;
20242  +            end;
20243  +         end;
20244  +         else do;
20245  +            if _dm12 = '7'  then do;
20246  +               ACTBUY7 = 1;
20247  +               _dm_find = 1;
20248  +            end;
20249  +         end;
20250  +      end;
20251  +      else do;
20252  +         if _dm12 = '8'  then do;
20253  +            ACTBUY8 = 1;
20254  +            _dm_find = 1;
20255  +         end;
20256  +         else do;
20257  +            if _dm12 = '9'  then do;
20258  +               ACTBUY9 = 1;
20259  +               _dm_find = 1;
20260  +            end;
20261  +         end;
20262  +      end;
20263  +   end;
20264  +   if not _dm_find then do;
20265  +      delete;
20266  +   end;
20267  +end;
20268  +
20269  +*** Generate dummy variables for DEPT07 ;
20270  +label DEPT070 = 'DEPT07=0' ;
20271  +label DEPT073 = 'DEPT07=3' ;
20272  +label DEPT074 = 'DEPT07=4' ;
20273  +label DEPT075 = 'DEPT07=5' ;
20274  +label DEPT076 = 'DEPT07=6' ;
20275  +label DEPT077 = 'DEPT07=7' ;
20276  +label DEPT078 = 'DEPT07=8' ;
20277  +label DEPT079 = 'DEPT07=9' ;
20278  +label DEPT0711 = 'DEPT07=11' ;
20279  +*** encoding is sparse, initialize to zero;
20280  +DEPT070 = 0;
20281  +DEPT073 = 0;
20282  +DEPT074 = 0;
20283  +DEPT075 = 0;
20284  +DEPT076 = 0;
20285  +DEPT077 = 0;
20286  +DEPT078 = 0;
20287  +DEPT079 = 0;
20288  +DEPT0711 = 0;
20289  +if missing( DEPT07 ) then do;
20290  +   DEPT070 = .;
20291  +   DEPT073 = .;
20292  +   DEPT074 = .;
20293  +   DEPT075 = .;
20294  +   DEPT076 = .;
20295  +   DEPT077 = .;
20296  +   DEPT078 = .;
20297  +   DEPT079 = .;
20298  +   DEPT0711 = .;
20299  +end;
20300  +else do;
20301  +   length _dm12 $ 12; drop _dm12 ;
20302  +   _dm12 = put( DEPT07 , BEST12. );
20303  +   %DMNORMIP( _dm12 )
20304  +   if _dm12 = '0'  then do;
20305  +      DEPT070 = 1;
20306  +   end;
20307  +   else if _dm12 = '3'  then do;
20308  +      DEPT073 = 1;
20309  +   end;
20310  +   else if _dm12 = '5'  then do;
20311  +      DEPT075 = 1;
20312  +   end;
20313  +   else if _dm12 = '4'  then do;
20314  +      DEPT074 = 1;
20315  +   end;
20316  +   else if _dm12 = '7'  then do;
20317  +      DEPT077 = 1;
20318  +   end;
20319  +   else if _dm12 = '6'  then do;
20320  +      DEPT076 = 1;
20321  +   end;
20322  +   else if _dm12 = '11'  then do;
20323  +      DEPT0711 = 1;
20324  +   end;
20325  +   else if _dm12 = '8'  then do;
20326  +      DEPT078 = 1;
20327  +   end;
20328  +   else if _dm12 = '9'  then do;
20329  +      DEPT079 = 1;
20330  +   end;
20331  +   else do;
20332  +      delete;
20333  +   end;
20334  +end;
20335  +
20336  +*** Generate dummy variables for DEPT11 ;
20337  +label DEPT110 = 'DEPT11=0' ;
20338  +label DEPT113 = 'DEPT11=3' ;
20339  +label DEPT114 = 'DEPT11=4' ;
20340  +label DEPT115 = 'DEPT11=5' ;
20341  +label DEPT116 = 'DEPT11=6' ;
20342  +label DEPT117 = 'DEPT11=7' ;
20343  +label DEPT118 = 'DEPT11=8' ;
20344  +label DEPT119 = 'DEPT11=9' ;
20345  +label DEPT1110 = 'DEPT11=10' ;
20346  +label DEPT1111 = 'DEPT11=11' ;
20347  +label DEPT1113 = 'DEPT11=13' ;
20348  +label DEPT1116 = 'DEPT11=16' ;
20349  +label DEPT1118 = 'DEPT11=18' ;
20350  +label DEPT1129 = 'DEPT11=29' ;
20351  +*** encoding is sparse, initialize to zero;
20352  +DEPT110 = 0;
20353  +DEPT113 = 0;
20354  +DEPT114 = 0;
20355  +DEPT115 = 0;
20356  +DEPT116 = 0;
20357  +DEPT117 = 0;
20358  +DEPT118 = 0;
20359  +DEPT119 = 0;
20360  +DEPT1110 = 0;
20361  +DEPT1111 = 0;
20362  +DEPT1113 = 0;
20363  +DEPT1116 = 0;
20364  +DEPT1118 = 0;
20365  +DEPT1129 = 0;
20366  +if missing( DEPT11 ) then do;
20367  +   DEPT110 = .;
20368  +   DEPT113 = .;
20369  +   DEPT114 = .;
20370  +   DEPT115 = .;
20371  +   DEPT116 = .;
20372  +   DEPT117 = .;
20373  +   DEPT118 = .;
20374  +   DEPT119 = .;
20375  +   DEPT1110 = .;
20376  +   DEPT1111 = .;
20377  +   DEPT1113 = .;
20378  +   DEPT1116 = .;
20379  +   DEPT1118 = .;
20380  +   DEPT1129 = .;
20381  +end;
20382  +else do;
20383  +   length _dm12 $ 12; drop _dm12 ;
20384  +   _dm12 = put( DEPT11 , BEST12. );
20385  +   %DMNORMIP( _dm12 )
20386  +   if _dm12 = '0'  then do;
20387  +      DEPT110 = 1;
20388  +   end;
20389  +   else if _dm12 = '3'  then do;
20390  +      DEPT113 = 1;
20391  +   end;
20392  +   else if _dm12 = '5'  then do;
20393  +      DEPT115 = 1;
20394  +   end;
20395  +   else if _dm12 = '4'  then do;
20396  +      DEPT114 = 1;
20397  +   end;
20398  +   else if _dm12 = '7'  then do;
20399  +      DEPT117 = 1;
20400  +   end;
20401  +   else if _dm12 = '6'  then do;
20402  +      DEPT116 = 1;
20403  +   end;
20404  +   else if _dm12 = '8'  then do;
20405  +      DEPT118 = 1;
20406  +   end;
20407  +   else if _dm12 = '9'  then do;
20408  +      DEPT119 = 1;
20409  +   end;
20410  +   else if _dm12 = '11'  then do;
20411  +      DEPT1111 = 1;
20412  +   end;
20413  +   else if _dm12 = '13'  then do;
20414  +      DEPT1113 = 1;
20415  +   end;
20416  +   else if _dm12 = '10'  then do;
20417  +      DEPT1110 = 1;
20418  +   end;
20419  +   else if _dm12 = '16'  then do;
20420  +      DEPT1116 = 1;
20421  +   end;
20422  +   else if _dm12 = '18'  then do;
20423  +      DEPT1118 = 1;
20424  +   end;
20425  +   else if _dm12 = '29'  then do;
20426  +      DEPT1129 = 1;
20427  +   end;
20428  +   else do;
20429  +      delete;
20430  +   end;
20431  +end;
20432  +
20433  +*** Generate dummy variables for DEPT12 ;
20434  +label DEPT120 = 'DEPT12=0' ;
20435  +label DEPT123 = 'DEPT12=3' ;
20436  +label DEPT124 = 'DEPT12=4' ;
20437  +label DEPT125 = 'DEPT12=5' ;
20438  +label DEPT126 = 'DEPT12=6' ;
20439  +label DEPT127 = 'DEPT12=7' ;
20440  +label DEPT128 = 'DEPT12=8' ;
20441  +label DEPT129 = 'DEPT12=9' ;
20442  +label DEPT1210 = 'DEPT12=10' ;
20443  +label DEPT1211 = 'DEPT12=11' ;
20444  +label DEPT1212 = 'DEPT12=12' ;
20445  +label DEPT1213 = 'DEPT12=13' ;
20446  +label DEPT1215 = 'DEPT12=15' ;
20447  +label DEPT1216 = 'DEPT12=16' ;
20448  +*** encoding is sparse, initialize to zero;
20449  +DEPT120 = 0;
20450  +DEPT123 = 0;
20451  +DEPT124 = 0;
20452  +DEPT125 = 0;
20453  +DEPT126 = 0;
20454  +DEPT127 = 0;
20455  +DEPT128 = 0;
20456  +DEPT129 = 0;
20457  +DEPT1210 = 0;
20458  +DEPT1211 = 0;
20459  +DEPT1212 = 0;
20460  +DEPT1213 = 0;
20461  +DEPT1215 = 0;
20462  +DEPT1216 = 0;
20463  +if missing( DEPT12 ) then do;
20464  +   DEPT120 = .;
20465  +   DEPT123 = .;
20466  +   DEPT124 = .;
20467  +   DEPT125 = .;
20468  +   DEPT126 = .;
20469  +   DEPT127 = .;
20470  +   DEPT128 = .;
20471  +   DEPT129 = .;
20472  +   DEPT1210 = .;
20473  +   DEPT1211 = .;
20474  +   DEPT1212 = .;
20475  +   DEPT1213 = .;
20476  +   DEPT1215 = .;
20477  +   DEPT1216 = .;
20478  +end;
20479  +else do;
20480  +   length _dm12 $ 12; drop _dm12 ;
20481  +   _dm12 = put( DEPT12 , BEST12. );
20482  +   %DMNORMIP( _dm12 )
20483  +   if _dm12 = '0'  then do;
20484  +      DEPT120 = 1;
20485  +   end;
20486  +   else if _dm12 = '3'  then do;
20487  +      DEPT123 = 1;
20488  +   end;
20489  +   else if _dm12 = '5'  then do;
20490  +      DEPT125 = 1;
20491  +   end;
20492  +   else if _dm12 = '4'  then do;
20493  +      DEPT124 = 1;
20494  +   end;
20495  +   else if _dm12 = '7'  then do;
20496  +      DEPT127 = 1;
20497  +   end;
20498  +   else if _dm12 = '6'  then do;
20499  +      DEPT126 = 1;
20500  +   end;
20501  +   else if _dm12 = '9'  then do;
20502  +      DEPT129 = 1;
20503  +   end;
20504  +   else if _dm12 = '8'  then do;
20505  +      DEPT128 = 1;
20506  +   end;
20507  +   else if _dm12 = '11'  then do;
20508  +      DEPT1211 = 1;
20509  +   end;
20510  +   else if _dm12 = '13'  then do;
20511  +      DEPT1213 = 1;
20512  +   end;
20513  +   else if _dm12 = '10'  then do;
20514  +      DEPT1210 = 1;
20515  +   end;
20516  +   else if _dm12 = '15'  then do;
20517  +      DEPT1215 = 1;
20518  +   end;
20519  +   else if _dm12 = '12'  then do;
20520  +      DEPT1212 = 1;
20521  +   end;
20522  +   else if _dm12 = '16'  then do;
20523  +      DEPT1216 = 1;
20524  +   end;
20525  +   else do;
20526  +      delete;
20527  +   end;
20528  +end;
20529  +
20530  +*** Generate dummy variables for DEPT17 ;
20531  +label DEPT170 = 'DEPT17=0' ;
20532  +label DEPT173 = 'DEPT17=3' ;
20533  +label DEPT174 = 'DEPT17=4' ;
20534  +label DEPT175 = 'DEPT17=5' ;
20535  +label DEPT176 = 'DEPT17=6' ;
20536  +label DEPT177 = 'DEPT17=7' ;
20537  +label DEPT178 = 'DEPT17=8' ;
20538  +label DEPT179 = 'DEPT17=9' ;
20539  +label DEPT1710 = 'DEPT17=10' ;
20540  +label DEPT1711 = 'DEPT17=11' ;
20541  +label DEPT1712 = 'DEPT17=12' ;
20542  +label DEPT1713 = 'DEPT17=13' ;
20543  +label DEPT1714 = 'DEPT17=14' ;
20544  +label DEPT1715 = 'DEPT17=15' ;
20545  +label DEPT1716 = 'DEPT17=16' ;
20546  +label DEPT1717 = 'DEPT17=17' ;
20547  +label DEPT1723 = 'DEPT17=23' ;
20548  +label DEPT1734 = 'DEPT17=34' ;
20549  +*** encoding is sparse, initialize to zero;
20550  +DEPT170 = 0;
20551  +DEPT173 = 0;
20552  +DEPT174 = 0;
20553  +DEPT175 = 0;
20554  +DEPT176 = 0;
20555  +DEPT177 = 0;
20556  +DEPT178 = 0;
20557  +DEPT179 = 0;
20558  +DEPT1710 = 0;
20559  +DEPT1711 = 0;
20560  +DEPT1712 = 0;
20561  +DEPT1713 = 0;
20562  +DEPT1714 = 0;
20563  +DEPT1715 = 0;
20564  +DEPT1716 = 0;
20565  +DEPT1717 = 0;
20566  +DEPT1723 = 0;
20567  +DEPT1734 = 0;
20568  +if missing( DEPT17 ) then do;
20569  +   DEPT170 = .;
20570  +   DEPT173 = .;
20571  +   DEPT174 = .;
20572  +   DEPT175 = .;
20573  +   DEPT176 = .;
20574  +   DEPT177 = .;
20575  +   DEPT178 = .;
20576  +   DEPT179 = .;
20577  +   DEPT1710 = .;
20578  +   DEPT1711 = .;
20579  +   DEPT1712 = .;
20580  +   DEPT1713 = .;
20581  +   DEPT1714 = .;
20582  +   DEPT1715 = .;
20583  +   DEPT1716 = .;
20584  +   DEPT1717 = .;
20585  +   DEPT1723 = .;
20586  +   DEPT1734 = .;
20587  +end;
20588  +else do;
20589  +   length _dm12 $ 12; drop _dm12 ;
20590  +   _dm12 = put( DEPT17 , BEST12. );
20591  +   %DMNORMIP( _dm12 )
20592  +   if _dm12 = '0'  then do;
20593  +      DEPT170 = 1;
20594  +   end;
20595  +   else if _dm12 = '3'  then do;
20596  +      DEPT173 = 1;
20597  +   end;
20598  +   else if _dm12 = '5'  then do;
20599  +      DEPT175 = 1;
20600  +   end;
20601  +   else if _dm12 = '4'  then do;
20602  +      DEPT174 = 1;
20603  +   end;
20604  +   else if _dm12 = '6'  then do;
20605  +      DEPT176 = 1;
20606  +   end;
20607  +   else if _dm12 = '7'  then do;
20608  +      DEPT177 = 1;
20609  +   end;
20610  +   else if _dm12 = '8'  then do;
20611  +      DEPT178 = 1;
20612  +   end;
20613  +   else if _dm12 = '9'  then do;
20614  +      DEPT179 = 1;
20615  +   end;
20616  +   else if _dm12 = '10'  then do;
20617  +      DEPT1710 = 1;
20618  +   end;
20619  +   else if _dm12 = '12'  then do;
20620  +      DEPT1712 = 1;
20621  +   end;
20622  +   else if _dm12 = '11'  then do;
20623  +      DEPT1711 = 1;
20624  +   end;
20625  +   else if _dm12 = '14'  then do;
20626  +      DEPT1714 = 1;
20627  +   end;
20628  +   else if _dm12 = '17'  then do;
20629  +      DEPT1717 = 1;
20630  +   end;
20631  +   else if _dm12 = '13'  then do;
20632  +      DEPT1713 = 1;
20633  +   end;
20634  +   else if _dm12 = '15'  then do;
20635  +      DEPT1715 = 1;
20636  +   end;
20637  +   else if _dm12 = '16'  then do;
20638  +      DEPT1716 = 1;
20639  +   end;
20640  +   else if _dm12 = '23'  then do;
20641  +      DEPT1723 = 1;
20642  +   end;
20643  +   else if _dm12 = '34'  then do;
20644  +      DEPT1734 = 1;
20645  +   end;
20646  +   else do;
20647  +      delete;
20648  +   end;
20649  +end;
20650  +
20651  +*** Generate dummy variables for DEPT18 ;
20652  +label DEPT180 = 'DEPT18=0' ;
20653  +label DEPT183 = 'DEPT18=3' ;
20654  +label DEPT184 = 'DEPT18=4' ;
20655  +label DEPT185 = 'DEPT18=5' ;
20656  +label DEPT186 = 'DEPT18=6' ;
20657  +label DEPT187 = 'DEPT18=7' ;
20658  +label DEPT188 = 'DEPT18=8' ;
20659  +label DEPT189 = 'DEPT18=9' ;
20660  +label DEPT1810 = 'DEPT18=10' ;
20661  +label DEPT1811 = 'DEPT18=11' ;
20662  +label DEPT1812 = 'DEPT18=12' ;
20663  +label DEPT1813 = 'DEPT18=13' ;
20664  +*** encoding is sparse, initialize to zero;
20665  +DEPT180 = 0;
20666  +DEPT183 = 0;
20667  +DEPT184 = 0;
20668  +DEPT185 = 0;
20669  +DEPT186 = 0;
20670  +DEPT187 = 0;
20671  +DEPT188 = 0;
20672  +DEPT189 = 0;
20673  +DEPT1810 = 0;
20674  +DEPT1811 = 0;
20675  +DEPT1812 = 0;
20676  +DEPT1813 = 0;
20677  +if missing( DEPT18 ) then do;
20678  +   DEPT180 = .;
20679  +   DEPT183 = .;
20680  +   DEPT184 = .;
20681  +   DEPT185 = .;
20682  +   DEPT186 = .;
20683  +   DEPT187 = .;
20684  +   DEPT188 = .;
20685  +   DEPT189 = .;
20686  +   DEPT1810 = .;
20687  +   DEPT1811 = .;
20688  +   DEPT1812 = .;
20689  +   DEPT1813 = .;
20690  +end;
20691  +else do;
20692  +   length _dm12 $ 12; drop _dm12 ;
20693  +   _dm12 = put( DEPT18 , BEST12. );
20694  +   %DMNORMIP( _dm12 )
20695  +   if _dm12 = '0'  then do;
20696  +      DEPT180 = 1;
20697  +   end;
20698  +   else if _dm12 = '3'  then do;
20699  +      DEPT183 = 1;
20700  +   end;
20701  +   else if _dm12 = '4'  then do;
20702  +      DEPT184 = 1;
20703  +   end;
20704  +   else if _dm12 = '5'  then do;
20705  +      DEPT185 = 1;
20706  +   end;
20707  +   else if _dm12 = '7'  then do;
20708  +      DEPT187 = 1;
20709  +   end;
20710  +   else if _dm12 = '6'  then do;
20711  +      DEPT186 = 1;
20712  +   end;
20713  +   else if _dm12 = '10'  then do;
20714  +      DEPT1810 = 1;
20715  +   end;
20716  +   else if _dm12 = '11'  then do;
20717  +      DEPT1811 = 1;
20718  +   end;
20719  +   else if _dm12 = '8'  then do;
20720  +      DEPT188 = 1;
20721  +   end;
20722  +   else if _dm12 = '9'  then do;
20723  +      DEPT189 = 1;
20724  +   end;
20725  +   else if _dm12 = '12'  then do;
20726  +      DEPT1812 = 1;
20727  +   end;
20728  +   else if _dm12 = '13'  then do;
20729  +      DEPT1813 = 1;
20730  +   end;
20731  +   else do;
20732  +      delete;
20733  +   end;
20734  +end;
20735  +
20736  +*** Generate dummy variables for DEPT19 ;
20737  +label DEPT190 = 'DEPT19=0' ;
20738  +label DEPT193 = 'DEPT19=3' ;
20739  +label DEPT194 = 'DEPT19=4' ;
20740  +label DEPT195 = 'DEPT19=5' ;
20741  +label DEPT196 = 'DEPT19=6' ;
20742  +label DEPT197 = 'DEPT19=7' ;
20743  +label DEPT198 = 'DEPT19=8' ;
20744  +label DEPT199 = 'DEPT19=9' ;
20745  +label DEPT1910 = 'DEPT19=10' ;
20746  +label DEPT1911 = 'DEPT19=11' ;
20747  +label DEPT1912 = 'DEPT19=12' ;
20748  +label DEPT1913 = 'DEPT19=13' ;
20749  +label DEPT1914 = 'DEPT19=14' ;
20750  +label DEPT1915 = 'DEPT19=15' ;
20751  +label DEPT1918 = 'DEPT19=18' ;
20752  +label DEPT1920 = 'DEPT19=20' ;
20753  +*** encoding is sparse, initialize to zero;
20754  +DEPT190 = 0;
20755  +DEPT193 = 0;
20756  +DEPT194 = 0;
20757  +DEPT195 = 0;
20758  +DEPT196 = 0;
20759  +DEPT197 = 0;
20760  +DEPT198 = 0;
20761  +DEPT199 = 0;
20762  +DEPT1910 = 0;
20763  +DEPT1911 = 0;
20764  +DEPT1912 = 0;
20765  +DEPT1913 = 0;
20766  +DEPT1914 = 0;
20767  +DEPT1915 = 0;
20768  +DEPT1918 = 0;
20769  +DEPT1920 = 0;
20770  +if missing( DEPT19 ) then do;
20771  +   DEPT190 = .;
20772  +   DEPT193 = .;
20773  +   DEPT194 = .;
20774  +   DEPT195 = .;
20775  +   DEPT196 = .;
20776  +   DEPT197 = .;
20777  +   DEPT198 = .;
20778  +   DEPT199 = .;
20779  +   DEPT1910 = .;
20780  +   DEPT1911 = .;
20781  +   DEPT1912 = .;
20782  +   DEPT1913 = .;
20783  +   DEPT1914 = .;
20784  +   DEPT1915 = .;
20785  +   DEPT1918 = .;
20786  +   DEPT1920 = .;
20787  +end;
20788  +else do;
20789  +   length _dm12 $ 12; drop _dm12 ;
20790  +   _dm12 = put( DEPT19 , BEST12. );
20791  +   %DMNORMIP( _dm12 )
20792  +   if _dm12 = '0'  then do;
20793  +      DEPT190 = 1;
20794  +   end;
20795  +   else if _dm12 = '3'  then do;
20796  +      DEPT193 = 1;
20797  +   end;
20798  +   else if _dm12 = '4'  then do;
20799  +      DEPT194 = 1;
20800  +   end;
20801  +   else if _dm12 = '5'  then do;
20802  +      DEPT195 = 1;
20803  +   end;
20804  +   else if _dm12 = '6'  then do;
20805  +      DEPT196 = 1;
20806  +   end;
20807  +   else if _dm12 = '7'  then do;
20808  +      DEPT197 = 1;
20809  +   end;
20810  +   else if _dm12 = '8'  then do;
20811  +      DEPT198 = 1;
20812  +   end;
20813  +   else if _dm12 = '9'  then do;
20814  +      DEPT199 = 1;
20815  +   end;
20816  +   else if _dm12 = '10'  then do;
20817  +      DEPT1910 = 1;
20818  +   end;
20819  +   else if _dm12 = '11'  then do;
20820  +      DEPT1911 = 1;
20821  +   end;
20822  +   else if _dm12 = '12'  then do;
20823  +      DEPT1912 = 1;
20824  +   end;
20825  +   else if _dm12 = '13'  then do;
20826  +      DEPT1913 = 1;
20827  +   end;
20828  +   else if _dm12 = '14'  then do;
20829  +      DEPT1914 = 1;
20830  +   end;
20831  +   else if _dm12 = '15'  then do;
20832  +      DEPT1915 = 1;
20833  +   end;
20834  +   else if _dm12 = '18'  then do;
20835  +      DEPT1918 = 1;
20836  +   end;
20837  +   else if _dm12 = '20'  then do;
20838  +      DEPT1920 = 1;
20839  +   end;
20840  +   else do;
20841  +      delete;
20842  +   end;
20843  +end;
20844  +
20845  +*** Generate dummy variables for DEPT20 ;
20846  +label DEPT200 = 'DEPT20=0' ;
20847  +label DEPT203 = 'DEPT20=3' ;
20848  +label DEPT204 = 'DEPT20=4' ;
20849  +label DEPT205 = 'DEPT20=5' ;
20850  +label DEPT206 = 'DEPT20=6' ;
20851  +label DEPT207 = 'DEPT20=7' ;
20852  +label DEPT208 = 'DEPT20=8' ;
20853  +*** encoding is sparse, initialize to zero;
20854  +DEPT200 = 0;
20855  +DEPT203 = 0;
20856  +DEPT204 = 0;
20857  +DEPT205 = 0;
20858  +DEPT206 = 0;
20859  +DEPT207 = 0;
20860  +DEPT208 = 0;
20861  +if missing( DEPT20 ) then do;
20862  +   DEPT200 = .;
20863  +   DEPT203 = .;
20864  +   DEPT204 = .;
20865  +   DEPT205 = .;
20866  +   DEPT206 = .;
20867  +   DEPT207 = .;
20868  +   DEPT208 = .;
20869  +end;
20870  +else do;
20871  +   length _dm12 $ 12; drop _dm12 ;
20872  +   _dm12 = put( DEPT20 , BEST12. );
20873  +   %DMNORMIP( _dm12 )
20874  +   if _dm12 = '0'  then do;
20875  +      DEPT200 = 1;
20876  +   end;
20877  +   else if _dm12 = '3'  then do;
20878  +      DEPT203 = 1;
20879  +   end;
20880  +   else if _dm12 = '5'  then do;
20881  +      DEPT205 = 1;
20882  +   end;
20883  +   else if _dm12 = '4'  then do;
20884  +      DEPT204 = 1;
20885  +   end;
20886  +   else if _dm12 = '6'  then do;
20887  +      DEPT206 = 1;
20888  +   end;
20889  +   else if _dm12 = '7'  then do;
20890  +      DEPT207 = 1;
20891  +   end;
20892  +   else if _dm12 = '8'  then do;
20893  +      DEPT208 = 1;
20894  +   end;
20895  +   else do;
20896  +      delete;
20897  +   end;
20898  +end;
20899  +
20900  +*** Generate dummy variables for DEPT21 ;
20901  +label DEPT210 = 'DEPT21=0' ;
20902  +label DEPT213 = 'DEPT21=3' ;
20903  +label DEPT214 = 'DEPT21=4' ;
20904  +label DEPT215 = 'DEPT21=5' ;
20905  +label DEPT216 = 'DEPT21=6' ;
20906  +label DEPT219 = 'DEPT21=9' ;
20907  +*** encoding is sparse, initialize to zero;
20908  +DEPT210 = 0;
20909  +DEPT213 = 0;
20910  +DEPT214 = 0;
20911  +DEPT215 = 0;
20912  +DEPT216 = 0;
20913  +DEPT219 = 0;
20914  +if missing( DEPT21 ) then do;
20915  +   DEPT210 = .;
20916  +   DEPT213 = .;
20917  +   DEPT214 = .;
20918  +   DEPT215 = .;
20919  +   DEPT216 = .;
20920  +   DEPT219 = .;
20921  +end;
20922  +else do;
20923  +   length _dm12 $ 12; drop _dm12 ;
20924  +   _dm12 = put( DEPT21 , BEST12. );
20925  +   %DMNORMIP( _dm12 )
20926  +   if _dm12 = '0'  then do;
20927  +      DEPT210 = 1;
20928  +   end;
20929  +   else if _dm12 = '3'  then do;
20930  +      DEPT213 = 1;
20931  +   end;
20932  +   else if _dm12 = '5'  then do;
20933  +      DEPT215 = 1;
20934  +   end;
20935  +   else if _dm12 = '4'  then do;
20936  +      DEPT214 = 1;
20937  +   end;
20938  +   else if _dm12 = '6'  then do;
20939  +      DEPT216 = 1;
20940  +   end;
20941  +   else if _dm12 = '9'  then do;
20942  +      DEPT219 = 1;
20943  +   end;
20944  +   else do;
20945  +      delete;
20946  +   end;
20947  +end;
20948  +
20949  +*** Generate dummy variables for DEPT26 ;
20950  +label DEPT260 = 'DEPT26=0' ;
20951  +label DEPT263 = 'DEPT26=3' ;
20952  +label DEPT264 = 'DEPT26=4' ;
20953  +label DEPT265 = 'DEPT26=5' ;
20954  +label DEPT266 = 'DEPT26=6' ;
20955  +label DEPT267 = 'DEPT26=7' ;
20956  +label DEPT268 = 'DEPT26=8' ;
20957  +label DEPT269 = 'DEPT26=9' ;
20958  +label DEPT2610 = 'DEPT26=10' ;
20959  +label DEPT2611 = 'DEPT26=11' ;
20960  +label DEPT2614 = 'DEPT26=14' ;
20961  +label DEPT2615 = 'DEPT26=15' ;
20962  +label DEPT2622 = 'DEPT26=22' ;
20963  +label DEPT2625 = 'DEPT26=25' ;
20964  +label DEPT2655 = 'DEPT26=55' ;
20965  +*** encoding is sparse, initialize to zero;
20966  +DEPT260 = 0;
20967  +DEPT263 = 0;
20968  +DEPT264 = 0;
20969  +DEPT265 = 0;
20970  +DEPT266 = 0;
20971  +DEPT267 = 0;
20972  +DEPT268 = 0;
20973  +DEPT269 = 0;
20974  +DEPT2610 = 0;
20975  +DEPT2611 = 0;
20976  +DEPT2614 = 0;
20977  +DEPT2615 = 0;
20978  +DEPT2622 = 0;
20979  +DEPT2625 = 0;
20980  +DEPT2655 = 0;
20981  +if missing( DEPT26 ) then do;
20982  +   DEPT260 = .;
20983  +   DEPT263 = .;
20984  +   DEPT264 = .;
20985  +   DEPT265 = .;
20986  +   DEPT266 = .;
20987  +   DEPT267 = .;
20988  +   DEPT268 = .;
20989  +   DEPT269 = .;
20990  +   DEPT2610 = .;
20991  +   DEPT2611 = .;
20992  +   DEPT2614 = .;
20993  +   DEPT2615 = .;
20994  +   DEPT2622 = .;
20995  +   DEPT2625 = .;
20996  +   DEPT2655 = .;
20997  +end;
20998  +else do;
20999  +   length _dm12 $ 12; drop _dm12 ;
21000  +   _dm12 = put( DEPT26 , BEST12. );
21001  +   %DMNORMIP( _dm12 )
21002  +   if _dm12 = '0'  then do;
21003  +      DEPT260 = 1;
21004  +   end;
21005  +   else if _dm12 = '3'  then do;
21006  +      DEPT263 = 1;
21007  +   end;
21008  +   else if _dm12 = '4'  then do;
21009  +      DEPT264 = 1;
21010  +   end;
21011  +   else if _dm12 = '5'  then do;
21012  +      DEPT265 = 1;
21013  +   end;
21014  +   else if _dm12 = '6'  then do;
21015  +      DEPT266 = 1;
21016  +   end;
21017  +   else if _dm12 = '7'  then do;
21018  +      DEPT267 = 1;
21019  +   end;
21020  +   else if _dm12 = '8'  then do;
21021  +      DEPT268 = 1;
21022  +   end;
21023  +   else if _dm12 = '9'  then do;
21024  +      DEPT269 = 1;
21025  +   end;
21026  +   else if _dm12 = '11'  then do;
21027  +      DEPT2611 = 1;
21028  +   end;
21029  +   else if _dm12 = '10'  then do;
21030  +      DEPT2610 = 1;
21031  +   end;
21032  +   else if _dm12 = '14'  then do;
21033  +      DEPT2614 = 1;
21034  +   end;
21035  +   else if _dm12 = '15'  then do;
21036  +      DEPT2615 = 1;
21037  +   end;
21038  +   else if _dm12 = '22'  then do;
21039  +      DEPT2622 = 1;
21040  +   end;
21041  +   else if _dm12 = '25'  then do;
21042  +      DEPT2625 = 1;
21043  +   end;
21044  +   else if _dm12 = '55'  then do;
21045  +      DEPT2655 = 1;
21046  +   end;
21047  +   else do;
21048  +      delete;
21049  +   end;
21050  +end;
21051  +
21052  +*** Generate dummy variables for METHPAYM ;
21053  +label METHPAYMCC = 'METHPAYM=CC' ;
21054  +label METHPAYMCK = 'METHPAYM=CK' ;
21055  +label METHPAYMDK = 'METHPAYM=DK' ;
21056  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
21057  +*** encoding is sparse, initialize to zero;
21058  +METHPAYMCC = 0;
21059  +METHPAYMCK = 0;
21060  +METHPAYMDK = 0;
21061  +METHPAYMXBOT = 0;
21062  +if missing( METHPAYM ) then do;
21063  +   METHPAYMCC = .;
21064  +   METHPAYMCK = .;
21065  +   METHPAYMDK = .;
21066  +   METHPAYMXBOT = .;
21067  +end;
21068  +else do;
21069  +   length _dm4 $ 4; drop _dm4 ;
21070  +   _dm4 = put( METHPAYM , $4. );
21071  +   %DMNORMIP( _dm4 )
21072  +   if _dm4 = 'CC'  then do;
21073  +      METHPAYMCC = 1;
21074  +   end;
21075  +   else if _dm4 = 'CK'  then do;
21076  +      METHPAYMCK = 1;
21077  +   end;
21078  +   else if _dm4 = 'XBOT'  then do;
21079  +      METHPAYMXBOT = 1;
21080  +   end;
21081  +   else if _dm4 = 'DK'  then do;
21082  +      METHPAYMDK = 1;
21083  +   end;
21084  +   else do;
21085  +      delete;
21086  +   end;
21087  +end;
21088  +
21089  +*** Generate dummy variables for TOTORDQ01 ;
21090  +label TOTORDQ010 = 'TOTORDQ01=0' ;
21091  +label TOTORDQ011 = 'TOTORDQ01=1' ;
21092  +label TOTORDQ012 = 'TOTORDQ01=2' ;
21093  +label TOTORDQ013 = 'TOTORDQ01=3' ;
21094  +label TOTORDQ014 = 'TOTORDQ01=4' ;
21095  +label TOTORDQ015 = 'TOTORDQ01=5' ;
21096  +label TOTORDQ016 = 'TOTORDQ01=6' ;
21097  +*** encoding is sparse, initialize to zero;
21098  +TOTORDQ010 = 0;
21099  +TOTORDQ011 = 0;
21100  +TOTORDQ012 = 0;
21101  +TOTORDQ013 = 0;
21102  +TOTORDQ014 = 0;
21103  +TOTORDQ015 = 0;
21104  +TOTORDQ016 = 0;
21105  +if missing( TOTORDQ01 ) then do;
21106  +   TOTORDQ010 = .;
21107  +   TOTORDQ011 = .;
21108  +   TOTORDQ012 = .;
21109  +   TOTORDQ013 = .;
21110  +   TOTORDQ014 = .;
21111  +   TOTORDQ015 = .;
21112  +   TOTORDQ016 = .;
21113  +end;
21114  +else do;
21115  +   length _dm12 $ 12; drop _dm12 ;
21116  +   _dm12 = put( TOTORDQ01 , BEST12. );
21117  +   %DMNORMIP( _dm12 )
21118  +   if _dm12 = '0'  then do;
21119  +      TOTORDQ010 = 1;
21120  +   end;
21121  +   else if _dm12 = '1'  then do;
21122  +      TOTORDQ011 = 1;
21123  +   end;
21124  +   else if _dm12 = '2'  then do;
21125  +      TOTORDQ012 = 1;
21126  +   end;
21127  +   else if _dm12 = '3'  then do;
21128  +      TOTORDQ013 = 1;
21129  +   end;
21130  +   else if _dm12 = '4'  then do;
21131  +      TOTORDQ014 = 1;
21132  +   end;
21133  +   else if _dm12 = '5'  then do;
21134  +      TOTORDQ015 = 1;
21135  +   end;
21136  +   else if _dm12 = '6'  then do;
21137  +      TOTORDQ016 = 1;
21138  +   end;
21139  +   else do;
21140  +      delete;
21141  +   end;
21142  +end;
21143  +
21144  +*** Generate dummy variables for TOTORDQ02 ;
21145  +label TOTORDQ020 = 'TOTORDQ02=0' ;
21146  +label TOTORDQ021 = 'TOTORDQ02=1' ;
21147  +label TOTORDQ022 = 'TOTORDQ02=2' ;
21148  +label TOTORDQ023 = 'TOTORDQ02=3' ;
21149  +label TOTORDQ024 = 'TOTORDQ02=4' ;
21150  +label TOTORDQ025 = 'TOTORDQ02=5' ;
21151  +label TOTORDQ028 = 'TOTORDQ02=8' ;
21152  +*** encoding is sparse, initialize to zero;
21153  +TOTORDQ020 = 0;
21154  +TOTORDQ021 = 0;
21155  +TOTORDQ022 = 0;
21156  +TOTORDQ023 = 0;
21157  +TOTORDQ024 = 0;
21158  +TOTORDQ025 = 0;
21159  +TOTORDQ028 = 0;
21160  +if missing( TOTORDQ02 ) then do;
21161  +   TOTORDQ020 = .;
21162  +   TOTORDQ021 = .;
21163  +   TOTORDQ022 = .;
21164  +   TOTORDQ023 = .;
21165  +   TOTORDQ024 = .;
21166  +   TOTORDQ025 = .;
21167  +   TOTORDQ028 = .;
21168  +end;
21169  +else do;
21170  +   length _dm12 $ 12; drop _dm12 ;
21171  +   _dm12 = put( TOTORDQ02 , BEST12. );
21172  +   %DMNORMIP( _dm12 )
21173  +   if _dm12 = '0'  then do;
21174  +      TOTORDQ020 = 1;
21175  +   end;
21176  +   else if _dm12 = '1'  then do;
21177  +      TOTORDQ021 = 1;
21178  +   end;
21179  +   else if _dm12 = '2'  then do;
21180  +      TOTORDQ022 = 1;
21181  +   end;
21182  +   else if _dm12 = '3'  then do;
21183  +      TOTORDQ023 = 1;
21184  +   end;
21185  +   else if _dm12 = '4'  then do;
21186  +      TOTORDQ024 = 1;
21187  +   end;
21188  +   else if _dm12 = '5'  then do;
21189  +      TOTORDQ025 = 1;
21190  +   end;
21191  +   else if _dm12 = '8'  then do;
21192  +      TOTORDQ028 = 1;
21193  +   end;
21194  +   else do;
21195  +      delete;
21196  +   end;
21197  +end;
21198  +
21199  +*** Generate dummy variables for TOTORDQ03 ;
21200  +label TOTORDQ030 = 'TOTORDQ03=0' ;
21201  +label TOTORDQ031 = 'TOTORDQ03=1' ;
21202  +label TOTORDQ032 = 'TOTORDQ03=2' ;
21203  +label TOTORDQ033 = 'TOTORDQ03=3' ;
21204  +label TOTORDQ034 = 'TOTORDQ03=4' ;
21205  +*** encoding is sparse, initialize to zero;
21206  +TOTORDQ030 = 0;
21207  +TOTORDQ031 = 0;
21208  +TOTORDQ032 = 0;
21209  +TOTORDQ033 = 0;
21210  +TOTORDQ034 = 0;
21211  +if missing( TOTORDQ03 ) then do;
21212  +   TOTORDQ030 = .;
21213  +   TOTORDQ031 = .;
21214  +   TOTORDQ032 = .;
21215  +   TOTORDQ033 = .;
21216  +   TOTORDQ034 = .;
21217  +end;
21218  +else do;
21219  +   length _dm12 $ 12; drop _dm12 ;
21220  +   _dm12 = put( TOTORDQ03 , BEST12. );
21221  +   %DMNORMIP( _dm12 )
21222  +   if _dm12 = '0'  then do;
21223  +      TOTORDQ030 = 1;
21224  +   end;
21225  +   else if _dm12 = '1'  then do;
21226  +      TOTORDQ031 = 1;
21227  +   end;
21228  +   else if _dm12 = '2'  then do;
21229  +      TOTORDQ032 = 1;
21230  +   end;
21231  +   else if _dm12 = '3'  then do;
21232  +      TOTORDQ033 = 1;
21233  +   end;
21234  +   else if _dm12 = '4'  then do;
21235  +      TOTORDQ034 = 1;
21236  +   end;
21237  +   else do;
21238  +      delete;
21239  +   end;
21240  +end;
21241  +
21242  +*** Generate dummy variables for TOTORDQ04 ;
21243  +label TOTORDQ040 = 'TOTORDQ04=0' ;
21244  +label TOTORDQ041 = 'TOTORDQ04=1' ;
21245  +label TOTORDQ042 = 'TOTORDQ04=2' ;
21246  +label TOTORDQ043 = 'TOTORDQ04=3' ;
21247  +label TOTORDQ044 = 'TOTORDQ04=4' ;
21248  +label TOTORDQ045 = 'TOTORDQ04=5' ;
21249  +label TOTORDQ046 = 'TOTORDQ04=6' ;
21250  +label TOTORDQ049 = 'TOTORDQ04=9' ;
21251  +label TOTORDQ0416 = 'TOTORDQ04=16' ;
21252  +*** encoding is sparse, initialize to zero;
21253  +TOTORDQ040 = 0;
21254  +TOTORDQ041 = 0;
21255  +TOTORDQ042 = 0;
21256  +TOTORDQ043 = 0;
21257  +TOTORDQ044 = 0;
21258  +TOTORDQ045 = 0;
21259  +TOTORDQ046 = 0;
21260  +TOTORDQ049 = 0;
21261  +TOTORDQ0416 = 0;
21262  +if missing( TOTORDQ04 ) then do;
21263  +   TOTORDQ040 = .;
21264  +   TOTORDQ041 = .;
21265  +   TOTORDQ042 = .;
21266  +   TOTORDQ043 = .;
21267  +   TOTORDQ044 = .;
21268  +   TOTORDQ045 = .;
21269  +   TOTORDQ046 = .;
21270  +   TOTORDQ049 = .;
21271  +   TOTORDQ0416 = .;
21272  +end;
21273  +else do;
21274  +   length _dm12 $ 12; drop _dm12 ;
21275  +   _dm12 = put( TOTORDQ04 , BEST12. );
21276  +   %DMNORMIP( _dm12 )
21277  +   if _dm12 = '0'  then do;
21278  +      TOTORDQ040 = 1;
21279  +   end;
21280  +   else if _dm12 = '1'  then do;
21281  +      TOTORDQ041 = 1;
21282  +   end;
21283  +   else if _dm12 = '2'  then do;
21284  +      TOTORDQ042 = 1;
21285  +   end;
21286  +   else if _dm12 = '3'  then do;
21287  +      TOTORDQ043 = 1;
21288  +   end;
21289  +   else if _dm12 = '4'  then do;
21290  +      TOTORDQ044 = 1;
21291  +   end;
21292  +   else if _dm12 = '5'  then do;
21293  +      TOTORDQ045 = 1;
21294  +   end;
21295  +   else if _dm12 = '6'  then do;
21296  +      TOTORDQ046 = 1;
21297  +   end;
21298  +   else if _dm12 = '9'  then do;
21299  +      TOTORDQ049 = 1;
21300  +   end;
21301  +   else if _dm12 = '16'  then do;
21302  +      TOTORDQ0416 = 1;
21303  +   end;
21304  +   else do;
21305  +      delete;
21306  +   end;
21307  +end;
21308  +
21309  +*** Generate dummy variables for TOTORDQ05 ;
21310  +label TOTORDQ050 = 'TOTORDQ05=0' ;
21311  +label TOTORDQ051 = 'TOTORDQ05=1' ;
21312  +label TOTORDQ052 = 'TOTORDQ05=2' ;
21313  +label TOTORDQ053 = 'TOTORDQ05=3' ;
21314  +label TOTORDQ054 = 'TOTORDQ05=4' ;
21315  +label TOTORDQ055 = 'TOTORDQ05=5' ;
21316  +*** encoding is sparse, initialize to zero;
21317  +TOTORDQ050 = 0;
21318  +TOTORDQ051 = 0;
21319  +TOTORDQ052 = 0;
21320  +TOTORDQ053 = 0;
21321  +TOTORDQ054 = 0;
21322  +TOTORDQ055 = 0;
21323  +if missing( TOTORDQ05 ) then do;
21324  +   TOTORDQ050 = .;
21325  +   TOTORDQ051 = .;
21326  +   TOTORDQ052 = .;
21327  +   TOTORDQ053 = .;
21328  +   TOTORDQ054 = .;
21329  +   TOTORDQ055 = .;
21330  +end;
21331  +else do;
21332  +   length _dm12 $ 12; drop _dm12 ;
21333  +   _dm12 = put( TOTORDQ05 , BEST12. );
21334  +   %DMNORMIP( _dm12 )
21335  +   if _dm12 = '0'  then do;
21336  +      TOTORDQ050 = 1;
21337  +   end;
21338  +   else if _dm12 = '1'  then do;
21339  +      TOTORDQ051 = 1;
21340  +   end;
21341  +   else if _dm12 = '2'  then do;
21342  +      TOTORDQ052 = 1;
21343  +   end;
21344  +   else if _dm12 = '3'  then do;
21345  +      TOTORDQ053 = 1;
21346  +   end;
21347  +   else if _dm12 = '4'  then do;
21348  +      TOTORDQ054 = 1;
21349  +   end;
21350  +   else if _dm12 = '5'  then do;
21351  +      TOTORDQ055 = 1;
21352  +   end;
21353  +   else do;
21354  +      delete;
21355  +   end;
21356  +end;
21357  +
21358  +*** Generate dummy variables for TOTORDQ06 ;
21359  +label TOTORDQ060 = 'TOTORDQ06=0' ;
21360  +label TOTORDQ061 = 'TOTORDQ06=1' ;
21361  +label TOTORDQ062 = 'TOTORDQ06=2' ;
21362  +label TOTORDQ063 = 'TOTORDQ06=3' ;
21363  +label TOTORDQ064 = 'TOTORDQ06=4' ;
21364  +label TOTORDQ065 = 'TOTORDQ06=5' ;
21365  +label TOTORDQ069 = 'TOTORDQ06=9' ;
21366  +*** encoding is sparse, initialize to zero;
21367  +TOTORDQ060 = 0;
21368  +TOTORDQ061 = 0;
21369  +TOTORDQ062 = 0;
21370  +TOTORDQ063 = 0;
21371  +TOTORDQ064 = 0;
21372  +TOTORDQ065 = 0;
21373  +TOTORDQ069 = 0;
21374  +if missing( TOTORDQ06 ) then do;
21375  +   TOTORDQ060 = .;
21376  +   TOTORDQ061 = .;
21377  +   TOTORDQ062 = .;
21378  +   TOTORDQ063 = .;
21379  +   TOTORDQ064 = .;
21380  +   TOTORDQ065 = .;
21381  +   TOTORDQ069 = .;
21382  +end;
21383  +else do;
21384  +   length _dm12 $ 12; drop _dm12 ;
21385  +   _dm12 = put( TOTORDQ06 , BEST12. );
21386  +   %DMNORMIP( _dm12 )
21387  +   if _dm12 = '0'  then do;
21388  +      TOTORDQ060 = 1;
21389  +   end;
21390  +   else if _dm12 = '1'  then do;
21391  +      TOTORDQ061 = 1;
21392  +   end;
21393  +   else if _dm12 = '2'  then do;
21394  +      TOTORDQ062 = 1;
21395  +   end;
21396  +   else if _dm12 = '3'  then do;
21397  +      TOTORDQ063 = 1;
21398  +   end;
21399  +   else if _dm12 = '4'  then do;
21400  +      TOTORDQ064 = 1;
21401  +   end;
21402  +   else if _dm12 = '5'  then do;
21403  +      TOTORDQ065 = 1;
21404  +   end;
21405  +   else if _dm12 = '9'  then do;
21406  +      TOTORDQ069 = 1;
21407  +   end;
21408  +   else do;
21409  +      delete;
21410  +   end;
21411  +end;
21412  +
21413  +*** Generate dummy variables for TOTORDQ07 ;
21414  +label TOTORDQ070 = 'TOTORDQ07=0' ;
21415  +label TOTORDQ071 = 'TOTORDQ07=1' ;
21416  +label TOTORDQ072 = 'TOTORDQ07=2' ;
21417  +label TOTORDQ073 = 'TOTORDQ07=3' ;
21418  +label TOTORDQ074 = 'TOTORDQ07=4' ;
21419  +label TOTORDQ075 = 'TOTORDQ07=5' ;
21420  +label TOTORDQ078 = 'TOTORDQ07=8' ;
21421  +*** encoding is sparse, initialize to zero;
21422  +TOTORDQ070 = 0;
21423  +TOTORDQ071 = 0;
21424  +TOTORDQ072 = 0;
21425  +TOTORDQ073 = 0;
21426  +TOTORDQ074 = 0;
21427  +TOTORDQ075 = 0;
21428  +TOTORDQ078 = 0;
21429  +if missing( TOTORDQ07 ) then do;
21430  +   TOTORDQ070 = .;
21431  +   TOTORDQ071 = .;
21432  +   TOTORDQ072 = .;
21433  +   TOTORDQ073 = .;
21434  +   TOTORDQ074 = .;
21435  +   TOTORDQ075 = .;
21436  +   TOTORDQ078 = .;
21437  +end;
21438  +else do;
21439  +   length _dm12 $ 12; drop _dm12 ;
21440  +   _dm12 = put( TOTORDQ07 , BEST12. );
21441  +   %DMNORMIP( _dm12 )
21442  +   if _dm12 = '0'  then do;
21443  +      TOTORDQ070 = 1;
21444  +   end;
21445  +   else if _dm12 = '1'  then do;
21446  +      TOTORDQ071 = 1;
21447  +   end;
21448  +   else if _dm12 = '2'  then do;
21449  +      TOTORDQ072 = 1;
21450  +   end;
21451  +   else if _dm12 = '3'  then do;
21452  +      TOTORDQ073 = 1;
21453  +   end;
21454  +   else if _dm12 = '4'  then do;
21455  +      TOTORDQ074 = 1;
21456  +   end;
21457  +   else if _dm12 = '5'  then do;
21458  +      TOTORDQ075 = 1;
21459  +   end;
21460  +   else if _dm12 = '8'  then do;
21461  +      TOTORDQ078 = 1;
21462  +   end;
21463  +   else do;
21464  +      delete;
21465  +   end;
21466  +end;
21467  +
21468  +*** Generate dummy variables for TOTORDQ08 ;
21469  +label TOTORDQ080 = 'TOTORDQ08=0' ;
21470  +label TOTORDQ081 = 'TOTORDQ08=1' ;
21471  +label TOTORDQ082 = 'TOTORDQ08=2' ;
21472  +label TOTORDQ083 = 'TOTORDQ08=3' ;
21473  +label TOTORDQ084 = 'TOTORDQ08=4' ;
21474  +label TOTORDQ085 = 'TOTORDQ08=5' ;
21475  +label TOTORDQ086 = 'TOTORDQ08=6' ;
21476  +label TOTORDQ0810 = 'TOTORDQ08=10' ;
21477  +label TOTORDQ0823 = 'TOTORDQ08=23' ;
21478  +*** encoding is sparse, initialize to zero;
21479  +TOTORDQ080 = 0;
21480  +TOTORDQ081 = 0;
21481  +TOTORDQ082 = 0;
21482  +TOTORDQ083 = 0;
21483  +TOTORDQ084 = 0;
21484  +TOTORDQ085 = 0;
21485  +TOTORDQ086 = 0;
21486  +TOTORDQ0810 = 0;
21487  +TOTORDQ0823 = 0;
21488  +if missing( TOTORDQ08 ) then do;
21489  +   TOTORDQ080 = .;
21490  +   TOTORDQ081 = .;
21491  +   TOTORDQ082 = .;
21492  +   TOTORDQ083 = .;
21493  +   TOTORDQ084 = .;
21494  +   TOTORDQ085 = .;
21495  +   TOTORDQ086 = .;
21496  +   TOTORDQ0810 = .;
21497  +   TOTORDQ0823 = .;
21498  +end;
21499  +else do;
21500  +   length _dm12 $ 12; drop _dm12 ;
21501  +   _dm12 = put( TOTORDQ08 , BEST12. );
21502  +   %DMNORMIP( _dm12 )
21503  +   if _dm12 = '0'  then do;
21504  +      TOTORDQ080 = 1;
21505  +   end;
21506  +   else if _dm12 = '1'  then do;
21507  +      TOTORDQ081 = 1;
21508  +   end;
21509  +   else if _dm12 = '2'  then do;
21510  +      TOTORDQ082 = 1;
21511  +   end;
21512  +   else if _dm12 = '3'  then do;
21513  +      TOTORDQ083 = 1;
21514  +   end;
21515  +   else if _dm12 = '4'  then do;
21516  +      TOTORDQ084 = 1;
21517  +   end;
21518  +   else if _dm12 = '5'  then do;
21519  +      TOTORDQ085 = 1;
21520  +   end;
21521  +   else if _dm12 = '6'  then do;
21522  +      TOTORDQ086 = 1;
21523  +   end;
21524  +   else if _dm12 = '10'  then do;
21525  +      TOTORDQ0810 = 1;
21526  +   end;
21527  +   else if _dm12 = '23'  then do;
21528  +      TOTORDQ0823 = 1;
21529  +   end;
21530  +   else do;
21531  +      delete;
21532  +   end;
21533  +end;
21534  +
21535  +*** Generate dummy variables for TOTORDQ09 ;
21536  +label TOTORDQ090 = 'TOTORDQ09=0' ;
21537  +label TOTORDQ091 = 'TOTORDQ09=1' ;
21538  +label TOTORDQ092 = 'TOTORDQ09=2' ;
21539  +label TOTORDQ093 = 'TOTORDQ09=3' ;
21540  +label TOTORDQ094 = 'TOTORDQ09=4' ;
21541  +label TOTORDQ095 = 'TOTORDQ09=5' ;
21542  +*** encoding is sparse, initialize to zero;
21543  +TOTORDQ090 = 0;
21544  +TOTORDQ091 = 0;
21545  +TOTORDQ092 = 0;
21546  +TOTORDQ093 = 0;
21547  +TOTORDQ094 = 0;
21548  +TOTORDQ095 = 0;
21549  +if missing( TOTORDQ09 ) then do;
21550  +   TOTORDQ090 = .;
21551  +   TOTORDQ091 = .;
21552  +   TOTORDQ092 = .;
21553  +   TOTORDQ093 = .;
21554  +   TOTORDQ094 = .;
21555  +   TOTORDQ095 = .;
21556  +end;
21557  +else do;
21558  +   length _dm12 $ 12; drop _dm12 ;
21559  +   _dm12 = put( TOTORDQ09 , BEST12. );
21560  +   %DMNORMIP( _dm12 )
21561  +   if _dm12 = '0'  then do;
21562  +      TOTORDQ090 = 1;
21563  +   end;
21564  +   else if _dm12 = '1'  then do;
21565  +      TOTORDQ091 = 1;
21566  +   end;
21567  +   else if _dm12 = '2'  then do;
21568  +      TOTORDQ092 = 1;
21569  +   end;
21570  +   else if _dm12 = '3'  then do;
21571  +      TOTORDQ093 = 1;
21572  +   end;
21573  +   else if _dm12 = '4'  then do;
21574  +      TOTORDQ094 = 1;
21575  +   end;
21576  +   else if _dm12 = '5'  then do;
21577  +      TOTORDQ095 = 1;
21578  +   end;
21579  +   else do;
21580  +      delete;
21581  +   end;
21582  +end;
21583  +
21584  +*** Generate dummy variables for TOTORDQ10 ;
21585  +label TOTORDQ100 = 'TOTORDQ10=0' ;
21586  +label TOTORDQ101 = 'TOTORDQ10=1' ;
21587  +label TOTORDQ102 = 'TOTORDQ10=2' ;
21588  +label TOTORDQ103 = 'TOTORDQ10=3' ;
21589  +label TOTORDQ104 = 'TOTORDQ10=4' ;
21590  +label TOTORDQ106 = 'TOTORDQ10=6' ;
21591  +*** encoding is sparse, initialize to zero;
21592  +TOTORDQ100 = 0;
21593  +TOTORDQ101 = 0;
21594  +TOTORDQ102 = 0;
21595  +TOTORDQ103 = 0;
21596  +TOTORDQ104 = 0;
21597  +TOTORDQ106 = 0;
21598  +if missing( TOTORDQ10 ) then do;
21599  +   TOTORDQ100 = .;
21600  +   TOTORDQ101 = .;
21601  +   TOTORDQ102 = .;
21602  +   TOTORDQ103 = .;
21603  +   TOTORDQ104 = .;
21604  +   TOTORDQ106 = .;
21605  +end;
21606  +else do;
21607  +   length _dm12 $ 12; drop _dm12 ;
21608  +   _dm12 = put( TOTORDQ10 , BEST12. );
21609  +   %DMNORMIP( _dm12 )
21610  +   if _dm12 = '0'  then do;
21611  +      TOTORDQ100 = 1;
21612  +   end;
21613  +   else if _dm12 = '1'  then do;
21614  +      TOTORDQ101 = 1;
21615  +   end;
21616  +   else if _dm12 = '2'  then do;
21617  +      TOTORDQ102 = 1;
21618  +   end;
21619  +   else if _dm12 = '3'  then do;
21620  +      TOTORDQ103 = 1;
21621  +   end;
21622  +   else if _dm12 = '4'  then do;
21623  +      TOTORDQ104 = 1;
21624  +   end;
21625  +   else if _dm12 = '6'  then do;
21626  +      TOTORDQ106 = 1;
21627  +   end;
21628  +   else do;
21629  +      delete;
21630  +   end;
21631  +end;
21632  +
21633  +*** Generate dummy variables for TOTORDQ11 ;
21634  +label TOTORDQ110 = 'TOTORDQ11=0' ;
21635  +label TOTORDQ111 = 'TOTORDQ11=1' ;
21636  +label TOTORDQ112 = 'TOTORDQ11=2' ;
21637  +label TOTORDQ113 = 'TOTORDQ11=3' ;
21638  +label TOTORDQ114 = 'TOTORDQ11=4' ;
21639  +label TOTORDQ115 = 'TOTORDQ11=5' ;
21640  +label TOTORDQ117 = 'TOTORDQ11=7' ;
21641  +*** encoding is sparse, initialize to zero;
21642  +TOTORDQ110 = 0;
21643  +TOTORDQ111 = 0;
21644  +TOTORDQ112 = 0;
21645  +TOTORDQ113 = 0;
21646  +TOTORDQ114 = 0;
21647  +TOTORDQ115 = 0;
21648  +TOTORDQ117 = 0;
21649  +if missing( TOTORDQ11 ) then do;
21650  +   TOTORDQ110 = .;
21651  +   TOTORDQ111 = .;
21652  +   TOTORDQ112 = .;
21653  +   TOTORDQ113 = .;
21654  +   TOTORDQ114 = .;
21655  +   TOTORDQ115 = .;
21656  +   TOTORDQ117 = .;
21657  +end;
21658  +else do;
21659  +   length _dm12 $ 12; drop _dm12 ;
21660  +   _dm12 = put( TOTORDQ11 , BEST12. );
21661  +   %DMNORMIP( _dm12 )
21662  +   if _dm12 = '0'  then do;
21663  +      TOTORDQ110 = 1;
21664  +   end;
21665  +   else if _dm12 = '1'  then do;
21666  +      TOTORDQ111 = 1;
21667  +   end;
21668  +   else if _dm12 = '2'  then do;
21669  +      TOTORDQ112 = 1;
21670  +   end;
21671  +   else if _dm12 = '3'  then do;
21672  +      TOTORDQ113 = 1;
21673  +   end;
21674  +   else if _dm12 = '4'  then do;
21675  +      TOTORDQ114 = 1;
21676  +   end;
21677  +   else if _dm12 = '5'  then do;
21678  +      TOTORDQ115 = 1;
21679  +   end;
21680  +   else if _dm12 = '7'  then do;
21681  +      TOTORDQ117 = 1;
21682  +   end;
21683  +   else do;
21684  +      delete;
21685  +   end;
21686  +end;
21687  +
21688  +*** Generate dummy variables for TOTORDQ12 ;
21689  +label TOTORDQ120 = 'TOTORDQ12=0' ;
21690  +label TOTORDQ121 = 'TOTORDQ12=1' ;
21691  +label TOTORDQ122 = 'TOTORDQ12=2' ;
21692  +label TOTORDQ123 = 'TOTORDQ12=3' ;
21693  +label TOTORDQ124 = 'TOTORDQ12=4' ;
21694  +label TOTORDQ125 = 'TOTORDQ12=5' ;
21695  +label TOTORDQ126 = 'TOTORDQ12=6' ;
21696  +label TOTORDQ127 = 'TOTORDQ12=7' ;
21697  +label TOTORDQ129 = 'TOTORDQ12=9' ;
21698  +label TOTORDQ1221 = 'TOTORDQ12=21' ;
21699  +*** encoding is sparse, initialize to zero;
21700  +TOTORDQ120 = 0;
21701  +TOTORDQ121 = 0;
21702  +TOTORDQ122 = 0;
21703  +TOTORDQ123 = 0;
21704  +TOTORDQ124 = 0;
21705  +TOTORDQ125 = 0;
21706  +TOTORDQ126 = 0;
21707  +TOTORDQ127 = 0;
21708  +TOTORDQ129 = 0;
21709  +TOTORDQ1221 = 0;
21710  +if missing( TOTORDQ12 ) then do;
21711  +   TOTORDQ120 = .;
21712  +   TOTORDQ121 = .;
21713  +   TOTORDQ122 = .;
21714  +   TOTORDQ123 = .;
21715  +   TOTORDQ124 = .;
21716  +   TOTORDQ125 = .;
21717  +   TOTORDQ126 = .;
21718  +   TOTORDQ127 = .;
21719  +   TOTORDQ129 = .;
21720  +   TOTORDQ1221 = .;
21721  +end;
21722  +else do;
21723  +   length _dm12 $ 12; drop _dm12 ;
21724  +   _dm12 = put( TOTORDQ12 , BEST12. );
21725  +   %DMNORMIP( _dm12 )
21726  +   if _dm12 = '0'  then do;
21727  +      TOTORDQ120 = 1;
21728  +   end;
21729  +   else if _dm12 = '1'  then do;
21730  +      TOTORDQ121 = 1;
21731  +   end;
21732  +   else if _dm12 = '2'  then do;
21733  +      TOTORDQ122 = 1;
21734  +   end;
21735  +   else if _dm12 = '3'  then do;
21736  +      TOTORDQ123 = 1;
21737  +   end;
21738  +   else if _dm12 = '4'  then do;
21739  +      TOTORDQ124 = 1;
21740  +   end;
21741  +   else if _dm12 = '5'  then do;
21742  +      TOTORDQ125 = 1;
21743  +   end;
21744  +   else if _dm12 = '7'  then do;
21745  +      TOTORDQ127 = 1;
21746  +   end;
21747  +   else if _dm12 = '6'  then do;
21748  +      TOTORDQ126 = 1;
21749  +   end;
21750  +   else if _dm12 = '9'  then do;
21751  +      TOTORDQ129 = 1;
21752  +   end;
21753  +   else if _dm12 = '21'  then do;
21754  +      TOTORDQ1221 = 1;
21755  +   end;
21756  +   else do;
21757  +      delete;
21758  +   end;
21759  +end;
21760  +
21761  +*** Generate dummy variables for TOTORDQ13 ;
21762  +label TOTORDQ130 = 'TOTORDQ13=0' ;
21763  +label TOTORDQ131 = 'TOTORDQ13=1' ;
21764  +label TOTORDQ132 = 'TOTORDQ13=2' ;
21765  +label TOTORDQ133 = 'TOTORDQ13=3' ;
21766  +label TOTORDQ134 = 'TOTORDQ13=4' ;
21767  +label TOTORDQ135 = 'TOTORDQ13=5' ;
21768  +*** encoding is sparse, initialize to zero;
21769  +TOTORDQ130 = 0;
21770  +TOTORDQ131 = 0;
21771  +TOTORDQ132 = 0;
21772  +TOTORDQ133 = 0;
21773  +TOTORDQ134 = 0;
21774  +TOTORDQ135 = 0;
21775  +if missing( TOTORDQ13 ) then do;
21776  +   TOTORDQ130 = .;
21777  +   TOTORDQ131 = .;
21778  +   TOTORDQ132 = .;
21779  +   TOTORDQ133 = .;
21780  +   TOTORDQ134 = .;
21781  +   TOTORDQ135 = .;
21782  +end;
21783  +else do;
21784  +   length _dm12 $ 12; drop _dm12 ;
21785  +   _dm12 = put( TOTORDQ13 , BEST12. );
21786  +   %DMNORMIP( _dm12 )
21787  +   if _dm12 = '0'  then do;
21788  +      TOTORDQ130 = 1;
21789  +   end;
21790  +   else if _dm12 = '1'  then do;
21791  +      TOTORDQ131 = 1;
21792  +   end;
21793  +   else if _dm12 = '2'  then do;
21794  +      TOTORDQ132 = 1;
21795  +   end;
21796  +   else if _dm12 = '3'  then do;
21797  +      TOTORDQ133 = 1;
21798  +   end;
21799  +   else if _dm12 = '4'  then do;
21800  +      TOTORDQ134 = 1;
21801  +   end;
21802  +   else if _dm12 = '5'  then do;
21803  +      TOTORDQ135 = 1;
21804  +   end;
21805  +   else do;
21806  +      delete;
21807  +   end;
21808  +end;
21809  +
21810  +*** Generate dummy variables for TOTORDQ14 ;
21811  +label TOTORDQ140 = 'TOTORDQ14=0' ;
21812  +label TOTORDQ141 = 'TOTORDQ14=1' ;
21813  +label TOTORDQ142 = 'TOTORDQ14=2' ;
21814  +label TOTORDQ143 = 'TOTORDQ14=3' ;
21815  +label TOTORDQ144 = 'TOTORDQ14=4' ;
21816  +label TOTORDQ145 = 'TOTORDQ14=5' ;
21817  +label TOTORDQ146 = 'TOTORDQ14=6' ;
21818  +*** encoding is sparse, initialize to zero;
21819  +TOTORDQ140 = 0;
21820  +TOTORDQ141 = 0;
21821  +TOTORDQ142 = 0;
21822  +TOTORDQ143 = 0;
21823  +TOTORDQ144 = 0;
21824  +TOTORDQ145 = 0;
21825  +TOTORDQ146 = 0;
21826  +if missing( TOTORDQ14 ) then do;
21827  +   TOTORDQ140 = .;
21828  +   TOTORDQ141 = .;
21829  +   TOTORDQ142 = .;
21830  +   TOTORDQ143 = .;
21831  +   TOTORDQ144 = .;
21832  +   TOTORDQ145 = .;
21833  +   TOTORDQ146 = .;
21834  +end;
21835  +else do;
21836  +   length _dm12 $ 12; drop _dm12 ;
21837  +   _dm12 = put( TOTORDQ14 , BEST12. );
21838  +   %DMNORMIP( _dm12 )
21839  +   if _dm12 = '0'  then do;
21840  +      TOTORDQ140 = 1;
21841  +   end;
21842  +   else if _dm12 = '1'  then do;
21843  +      TOTORDQ141 = 1;
21844  +   end;
21845  +   else if _dm12 = '2'  then do;
21846  +      TOTORDQ142 = 1;
21847  +   end;
21848  +   else if _dm12 = '3'  then do;
21849  +      TOTORDQ143 = 1;
21850  +   end;
21851  +   else if _dm12 = '4'  then do;
21852  +      TOTORDQ144 = 1;
21853  +   end;
21854  +   else if _dm12 = '5'  then do;
21855  +      TOTORDQ145 = 1;
21856  +   end;
21857  +   else if _dm12 = '6'  then do;
21858  +      TOTORDQ146 = 1;
21859  +   end;
21860  +   else do;
21861  +      delete;
21862  +   end;
21863  +end;
21864  +
21865  +*** Generate dummy variables for TOTORDQ15 ;
21866  +label TOTORDQ150 = 'TOTORDQ15=0' ;
21867  +label TOTORDQ151 = 'TOTORDQ15=1' ;
21868  +label TOTORDQ152 = 'TOTORDQ15=2' ;
21869  +label TOTORDQ153 = 'TOTORDQ15=3' ;
21870  +label TOTORDQ154 = 'TOTORDQ15=4' ;
21871  +label TOTORDQ155 = 'TOTORDQ15=5' ;
21872  +label TOTORDQ158 = 'TOTORDQ15=8' ;
21873  +*** encoding is sparse, initialize to zero;
21874  +TOTORDQ150 = 0;
21875  +TOTORDQ151 = 0;
21876  +TOTORDQ152 = 0;
21877  +TOTORDQ153 = 0;
21878  +TOTORDQ154 = 0;
21879  +TOTORDQ155 = 0;
21880  +TOTORDQ158 = 0;
21881  +if missing( TOTORDQ15 ) then do;
21882  +   TOTORDQ150 = .;
21883  +   TOTORDQ151 = .;
21884  +   TOTORDQ152 = .;
21885  +   TOTORDQ153 = .;
21886  +   TOTORDQ154 = .;
21887  +   TOTORDQ155 = .;
21888  +   TOTORDQ158 = .;
21889  +end;
21890  +else do;
21891  +   length _dm12 $ 12; drop _dm12 ;
21892  +   _dm12 = put( TOTORDQ15 , BEST12. );
21893  +   %DMNORMIP( _dm12 )
21894  +   if _dm12 = '0'  then do;
21895  +      TOTORDQ150 = 1;
21896  +   end;
21897  +   else if _dm12 = '1'  then do;
21898  +      TOTORDQ151 = 1;
21899  +   end;
21900  +   else if _dm12 = '2'  then do;
21901  +      TOTORDQ152 = 1;
21902  +   end;
21903  +   else if _dm12 = '3'  then do;
21904  +      TOTORDQ153 = 1;
21905  +   end;
21906  +   else if _dm12 = '4'  then do;
21907  +      TOTORDQ154 = 1;
21908  +   end;
21909  +   else if _dm12 = '5'  then do;
21910  +      TOTORDQ155 = 1;
21911  +   end;
21912  +   else if _dm12 = '8'  then do;
21913  +      TOTORDQ158 = 1;
21914  +   end;
21915  +   else do;
21916  +      delete;
21917  +   end;
21918  +end;
21919  +
21920  +*** Generate dummy variables for TOTORDQ16 ;
21921  +label TOTORDQ160 = 'TOTORDQ16=0' ;
21922  +label TOTORDQ161 = 'TOTORDQ16=1' ;
21923  +label TOTORDQ162 = 'TOTORDQ16=2' ;
21924  +label TOTORDQ163 = 'TOTORDQ16=3' ;
21925  +label TOTORDQ164 = 'TOTORDQ16=4' ;
21926  +label TOTORDQ165 = 'TOTORDQ16=5' ;
21927  +label TOTORDQ166 = 'TOTORDQ16=6' ;
21928  +label TOTORDQ167 = 'TOTORDQ16=7' ;
21929  +label TOTORDQ1610 = 'TOTORDQ16=10' ;
21930  +*** encoding is sparse, initialize to zero;
21931  +TOTORDQ160 = 0;
21932  +TOTORDQ161 = 0;
21933  +TOTORDQ162 = 0;
21934  +TOTORDQ163 = 0;
21935  +TOTORDQ164 = 0;
21936  +TOTORDQ165 = 0;
21937  +TOTORDQ166 = 0;
21938  +TOTORDQ167 = 0;
21939  +TOTORDQ1610 = 0;
21940  +if missing( TOTORDQ16 ) then do;
21941  +   TOTORDQ160 = .;
21942  +   TOTORDQ161 = .;
21943  +   TOTORDQ162 = .;
21944  +   TOTORDQ163 = .;
21945  +   TOTORDQ164 = .;
21946  +   TOTORDQ165 = .;
21947  +   TOTORDQ166 = .;
21948  +   TOTORDQ167 = .;
21949  +   TOTORDQ1610 = .;
21950  +end;
21951  +else do;
21952  +   length _dm12 $ 12; drop _dm12 ;
21953  +   _dm12 = put( TOTORDQ16 , BEST12. );
21954  +   %DMNORMIP( _dm12 )
21955  +   if _dm12 = '0'  then do;
21956  +      TOTORDQ160 = 1;
21957  +   end;
21958  +   else if _dm12 = '1'  then do;
21959  +      TOTORDQ161 = 1;
21960  +   end;
21961  +   else if _dm12 = '2'  then do;
21962  +      TOTORDQ162 = 1;
21963  +   end;
21964  +   else if _dm12 = '3'  then do;
21965  +      TOTORDQ163 = 1;
21966  +   end;
21967  +   else if _dm12 = '4'  then do;
21968  +      TOTORDQ164 = 1;
21969  +   end;
21970  +   else if _dm12 = '5'  then do;
21971  +      TOTORDQ165 = 1;
21972  +   end;
21973  +   else if _dm12 = '6'  then do;
21974  +      TOTORDQ166 = 1;
21975  +   end;
21976  +   else if _dm12 = '7'  then do;
21977  +      TOTORDQ167 = 1;
21978  +   end;
21979  +   else if _dm12 = '10'  then do;
21980  +      TOTORDQ1610 = 1;
21981  +   end;
21982  +   else do;
21983  +      delete;
21984  +   end;
21985  +end;
21986  +
21987  +*** Generate dummy variables for TOTORDQ17 ;
21988  +label TOTORDQ170 = 'TOTORDQ17=0' ;
21989  +label TOTORDQ171 = 'TOTORDQ17=1' ;
21990  +label TOTORDQ172 = 'TOTORDQ17=2' ;
21991  +label TOTORDQ173 = 'TOTORDQ17=3' ;
21992  +label TOTORDQ174 = 'TOTORDQ17=4' ;
21993  +label TOTORDQ175 = 'TOTORDQ17=5' ;
21994  +*** encoding is sparse, initialize to zero;
21995  +TOTORDQ170 = 0;
21996  +TOTORDQ171 = 0;
21997  +TOTORDQ172 = 0;
21998  +TOTORDQ173 = 0;
21999  +TOTORDQ174 = 0;
22000  +TOTORDQ175 = 0;
22001  +if missing( TOTORDQ17 ) then do;
22002  +   TOTORDQ170 = .;
22003  +   TOTORDQ171 = .;
22004  +   TOTORDQ172 = .;
22005  +   TOTORDQ173 = .;
22006  +   TOTORDQ174 = .;
22007  +   TOTORDQ175 = .;
22008  +end;
22009  +else do;
22010  +   length _dm12 $ 12; drop _dm12 ;
22011  +   _dm12 = put( TOTORDQ17 , BEST12. );
22012  +   %DMNORMIP( _dm12 )
22013  +   if _dm12 = '0'  then do;
22014  +      TOTORDQ170 = 1;
22015  +   end;
22016  +   else if _dm12 = '1'  then do;
22017  +      TOTORDQ171 = 1;
22018  +   end;
22019  +   else if _dm12 = '2'  then do;
22020  +      TOTORDQ172 = 1;
22021  +   end;
22022  +   else if _dm12 = '3'  then do;
22023  +      TOTORDQ173 = 1;
22024  +   end;
22025  +   else if _dm12 = '4'  then do;
22026  +      TOTORDQ174 = 1;
22027  +   end;
22028  +   else if _dm12 = '5'  then do;
22029  +      TOTORDQ175 = 1;
22030  +   end;
22031  +   else do;
22032  +      delete;
22033  +   end;
22034  +end;
22035  +
22036  +*** Generate dummy variables for TOTORDQ18 ;
22037  +label TOTORDQ180 = 'TOTORDQ18=0' ;
22038  +label TOTORDQ181 = 'TOTORDQ18=1' ;
22039  +label TOTORDQ182 = 'TOTORDQ18=2' ;
22040  +label TOTORDQ183 = 'TOTORDQ18=3' ;
22041  +label TOTORDQ184 = 'TOTORDQ18=4' ;
22042  +label TOTORDQ185 = 'TOTORDQ18=5' ;
22043  +*** encoding is sparse, initialize to zero;
22044  +TOTORDQ180 = 0;
22045  +TOTORDQ181 = 0;
22046  +TOTORDQ182 = 0;
22047  +TOTORDQ183 = 0;
22048  +TOTORDQ184 = 0;
22049  +TOTORDQ185 = 0;
22050  +if missing( TOTORDQ18 ) then do;
22051  +   TOTORDQ180 = .;
22052  +   TOTORDQ181 = .;
22053  +   TOTORDQ182 = .;
22054  +   TOTORDQ183 = .;
22055  +   TOTORDQ184 = .;
22056  +   TOTORDQ185 = .;
22057  +end;
22058  +else do;
22059  +   length _dm12 $ 12; drop _dm12 ;
22060  +   _dm12 = put( TOTORDQ18 , BEST12. );
22061  +   %DMNORMIP( _dm12 )
22062  +   if _dm12 = '0'  then do;
22063  +      TOTORDQ180 = 1;
22064  +   end;
22065  +   else if _dm12 = '1'  then do;
22066  +      TOTORDQ181 = 1;
22067  +   end;
22068  +   else if _dm12 = '2'  then do;
22069  +      TOTORDQ182 = 1;
22070  +   end;
22071  +   else if _dm12 = '3'  then do;
22072  +      TOTORDQ183 = 1;
22073  +   end;
22074  +   else if _dm12 = '4'  then do;
22075  +      TOTORDQ184 = 1;
22076  +   end;
22077  +   else if _dm12 = '5'  then do;
22078  +      TOTORDQ185 = 1;
22079  +   end;
22080  +   else do;
22081  +      delete;
22082  +   end;
22083  +end;
22084  +
22085  +*** Generate dummy variables for TOTORDQ19 ;
22086  +label TOTORDQ190 = 'TOTORDQ19=0' ;
22087  +label TOTORDQ191 = 'TOTORDQ19=1' ;
22088  +label TOTORDQ192 = 'TOTORDQ19=2' ;
22089  +label TOTORDQ193 = 'TOTORDQ19=3' ;
22090  +label TOTORDQ194 = 'TOTORDQ19=4' ;
22091  +label TOTORDQ195 = 'TOTORDQ19=5' ;
22092  +*** encoding is sparse, initialize to zero;
22093  +TOTORDQ190 = 0;
22094  +TOTORDQ191 = 0;
22095  +TOTORDQ192 = 0;
22096  +TOTORDQ193 = 0;
22097  +TOTORDQ194 = 0;
22098  +TOTORDQ195 = 0;
22099  +if missing( TOTORDQ19 ) then do;
22100  +   TOTORDQ190 = .;
22101  +   TOTORDQ191 = .;
22102  +   TOTORDQ192 = .;
22103  +   TOTORDQ193 = .;
22104  +   TOTORDQ194 = .;
22105  +   TOTORDQ195 = .;
22106  +end;
22107  +else do;
22108  +   length _dm12 $ 12; drop _dm12 ;
22109  +   _dm12 = put( TOTORDQ19 , BEST12. );
22110  +   %DMNORMIP( _dm12 )
22111  +   if _dm12 = '0'  then do;
22112  +      TOTORDQ190 = 1;
22113  +   end;
22114  +   else if _dm12 = '1'  then do;
22115  +      TOTORDQ191 = 1;
22116  +   end;
22117  +   else if _dm12 = '2'  then do;
22118  +      TOTORDQ192 = 1;
22119  +   end;
22120  +   else if _dm12 = '3'  then do;
22121  +      TOTORDQ193 = 1;
22122  +   end;
22123  +   else if _dm12 = '4'  then do;
22124  +      TOTORDQ194 = 1;
22125  +   end;
22126  +   else if _dm12 = '5'  then do;
22127  +      TOTORDQ195 = 1;
22128  +   end;
22129  +   else do;
22130  +      delete;
22131  +   end;
22132  +end;
22133  +
22134  +*** Generate dummy variables for TOTORDQ20 ;
22135  +label TOTORDQ200 = 'TOTORDQ20=0' ;
22136  +label TOTORDQ201 = 'TOTORDQ20=1' ;
22137  +label TOTORDQ202 = 'TOTORDQ20=2' ;
22138  +label TOTORDQ203 = 'TOTORDQ20=3' ;
22139  +label TOTORDQ204 = 'TOTORDQ20=4' ;
22140  +label TOTORDQ205 = 'TOTORDQ20=5' ;
22141  +label TOTORDQ207 = 'TOTORDQ20=7' ;
22142  +label TOTORDQ208 = 'TOTORDQ20=8' ;
22143  +label TOTORDQ2010 = 'TOTORDQ20=10' ;
22144  +label TOTORDQ2027 = 'TOTORDQ20=27' ;
22145  +*** encoding is sparse, initialize to zero;
22146  +TOTORDQ200 = 0;
22147  +TOTORDQ201 = 0;
22148  +TOTORDQ202 = 0;
22149  +TOTORDQ203 = 0;
22150  +TOTORDQ204 = 0;
22151  +TOTORDQ205 = 0;
22152  +TOTORDQ207 = 0;
22153  +TOTORDQ208 = 0;
22154  +TOTORDQ2010 = 0;
22155  +TOTORDQ2027 = 0;
22156  +if missing( TOTORDQ20 ) then do;
22157  +   TOTORDQ200 = .;
22158  +   TOTORDQ201 = .;
22159  +   TOTORDQ202 = .;
22160  +   TOTORDQ203 = .;
22161  +   TOTORDQ204 = .;
22162  +   TOTORDQ205 = .;
22163  +   TOTORDQ207 = .;
22164  +   TOTORDQ208 = .;
22165  +   TOTORDQ2010 = .;
22166  +   TOTORDQ2027 = .;
22167  +end;
22168  +else do;
22169  +   length _dm12 $ 12; drop _dm12 ;
22170  +   _dm12 = put( TOTORDQ20 , BEST12. );
22171  +   %DMNORMIP( _dm12 )
22172  +   if _dm12 = '0'  then do;
22173  +      TOTORDQ200 = 1;
22174  +   end;
22175  +   else if _dm12 = '1'  then do;
22176  +      TOTORDQ201 = 1;
22177  +   end;
22178  +   else if _dm12 = '2'  then do;
22179  +      TOTORDQ202 = 1;
22180  +   end;
22181  +   else if _dm12 = '3'  then do;
22182  +      TOTORDQ203 = 1;
22183  +   end;
22184  +   else if _dm12 = '4'  then do;
22185  +      TOTORDQ204 = 1;
22186  +   end;
22187  +   else if _dm12 = '5'  then do;
22188  +      TOTORDQ205 = 1;
22189  +   end;
22190  +   else if _dm12 = '7'  then do;
22191  +      TOTORDQ207 = 1;
22192  +   end;
22193  +   else if _dm12 = '8'  then do;
22194  +      TOTORDQ208 = 1;
22195  +   end;
22196  +   else if _dm12 = '10'  then do;
22197  +      TOTORDQ2010 = 1;
22198  +   end;
22199  +   else if _dm12 = '27'  then do;
22200  +      TOTORDQ2027 = 1;
22201  +   end;
22202  +   else do;
22203  +      delete;
22204  +   end;
22205  +end;
22206  +
22207  +*** Generate dummy variables for TOTORDQ21 ;
22208  +label TOTORDQ210 = 'TOTORDQ21=0' ;
22209  +label TOTORDQ211 = 'TOTORDQ21=1' ;
22210  +label TOTORDQ212 = 'TOTORDQ21=2' ;
22211  +label TOTORDQ213 = 'TOTORDQ21=3' ;
22212  +label TOTORDQ214 = 'TOTORDQ21=4' ;
22213  +label TOTORDQ215 = 'TOTORDQ21=5' ;
22214  +label TOTORDQ219 = 'TOTORDQ21=9' ;
22215  +*** encoding is sparse, initialize to zero;
22216  +TOTORDQ210 = 0;
22217  +TOTORDQ211 = 0;
22218  +TOTORDQ212 = 0;
22219  +TOTORDQ213 = 0;
22220  +TOTORDQ214 = 0;
22221  +TOTORDQ215 = 0;
22222  +TOTORDQ219 = 0;
22223  +if missing( TOTORDQ21 ) then do;
22224  +   TOTORDQ210 = .;
22225  +   TOTORDQ211 = .;
22226  +   TOTORDQ212 = .;
22227  +   TOTORDQ213 = .;
22228  +   TOTORDQ214 = .;
22229  +   TOTORDQ215 = .;
22230  +   TOTORDQ219 = .;
22231  +end;
22232  +else do;
22233  +   length _dm12 $ 12; drop _dm12 ;
22234  +   _dm12 = put( TOTORDQ21 , BEST12. );
22235  +   %DMNORMIP( _dm12 )
22236  +   if _dm12 = '0'  then do;
22237  +      TOTORDQ210 = 1;
22238  +   end;
22239  +   else if _dm12 = '1'  then do;
22240  +      TOTORDQ211 = 1;
22241  +   end;
22242  +   else if _dm12 = '2'  then do;
22243  +      TOTORDQ212 = 1;
22244  +   end;
22245  +   else if _dm12 = '3'  then do;
22246  +      TOTORDQ213 = 1;
22247  +   end;
22248  +   else if _dm12 = '4'  then do;
22249  +      TOTORDQ214 = 1;
22250  +   end;
22251  +   else if _dm12 = '5'  then do;
22252  +      TOTORDQ215 = 1;
22253  +   end;
22254  +   else if _dm12 = '9'  then do;
22255  +      TOTORDQ219 = 1;
22256  +   end;
22257  +   else do;
22258  +      delete;
22259  +   end;
22260  +end;
22261  +
22262  +*** Generate dummy variables for TOTORDQ22 ;
22263  +label TOTORDQ220 = 'TOTORDQ22=0' ;
22264  +label TOTORDQ221 = 'TOTORDQ22=1' ;
22265  +label TOTORDQ222 = 'TOTORDQ22=2' ;
22266  +label TOTORDQ223 = 'TOTORDQ22=3' ;
22267  +label TOTORDQ224 = 'TOTORDQ22=4' ;
22268  +label TOTORDQ225 = 'TOTORDQ22=5' ;
22269  +label TOTORDQ226 = 'TOTORDQ22=6' ;
22270  +*** encoding is sparse, initialize to zero;
22271  +TOTORDQ220 = 0;
22272  +TOTORDQ221 = 0;
22273  +TOTORDQ222 = 0;
22274  +TOTORDQ223 = 0;
22275  +TOTORDQ224 = 0;
22276  +TOTORDQ225 = 0;
22277  +TOTORDQ226 = 0;
22278  +if missing( TOTORDQ22 ) then do;
22279  +   TOTORDQ220 = .;
22280  +   TOTORDQ221 = .;
22281  +   TOTORDQ222 = .;
22282  +   TOTORDQ223 = .;
22283  +   TOTORDQ224 = .;
22284  +   TOTORDQ225 = .;
22285  +   TOTORDQ226 = .;
22286  +end;
22287  +else do;
22288  +   length _dm12 $ 12; drop _dm12 ;
22289  +   _dm12 = put( TOTORDQ22 , BEST12. );
22290  +   %DMNORMIP( _dm12 )
22291  +   if _dm12 = '0'  then do;
22292  +      TOTORDQ220 = 1;
22293  +   end;
22294  +   else if _dm12 = '1'  then do;
22295  +      TOTORDQ221 = 1;
22296  +   end;
22297  +   else if _dm12 = '2'  then do;
22298  +      TOTORDQ222 = 1;
22299  +   end;
22300  +   else if _dm12 = '3'  then do;
22301  +      TOTORDQ223 = 1;
22302  +   end;
22303  +   else if _dm12 = '4'  then do;
22304  +      TOTORDQ224 = 1;
22305  +   end;
22306  +   else if _dm12 = '5'  then do;
22307  +      TOTORDQ225 = 1;
22308  +   end;
22309  +   else if _dm12 = '6'  then do;
22310  +      TOTORDQ226 = 1;
22311  +   end;
22312  +   else do;
22313  +      delete;
22314  +   end;
22315  +end;
22316  +
22317  +*** End Class Look-up, Standardization, Replacement ;
22318  +
22319  +
22320  +/*-------------------------------------------------*/
22321  +/* Varclus Score Code Begins: GCLUSTER 1*/
22322  +/*-------------------------------------------------*/
22323  +
22324  +GC1_CLUS1 = 0 ; /*---Global Cluster 1 : Cluster Component 1------ */
22325  +GC1_CLUS1 = GC1_CLUS1+0.02403274451862 * (ACTBUY3 - 0.0514657980456)/0.22094927955546;
22326  +GC1_CLUS1 = GC1_CLUS1+0.02121224694661 * (ACTBUY5 - 0.00896541026834)/0.09426190815315;
22327  +GC1_CLUS1 = GC1_CLUS1+0.03596050802604 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
22328  +GC1_CLUS1 = GC1_CLUS1+0.07679925990842 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
22329  +GC1_CLUS1 = GC1_CLUS1+0.03943895164691 * (DEPT01 - 0.50547541492166)/1.82274128473225;
22330  +GC1_CLUS1 = GC1_CLUS1+0.03502874300207 * (DEPT02 - 0.29257018768419)/1.15307534710204;
22331  +GC1_CLUS1 = GC1_CLUS1+0.04468169103157 * (DEPT03 - 1.08161935784085)/2.82203775857088;
22332  +GC1_CLUS1 = GC1_CLUS1+0.03848425075317 * (DEPT04 - 0.68006824879789)/2.28175674515779;
22333  +GC1_CLUS1 = GC1_CLUS1+0.03934102799526 * (DEPT05 - 0.54295020939972)/1.52515347226129;
22334  +GC1_CLUS1 = GC1_CLUS1+0.04532602847659 * (DEPT06 - 0.85925236544129)/1.98131768775175;
22335  +GC1_CLUS1 = GC1_CLUS1+0.00297802542579 * (DEPT079 - 0.00003102218085)/0.00556975590661;
22336  +GC1_CLUS1 = GC1_CLUS1+0.03010556168453 * (DEPT08 - 0.31512331316891)/1.29408639394269;
22337  +GC1_CLUS1 = GC1_CLUS1+0.02180241102851 * (DEPT09 - 0.2486427795874)/1.20923480324609;
22338  +GC1_CLUS1 = GC1_CLUS1+0.02678374758298 * (DEPT10 - 0.39066232356134)/1.7648701612552;
22339  +GC1_CLUS1 = GC1_CLUS1+0.00241250440498 * (DEPT1129 - 0.00003102218085)/0.00556975590661;
22340  +GC1_CLUS1 = GC1_CLUS1+0.00588232834129 * (DEPT1213 - 0.00009306654257)/0.009646800928;
22341  +GC1_CLUS1 = GC1_CLUS1+0.02019172818798 * (DEPT123 - 0.05013184426865)/0.21822034675722;
22342  +GC1_CLUS1 = GC1_CLUS1+0.01463037343335 * (DEPT125 - 0.00614239181014)/0.07813355373221;
22343  +GC1_CLUS1 = GC1_CLUS1+0.05265378905906 * (DEPT13 - 1.30395532805956)/2.58742913517547;
22344  +GC1_CLUS1 = GC1_CLUS1+0.04783731053128 * (DEPT14 - 0.83527221963704)/2.18699342328426;
22345  +GC1_CLUS1 = GC1_CLUS1+0.03020115809854 * (DEPT15 - 0.28949899177912)/1.23869079532202;
22346  +GC1_CLUS1 = GC1_CLUS1+0.03039823798033 * (DEPT16 - 0.22491081123002)/1.0272304883634;
22347  +GC1_CLUS1 = GC1_CLUS1+0.05846297558764 * (DEPT22 - 2.12771831859779)/3.55134640550257;
22348  +GC1_CLUS1 = GC1_CLUS1+0.05036335120328 * (DEPT23 - 2.14223669923995)/3.81941288304535;
22349  +GC1_CLUS1 = GC1_CLUS1+0.04012422131232 * (DEPT24 - 0.64039087947882)/1.70711269742472;
22350  +GC1_CLUS1 = GC1_CLUS1+0.04311760931496 * (DEPT25 - 1.77676438653637)/4.75421718243184;
22351  +GC1_CLUS1 = GC1_CLUS1+0.03719953654458 * (DEPT27 - 0.58712579494338)/1.55259848403997;
22352  +GC1_CLUS1 = GC1_CLUS1+0.07926960842935 * (DOLINDET - 197.869031487513)/314.244548218948;
22353  +GC1_CLUS1 = GC1_CLUS1+0.03178425235174 * (DOLLARQ01 - 3.60255901969907)/18.9572343997303;
22354  +GC1_CLUS1 = GC1_CLUS1+0.02957447611031 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
22355  +GC1_CLUS1 = GC1_CLUS1+0.02029895811947 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
22356  +GC1_CLUS1 = GC1_CLUS1+0.02237975677114 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
22357  +GC1_CLUS1 = GC1_CLUS1+0.02835505585164 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
22358  +GC1_CLUS1 = GC1_CLUS1+0.02956640433695 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
22359  +GC1_CLUS1 = GC1_CLUS1+0.02921452555171 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
22360  +GC1_CLUS1 = GC1_CLUS1+0.03017629337041 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
22361  +GC1_CLUS1 = GC1_CLUS1+0.02710846864214 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
22362  +GC1_CLUS1 = GC1_CLUS1+0.02941947448416 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
22363  +GC1_CLUS1 = GC1_CLUS1+0.02842082883057 * (DOLLARQ11 - 4.15352411974561)/20.8177653006881;
22364  +GC1_CLUS1 = GC1_CLUS1+0.03128795254225 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
22365  +GC1_CLUS1 = GC1_CLUS1+0.0290929595258 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
22366  +GC1_CLUS1 = GC1_CLUS1+0.02386456655579 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
22367  +GC1_CLUS1 = GC1_CLUS1+0.02877937023151 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
22368  +GC1_CLUS1 = GC1_CLUS1+0.02590136989857 * (DOLLARQ17 - 5.57017403443462)/26.1415799982751;
22369  +GC1_CLUS1 = GC1_CLUS1+0.02460106532201 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
22370  +GC1_CLUS1 = GC1_CLUS1+0.0212075140634 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
22371  +GC1_CLUS1 = GC1_CLUS1+0.07861654531454 * (DOLNETDT - 189.18095548317)/303.615750735174;
22372  +GC1_CLUS1 = GC1_CLUS1+0.07462298923671 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
22373  +GC1_CLUS1 = GC1_CLUS1+0.03596050802604 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
22374  +GC1_CLUS1 = GC1_CLUS1+0.02543369568207 * (TOTORDQ011 - 0.05853885528152)/0.23476321571557;
22375  +GC1_CLUS1 = GC1_CLUS1+0.01544838870701 * (TOTORDQ012 - 0.00791065611912)/0.08859075070754;
22376  +GC1_CLUS1 = GC1_CLUS1+0.02407829936758 * (TOTORDQ021 - 0.05627423607879)/0.2304541038742;
22377  +GC1_CLUS1 = GC1_CLUS1+0.01516633969091 * (TOTORDQ022 - 0.00639056925701)/0.07968642839386;
22378  +GC1_CLUS1 = GC1_CLUS1+0.0183773802853 * (TOTORDQ031 - 0.04920117884287)/0.21629117901362;
22379  +GC1_CLUS1 = GC1_CLUS1+0.01684075428632 * (TOTORDQ041 - 0.0732743911897)/0.2605904093015;
22380  +GC1_CLUS1 = GC1_CLUS1+0.00920411424924 * (TOTORDQ043 - 0.00102373196835)/0.03197992601749;
22381  +GC1_CLUS1 = GC1_CLUS1+0.0221703136336 * (TOTORDQ051 - 0.06781448735846)/0.25143119100849;
22382  +GC1_CLUS1 = GC1_CLUS1+0.02283967511052 * (TOTORDQ061 - 0.06446409182565)/0.24558164355085;
22383  +GC1_CLUS1 = GC1_CLUS1+0.02079546053 * (TOTORDQ071 - 0.06769039863502)/0.25121776686543;
22384  +GC1_CLUS1 = GC1_CLUS1+0.01637653045396 * (TOTORDQ072 - 0.0071661237785)/0.08435040705909;
22385  +GC1_CLUS1 = GC1_CLUS1+0.02156080172429 * (TOTORDQ081 - 0.09083294555607)/0.28737585758179;
22386  +GC1_CLUS1 = GC1_CLUS1+0.02133973297426 * (TOTORDQ091 - 0.07256088102993)/0.25941836346204;
22387  +GC1_CLUS1 = GC1_CLUS1+0.02229345634202 * (TOTORDQ101 - 0.05934543198386)/0.23627374697278;
22388  +GC1_CLUS1 = GC1_CLUS1+0.01620383655141 * (TOTORDQ102 - 0.00614239181014)/0.07813355373221;
22389  +GC1_CLUS1 = GC1_CLUS1+0.00413621873077 * (TOTORDQ104 - 0.00012408872343)/0.01113899342716;
22390  +GC1_CLUS1 = GC1_CLUS1+0.02051791178266 * (TOTORDQ111 - 0.06902435241197)/0.25349947679037;
22391  +GC1_CLUS1 = GC1_CLUS1+0.01603964994282 * (TOTORDQ112 - 0.00722816814022)/0.08471212631733;
22392  +GC1_CLUS1 = GC1_CLUS1+0.00518070078124 * (TOTORDQ115 - 0.00006204436171)/0.00787670215937;
22393  +GC1_CLUS1 = GC1_CLUS1+0.01923582331917 * (TOTORDQ121 - 0.09626182720645)/0.29495455023242;
22394  +GC1_CLUS1 = GC1_CLUS1+0.01661657226127 * (TOTORDQ122 - 0.01098185202419)/0.10421894213846;
22395  +GC1_CLUS1 = GC1_CLUS1+0.01898376902918 * (TOTORDQ131 - 0.08621064060803)/0.2806791941105;
22396  +GC1_CLUS1 = GC1_CLUS1+0.0167005688948 * (TOTORDQ132 - 0.0088413215449)/0.09361316381141;
22397  +GC1_CLUS1 = GC1_CLUS1+0.01823765088004 * (TOTORDQ141 - 0.0719714595936)/0.25844465690351;
22398  +GC1_CLUS1 = GC1_CLUS1+0.01867065462108 * (TOTORDQ151 - 0.07584923220102)/0.264760836941;
22399  +GC1_CLUS1 = GC1_CLUS1+0.01581561970053 * (TOTORDQ152 - 0.00905847681091)/0.09474544466925;
22400  +GC1_CLUS1 = GC1_CLUS1+0.01749893197787 * (TOTORDQ171 - 0.08329455560725)/0.27633121690163;
22401  +GC1_CLUS1 = GC1_CLUS1+0.01607554744595 * (TOTORDQ172 - 0.00961687606638)/0.09759450413666;
22402  +GC1_CLUS1 = GC1_CLUS1+0.01913304631168 * (TOTORDQ181 - 0.07476345587094)/0.26301335998085;
22403  +GC1_CLUS1 = GC1_CLUS1+0.01442295631512 * (TOTORDQ182 - 0.00744532340623)/0.08596580612805;
22404  +GC1_CLUS1 = GC1_CLUS1+0.0158534933606 * (TOTORDQ191 - 0.06775244299674)/0.25132450925054;
22405  +GC1_CLUS1 = GC1_CLUS1+0.07999816878672 * (UNITSIDD - 10.9602916085)/17.1055734908767;
22406  +
22407  +/*-------------------------------------------------*/
22408  +/* Varclus Score Code Begins: GCLUSTER 2*/
22409  +/*-------------------------------------------------*/
22410  +
22411  +GC2_CLUS1 = 0 ; /*---Global Cluster 2 : Cluster Component 1------ */
22412  +GC2_CLUS1 = GC2_CLUS1+0.00314158680649 * (ACTBUY1 - 0.37512021095082)/0.48416145062171;
22413  +GC2_CLUS1 = GC2_CLUS1+0.00459105554269 * (ACTBUY10 - 0.00006204436171)/0.00787670215937;
22414  +GC2_CLUS1 = GC2_CLUS1+0.01064321207564 * (ACTBUY2 - 0.13730417248332)/0.34417351938694;
22415  +GC2_CLUS1 = GC2_CLUS1+0.01443741649106 * (ACTBUY4 - 0.02196370404839)/0.14656727523669;
22416  +GC2_CLUS1 = GC2_CLUS1+0.0118676806299 * (ACTBUY6 - 0.00499457111834)/0.07049666340397;
22417  +GC2_CLUS1 = GC2_CLUS1+0.00908652540594 * (ACTBUY7 - 0.00186133085155)/0.04310364179361;
22418  +GC2_CLUS1 = GC2_CLUS1+0.01253243037523 * (ACTBUY8 - 0.00105475414921)/0.03246035012406;
22419  +GC2_CLUS1 = GC2_CLUS1+0.00493552598957 * (ACTBUY9 - 0.00024817744687)/0.01575193804466;
22420  +GC2_CLUS1 = GC2_CLUS1+0.0493815003883 * (BUYPROP - 0.18928931964407)/0.25656954904129;
22421  +GC2_CLUS1 = GC2_CLUS1+-0.15685437204876 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
22422  +GC2_CLUS1 = GC2_CLUS1+0.15685437204876 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
22423  +GC2_CLUS1 = GC2_CLUS1+0.0102493874838 * (DEPT073 - 0.00555297037381)/0.07431222112026;
22424  +GC2_CLUS1 = GC2_CLUS1+0.00199099826855 * (DEPT074 - 0.00065146579804)/0.02551590852213;
22425  +GC2_CLUS1 = GC2_CLUS1+0.00483303799478 * (DEPT075 - 0.00077555452148)/0.02783841012245;
22426  +GC2_CLUS1 = GC2_CLUS1+0.00188504640788 * (DEPT076 - 0.00006204436171)/0.00787670215937;
22427  +GC2_CLUS1 = GC2_CLUS1+-0.00038861704426 * (DEPT077 - 0.00012408872343)/0.01113899342716;
22428  +GC2_CLUS1 = GC2_CLUS1+0.00067990607655 * (DEPT078 - 0.00003102218085)/0.00556975590661;
22429  +GC2_CLUS1 = GC2_CLUS1+0.00115662497896 * (DEPT1110 - 0.00003102218085)/0.00556975590661;
22430  +GC2_CLUS1 = GC2_CLUS1+0.01089840273066 * (DEPT1111 - 0.00009306654257)/0.009646800928;
22431  +GC2_CLUS1 = GC2_CLUS1+0.00243611074432 * (DEPT1113 - 0.00006204436171)/0.00787670215937;
22432  +GC2_CLUS1 = GC2_CLUS1+0.00152232402345 * (DEPT1116 - 0.00003102218085)/0.00556975590661;
22433  +GC2_CLUS1 = GC2_CLUS1+0.00065286899208 * (DEPT1118 - 0.00003102218085)/0.00556975590661;
22434  +GC2_CLUS1 = GC2_CLUS1+0.01281484285037 * (DEPT113 - 0.03601675197766)/0.18633470601066;
22435  +GC2_CLUS1 = GC2_CLUS1+0.00709313387419 * (DEPT114 - 0.00210950829843)/0.04588162571985;
22436  +GC2_CLUS1 = GC2_CLUS1+0.00744010392835 * (DEPT115 - 0.00390879478827)/0.06239901361948;
22437  +GC2_CLUS1 = GC2_CLUS1+0.00327544370976 * (DEPT116 - 0.00055839925546)/0.02362424092676;
22438  +GC2_CLUS1 = GC2_CLUS1+0.0024936886243 * (DEPT117 - 0.0006824879789)/0.02611595963267;
22439  +GC2_CLUS1 = GC2_CLUS1+0.00403706295323 * (DEPT118 - 0.00018613308515)/0.01364200179552;
22440  +GC2_CLUS1 = GC2_CLUS1+0.00283086465388 * (DEPT119 - 0.00018613308515)/0.01364200179552;
22441  +GC2_CLUS1 = GC2_CLUS1+0.00148081349615 * (DEPT1210 - 0.00006204436171)/0.00787670215937;
22442  +GC2_CLUS1 = GC2_CLUS1+0.00205275793169 * (DEPT1211 - 0.00012408872343)/0.01113899342716;
22443  +GC2_CLUS1 = GC2_CLUS1+0.00145190057297 * (DEPT1212 - 0.00003102218085)/0.00556975590661;
22444  +GC2_CLUS1 = GC2_CLUS1+0.00196278191138 * (DEPT1215 - 0.00006204436171)/0.00787670215937;
22445  +GC2_CLUS1 = GC2_CLUS1+0.01134643883544 * (DEPT1216 - 0.00003102218085)/0.00556975590661;
22446  +GC2_CLUS1 = GC2_CLUS1+0.00397128111367 * (DEPT124 - 0.00245075228788)/0.04944514076042;
22447  +GC2_CLUS1 = GC2_CLUS1+0.00454718804383 * (DEPT126 - 0.00071351015976)/0.02670249393877;
22448  +GC2_CLUS1 = GC2_CLUS1+0.00310914554063 * (DEPT127 - 0.00105475414921)/0.03246035012406;
22449  +GC2_CLUS1 = GC2_CLUS1+0.00280275393696 * (DEPT128 - 0.00034124398945)/0.01846992487371;
22450  +GC2_CLUS1 = GC2_CLUS1+0.00663559071665 * (DEPT129 - 0.00046533271288)/0.02156688683426;
22451  +GC2_CLUS1 = GC2_CLUS1+0.0018009528014 * (DEPT1710 - 0.00040328835117)/0.02007830211705;
22452  +GC2_CLUS1 = GC2_CLUS1+0.00308034890098 * (DEPT1711 - 0.00015511090429)/0.01245358005496;
22453  +GC2_CLUS1 = GC2_CLUS1+0.00503119031769 * (DEPT1712 - 0.00018613308515)/0.01364200179552;
22454  +GC2_CLUS1 = GC2_CLUS1+0.00375944374874 * (DEPT1713 - 0.00009306654257)/0.009646800928;
22455  +GC2_CLUS1 = GC2_CLUS1+0.00824962040809 * (DEPT1714 - 0.00012408872343)/0.01113899342716;
22456  +GC2_CLUS1 = GC2_CLUS1+0.0023478862885 * (DEPT1715 - 0.00006204436171)/0.00787670215937;
22457  +GC2_CLUS1 = GC2_CLUS1+-5.3143847459944E-6 * (DEPT1716 - 0.00003102218085)/0.00556975590661;
22458  +GC2_CLUS1 = GC2_CLUS1+0.00574661051866 * (DEPT1717 - 0.00012408872343)/0.01113899342716;
22459  +GC2_CLUS1 = GC2_CLUS1+0.00371300213267 * (DEPT1723 - 0.00003102218085)/0.00556975590661;
22460  +GC2_CLUS1 = GC2_CLUS1+0.01345941379745 * (DEPT173 - 0.03449666511555)/0.18250391362458;
22461  +GC2_CLUS1 = GC2_CLUS1+0.00365541131298 * (DEPT1734 - 0.00003102218085)/0.00556975590661;
22462  +GC2_CLUS1 = GC2_CLUS1+0.0100677642224 * (DEPT174 - 0.00499457111834)/0.07049666340397;
22463  +GC2_CLUS1 = GC2_CLUS1+0.00924908083393 * (DEPT175 - 0.00536683728866)/0.07306298617482;
22464  +GC2_CLUS1 = GC2_CLUS1+0.00908559695544 * (DEPT176 - 0.00161315340468)/0.04013229503948;
22465  +GC2_CLUS1 = GC2_CLUS1+0.00571135264879 * (DEPT177 - 0.0013649759578)/0.03692093019532;
22466  +GC2_CLUS1 = GC2_CLUS1+0.00556166552246 * (DEPT178 - 0.00058942143632)/0.02427122357082;
22467  +GC2_CLUS1 = GC2_CLUS1+0.00815760850118 * (DEPT179 - 0.00046533271288)/0.02156688683426;
22468  +GC2_CLUS1 = GC2_CLUS1+0.00430126305894 * (DEPT1810 - 0.00015511090429)/0.01245358005496;
22469  +GC2_CLUS1 = GC2_CLUS1+0.00061375380229 * (DEPT1811 - 0.00012408872343)/0.01113899342716;
22470  +GC2_CLUS1 = GC2_CLUS1+-0.0015778988164 * (DEPT1812 - 0.00003102218085)/0.00556975590661;
22471  +GC2_CLUS1 = GC2_CLUS1+0.00195309546325 * (DEPT1813 - 0.00003102218085)/0.00556975590661;
22472  +GC2_CLUS1 = GC2_CLUS1+0.01063724274914 * (DEPT183 - 0.02953311617806)/0.16929796330267;
22473  +GC2_CLUS1 = GC2_CLUS1+0.00712251153847 * (DEPT184 - 0.00341243989452)/0.05831724146293;
22474  +GC2_CLUS1 = GC2_CLUS1+0.00612767725955 * (DEPT185 - 0.00310221808593)/0.0556119615809;
22475  +GC2_CLUS1 = GC2_CLUS1+0.00815965086652 * (DEPT186 - 0.00062044361718)/0.02490136347819;
22476  +GC2_CLUS1 = GC2_CLUS1+0.00747922287849 * (DEPT187 - 0.00071351015976)/0.02670249393877;
22477  +GC2_CLUS1 = GC2_CLUS1+0.00376465469871 * (DEPT188 - 0.00009306654257)/0.009646800928;
22478  +GC2_CLUS1 = GC2_CLUS1+0.00495690941406 * (DEPT189 - 0.00009306654257)/0.009646800928;
22479  +GC2_CLUS1 = GC2_CLUS1+0.00289645872311 * (DEPT1910 - 0.00015511090429)/0.01245358005496;
22480  +GC2_CLUS1 = GC2_CLUS1+0.00013946233498 * (DEPT1911 - 0.00009306654257)/0.009646800928;
22481  +GC2_CLUS1 = GC2_CLUS1+0.00489313542804 * (DEPT1912 - 0.00006204436171)/0.00787670215937;
22482  +GC2_CLUS1 = GC2_CLUS1+0.00227493896734 * (DEPT1913 - 0.00003102218085)/0.00556975590661;
22483  +GC2_CLUS1 = GC2_CLUS1+0.00217634204399 * (DEPT1914 - 0.00003102218085)/0.00556975590661;
22484  +GC2_CLUS1 = GC2_CLUS1+0.00606763951703 * (DEPT1915 - 0.00003102218085)/0.00556975590661;
22485  +GC2_CLUS1 = GC2_CLUS1+0.00124326691564 * (DEPT1918 - 0.00003102218085)/0.00556975590661;
22486  +GC2_CLUS1 = GC2_CLUS1+0.00486559216652 * (DEPT1920 - 0.00003102218085)/0.00556975590661;
22487  +GC2_CLUS1 = GC2_CLUS1+0.00847671718491 * (DEPT193 - 0.01091980766247)/0.1039273810436;
22488  +GC2_CLUS1 = GC2_CLUS1+0.00615408830182 * (DEPT194 - 0.00331937335194)/0.05751919460555;
22489  +GC2_CLUS1 = GC2_CLUS1+0.00769212407575 * (DEPT195 - 0.00210950829843)/0.04588162571985;
22490  +GC2_CLUS1 = GC2_CLUS1+0.00536363841497 * (DEPT196 - 0.00080657670234)/0.02838927858765;
22491  +GC2_CLUS1 = GC2_CLUS1+0.00133691442421 * (DEPT197 - 0.00034124398945)/0.01846992487371;
22492  +GC2_CLUS1 = GC2_CLUS1+0.00289937810936 * (DEPT198 - 0.00027919962773)/0.01670719409516;
22493  +GC2_CLUS1 = GC2_CLUS1+0.00971308189618 * (DEPT203 - 0.00859314409803)/0.0923014965646;
22494  +GC2_CLUS1 = GC2_CLUS1+0.00241535419603 * (DEPT204 - 0.00012408872343)/0.01113899342716;
22495  +GC2_CLUS1 = GC2_CLUS1+0.00536277024769 * (DEPT205 - 0.0005273770746)/0.02295899170903;
22496  +GC2_CLUS1 = GC2_CLUS1+0.00132607968788 * (DEPT206 - 0.00003102218085)/0.00556975590661;
22497  +GC2_CLUS1 = GC2_CLUS1+-0.00028279043188 * (DEPT207 - 0.00003102218085)/0.00556975590661;
22498  +GC2_CLUS1 = GC2_CLUS1+0.00234331036089 * (DEPT208 - 0.00003102218085)/0.00556975590661;
22499  +GC2_CLUS1 = GC2_CLUS1+0.00606408362712 * (DEPT213 - 0.00527377074608)/0.07243010999791;
22500  +GC2_CLUS1 = GC2_CLUS1+-0.00046361581138 * (DEPT214 - 0.00012408872343)/0.01113899342716;
22501  +GC2_CLUS1 = GC2_CLUS1+0.00430645161008 * (DEPT215 - 0.00024817744687)/0.01575193804466;
22502  +GC2_CLUS1 = GC2_CLUS1+0.00269575082068 * (DEPT216 - 0.00006204436171)/0.00787670215937;
22503  +GC2_CLUS1 = GC2_CLUS1+0.00491889202435 * (DEPT219 - 0.00003102218085)/0.00556975590661;
22504  +GC2_CLUS1 = GC2_CLUS1+0.00024761856571 * (DEPT2610 - 0.00003102218085)/0.00556975590661;
22505  +GC2_CLUS1 = GC2_CLUS1+0.00414508156978 * (DEPT2611 - 0.00009306654257)/0.009646800928;
22506  +GC2_CLUS1 = GC2_CLUS1+0.00700780295763 * (DEPT2614 - 0.00003102218085)/0.00556975590661;
22507  +GC2_CLUS1 = GC2_CLUS1+0.00135722135059 * (DEPT2615 - 0.00003102218085)/0.00556975590661;
22508  +GC2_CLUS1 = GC2_CLUS1+0.00175783138139 * (DEPT2625 - 0.00003102218085)/0.00556975590661;
22509  +GC2_CLUS1 = GC2_CLUS1+0.01794683155632 * (DEPT263 - 0.03750581665891)/0.19000065864136;
22510  +GC2_CLUS1 = GC2_CLUS1+0.01191208543439 * (DEPT264 - 0.00719714595936)/0.0845314658605;
22511  +GC2_CLUS1 = GC2_CLUS1+0.01057320441903 * (DEPT265 - 0.00456026058631)/0.06737659414192;
22512  +GC2_CLUS1 = GC2_CLUS1+0.00889633557409 * (DEPT2655 - 0.00003102218085)/0.00556975590661;
22513  +GC2_CLUS1 = GC2_CLUS1+0.00762219104083 * (DEPT266 - 0.00158213122382)/0.03974515177532;
22514  +GC2_CLUS1 = GC2_CLUS1+0.00980161924451 * (DEPT267 - 0.00093066542577)/0.03049308336231;
22515  +GC2_CLUS1 = GC2_CLUS1+0.0109775762695 * (DEPT268 - 0.00034124398945)/0.01846992487371;
22516  +GC2_CLUS1 = GC2_CLUS1+0.00461867872075 * (DEPT269 - 0.00027919962773)/0.01670719409516;
22517  +GC2_CLUS1 = GC2_CLUS1+0.0829328139924 * (DOLINDEA - 47.8585866898046)/37.591191668842;
22518  +GC2_CLUS1 = GC2_CLUS1+0.0876750005459 * (DOLL24 - 45.4938073522568)/93.9875146751151;
22519  +GC2_CLUS1 = GC2_CLUS1+0.05163894852436 * (DOLLARQ16 - 7.79008624166279)/31.0104071776129;
22520  +GC2_CLUS1 = GC2_CLUS1+0.0630929742567 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
22521  +GC2_CLUS1 = GC2_CLUS1+0.03963318945855 * (DOLLARQ21 - 4.7463651310687)/24.268088572003;
22522  +GC2_CLUS1 = GC2_CLUS1+0.04042375289191 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
22523  +GC2_CLUS1 = GC2_CLUS1+0.07823630994548 * (DOLNETDA - 45.411597554134)/36.1502695431938;
22524  +GC2_CLUS1 = GC2_CLUS1+0.15685437204876 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
22525  +GC2_CLUS1 = GC2_CLUS1+-0.16009256423817 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
22526  +GC2_CLUS1 = GC2_CLUS1+0.16009256423817 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
22527  +GC2_CLUS1 = GC2_CLUS1+-0.16009256423817 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
22528  +GC2_CLUS1 = GC2_CLUS1+0.00350199136868 * (TOTORDQ013 - 0.00077555452148)/0.02783841012245;
22529  +GC2_CLUS1 = GC2_CLUS1+0.00592651935749 * (TOTORDQ014 - 0.00024817744687)/0.01575193804466;
22530  +GC2_CLUS1 = GC2_CLUS1+0.00278444896392 * (TOTORDQ015 - 0.00009306654257)/0.009646800928;
22531  +GC2_CLUS1 = GC2_CLUS1+0.00639795992533 * (TOTORDQ023 - 0.00120986505351)/0.03476260589299;
22532  +GC2_CLUS1 = GC2_CLUS1+0.00221667449818 * (TOTORDQ024 - 0.00018613308515)/0.01364200179552;
22533  +GC2_CLUS1 = GC2_CLUS1+0.00277055025015 * (TOTORDQ025 - 0.00003102218085)/0.00556975590661;
22534  +GC2_CLUS1 = GC2_CLUS1+0.00353933656089 * (TOTORDQ032 - 0.00384675042655)/0.06190373023441;
22535  +GC2_CLUS1 = GC2_CLUS1+0.00097999358008 * (TOTORDQ033 - 0.00046533271288)/0.02156688683426;
22536  +GC2_CLUS1 = GC2_CLUS1+0.00618615706231 * (TOTORDQ034 - 0.00003102218085)/0.00556975590661;
22537  +GC2_CLUS1 = GC2_CLUS1+0.00699718217847 * (TOTORDQ042 - 0.00604932526756)/0.07754300397319;
22538  +GC2_CLUS1 = GC2_CLUS1+0.00025599635234 * (TOTORDQ044 - 0.00021715526601)/0.01473481743971;
22539  +GC2_CLUS1 = GC2_CLUS1+0.00342310954944 * (TOTORDQ045 - 0.00006204436171)/0.00787670215937;
22540  +GC2_CLUS1 = GC2_CLUS1+0.02038115449199 * (TOTORDQ046 - 0.00003102218085)/0.00556975590661;
22541  +GC2_CLUS1 = GC2_CLUS1+0.00785920803031 * (TOTORDQ052 - 0.00772452303396)/0.08755051436602;
22542  +GC2_CLUS1 = GC2_CLUS1+0.00526394666724 * (TOTORDQ053 - 0.00133395377695)/0.03649952975734;
22543  +GC2_CLUS1 = GC2_CLUS1+0.00218688719646 * (TOTORDQ054 - 0.00006204436171)/0.00787670215937;
22544  +GC2_CLUS1 = GC2_CLUS1+0.00260822717595 * (TOTORDQ055 - 0.00003102218085)/0.00556975590661;
22545  +GC2_CLUS1 = GC2_CLUS1+0.00501934215439 * (TOTORDQ062 - 0.00626648053358)/0.07891390842548;
22546  +GC2_CLUS1 = GC2_CLUS1+0.00546898161479 * (TOTORDQ063 - 0.00086862106406)/0.02946003200026;
22547  +GC2_CLUS1 = GC2_CLUS1+0.00212121242674 * (TOTORDQ064 - 0.00012408872343)/0.01113899342716;
22548  +GC2_CLUS1 = GC2_CLUS1+0.00755893422733 * (TOTORDQ065 - 0.00006204436171)/0.00787670215937;
22549  +GC2_CLUS1 = GC2_CLUS1+0.00457979757585 * (TOTORDQ073 - 0.0008375988832)/0.02892962624192;
22550  +GC2_CLUS1 = GC2_CLUS1+0.00185113408182 * (TOTORDQ074 - 0.00012408872343)/0.01113899342716;
22551  +GC2_CLUS1 = GC2_CLUS1+0.00533455082006 * (TOTORDQ075 - 0.00006204436171)/0.00787670215937;
22552  +GC2_CLUS1 = GC2_CLUS1+0.00916366163803 * (TOTORDQ082 - 0.01002016441755)/0.09959954048469;
22553  +GC2_CLUS1 = GC2_CLUS1+0.00483145354829 * (TOTORDQ083 - 0.00117884287265)/0.03431457023532;
22554  +GC2_CLUS1 = GC2_CLUS1+0.0043040241581 * (TOTORDQ084 - 0.00043431053203)/0.02083591548788;
22555  +GC2_CLUS1 = GC2_CLUS1+0.00447541638614 * (TOTORDQ085 - 0.00009306654257)/0.009646800928;
22556  +GC2_CLUS1 = GC2_CLUS1+0.00120246024662 * (TOTORDQ086 - 0.00003102218085)/0.00556975590661;
22557  +GC2_CLUS1 = GC2_CLUS1+0.00717421389554 * (TOTORDQ092 - 0.00732123468279)/0.08525174291693;
22558  +GC2_CLUS1 = GC2_CLUS1+0.0069134229465 * (TOTORDQ093 - 0.00102373196835)/0.03197992601749;
22559  +GC2_CLUS1 = GC2_CLUS1+0.00390251753786 * (TOTORDQ094 - 0.00015511090429)/0.01245358005496;
22560  +GC2_CLUS1 = GC2_CLUS1+0.00077681981252 * (TOTORDQ095 - 0.00006204436171)/0.00787670215937;
22561  +GC2_CLUS1 = GC2_CLUS1+0.00916591621323 * (TOTORDQ103 - 0.00089964324492)/0.02998102352496;
22562  +GC2_CLUS1 = GC2_CLUS1+0.00851430073309 * (TOTORDQ113 - 0.00055839925546)/0.02362424092676;
22563  +GC2_CLUS1 = GC2_CLUS1+0.00555930937507 * (TOTORDQ114 - 0.00015511090429)/0.01245358005496;
22564  +GC2_CLUS1 = GC2_CLUS1+0.0016793638473 * (TOTORDQ117 - 0.00003102218085)/0.00556975590661;
22565  +GC2_CLUS1 = GC2_CLUS1+0.00741314921633 * (TOTORDQ123 - 0.00164417558554)/0.04051571541781;
22566  +GC2_CLUS1 = GC2_CLUS1+0.00486306318056 * (TOTORDQ124 - 0.00021715526601)/0.01473481743971;
22567  +GC2_CLUS1 = GC2_CLUS1+0.00568108809342 * (TOTORDQ125 - 0.00012408872343)/0.01113899342716;
22568  +GC2_CLUS1 = GC2_CLUS1+0.00092353446856 * (TOTORDQ126 - 0.00003102218085)/0.00556975590661;
22569  +GC2_CLUS1 = GC2_CLUS1+0.00062183337194 * (TOTORDQ127 - 0.00006204436171)/0.00787670215937;
22570  +GC2_CLUS1 = GC2_CLUS1+0.007765789284 * (TOTORDQ133 - 0.00120986505351)/0.03476260589299;
22571  +GC2_CLUS1 = GC2_CLUS1+0.00545477868438 * (TOTORDQ134 - 0.00012408872343)/0.01113899342716;
22572  +GC2_CLUS1 = GC2_CLUS1+0.00277999607031 * (TOTORDQ135 - 0.00006204436171)/0.00787670215937;
22573  +GC2_CLUS1 = GC2_CLUS1+0.00931351922093 * (TOTORDQ142 - 0.00710407941678)/0.08398708411191;
22574  +GC2_CLUS1 = GC2_CLUS1+0.01019356096245 * (TOTORDQ143 - 0.0006824879789)/0.02611595963267;
22575  +GC2_CLUS1 = GC2_CLUS1+0.00188900471522 * (TOTORDQ144 - 0.00009306654257)/0.009646800928;
22576  +GC2_CLUS1 = GC2_CLUS1+0.00491889202435 * (TOTORDQ145 - 0.00003102218085)/0.00556975590661;
22577  +GC2_CLUS1 = GC2_CLUS1+0.00417669885104 * (TOTORDQ146 - 0.00003102218085)/0.00556975590661;
22578  +GC2_CLUS1 = GC2_CLUS1+0.01238637867356 * (TOTORDQ153 - 0.00111679851093)/0.03340038742182;
22579  +GC2_CLUS1 = GC2_CLUS1+0.00125278643995 * (TOTORDQ154 - 0.00012408872343)/0.01113899342716;
22580  +GC2_CLUS1 = GC2_CLUS1+-0.00019864573531 * (TOTORDQ155 - 0.00003102218085)/0.00556975590661;
22581  +GC2_CLUS1 = GC2_CLUS1+0.00475822922128 * (TOTORDQ158 - 0.00003102218085)/0.00556975590661;
22582  +GC2_CLUS1 = GC2_CLUS1+0.02584320410617 * (TOTORDQ161 - 0.10696447960291)/0.30907287673359;
22583  +GC2_CLUS1 = GC2_CLUS1+0.02208850301731 * (TOTORDQ162 - 0.01495269117418)/0.12136541988586;
22584  +GC2_CLUS1 = GC2_CLUS1+0.01654287983888 * (TOTORDQ163 - 0.00198541957499)/0.04451448253965;
22585  +GC2_CLUS1 = GC2_CLUS1+0.00824876639622 * (TOTORDQ164 - 0.00046533271288)/0.02156688683426;
22586  +GC2_CLUS1 = GC2_CLUS1+0.00731810585105 * (TOTORDQ165 - 0.00012408872343)/0.01113899342716;
22587  +GC2_CLUS1 = GC2_CLUS1+0.00152084765988 * (TOTORDQ166 - 0.00006204436171)/0.00787670215937;
22588  +GC2_CLUS1 = GC2_CLUS1+0.00115429183613 * (TOTORDQ167 - 0.00003102218085)/0.00556975590661;
22589  +GC2_CLUS1 = GC2_CLUS1+0.00575023759249 * (TOTORDQ173 - 0.0013649759578)/0.03692093019532;
22590  +GC2_CLUS1 = GC2_CLUS1+0.00594801186745 * (TOTORDQ174 - 0.00037226617031)/0.01929090803403;
22591  +GC2_CLUS1 = GC2_CLUS1+0.00655293416952 * (TOTORDQ175 - 0.00003102218085)/0.00556975590661;
22592  +GC2_CLUS1 = GC2_CLUS1+0.01139501728445 * (TOTORDQ183 - 0.00096168760663)/0.03099665416568;
22593  +GC2_CLUS1 = GC2_CLUS1+0.0073531437731 * (TOTORDQ184 - 0.00012408872343)/0.01113899342716;
22594  +GC2_CLUS1 = GC2_CLUS1+0.00655293416952 * (TOTORDQ185 - 0.00003102218085)/0.00556975590661;
22595  +GC2_CLUS1 = GC2_CLUS1+0.01079681600191 * (TOTORDQ192 - 0.00573910345897)/0.07554034136585;
22596  +GC2_CLUS1 = GC2_CLUS1+0.00899100139606 * (TOTORDQ193 - 0.00071351015976)/0.02670249393877;
22597  +GC2_CLUS1 = GC2_CLUS1+0.00216625978299 * (TOTORDQ195 - 0.00006204436171)/0.00787670215937;
22598  +GC2_CLUS1 = GC2_CLUS1+0.0354268171777 * (TOTORDQ201 - 0.12349930200093)/0.32901456286213;
22599  +GC2_CLUS1 = GC2_CLUS1+0.0003166719459 * (TOTORDQ2010 - 0.00003102218085)/0.00556975590661;
22600  +GC2_CLUS1 = GC2_CLUS1+0.02228950722723 * (TOTORDQ202 - 0.01247091670544)/0.11097646148697;
22601  +GC2_CLUS1 = GC2_CLUS1+0.00889633557409 * (TOTORDQ2027 - 0.00003102218085)/0.00556975590661;
22602  +GC2_CLUS1 = GC2_CLUS1+0.01509465840062 * (TOTORDQ203 - 0.00189235303241)/0.04346067910265;
22603  +GC2_CLUS1 = GC2_CLUS1+0.01309808890178 * (TOTORDQ204 - 0.0006824879789)/0.02611595963267;
22604  +GC2_CLUS1 = GC2_CLUS1+0.00209002169002 * (TOTORDQ205 - 0.00018613308515)/0.01364200179552;
22605  +GC2_CLUS1 = GC2_CLUS1+0.01859872106889 * (TOTORDQ207 - 0.00006204436171)/0.00787670215937;
22606  +GC2_CLUS1 = GC2_CLUS1+0.01599218171462 * (TOTORDQ211 - 0.07280905847681)/0.25982685347701;
22607  +GC2_CLUS1 = GC2_CLUS1+0.0187824955713 * (TOTORDQ212 - 0.00763145649139)/0.08702558421647;
22608  +GC2_CLUS1 = GC2_CLUS1+0.01225411488259 * (TOTORDQ213 - 0.00089964324492)/0.02998102352496;
22609  +GC2_CLUS1 = GC2_CLUS1+0.00258325253909 * (TOTORDQ214 - 0.00015511090429)/0.01245358005496;
22610  +GC2_CLUS1 = GC2_CLUS1+0.00509798126134 * (TOTORDQ215 - 0.00003102218085)/0.00556975590661;
22611  +GC2_CLUS1 = GC2_CLUS1+0.02038115449199 * (TOTORDQ219 - 0.00003102218085)/0.00556975590661;
22612  +GC2_CLUS1 = GC2_CLUS1+0.02041772275253 * (TOTORDQ221 - 0.07097874980611)/0.25679332657203;
22613  +GC2_CLUS1 = GC2_CLUS1+0.01572887274461 * (TOTORDQ222 - 0.00586319218241)/0.0763478617121;
22614  +GC2_CLUS1 = GC2_CLUS1+0.01235901383816 * (TOTORDQ223 - 0.00077555452148)/0.02783841012245;
22615  +GC2_CLUS1 = GC2_CLUS1+0.00538289340385 * (TOTORDQ224 - 0.00018613308515)/0.01364200179552;
22616  +GC2_CLUS1 = GC2_CLUS1+0.02038115449199 * (TOTORDQ225 - 0.00003102218085)/0.00556975590661;
22617  +GC2_CLUS1 = GC2_CLUS1+0.00268073023232 * (TOTORDQ226 - 0.00003102218085)/0.00556975590661;
22618  +GC2_CLUS1 = GC2_CLUS1+0.05962398181007 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
22619  +
22620  +/*-------------------------------------------------*/
22621  +/* Varclus Score Code Begins: GCLUSTER 3*/
22622  +/*-------------------------------------------------*/
22623  +
22624  +GC3_CLUS1 = 0 ; /*---Global Cluster 3 : Cluster Component 1------ */
22625  +GC3_CLUS1 = GC3_CLUS1+0.07347212969273 * (DEPT0711 - 0.00006204436171)/0.00787670215937;
22626  +GC3_CLUS1 = GC3_CLUS1+0.04796917964258 * (DEPT199 - 0.00015511090429)/0.01245358005496;
22627  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (DEPT2622 - 0.00003102218085)/0.00556975590661;
22628  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ016 - 0.00003102218085)/0.00556975590661;
22629  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ028 - 0.00003102218085)/0.00556975590661;
22630  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ049 - 0.00003102218085)/0.00556975590661;
22631  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ069 - 0.00003102218085)/0.00556975590661;
22632  +GC3_CLUS1 = GC3_CLUS1+0.07347212969273 * (TOTORDQ078 - 0.00006204436171)/0.00787670215937;
22633  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ0810 - 0.00003102218085)/0.00556975590661;
22634  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ106 - 0.00003102218085)/0.00556975590661;
22635  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ129 - 0.00003102218085)/0.00556975590661;
22636  +GC3_CLUS1 = GC3_CLUS1+0.05334450065098 * (TOTORDQ194 - 0.00012408872343)/0.01113899342716;
22637  +GC3_CLUS1 = GC3_CLUS1+0.07347212969273 * (TOTORDQ208 - 0.00006204436171)/0.00787670215937;
22638  +
22639  +/*-------------------------------------------------*/
22640  +/* Varclus Score Code Begins: GCLUSTER 4*/
22641  +/*-------------------------------------------------*/
22642  +
22643  +GC4_CLUS1 = 0 ; /*---Global Cluster 4 : Cluster Component 1------ */
22644  +GC4_CLUS1 = GC4_CLUS1+0.25 * (TOTORDQ0416 - 0.00003102218085)/0.00556975590661;
22645  +GC4_CLUS1 = GC4_CLUS1+0.25 * (TOTORDQ0823 - 0.00003102218085)/0.00556975590661;
22646  +GC4_CLUS1 = GC4_CLUS1+0.24999999999999 * (TOTORDQ1221 - 0.00003102218085)/0.00556975590661;
22647  +GC4_CLUS1 = GC4_CLUS1+0.25 * (TOTORDQ1610 - 0.00003102218085)/0.00556975590661;
22648  +
22649  +/*-------------------------------------------------*/
22650  +/* Varclus Score Code Begins: GCLUSTER 5*/
22651  +/*-------------------------------------------------*/
22652  +
22653  +GC5_CLUS1 = 0 ; /*---Global Cluster 5 : Cluster Component 1------ */
22654  +GC5_CLUS1 = GC5_CLUS1+0.0697543435676 * (ACTBUY0 - 0.39695982627578)/0.48927512608284;
22655  +GC5_CLUS1 = GC5_CLUS1+0.09750350598641 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
22656  +GC5_CLUS1 = GC5_CLUS1+0.20793837134815 * (DAYLAST - 1182.17608189855)/1226.0780195912;
22657  +GC5_CLUS1 = GC5_CLUS1+0.02326303571361 * (DEPT070 - 0.99270978749806)/0.08507226234284;
22658  +GC5_CLUS1 = GC5_CLUS1+0.04850256861665 * (DEPT110 - 0.95607259190321)/0.20493680444998;
22659  +GC5_CLUS1 = GC5_CLUS1+0.05979321930493 * (DEPT120 - 0.93829688227082)/0.24061928248315;
22660  +GC5_CLUS1 = GC5_CLUS1+0.04705303566689 * (DEPT170 - 0.94986815573134)/0.21822034675722;
22661  +GC5_CLUS1 = GC5_CLUS1+0.04461612672791 * (DEPT180 - 0.96209089498991)/0.1909794131409;
22662  +GC5_CLUS1 = GC5_CLUS1+0.03276641279447 * (DEPT190 - 0.98160384675042)/0.13438115568369;
22663  +GC5_CLUS1 = GC5_CLUS1+0.02462574733152 * (DEPT200 - 0.99066232356134)/0.09618092958834;
22664  +GC5_CLUS1 = GC5_CLUS1+0.01722455343947 * (DEPT210 - 0.99426089654102)/0.07554034136585;
22665  +GC5_CLUS1 = GC5_CLUS1+0.046474417213 * (DEPT260 - 0.94732433690088)/0.22338864272858;
22666  +GC5_CLUS1 = GC5_CLUS1+0.16501064384473 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
22667  +GC5_CLUS1 = GC5_CLUS1+0.20793725844011 * (MONLAST - 38.7579959671164)/40.2783526824403;
22668  +GC5_CLUS1 = GC5_CLUS1+0.05199733852573 * (TENURE - 83.4682798200713)/60.0499642836247;
22669  +GC5_CLUS1 = GC5_CLUS1+0.05789519611996 * (TOTORDQ010 - 0.93240266790755)/0.25105753944269;
22670  +GC5_CLUS1 = GC5_CLUS1+0.05578697639662 * (TOTORDQ020 - 0.93587715216379)/0.24497544765707;
22671  +GC5_CLUS1 = GC5_CLUS1+0.03656048625851 * (TOTORDQ030 - 0.94645571583682)/0.22511967032131;
22672  +GC5_CLUS1 = GC5_CLUS1+0.03766955298958 * (TOTORDQ040 - 0.91928028540406)/0.27240841454353;
22673  +GC5_CLUS1 = GC5_CLUS1+0.05889095347788 * (TOTORDQ050 - 0.92303396928804)/0.26654167550805;
22674  +GC5_CLUS1 = GC5_CLUS1+0.05775072328062 * (TOTORDQ060 - 0.92818365131068)/0.25818758435395;
22675  +GC5_CLUS1 = GC5_CLUS1+0.05440901535255 * (TOTORDQ070 - 0.92405770125639)/0.26490987723425;
22676  +GC5_CLUS1 = GC5_CLUS1+0.06480273075055 * (TOTORDQ080 - 0.89734760353652)/0.30350904378116;
22677  +GC5_CLUS1 = GC5_CLUS1+0.06164790474445 * (TOTORDQ090 - 0.91887699705289)/0.2730281558173;
22678  +GC5_CLUS1 = GC5_CLUS1+0.06116343917301 * (TOTORDQ100 - 0.93345742205677)/0.24923200086665;
22679  +GC5_CLUS1 = GC5_CLUS1+0.06124517483298 * (TOTORDQ110 - 0.92294090274546)/0.26668933083571;
22680  +GC5_CLUS1 = GC5_CLUS1+0.0723028890182 * (TOTORDQ120 - 0.89061579029005)/0.31212549820402;
22681  +GC5_CLUS1 = GC5_CLUS1+0.06585716786276 * (TOTORDQ130 - 0.90355203970839)/0.2952091712368;
22682  +GC5_CLUS1 = GC5_CLUS1+0.06225722368083 * (TOTORDQ140 - 0.9200868621064)/0.271162883384;
22683  +GC5_CLUS1 = GC5_CLUS1+0.06725036176448 * (TOTORDQ150 - 0.91378935939196)/0.2806791941105;
22684  +GC5_CLUS1 = GC5_CLUS1+0.07963966632779 * (TOTORDQ160 - 0.87538389948813)/0.33028822598524;
22685  +GC5_CLUS1 = GC5_CLUS1+0.07032583668734 * (TOTORDQ170 - 0.90532030401737)/0.29277655355917;
22686  +GC5_CLUS1 = GC5_CLUS1+0.07147030958113 * (TOTORDQ180 - 0.91667442221188)/0.27637799387312;
22687  +GC5_CLUS1 = GC5_CLUS1+0.06159374944925 * (TOTORDQ190 - 0.92560881029936)/0.26241051190929;
22688  +GC5_CLUS1 = GC5_CLUS1+0.07968796721355 * (TOTORDQ200 - 0.86108267411199)/0.34586560023062;
22689  +GC5_CLUS1 = GC5_CLUS1+0.0657536344856 * (TOTORDQ210 - 0.91844268652086)/0.27369333551993;
22690  +GC5_CLUS1 = GC5_CLUS1+0.06516478568558 * (TOTORDQ220 - 0.92213432604312)/0.26796424821009;
22691  +GC5_CLUS1 = GC5_CLUS1+0.08853411162087 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
NOTE: %INCLUDE (level 1) ending.
22692   run;

NOTE: DATA STEP view saved on file EMWS3.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           13.78 seconds
      cpu time            0.10 seconds
      

22693   quit;
22694   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.

22695   filename emflow "\\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
22696   *------------------------------------------------------------*;
22697   * VarClus: Scoring VALIDATE data;
22698   *------------------------------------------------------------*;
22699   data EMWS3.VarClus_VALIDATE
22700   / view=EMWS3.VarClus_VALIDATE
22701   ;
22702   set EMWS3.Part_VALIDATE
22703   ;
22704   %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\Client\C$\Users\sonik\Documents\6201 - MBAD - Monica\Project\Predictive Analytics1\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas.
22705  +*** Begin Class Look-up, Standardization, Replacement ;
22706  +
22707  +*** Generate dummy variables for BOTHPAYM ;
22708  +label BOTHPAYM0 = 'BOTHPAYM=0' ;
22709  +label BOTHPAYM1 = 'BOTHPAYM=1' ;
22710  +if missing( BOTHPAYM ) then do;
22711  +   BOTHPAYM0 = .;
22712  +   BOTHPAYM1 = .;
22713  +end;
22714  +else do;
22715  +   length _dm4 $ 4; drop _dm4 ;
22716  +   _dm4 = put( BOTHPAYM , $4. );
22717  +   %DMNORMIP( _dm4 )
22718  +   if _dm4 = '0'  then do;
22719  +      BOTHPAYM0 = 1;
22720  +      BOTHPAYM1 = 0;
22721  +   end;
22722  +   else if _dm4 = '1'  then do;
22723  +      BOTHPAYM0 = 0;
22724  +      BOTHPAYM1 = 1;
22725  +   end;
22726  +   else do;
22727  +      delete;
22728  +   end;
22729  +end;
22730  +
22731  +*** Generate dummy variables for CCPAYM ;
22732  +label CCPAYM0 = 'CCPAYM=0' ;
22733  +label CCPAYM1 = 'CCPAYM=1' ;
22734  +if missing( CCPAYM ) then do;
22735  +   CCPAYM0 = .;
22736  +   CCPAYM1 = .;
22737  +end;
22738  +else do;
22739  +   length _dm4 $ 4; drop _dm4 ;
22740  +   _dm4 = put( CCPAYM , $4. );
22741  +   %DMNORMIP( _dm4 )
22742  +   if _dm4 = '0'  then do;
22743  +      CCPAYM0 = 1;
22744  +      CCPAYM1 = 0;
22745  +   end;
22746  +   else if _dm4 = '1'  then do;
22747  +      CCPAYM0 = 0;
22748  +      CCPAYM1 = 1;
22749  +   end;
22750  +   else do;
22751  +      delete;
22752  +   end;
22753  +end;
22754  +
22755  +*** Generate dummy variables for PCPAYM ;
22756  +label PCPAYM0 = 'PCPAYM=0' ;
22757  +label PCPAYM1 = 'PCPAYM=1' ;
22758  +if missing( PCPAYM ) then do;
22759  +   PCPAYM0 = .;
22760  +   PCPAYM1 = .;
22761  +end;
22762  +else do;
22763  +   length _dm4 $ 4; drop _dm4 ;
22764  +   _dm4 = put( PCPAYM , $4. );
22765  +   %DMNORMIP( _dm4 )
22766  +   if _dm4 = '0'  then do;
22767  +      PCPAYM0 = 1;
22768  +      PCPAYM1 = 0;
22769  +   end;
22770  +   else if _dm4 = '1'  then do;
22771  +      PCPAYM0 = 0;
22772  +      PCPAYM1 = 1;
22773  +   end;
22774  +   else do;
22775  +      delete;
22776  +   end;
22777  +end;
22778  +
22779  +*** Generate dummy variables for ACTBUY ;
22780  +label ACTBUY0 = 'ACTBUY=0' ;
22781  +label ACTBUY1 = 'ACTBUY=1' ;
22782  +label ACTBUY2 = 'ACTBUY=2' ;
22783  +label ACTBUY3 = 'ACTBUY=3' ;
22784  +label ACTBUY4 = 'ACTBUY=4' ;
22785  +label ACTBUY5 = 'ACTBUY=5' ;
22786  +label ACTBUY6 = 'ACTBUY=6' ;
22787  +label ACTBUY7 = 'ACTBUY=7' ;
22788  +label ACTBUY8 = 'ACTBUY=8' ;
22789  +label ACTBUY9 = 'ACTBUY=9' ;
22790  +label ACTBUY10 = 'ACTBUY=10' ;
22791  +*** encoding is sparse, initialize to zero;
22792  +ACTBUY0 = 0;
22793  +ACTBUY1 = 0;
22794  +ACTBUY2 = 0;
22795  +ACTBUY3 = 0;
22796  +ACTBUY4 = 0;
22797  +ACTBUY5 = 0;
22798  +ACTBUY6 = 0;
22799  +ACTBUY7 = 0;
22800  +ACTBUY8 = 0;
22801  +ACTBUY9 = 0;
22802  +ACTBUY10 = 0;
22803  +if missing( ACTBUY ) then do;
22804  +   ACTBUY0 = .;
22805  +   ACTBUY1 = .;
22806  +   ACTBUY2 = .;
22807  +   ACTBUY3 = .;
22808  +   ACTBUY4 = .;
22809  +   ACTBUY5 = .;
22810  +   ACTBUY6 = .;
22811  +   ACTBUY7 = .;
22812  +   ACTBUY8 = .;
22813  +   ACTBUY9 = .;
22814  +   ACTBUY10 = .;
22815  +end;
22816  +else do;
22817  +   length _dm12 $ 12; drop _dm12 ;
22818  +   _dm12 = put( ACTBUY , BEST12. );
22819  +   %DMNORMIP( _dm12 )
22820  +   _dm_find = 0; drop _dm_find;
22821  +   if _dm12 <= '4'  then do;
22822  +      if _dm12 <= '10'  then do;
22823  +         if _dm12 <= '1'  then do;
22824  +            if _dm12 = '0'  then do;
22825  +               ACTBUY0 = 1;
22826  +               _dm_find = 1;
22827  +            end;
22828  +            else do;
22829  +               if _dm12 = '1'  then do;
22830  +                  ACTBUY1 = 1;
22831  +                  _dm_find = 1;
22832  +               end;
22833  +            end;
22834  +         end;
22835  +         else do;
22836  +            if _dm12 = '10'  then do;
22837  +               ACTBUY10 = 1;
22838  +               _dm_find = 1;
22839  +            end;
22840  +         end;
22841  +      end;
22842  +      else do;
22843  +         if _dm12 <= '3'  then do;
22844  +            if _dm12 = '2'  then do;
22845  +               ACTBUY2 = 1;
22846  +               _dm_find = 1;
22847  +            end;
22848  +            else do;
22849  +               if _dm12 = '3'  then do;
22850  +                  ACTBUY3 = 1;
22851  +                  _dm_find = 1;
22852  +               end;
22853  +            end;
22854  +         end;
22855  +         else do;
22856  +            if _dm12 = '4'  then do;
22857  +               ACTBUY4 = 1;
22858  +               _dm_find = 1;
22859  +            end;
22860  +         end;
22861  +      end;
22862  +   end;
22863  +   else do;
22864  +      if _dm12 <= '7'  then do;
22865  +         if _dm12 <= '6'  then do;
22866  +            if _dm12 = '5'  then do;
22867  +               ACTBUY5 = 1;
22868  +               _dm_find = 1;
22869  +            end;
22870  +            else do;
22871  +               if _dm12 = '6'  then do;
22872  +                  ACTBUY6 = 1;
22873  +                  _dm_find = 1;
22874  +               end;
22875  +            end;
22876  +         end;
22877  +         else do;
22878  +            if _dm12 = '7'  then do;
22879  +               ACTBUY7 = 1;
22880  +               _dm_find = 1;
22881  +            end;
22882  +         end;
22883  +      end;
22884  +      else do;
22885  +         if _dm12 = '8'  then do;
22886  +            ACTBUY8 = 1;
22887  +            _dm_find = 1;
22888  +         end;
22889  +         else do;
22890  +            if _dm12 = '9'  then do;
22891  +               ACTBUY9 = 1;
22892  +               _dm_find = 1;
22893  +            end;
22894  +         end;
22895  +      end;
22896  +   end;
22897  +   if not _dm_find then do;
22898  +      delete;
22899  +   end;
22900  +end;
22901  +
22902  +*** Generate dummy variables for DEPT07 ;
22903  +label DEPT070 = 'DEPT07=0' ;
22904  +label DEPT073 = 'DEPT07=3' ;
22905  +label DEPT074 = 'DEPT07=4' ;
22906  +label DEPT075 = 'DEPT07=5' ;
22907  +label DEPT076 = 'DEPT07=6' ;
22908  +label DEPT077 = 'DEPT07=7' ;
22909  +label DEPT078 = 'DEPT07=8' ;
22910  +label DEPT079 = 'DEPT07=9' ;
22911  +label DEPT0711 = 'DEPT07=11' ;
22912  +*** encoding is sparse, initialize to zero;
22913  +DEPT070 = 0;
22914  +DEPT073 = 0;
22915  +DEPT074 = 0;
22916  +DEPT075 = 0;
22917  +DEPT076 = 0;
22918  +DEPT077 = 0;
22919  +DEPT078 = 0;
22920  +DEPT079 = 0;
22921  +DEPT0711 = 0;
22922  +if missing( DEPT07 ) then do;
22923  +   DEPT070 = .;
22924  +   DEPT073 = .;
22925  +   DEPT074 = .;
22926  +   DEPT075 = .;
22927  +   DEPT076 = .;
22928  +   DEPT077 = .;
22929  +   DEPT078 = .;
22930  +   DEPT079 = .;
22931  +   DEPT0711 = .;
22932  +end;
22933  +else do;
22934  +   length _dm12 $ 12; drop _dm12 ;
22935  +   _dm12 = put( DEPT07 , BEST12. );
22936  +   %DMNORMIP( _dm12 )
22937  +   if _dm12 = '0'  then do;
22938  +      DEPT070 = 1;
22939  +   end;
22940  +   else if _dm12 = '3'  then do;
22941  +      DEPT073 = 1;
22942  +   end;
22943  +   else if _dm12 = '5'  then do;
22944  +      DEPT075 = 1;
22945  +   end;
22946  +   else if _dm12 = '4'  then do;
22947  +      DEPT074 = 1;
22948  +   end;
22949  +   else if _dm12 = '7'  then do;
22950  +      DEPT077 = 1;
22951  +   end;
22952  +   else if _dm12 = '6'  then do;
22953  +      DEPT076 = 1;
22954  +   end;
22955  +   else if _dm12 = '11'  then do;
22956  +      DEPT0711 = 1;
22957  +   end;
22958  +   else if _dm12 = '8'  then do;
22959  +      DEPT078 = 1;
22960  +   end;
22961  +   else if _dm12 = '9'  then do;
22962  +      DEPT079 = 1;
22963  +   end;
22964  +   else do;
22965  +      delete;
22966  +   end;
22967  +end;
22968  +
22969  +*** Generate dummy variables for DEPT11 ;
22970  +label DEPT110 = 'DEPT11=0' ;
22971  +label DEPT113 = 'DEPT11=3' ;
22972  +label DEPT114 = 'DEPT11=4' ;
22973  +label DEPT115 = 'DEPT11=5' ;
22974  +label DEPT116 = 'DEPT11=6' ;
22975  +label DEPT117 = 'DEPT11=7' ;
22976  +label DEPT118 = 'DEPT11=8' ;
22977  +label DEPT119 = 'DEPT11=9' ;
22978  +label DEPT1110 = 'DEPT11=10' ;
22979  +label DEPT1111 = 'DEPT11=11' ;
22980  +label DEPT1113 = 'DEPT11=13' ;
22981  +label DEPT1116 = 'DEPT11=16' ;
22982  +label DEPT1118 = 'DEPT11=18' ;
22983  +label DEPT1129 = 'DEPT11=29' ;
22984  +*** encoding is sparse, initialize to zero;
22985  +DEPT110 = 0;
22986  +DEPT113 = 0;
22987  +DEPT114 = 0;
22988  +DEPT115 = 0;
22989  +DEPT116 = 0;
22990  +DEPT117 = 0;
22991  +DEPT118 = 0;
22992  +DEPT119 = 0;
22993  +DEPT1110 = 0;
22994  +DEPT1111 = 0;
22995  +DEPT1113 = 0;
22996  +DEPT1116 = 0;
22997  +DEPT1118 = 0;
22998  +DEPT1129 = 0;
22999  +if missing( DEPT11 ) then do;
23000  +   DEPT110 = .;
23001  +   DEPT113 = .;
23002  +   DEPT114 = .;
23003  +   DEPT115 = .;
23004  +   DEPT116 = .;
23005  +   DEPT117 = .;
23006  +   DEPT118 = .;
23007  +   DEPT119 = .;
23008  +   DEPT1110 = .;
23009  +   DEPT1111 = .;
23010  +   DEPT1113 = .;
23011  +   DEPT1116 = .;
23012  +   DEPT1118 = .;
23013  +   DEPT1129 = .;
23014  +end;
23015  +else do;
23016  +   length _dm12 $ 12; drop _dm12 ;
23017  +   _dm12 = put( DEPT11 , BEST12. );
23018  +   %DMNORMIP( _dm12 )
23019  +   if _dm12 = '0'  then do;
23020  +      DEPT110 = 1;
23021  +   end;
23022  +   else if _dm12 = '3'  then do;
23023  +      DEPT113 = 1;
23024  +   end;
23025  +   else if _dm12 = '5'  then do;
23026  +      DEPT115 = 1;
23027  +   end;
23028  +   else if _dm12 = '4'  then do;
23029  +      DEPT114 = 1;
23030  +   end;
23031  +   else if _dm12 = '7'  then do;
23032  +      DEPT117 = 1;
23033  +   end;
23034  +   else if _dm12 = '6'  then do;
23035  +      DEPT116 = 1;
23036  +   end;
23037  +   else if _dm12 = '8'  then do;
23038  +      DEPT118 = 1;
23039  +   end;
23040  +   else if _dm12 = '9'  then do;
23041  +      DEPT119 = 1;
23042  +   end;
23043  +   else if _dm12 = '11'  then do;
23044  +      DEPT1111 = 1;
23045  +   end;
23046  +   else if _dm12 = '13'  then do;
23047  +      DEPT1113 = 1;
23048  +   end;
23049  +   else if _dm12 = '10'  then do;
23050  +      DEPT1110 = 1;
23051  +   end;
23052  +   else if _dm12 = '16'  then do;
23053  +      DEPT1116 = 1;
23054  +   end;
23055  +   else if _dm12 = '18'  then do;
23056  +      DEPT1118 = 1;
23057  +   end;
23058  +   else if _dm12 = '29'  then do;
23059  +      DEPT1129 = 1;
23060  +   end;
23061  +   else do;
23062  +      delete;
23063  +   end;
23064  +end;
23065  +
23066  +*** Generate dummy variables for DEPT12 ;
23067  +label DEPT120 = 'DEPT12=0' ;
23068  +label DEPT123 = 'DEPT12=3' ;
23069  +label DEPT124 = 'DEPT12=4' ;
23070  +label DEPT125 = 'DEPT12=5' ;
23071  +label DEPT126 = 'DEPT12=6' ;
23072  +label DEPT127 = 'DEPT12=7' ;
23073  +label DEPT128 = 'DEPT12=8' ;
23074  +label DEPT129 = 'DEPT12=9' ;
23075  +label DEPT1210 = 'DEPT12=10' ;
23076  +label DEPT1211 = 'DEPT12=11' ;
23077  +label DEPT1212 = 'DEPT12=12' ;
23078  +label DEPT1213 = 'DEPT12=13' ;
23079  +label DEPT1215 = 'DEPT12=15' ;
23080  +label DEPT1216 = 'DEPT12=16' ;
23081  +*** encoding is sparse, initialize to zero;
23082  +DEPT120 = 0;
23083  +DEPT123 = 0;
23084  +DEPT124 = 0;
23085  +DEPT125 = 0;
23086  +DEPT126 = 0;
23087  +DEPT127 = 0;
23088  +DEPT128 = 0;
23089  +DEPT129 = 0;
23090  +DEPT1210 = 0;
23091  +DEPT1211 = 0;
23092  +DEPT1212 = 0;
23093  +DEPT1213 = 0;
23094  +DEPT1215 = 0;
23095  +DEPT1216 = 0;
23096  +if missing( DEPT12 ) then do;
23097  +   DEPT120 = .;
23098  +   DEPT123 = .;
23099  +   DEPT124 = .;
23100  +   DEPT125 = .;
23101  +   DEPT126 = .;
23102  +   DEPT127 = .;
23103  +   DEPT128 = .;
23104  +   DEPT129 = .;
23105  +   DEPT1210 = .;
23106  +   DEPT1211 = .;
23107  +   DEPT1212 = .;
23108  +   DEPT1213 = .;
23109  +   DEPT1215 = .;
23110  +   DEPT1216 = .;
23111  +end;
23112  +else do;
23113  +   length _dm12 $ 12; drop _dm12 ;
23114  +   _dm12 = put( DEPT12 , BEST12. );
23115  +   %DMNORMIP( _dm12 )
23116  +   if _dm12 = '0'  then do;
23117  +      DEPT120 = 1;
23118  +   end;
23119  +   else if _dm12 = '3'  then do;
23120  +      DEPT123 = 1;
23121  +   end;
23122  +   else if _dm12 = '5'  then do;
23123  +      DEPT125 = 1;
23124  +   end;
23125  +   else if _dm12 = '4'  then do;
23126  +      DEPT124 = 1;
23127  +   end;
23128  +   else if _dm12 = '7'  then do;
23129  +      DEPT127 = 1;
23130  +   end;
23131  +   else if _dm12 = '6'  then do;
23132  +      DEPT126 = 1;
23133  +   end;
23134  +   else if _dm12 = '9'  then do;
23135  +      DEPT129 = 1;
23136  +   end;
23137  +   else if _dm12 = '8'  then do;
23138  +      DEPT128 = 1;
23139  +   end;
23140  +   else if _dm12 = '11'  then do;
23141  +      DEPT1211 = 1;
23142  +   end;
23143  +   else if _dm12 = '13'  then do;
23144  +      DEPT1213 = 1;
23145  +   end;
23146  +   else if _dm12 = '10'  then do;
23147  +      DEPT1210 = 1;
23148  +   end;
23149  +   else if _dm12 = '15'  then do;
23150  +      DEPT1215 = 1;
23151  +   end;
23152  +   else if _dm12 = '12'  then do;
23153  +      DEPT1212 = 1;
23154  +   end;
23155  +   else if _dm12 = '16'  then do;
23156  +      DEPT1216 = 1;
23157  +   end;
23158  +   else do;
23159  +      delete;
23160  +   end;
23161  +end;
23162  +
23163  +*** Generate dummy variables for DEPT17 ;
23164  +label DEPT170 = 'DEPT17=0' ;
23165  +label DEPT173 = 'DEPT17=3' ;
23166  +label DEPT174 = 'DEPT17=4' ;
23167  +label DEPT175 = 'DEPT17=5' ;
23168  +label DEPT176 = 'DEPT17=6' ;
23169  +label DEPT177 = 'DEPT17=7' ;
23170  +label DEPT178 = 'DEPT17=8' ;
23171  +label DEPT179 = 'DEPT17=9' ;
23172  +label DEPT1710 = 'DEPT17=10' ;
23173  +label DEPT1711 = 'DEPT17=11' ;
23174  +label DEPT1712 = 'DEPT17=12' ;
23175  +label DEPT1713 = 'DEPT17=13' ;
23176  +label DEPT1714 = 'DEPT17=14' ;
23177  +label DEPT1715 = 'DEPT17=15' ;
23178  +label DEPT1716 = 'DEPT17=16' ;
23179  +label DEPT1717 = 'DEPT17=17' ;
23180  +label DEPT1723 = 'DEPT17=23' ;
23181  +label DEPT1734 = 'DEPT17=34' ;
23182  +*** encoding is sparse, initialize to zero;
23183  +DEPT170 = 0;
23184  +DEPT173 = 0;
23185  +DEPT174 = 0;
23186  +DEPT175 = 0;
23187  +DEPT176 = 0;
23188  +DEPT177 = 0;
23189  +DEPT178 = 0;
23190  +DEPT179 = 0;
23191  +DEPT1710 = 0;
23192  +DEPT1711 = 0;
23193  +DEPT1712 = 0;
23194  +DEPT1713 = 0;
23195  +DEPT1714 = 0;
23196  +DEPT1715 = 0;
23197  +DEPT1716 = 0;
23198  +DEPT1717 = 0;
23199  +DEPT1723 = 0;
23200  +DEPT1734 = 0;
23201  +if missing( DEPT17 ) then do;
23202  +   DEPT170 = .;
23203  +   DEPT173 = .;
23204  +   DEPT174 = .;
23205  +   DEPT175 = .;
23206  +   DEPT176 = .;
23207  +   DEPT177 = .;
23208  +   DEPT178 = .;
23209  +   DEPT179 = .;
23210  +   DEPT1710 = .;
23211  +   DEPT1711 = .;
23212  +   DEPT1712 = .;
23213  +   DEPT1713 = .;
23214  +   DEPT1714 = .;
23215  +   DEPT1715 = .;
23216  +   DEPT1716 = .;
23217  +   DEPT1717 = .;
23218  +   DEPT1723 = .;
23219  +   DEPT1734 = .;
23220  +end;
23221  +else do;
23222  +   length _dm12 $ 12; drop _dm12 ;
23223  +   _dm12 = put( DEPT17 , BEST12. );
23224  +   %DMNORMIP( _dm12 )
23225  +   if _dm12 = '0'  then do;
23226  +      DEPT170 = 1;
23227  +   end;
23228  +   else if _dm12 = '3'  then do;
23229  +      DEPT173 = 1;
23230  +   end;
23231  +   else if _dm12 = '5'  then do;
23232  +      DEPT175 = 1;
23233  +   end;
23234  +   else if _dm12 = '4'  then do;
23235  +      DEPT174 = 1;
23236  +   end;
23237  +   else if _dm12 = '6'  then do;
23238  +      DEPT176 = 1;
23239  +   end;
23240  +   else if _dm12 = '7'  then do;
23241  +      DEPT177 = 1;
23242  +   end;
23243  +   else if _dm12 = '8'  then do;
23244  +      DEPT178 = 1;
23245  +   end;
23246  +   else if _dm12 = '9'  then do;
23247  +      DEPT179 = 1;
23248  +   end;
23249  +   else if _dm12 = '10'  then do;
23250  +      DEPT1710 = 1;
23251  +   end;
23252  +   else if _dm12 = '12'  then do;
23253  +      DEPT1712 = 1;
23254  +   end;
23255  +   else if _dm12 = '11'  then do;
23256  +      DEPT1711 = 1;
23257  +   end;
23258  +   else if _dm12 = '14'  then do;
23259  +      DEPT1714 = 1;
23260  +   end;
23261  +   else if _dm12 = '17'  then do;
23262  +      DEPT1717 = 1;
23263  +   end;
23264  +   else if _dm12 = '13'  then do;
23265  +      DEPT1713 = 1;
23266  +   end;
23267  +   else if _dm12 = '15'  then do;
23268  +      DEPT1715 = 1;
23269  +   end;
23270  +   else if _dm12 = '16'  then do;
23271  +      DEPT1716 = 1;
23272  +   end;
23273  +   else if _dm12 = '23'  then do;
23274  +      DEPT1723 = 1;
23275  +   end;
23276  +   else if _dm12 = '34'  then do;
23277  +      DEPT1734 = 1;
23278  +   end;
23279  +   else do;
23280  +      delete;
23281  +   end;
23282  +end;
23283  +
23284  +*** Generate dummy variables for DEPT18 ;
23285  +label DEPT180 = 'DEPT18=0' ;
23286  +label DEPT183 = 'DEPT18=3' ;
23287  +label DEPT184 = 'DEPT18=4' ;
23288  +label DEPT185 = 'DEPT18=5' ;
23289  +label DEPT186 = 'DEPT18=6' ;
23290  +label DEPT187 = 'DEPT18=7' ;
23291  +label DEPT188 = 'DEPT18=8' ;
23292  +label DEPT189 = 'DEPT18=9' ;
23293  +label DEPT1810 = 'DEPT18=10' ;
23294  +label DEPT1811 = 'DEPT18=11' ;
23295  +label DEPT1812 = 'DEPT18=12' ;
23296  +label DEPT1813 = 'DEPT18=13' ;
23297  +*** encoding is sparse, initialize to zero;
23298  +DEPT180 = 0;
23299  +DEPT183 = 0;
23300  +DEPT184 = 0;
23301  +DEPT185 = 0;
23302  +DEPT186 = 0;
23303  +DEPT187 = 0;
23304  +DEPT188 = 0;
23305  +DEPT189 = 0;
23306  +DEPT1810 = 0;
23307  +DEPT1811 = 0;
23308  +DEPT1812 = 0;
23309  +DEPT1813 = 0;
23310  +if missing( DEPT18 ) then do;
23311  +   DEPT180 = .;
23312  +   DEPT183 = .;
23313  +   DEPT184 = .;
23314  +   DEPT185 = .;
23315  +   DEPT186 = .;
23316  +   DEPT187 = .;
23317  +   DEPT188 = .;
23318  +   DEPT189 = .;
23319  +   DEPT1810 = .;
23320  +   DEPT1811 = .;
23321  +   DEPT1812 = .;
23322  +   DEPT1813 = .;
23323  +end;
23324  +else do;
23325  +   length _dm12 $ 12; drop _dm12 ;
23326  +   _dm12 = put( DEPT18 , BEST12. );
23327  +   %DMNORMIP( _dm12 )
23328  +   if _dm12 = '0'  then do;
23329  +      DEPT180 = 1;
23330  +   end;
23331  +   else if _dm12 = '3'  then do;
23332  +      DEPT183 = 1;
23333  +   end;
23334  +   else if _dm12 = '4'  then do;
23335  +      DEPT184 = 1;
23336  +   end;
23337  +   else if _dm12 = '5'  then do;
23338  +      DEPT185 = 1;
23339  +   end;
23340  +   else if _dm12 = '7'  then do;
23341  +      DEPT187 = 1;
23342  +   end;
23343  +   else if _dm12 = '6'  then do;
23344  +      DEPT186 = 1;
23345  +   end;
23346  +   else if _dm12 = '10'  then do;
23347  +      DEPT1810 = 1;
23348  +   end;
23349  +   else if _dm12 = '11'  then do;
23350  +      DEPT1811 = 1;
23351  +   end;
23352  +   else if _dm12 = '8'  then do;
23353  +      DEPT188 = 1;
23354  +   end;
23355  +   else if _dm12 = '9'  then do;
23356  +      DEPT189 = 1;
23357  +   end;
23358  +   else if _dm12 = '12'  then do;
23359  +      DEPT1812 = 1;
23360  +   end;
23361  +   else if _dm12 = '13'  then do;
23362  +      DEPT1813 = 1;
23363  +   end;
23364  +   else do;
23365  +      delete;
23366  +   end;
23367  +end;
23368  +
23369  +*** Generate dummy variables for DEPT19 ;
23370  +label DEPT190 = 'DEPT19=0' ;
23371  +label DEPT193 = 'DEPT19=3' ;
23372  +label DEPT194 = 'DEPT19=4' ;
23373  +label DEPT195 = 'DEPT19=5' ;
23374  +label DEPT196 = 'DEPT19=6' ;
23375  +label DEPT197 = 'DEPT19=7' ;
23376  +label DEPT198 = 'DEPT19=8' ;
23377  +label DEPT199 = 'DEPT19=9' ;
23378  +label DEPT1910 = 'DEPT19=10' ;
23379  +label DEPT1911 = 'DEPT19=11' ;
23380  +label DEPT1912 = 'DEPT19=12' ;
23381  +label DEPT1913 = 'DEPT19=13' ;
23382  +label DEPT1914 = 'DEPT19=14' ;
23383  +label DEPT1915 = 'DEPT19=15' ;
23384  +label DEPT1918 = 'DEPT19=18' ;
23385  +label DEPT1920 = 'DEPT19=20' ;
23386  +*** encoding is sparse, initialize to zero;
23387  +DEPT190 = 0;
23388  +DEPT193 = 0;
23389  +DEPT194 = 0;
23390  +DEPT195 = 0;
23391  +DEPT196 = 0;
23392  +DEPT197 = 0;
23393  +DEPT198 = 0;
23394  +DEPT199 = 0;
23395  +DEPT1910 = 0;
23396  +DEPT1911 = 0;
23397  +DEPT1912 = 0;
23398  +DEPT1913 = 0;
23399  +DEPT1914 = 0;
23400  +DEPT1915 = 0;
23401  +DEPT1918 = 0;
23402  +DEPT1920 = 0;
23403  +if missing( DEPT19 ) then do;
23404  +   DEPT190 = .;
23405  +   DEPT193 = .;
23406  +   DEPT194 = .;
23407  +   DEPT195 = .;
23408  +   DEPT196 = .;
23409  +   DEPT197 = .;
23410  +   DEPT198 = .;
23411  +   DEPT199 = .;
23412  +   DEPT1910 = .;
23413  +   DEPT1911 = .;
23414  +   DEPT1912 = .;
23415  +   DEPT1913 = .;
23416  +   DEPT1914 = .;
23417  +   DEPT1915 = .;
23418  +   DEPT1918 = .;
23419  +   DEPT1920 = .;
23420  +end;
23421  +else do;
23422  +   length _dm12 $ 12; drop _dm12 ;
23423  +   _dm12 = put( DEPT19 , BEST12. );
23424  +   %DMNORMIP( _dm12 )
23425  +   if _dm12 = '0'  then do;
23426  +      DEPT190 = 1;
23427  +   end;
23428  +   else if _dm12 = '3'  then do;
23429  +      DEPT193 = 1;
23430  +   end;
23431  +   else if _dm12 = '4'  then do;
23432  +      DEPT194 = 1;
23433  +   end;
23434  +   else if _dm12 = '5'  then do;
23435  +      DEPT195 = 1;
23436  +   end;
23437  +   else if _dm12 = '6'  then do;
23438  +      DEPT196 = 1;
23439  +   end;
23440  +   else if _dm12 = '7'  then do;
23441  +      DEPT197 = 1;
23442  +   end;
23443  +   else if _dm12 = '8'  then do;
23444  +      DEPT198 = 1;
23445  +   end;
23446  +   else if _dm12 = '9'  then do;
23447  +      DEPT199 = 1;
23448  +   end;
23449  +   else if _dm12 = '10'  then do;
23450  +      DEPT1910 = 1;
23451  +   end;
23452  +   else if _dm12 = '11'  then do;
23453  +      DEPT1911 = 1;
23454  +   end;
23455  +   else if _dm12 = '12'  then do;
23456  +      DEPT1912 = 1;
23457  +   end;
23458  +   else if _dm12 = '13'  then do;
23459  +      DEPT1913 = 1;
23460  +   end;
23461  +   else if _dm12 = '14'  then do;
23462  +      DEPT1914 = 1;
23463  +   end;
23464  +   else if _dm12 = '15'  then do;
23465  +      DEPT1915 = 1;
23466  +   end;
23467  +   else if _dm12 = '18'  then do;
23468  +      DEPT1918 = 1;
23469  +   end;
23470  +   else if _dm12 = '20'  then do;
23471  +      DEPT1920 = 1;
23472  +   end;
23473  +   else do;
23474  +      delete;
23475  +   end;
23476  +end;
23477  +
23478  +*** Generate dummy variables for DEPT20 ;
23479  +label DEPT200 = 'DEPT20=0' ;
23480  +label DEPT203 = 'DEPT20=3' ;
23481  +label DEPT204 = 'DEPT20=4' ;
23482  +label DEPT205 = 'DEPT20=5' ;
23483  +label DEPT206 = 'DEPT20=6' ;
23484  +label DEPT207 = 'DEPT20=7' ;
23485  +label DEPT208 = 'DEPT20=8' ;
23486  +*** encoding is sparse, initialize to zero;
23487  +DEPT200 = 0;
23488  +DEPT203 = 0;
23489  +DEPT204 = 0;
23490  +DEPT205 = 0;
23491  +DEPT206 = 0;
23492  +DEPT207 = 0;
23493  +DEPT208 = 0;
23494  +if missing( DEPT20 ) then do;
23495  +   DEPT200 = .;
23496  +   DEPT203 = .;
23497  +   DEPT204 = .;
23498  +   DEPT205 = .;
23499  +   DEPT206 = .;
23500  +   DEPT207 = .;
23501  +   DEPT208 = .;
23502  +end;
23503  +else do;
23504  +   length _dm12 $ 12; drop _dm12 ;
23505  +   _dm12 = put( DEPT20 , BEST12. );
23506  +   %DMNORMIP( _dm12 )
23507  +   if _dm12 = '0'  then do;
23508  +      DEPT200 = 1;
23509  +   end;
23510  +   else if _dm12 = '3'  then do;
23511  +      DEPT203 = 1;
23512  +   end;
23513  +   else if _dm12 = '5'  then do;
23514  +      DEPT205 = 1;
23515  +   end;
23516  +   else if _dm12 = '4'  then do;
23517  +      DEPT204 = 1;
23518  +   end;
23519  +   else if _dm12 = '6'  then do;
23520  +      DEPT206 = 1;
23521  +   end;
23522  +   else if _dm12 = '7'  then do;
23523  +      DEPT207 = 1;
23524  +   end;
23525  +   else if _dm12 = '8'  then do;
23526  +      DEPT208 = 1;
23527  +   end;
23528  +   else do;
23529  +      delete;
23530  +   end;
23531  +end;
23532  +
23533  +*** Generate dummy variables for DEPT21 ;
23534  +label DEPT210 = 'DEPT21=0' ;
23535  +label DEPT213 = 'DEPT21=3' ;
23536  +label DEPT214 = 'DEPT21=4' ;
23537  +label DEPT215 = 'DEPT21=5' ;
23538  +label DEPT216 = 'DEPT21=6' ;
23539  +label DEPT219 = 'DEPT21=9' ;
23540  +*** encoding is sparse, initialize to zero;
23541  +DEPT210 = 0;
23542  +DEPT213 = 0;
23543  +DEPT214 = 0;
23544  +DEPT215 = 0;
23545  +DEPT216 = 0;
23546  +DEPT219 = 0;
23547  +if missing( DEPT21 ) then do;
23548  +   DEPT210 = .;
23549  +   DEPT213 = .;
23550  +   DEPT214 = .;
23551  +   DEPT215 = .;
23552  +   DEPT216 = .;
23553  +   DEPT219 = .;
23554  +end;
23555  +else do;
23556  +   length _dm12 $ 12; drop _dm12 ;
23557  +   _dm12 = put( DEPT21 , BEST12. );
23558  +   %DMNORMIP( _dm12 )
23559  +   if _dm12 = '0'  then do;
23560  +      DEPT210 = 1;
23561  +   end;
23562  +   else if _dm12 = '3'  then do;
23563  +      DEPT213 = 1;
23564  +   end;
23565  +   else if _dm12 = '5'  then do;
23566  +      DEPT215 = 1;
23567  +   end;
23568  +   else if _dm12 = '4'  then do;
23569  +      DEPT214 = 1;
23570  +   end;
23571  +   else if _dm12 = '6'  then do;
23572  +      DEPT216 = 1;
23573  +   end;
23574  +   else if _dm12 = '9'  then do;
23575  +      DEPT219 = 1;
23576  +   end;
23577  +   else do;
23578  +      delete;
23579  +   end;
23580  +end;
23581  +
23582  +*** Generate dummy variables for DEPT26 ;
23583  +label DEPT260 = 'DEPT26=0' ;
23584  +label DEPT263 = 'DEPT26=3' ;
23585  +label DEPT264 = 'DEPT26=4' ;
23586  +label DEPT265 = 'DEPT26=5' ;
23587  +label DEPT266 = 'DEPT26=6' ;
23588  +label DEPT267 = 'DEPT26=7' ;
23589  +label DEPT268 = 'DEPT26=8' ;
23590  +label DEPT269 = 'DEPT26=9' ;
23591  +label DEPT2610 = 'DEPT26=10' ;
23592  +label DEPT2611 = 'DEPT26=11' ;
23593  +label DEPT2614 = 'DEPT26=14' ;
23594  +label DEPT2615 = 'DEPT26=15' ;
23595  +label DEPT2622 = 'DEPT26=22' ;
23596  +label DEPT2625 = 'DEPT26=25' ;
23597  +label DEPT2655 = 'DEPT26=55' ;
23598  +*** encoding is sparse, initialize to zero;
23599  +DEPT260 = 0;
23600  +DEPT263 = 0;
23601  +DEPT264 = 0;
23602  +DEPT265 = 0;
23603  +DEPT266 = 0;
23604  +DEPT267 = 0;
23605  +DEPT268 = 0;
23606  +DEPT269 = 0;
23607  +DEPT2610 = 0;
23608  +DEPT2611 = 0;
23609  +DEPT2614 = 0;
23610  +DEPT2615 = 0;
23611  +DEPT2622 = 0;
23612  +DEPT2625 = 0;
23613  +DEPT2655 = 0;
23614  +if missing( DEPT26 ) then do;
23615  +   DEPT260 = .;
23616  +   DEPT263 = .;
23617  +   DEPT264 = .;
23618  +   DEPT265 = .;
23619  +   DEPT266 = .;
23620  +   DEPT267 = .;
23621  +   DEPT268 = .;
23622  +   DEPT269 = .;
23623  +   DEPT2610 = .;
23624  +   DEPT2611 = .;
23625  +   DEPT2614 = .;
23626  +   DEPT2615 = .;
23627  +   DEPT2622 = .;
23628  +   DEPT2625 = .;
23629  +   DEPT2655 = .;
23630  +end;
23631  +else do;
23632  +   length _dm12 $ 12; drop _dm12 ;
23633  +   _dm12 = put( DEPT26 , BEST12. );
23634  +   %DMNORMIP( _dm12 )
23635  +   if _dm12 = '0'  then do;
23636  +      DEPT260 = 1;
23637  +   end;
23638  +   else if _dm12 = '3'  then do;
23639  +      DEPT263 = 1;
23640  +   end;
23641  +   else if _dm12 = '4'  then do;
23642  +      DEPT264 = 1;
23643  +   end;
23644  +   else if _dm12 = '5'  then do;
23645  +      DEPT265 = 1;
23646  +   end;
23647  +   else if _dm12 = '6'  then do;
23648  +      DEPT266 = 1;
23649  +   end;
23650  +   else if _dm12 = '7'  then do;
23651  +      DEPT267 = 1;
23652  +   end;
23653  +   else if _dm12 = '8'  then do;
23654  +      DEPT268 = 1;
23655  +   end;
23656  +   else if _dm12 = '9'  then do;
23657  +      DEPT269 = 1;
23658  +   end;
23659  +   else if _dm12 = '11'  then do;
23660  +      DEPT2611 = 1;
23661  +   end;
23662  +   else if _dm12 = '10'  then do;
23663  +      DEPT2610 = 1;
23664  +   end;
23665  +   else if _dm12 = '14'  then do;
23666  +      DEPT2614 = 1;
23667  +   end;
23668  +   else if _dm12 = '15'  then do;
23669  +      DEPT2615 = 1;
23670  +   end;
23671  +   else if _dm12 = '22'  then do;
23672  +      DEPT2622 = 1;
23673  +   end;
23674  +   else if _dm12 = '25'  then do;
23675  +      DEPT2625 = 1;
23676  +   end;
23677  +   else if _dm12 = '55'  then do;
23678  +      DEPT2655 = 1;
23679  +   end;
23680  +   else do;
23681  +      delete;
23682  +   end;
23683  +end;
23684  +
23685  +*** Generate dummy variables for METHPAYM ;
23686  +label METHPAYMCC = 'METHPAYM=CC' ;
23687  +label METHPAYMCK = 'METHPAYM=CK' ;
23688  +label METHPAYMDK = 'METHPAYM=DK' ;
23689  +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
23690  +*** encoding is sparse, initialize to zero;
23691  +METHPAYMCC = 0;
23692  +METHPAYMCK = 0;
23693  +METHPAYMDK = 0;
23694  +METHPAYMXBOT = 0;
23695  +if missing( METHPAYM ) then do;
23696  +   METHPAYMCC = .;
23697  +   METHPAYMCK = .;
23698  +   METHPAYMDK = .;
23699  +   METHPAYMXBOT = .;
23700  +end;
23701  +else do;
23702  +   length _dm4 $ 4; drop _dm4 ;
23703  +   _dm4 = put( METHPAYM , $4. );
23704  +   %DMNORMIP( _dm4 )
23705  +   if _dm4 = 'CC'  then do;
23706  +      METHPAYMCC = 1;
23707  +   end;
23708  +   else if _dm4 = 'CK'  then do;
23709  +      METHPAYMCK = 1;
23710  +   end;
23711  +   else if _dm4 = 'XBOT'  then do;
23712  +      METHPAYMXBOT = 1;
23713  +   end;
23714  +   else if _dm4 = 'DK'  then do;
23715  +      METHPAYMDK = 1;
23716  +   end;
23717  +   else do;
23718  +      delete;
23719  +   end;
23720  +end;
23721  +
23722  +*** Generate dummy variables for TOTORDQ01 ;
23723  +label TOTORDQ010 = 'TOTORDQ01=0' ;
23724  +label TOTORDQ011 = 'TOTORDQ01=1' ;
23725  +label TOTORDQ012 = 'TOTORDQ01=2' ;
23726  +label TOTORDQ013 = 'TOTORDQ01=3' ;
23727  +label TOTORDQ014 = 'TOTORDQ01=4' ;
23728  +label TOTORDQ015 = 'TOTORDQ01=5' ;
23729  +label TOTORDQ016 = 'TOTORDQ01=6' ;
23730  +*** encoding is sparse, initialize to zero;
23731  +TOTORDQ010 = 0;
23732  +TOTORDQ011 = 0;
23733  +TOTORDQ012 = 0;
23734  +TOTORDQ013 = 0;
23735  +TOTORDQ014 = 0;
23736  +TOTORDQ015 = 0;
23737  +TOTORDQ016 = 0;
23738  +if missing( TOTORDQ01 ) then do;
23739  +   TOTORDQ010 = .;
23740  +   TOTORDQ011 = .;
23741  +   TOTORDQ012 = .;
23742  +   TOTORDQ013 = .;
23743  +   TOTORDQ014 = .;
23744  +   TOTORDQ015 = .;
23745  +   TOTORDQ016 = .;
23746  +end;
23747  +else do;
23748  +   length _dm12 $ 12; drop _dm12 ;
23749  +   _dm12 = put( TOTORDQ01 , BEST12. );
23750  +   %DMNORMIP( _dm12 )
23751  +   if _dm12 = '0'  then do;
23752  +      TOTORDQ010 = 1;
23753  +   end;
23754  +   else if _dm12 = '1'  then do;
23755  +      TOTORDQ011 = 1;
23756  +   end;
23757  +   else if _dm12 = '2'  then do;
23758  +      TOTORDQ012 = 1;
23759  +   end;
23760  +   else if _dm12 = '3'  then do;
23761  +      TOTORDQ013 = 1;
23762  +   end;
23763  +   else if _dm12 = '4'  then do;
23764  +      TOTORDQ014 = 1;
23765  +   end;
23766  +   else if _dm12 = '5'  then do;
23767  +      TOTORDQ015 = 1;
23768  +   end;
23769  +   else if _dm12 = '6'  then do;
23770  +      TOTORDQ016 = 1;
23771  +   end;
23772  +   else do;
23773  +      delete;
23774  +   end;
23775  +end;
23776  +
23777  +*** Generate dummy variables for TOTORDQ02 ;
23778  +label TOTORDQ020 = 'TOTORDQ02=0' ;
23779  +label TOTORDQ021 = 'TOTORDQ02=1' ;
23780  +label TOTORDQ022 = 'TOTORDQ02=2' ;
23781  +label TOTORDQ023 = 'TOTORDQ02=3' ;
23782  +label TOTORDQ024 = 'TOTORDQ02=4' ;
23783  +label TOTORDQ025 = 'TOTORDQ02=5' ;
23784  +label TOTORDQ028 = 'TOTORDQ02=8' ;
23785  +*** encoding is sparse, initialize to zero;
23786  +TOTORDQ020 = 0;
23787  +TOTORDQ021 = 0;
23788  +TOTORDQ022 = 0;
23789  +TOTORDQ023 = 0;
23790  +TOTORDQ024 = 0;
23791  +TOTORDQ025 = 0;
23792  +TOTORDQ028 = 0;
23793  +if missing( TOTORDQ02 ) then do;
23794  +   TOTORDQ020 = .;
23795  +   TOTORDQ021 = .;
23796  +   TOTORDQ022 = .;
23797  +   TOTORDQ023 = .;
23798  +   TOTORDQ024 = .;
23799  +   TOTORDQ025 = .;
23800  +   TOTORDQ028 = .;
23801  +end;
23802  +else do;
23803  +   length _dm12 $ 12; drop _dm12 ;
23804  +   _dm12 = put( TOTORDQ02 , BEST12. );
23805  +   %DMNORMIP( _dm12 )
23806  +   if _dm12 = '0'  then do;
23807  +      TOTORDQ020 = 1;
23808  +   end;
23809  +   else if _dm12 = '1'  then do;
23810  +      TOTORDQ021 = 1;
23811  +   end;
23812  +   else if _dm12 = '2'  then do;
23813  +      TOTORDQ022 = 1;
23814  +   end;
23815  +   else if _dm12 = '3'  then do;
23816  +      TOTORDQ023 = 1;
23817  +   end;
23818  +   else if _dm12 = '4'  then do;
23819  +      TOTORDQ024 = 1;
23820  +   end;
23821  +   else if _dm12 = '5'  then do;
23822  +      TOTORDQ025 = 1;
23823  +   end;
23824  +   else if _dm12 = '8'  then do;
23825  +      TOTORDQ028 = 1;
23826  +   end;
23827  +   else do;
23828  +      delete;
23829  +   end;
23830  +end;
23831  +
23832  +*** Generate dummy variables for TOTORDQ03 ;
23833  +label TOTORDQ030 = 'TOTORDQ03=0' ;
23834  +label TOTORDQ031 = 'TOTORDQ03=1' ;
23835  +label TOTORDQ032 = 'TOTORDQ03=2' ;
23836  +label TOTORDQ033 = 'TOTORDQ03=3' ;
23837  +label TOTORDQ034 = 'TOTORDQ03=4' ;
23838  +*** encoding is sparse, initialize to zero;
23839  +TOTORDQ030 = 0;
23840  +TOTORDQ031 = 0;
23841  +TOTORDQ032 = 0;
23842  +TOTORDQ033 = 0;
23843  +TOTORDQ034 = 0;
23844  +if missing( TOTORDQ03 ) then do;
23845  +   TOTORDQ030 = .;
23846  +   TOTORDQ031 = .;
23847  +   TOTORDQ032 = .;
23848  +   TOTORDQ033 = .;
23849  +   TOTORDQ034 = .;
23850  +end;
23851  +else do;
23852  +   length _dm12 $ 12; drop _dm12 ;
23853  +   _dm12 = put( TOTORDQ03 , BEST12. );
23854  +   %DMNORMIP( _dm12 )
23855  +   if _dm12 = '0'  then do;
23856  +      TOTORDQ030 = 1;
23857  +   end;
23858  +   else if _dm12 = '1'  then do;
23859  +      TOTORDQ031 = 1;
23860  +   end;
23861  +   else if _dm12 = '2'  then do;
23862  +      TOTORDQ032 = 1;
23863  +   end;
23864  +   else if _dm12 = '3'  then do;
23865  +      TOTORDQ033 = 1;
23866  +   end;
23867  +   else if _dm12 = '4'  then do;
23868  +      TOTORDQ034 = 1;
23869  +   end;
23870  +   else do;
23871  +      delete;
23872  +   end;
23873  +end;
23874  +
23875  +*** Generate dummy variables for TOTORDQ04 ;
23876  +label TOTORDQ040 = 'TOTORDQ04=0' ;
23877  +label TOTORDQ041 = 'TOTORDQ04=1' ;
23878  +label TOTORDQ042 = 'TOTORDQ04=2' ;
23879  +label TOTORDQ043 = 'TOTORDQ04=3' ;
23880  +label TOTORDQ044 = 'TOTORDQ04=4' ;
23881  +label TOTORDQ045 = 'TOTORDQ04=5' ;
23882  +label TOTORDQ046 = 'TOTORDQ04=6' ;
23883  +label TOTORDQ049 = 'TOTORDQ04=9' ;
23884  +label TOTORDQ0416 = 'TOTORDQ04=16' ;
23885  +*** encoding is sparse, initialize to zero;
23886  +TOTORDQ040 = 0;
23887  +TOTORDQ041 = 0;
23888  +TOTORDQ042 = 0;
23889  +TOTORDQ043 = 0;
23890  +TOTORDQ044 = 0;
23891  +TOTORDQ045 = 0;
23892  +TOTORDQ046 = 0;
23893  +TOTORDQ049 = 0;
23894  +TOTORDQ0416 = 0;
23895  +if missing( TOTORDQ04 ) then do;
23896  +   TOTORDQ040 = .;
23897  +   TOTORDQ041 = .;
23898  +   TOTORDQ042 = .;
23899  +   TOTORDQ043 = .;
23900  +   TOTORDQ044 = .;
23901  +   TOTORDQ045 = .;
23902  +   TOTORDQ046 = .;
23903  +   TOTORDQ049 = .;
23904  +   TOTORDQ0416 = .;
23905  +end;
23906  +else do;
23907  +   length _dm12 $ 12; drop _dm12 ;
23908  +   _dm12 = put( TOTORDQ04 , BEST12. );
23909  +   %DMNORMIP( _dm12 )
23910  +   if _dm12 = '0'  then do;
23911  +      TOTORDQ040 = 1;
23912  +   end;
23913  +   else if _dm12 = '1'  then do;
23914  +      TOTORDQ041 = 1;
23915  +   end;
23916  +   else if _dm12 = '2'  then do;
23917  +      TOTORDQ042 = 1;
23918  +   end;
23919  +   else if _dm12 = '3'  then do;
23920  +      TOTORDQ043 = 1;
23921  +   end;
23922  +   else if _dm12 = '4'  then do;
23923  +      TOTORDQ044 = 1;
23924  +   end;
23925  +   else if _dm12 = '5'  then do;
23926  +      TOTORDQ045 = 1;
23927  +   end;
23928  +   else if _dm12 = '6'  then do;
23929  +      TOTORDQ046 = 1;
23930  +   end;
23931  +   else if _dm12 = '9'  then do;
23932  +      TOTORDQ049 = 1;
23933  +   end;
23934  +   else if _dm12 = '16'  then do;
23935  +      TOTORDQ0416 = 1;
23936  +   end;
23937  +   else do;
23938  +      delete;
23939  +   end;
23940  +end;
23941  +
23942  +*** Generate dummy variables for TOTORDQ05 ;
23943  +label TOTORDQ050 = 'TOTORDQ05=0' ;
23944  +label TOTORDQ051 = 'TOTORDQ05=1' ;
23945  +label TOTORDQ052 = 'TOTORDQ05=2' ;
23946  +label TOTORDQ053 = 'TOTORDQ05=3' ;
23947  +label TOTORDQ054 = 'TOTORDQ05=4' ;
23948  +label TOTORDQ055 = 'TOTORDQ05=5' ;
23949  +*** encoding is sparse, initialize to zero;
23950  +TOTORDQ050 = 0;
23951  +TOTORDQ051 = 0;
23952  +TOTORDQ052 = 0;
23953  +TOTORDQ053 = 0;
23954  +TOTORDQ054 = 0;
23955  +TOTORDQ055 = 0;
23956  +if missing( TOTORDQ05 ) then do;
23957  +   TOTORDQ050 = .;
23958  +   TOTORDQ051 = .;
23959  +   TOTORDQ052 = .;
23960  +   TOTORDQ053 = .;
23961  +   TOTORDQ054 = .;
23962  +   TOTORDQ055 = .;
23963  +end;
23964  +else do;
23965  +   length _dm12 $ 12; drop _dm12 ;
23966  +   _dm12 = put( TOTORDQ05 , BEST12. );
23967  +   %DMNORMIP( _dm12 )
23968  +   if _dm12 = '0'  then do;
23969  +      TOTORDQ050 = 1;
23970  +   end;
23971  +   else if _dm12 = '1'  then do;
23972  +      TOTORDQ051 = 1;
23973  +   end;
23974  +   else if _dm12 = '2'  then do;
23975  +      TOTORDQ052 = 1;
23976  +   end;
23977  +   else if _dm12 = '3'  then do;
23978  +      TOTORDQ053 = 1;
23979  +   end;
23980  +   else if _dm12 = '4'  then do;
23981  +      TOTORDQ054 = 1;
23982  +   end;
23983  +   else if _dm12 = '5'  then do;
23984  +      TOTORDQ055 = 1;
23985  +   end;
23986  +   else do;
23987  +      delete;
23988  +   end;
23989  +end;
23990  +
23991  +*** Generate dummy variables for TOTORDQ06 ;
23992  +label TOTORDQ060 = 'TOTORDQ06=0' ;
23993  +label TOTORDQ061 = 'TOTORDQ06=1' ;
23994  +label TOTORDQ062 = 'TOTORDQ06=2' ;
23995  +label TOTORDQ063 = 'TOTORDQ06=3' ;
23996  +label TOTORDQ064 = 'TOTORDQ06=4' ;
23997  +label TOTORDQ065 = 'TOTORDQ06=5' ;
23998  +label TOTORDQ069 = 'TOTORDQ06=9' ;
23999  +*** encoding is sparse, initialize to zero;
24000  +TOTORDQ060 = 0;
24001  +TOTORDQ061 = 0;
24002  +TOTORDQ062 = 0;
24003  +TOTORDQ063 = 0;
24004  +TOTORDQ064 = 0;
24005  +TOTORDQ065 = 0;
24006  +TOTORDQ069 = 0;
24007  +if missing( TOTORDQ06 ) then do;
24008  +   TOTORDQ060 = .;
24009  +   TOTORDQ061 = .;
24010  +   TOTORDQ062 = .;
24011  +   TOTORDQ063 = .;
24012  +   TOTORDQ064 = .;
24013  +   TOTORDQ065 = .;
24014  +   TOTORDQ069 = .;
24015  +end;
24016  +else do;
24017  +   length _dm12 $ 12; drop _dm12 ;
24018  +   _dm12 = put( TOTORDQ06 , BEST12. );
24019  +   %DMNORMIP( _dm12 )
24020  +   if _dm12 = '0'  then do;
24021  +      TOTORDQ060 = 1;
24022  +   end;
24023  +   else if _dm12 = '1'  then do;
24024  +      TOTORDQ061 = 1;
24025  +   end;
24026  +   else if _dm12 = '2'  then do;
24027  +      TOTORDQ062 = 1;
24028  +   end;
24029  +   else if _dm12 = '3'  then do;
24030  +      TOTORDQ063 = 1;
24031  +   end;
24032  +   else if _dm12 = '4'  then do;
24033  +      TOTORDQ064 = 1;
24034  +   end;
24035  +   else if _dm12 = '5'  then do;
24036  +      TOTORDQ065 = 1;
24037  +   end;
24038  +   else if _dm12 = '9'  then do;
24039  +      TOTORDQ069 = 1;
24040  +   end;
24041  +   else do;
24042  +      delete;
24043  +   end;
24044  +end;
24045  +
24046  +*** Generate dummy variables for TOTORDQ07 ;
24047  +label TOTORDQ070 = 'TOTORDQ07=0' ;
24048  +label TOTORDQ071 = 'TOTORDQ07=1' ;
24049  +label TOTORDQ072 = 'TOTORDQ07=2' ;
24050  +label TOTORDQ073 = 'TOTORDQ07=3' ;
24051  +label TOTORDQ074 = 'TOTORDQ07=4' ;
24052  +label TOTORDQ075 = 'TOTORDQ07=5' ;
24053  +label TOTORDQ078 = 'TOTORDQ07=8' ;
24054  +*** encoding is sparse, initialize to zero;
24055  +TOTORDQ070 = 0;
24056  +TOTORDQ071 = 0;
24057  +TOTORDQ072 = 0;
24058  +TOTORDQ073 = 0;
24059  +TOTORDQ074 = 0;
24060  +TOTORDQ075 = 0;
24061  +TOTORDQ078 = 0;
24062  +if missing( TOTORDQ07 ) then do;
24063  +   TOTORDQ070 = .;
24064  +   TOTORDQ071 = .;
24065  +   TOTORDQ072 = .;
24066  +   TOTORDQ073 = .;
24067  +   TOTORDQ074 = .;
24068  +   TOTORDQ075 = .;
24069  +   TOTORDQ078 = .;
24070  +end;
24071  +else do;
24072  +   length _dm12 $ 12; drop _dm12 ;
24073  +   _dm12 = put( TOTORDQ07 , BEST12. );
24074  +   %DMNORMIP( _dm12 )
24075  +   if _dm12 = '0'  then do;
24076  +      TOTORDQ070 = 1;
24077  +   end;
24078  +   else if _dm12 = '1'  then do;
24079  +      TOTORDQ071 = 1;
24080  +   end;
24081  +   else if _dm12 = '2'  then do;
24082  +      TOTORDQ072 = 1;
24083  +   end;
24084  +   else if _dm12 = '3'  then do;
24085  +      TOTORDQ073 = 1;
24086  +   end;
24087  +   else if _dm12 = '4'  then do;
24088  +      TOTORDQ074 = 1;
24089  +   end;
24090  +   else if _dm12 = '5'  then do;
24091  +      TOTORDQ075 = 1;
24092  +   end;
24093  +   else if _dm12 = '8'  then do;
24094  +      TOTORDQ078 = 1;
24095  +   end;
24096  +   else do;
24097  +      delete;
24098  +   end;
24099  +end;
24100  +
24101  +*** Generate dummy variables for TOTORDQ08 ;
24102  +label TOTORDQ080 = 'TOTORDQ08=0' ;
24103  +label TOTORDQ081 = 'TOTORDQ08=1' ;
24104  +label TOTORDQ082 = 'TOTORDQ08=2' ;
24105  +label TOTORDQ083 = 'TOTORDQ08=3' ;
24106  +label TOTORDQ084 = 'TOTORDQ08=4' ;
24107  +label TOTORDQ085 = 'TOTORDQ08=5' ;
24108  +label TOTORDQ086 = 'TOTORDQ08=6' ;
24109  +label TOTORDQ0810 = 'TOTORDQ08=10' ;
24110  +label TOTORDQ0823 = 'TOTORDQ08=23' ;
24111  +*** encoding is sparse, initialize to zero;
24112  +TOTORDQ080 = 0;
24113  +TOTORDQ081 = 0;
24114  +TOTORDQ082 = 0;
24115  +TOTORDQ083 = 0;
24116  +TOTORDQ084 = 0;
24117  +TOTORDQ085 = 0;
24118  +TOTORDQ086 = 0;
24119  +TOTORDQ0810 = 0;
24120  +TOTORDQ0823 = 0;
24121  +if missing( TOTORDQ08 ) then do;
24122  +   TOTORDQ080 = .;
24123  +   TOTORDQ081 = .;
24124  +   TOTORDQ082 = .;
24125  +   TOTORDQ083 = .;
24126  +   TOTORDQ084 = .;
24127  +   TOTORDQ085 = .;
24128  +   TOTORDQ086 = .;
24129  +   TOTORDQ0810 = .;
24130  +   TOTORDQ0823 = .;
24131  +end;
24132  +else do;
24133  +   length _dm12 $ 12; drop _dm12 ;
24134  +   _dm12 = put( TOTORDQ08 , BEST12. );
24135  +   %DMNORMIP( _dm12 )
24136  +   if _dm12 = '0'  then do;
24137  +      TOTORDQ080 = 1;
24138  +   end;
24139  +   else if _dm12 = '1'  then do;
24140  +      TOTORDQ081 = 1;
24141  +   end;
24142  +   else if _dm12 = '2'  then do;
24143  +      TOTORDQ082 = 1;
24144  +   end;
24145  +   else if _dm12 = '3'  then do;
24146  +      TOTORDQ083 = 1;
24147  +   end;
24148  +   else if _dm12 = '4'  then do;
24149  +      TOTORDQ084 = 1;
24150  +   end;
24151  +   else if _dm12 = '5'  then do;
24152  +      TOTORDQ085 = 1;
24153  +   end;
24154  +   else if _dm12 = '6'  then do;
24155  +      TOTORDQ086 = 1;
24156  +   end;
24157  +   else if _dm12 = '10'  then do;
24158  +      TOTORDQ0810 = 1;
24159  +   end;
24160  +   else if _dm12 = '23'  then do;
24161  +      TOTORDQ0823 = 1;
24162  +   end;
24163  +   else do;
24164  +      delete;
24165  +   end;
24166  +end;
24167  +
24168  +*** Generate dummy variables for TOTORDQ09 ;
24169  +label TOTORDQ090 = 'TOTORDQ09=0' ;
24170  +label TOTORDQ091 = 'TOTORDQ09=1' ;
24171  +label TOTORDQ092 = 'TOTORDQ09=2' ;
24172  +label TOTORDQ093 = 'TOTORDQ09=3' ;
24173  +label TOTORDQ094 = 'TOTORDQ09=4' ;
24174  +label TOTORDQ095 = 'TOTORDQ09=5' ;
24175  +*** encoding is sparse, initialize to zero;
24176  +TOTORDQ090 = 0;
24177  +TOTORDQ091 = 0;
24178  +TOTORDQ092 = 0;
24179  +TOTORDQ093 = 0;
24180  +TOTORDQ094 = 0;
24181  +TOTORDQ095 = 0;
24182  +if missing( TOTORDQ09 ) then do;
24183  +   TOTORDQ090 = .;
24184  +   TOTORDQ091 = .;
24185  +   TOTORDQ092 = .;
24186  +   TOTORDQ093 = .;
24187  +   TOTORDQ094 = .;
24188  +   TOTORDQ095 = .;
24189  +end;
24190  +else do;
24191  +   length _dm12 $ 12; drop _dm12 ;
24192  +   _dm12 = put( TOTORDQ09 , BEST12. );
24193  +   %DMNORMIP( _dm12 )
24194  +   if _dm12 = '0'  then do;
24195  +      TOTORDQ090 = 1;
24196  +   end;
24197  +   else if _dm12 = '1'  then do;
24198  +      TOTORDQ091 = 1;
24199  +   end;
24200  +   else if _dm12 = '2'  then do;
24201  +      TOTORDQ092 = 1;
24202  +   end;
24203  +   else if _dm12 = '3'  then do;
24204  +      TOTORDQ093 = 1;
24205  +   end;
24206  +   else if _dm12 = '4'  then do;
24207  +      TOTORDQ094 = 1;
24208  +   end;
24209  +   else if _dm12 = '5'  then do;
24210  +      TOTORDQ095 = 1;
24211  +   end;
24212  +   else do;
24213  +      delete;
24214  +   end;
24215  +end;
24216  +
24217  +*** Generate dummy variables for TOTORDQ10 ;
24218  +label TOTORDQ100 = 'TOTORDQ10=0' ;
24219  +label TOTORDQ101 = 'TOTORDQ10=1' ;
24220  +label TOTORDQ102 = 'TOTORDQ10=2' ;
24221  +label TOTORDQ103 = 'TOTORDQ10=3' ;
24222  +label TOTORDQ104 = 'TOTORDQ10=4' ;
24223  +label TOTORDQ106 = 'TOTORDQ10=6' ;
24224  +*** encoding is sparse, initialize to zero;
24225  +TOTORDQ100 = 0;
24226  +TOTORDQ101 = 0;
24227  +TOTORDQ102 = 0;
24228  +TOTORDQ103 = 0;
24229  +TOTORDQ104 = 0;
24230  +TOTORDQ106 = 0;
24231  +if missing( TOTORDQ10 ) then do;
24232  +   TOTORDQ100 = .;
24233  +   TOTORDQ101 = .;
24234  +   TOTORDQ102 = .;
24235  +   TOTORDQ103 = .;
24236  +   TOTORDQ104 = .;
24237  +   TOTORDQ106 = .;
24238  +end;
24239  +else do;
24240  +   length _dm12 $ 12; drop _dm12 ;
24241  +   _dm12 = put( TOTORDQ10 , BEST12. );
24242  +   %DMNORMIP( _dm12 )
24243  +   if _dm12 = '0'  then do;
24244  +      TOTORDQ100 = 1;
24245  +   end;
24246  +   else if _dm12 = '1'  then do;
24247  +      TOTORDQ101 = 1;
24248  +   end;
24249  +   else if _dm12 = '2'  then do;
24250  +      TOTORDQ102 = 1;
24251  +   end;
24252  +   else if _dm12 = '3'  then do;
24253  +      TOTORDQ103 = 1;
24254  +   end;
24255  +   else if _dm12 = '4'  then do;
24256  +      TOTORDQ104 = 1;
24257  +   end;
24258  +   else if _dm12 = '6'  then do;
24259  +      TOTORDQ106 = 1;
24260  +   end;
24261  +   else do;
24262  +      delete;
24263  +   end;
24264  +end;
24265  +
24266  +*** Generate dummy variables for TOTORDQ11 ;
24267  +label TOTORDQ110 = 'TOTORDQ11=0' ;
24268  +label TOTORDQ111 = 'TOTORDQ11=1' ;
24269  +label TOTORDQ112 = 'TOTORDQ11=2' ;
24270  +label TOTORDQ113 = 'TOTORDQ11=3' ;
24271  +label TOTORDQ114 = 'TOTORDQ11=4' ;
24272  +label TOTORDQ115 = 'TOTORDQ11=5' ;
24273  +label TOTORDQ117 = 'TOTORDQ11=7' ;
24274  +*** encoding is sparse, initialize to zero;
24275  +TOTORDQ110 = 0;
24276  +TOTORDQ111 = 0;
24277  +TOTORDQ112 = 0;
24278  +TOTORDQ113 = 0;
24279  +TOTORDQ114 = 0;
24280  +TOTORDQ115 = 0;
24281  +TOTORDQ117 = 0;
24282  +if missing( TOTORDQ11 ) then do;
24283  +   TOTORDQ110 = .;
24284  +   TOTORDQ111 = .;
24285  +   TOTORDQ112 = .;
24286  +   TOTORDQ113 = .;
24287  +   TOTORDQ114 = .;
24288  +   TOTORDQ115 = .;
24289  +   TOTORDQ117 = .;
24290  +end;
24291  +else do;
24292  +   length _dm12 $ 12; drop _dm12 ;
24293  +   _dm12 = put( TOTORDQ11 , BEST12. );
24294  +   %DMNORMIP( _dm12 )
24295  +   if _dm12 = '0'  then do;
24296  +      TOTORDQ110 = 1;
24297  +   end;
24298  +   else if _dm12 = '1'  then do;
24299  +      TOTORDQ111 = 1;
24300  +   end;
24301  +   else if _dm12 = '2'  then do;
24302  +      TOTORDQ112 = 1;
24303  +   end;
24304  +   else if _dm12 = '3'  then do;
24305  +      TOTORDQ113 = 1;
24306  +   end;
24307  +   else if _dm12 = '4'  then do;
24308  +      TOTORDQ114 = 1;
24309  +   end;
24310  +   else if _dm12 = '5'  then do;
24311  +      TOTORDQ115 = 1;
24312  +   end;
24313  +   else if _dm12 = '7'  then do;
24314  +      TOTORDQ117 = 1;
24315  +   end;
24316  +   else do;
24317  +      delete;
24318  +   end;
24319  +end;
24320  +
24321  +*** Generate dummy variables for TOTORDQ12 ;
24322  +label TOTORDQ120 = 'TOTORDQ12=0' ;
24323  +label TOTORDQ121 = 'TOTORDQ12=1' ;
24324  +label TOTORDQ122 = 'TOTORDQ12=2' ;
24325  +label TOTORDQ123 = 'TOTORDQ12=3' ;
24326  +label TOTORDQ124 = 'TOTORDQ12=4' ;
24327  +label TOTORDQ125 = 'TOTORDQ12=5' ;
24328  +label TOTORDQ126 = 'TOTORDQ12=6' ;
24329  +label TOTORDQ127 = 'TOTORDQ12=7' ;
24330  +label TOTORDQ129 = 'TOTORDQ12=9' ;
24331  +label TOTORDQ1221 = 'TOTORDQ12=21' ;
24332  +*** encoding is sparse, initialize to zero;
24333  +TOTORDQ120 = 0;
24334  +TOTORDQ121 = 0;
24335  +TOTORDQ122 = 0;
24336  +TOTORDQ123 = 0;
24337  +TOTORDQ124 = 0;
24338  +TOTORDQ125 = 0;
24339  +TOTORDQ126 = 0;
24340  +TOTORDQ127 = 0;
24341  +TOTORDQ129 = 0;
24342  +TOTORDQ1221 = 0;
24343  +if missing( TOTORDQ12 ) then do;
24344  +   TOTORDQ120 = .;
24345  +   TOTORDQ121 = .;
24346  +   TOTORDQ122 = .;
24347  +   TOTORDQ123 = .;
24348  +   TOTORDQ124 = .;
24349  +   TOTORDQ125 = .;
24350  +   TOTORDQ126 = .;
24351  +   TOTORDQ127 = .;
24352  +   TOTORDQ129 = .;
24353  +   TOTORDQ1221 = .;
24354  +end;
24355  +else do;
24356  +   length _dm12 $ 12; drop _dm12 ;
24357  +   _dm12 = put( TOTORDQ12 , BEST12. );
24358  +   %DMNORMIP( _dm12 )
24359  +   if _dm12 = '0'  then do;
24360  +      TOTORDQ120 = 1;
24361  +   end;
24362  +   else if _dm12 = '1'  then do;
24363  +      TOTORDQ121 = 1;
24364  +   end;
24365  +   else if _dm12 = '2'  then do;
24366  +      TOTORDQ122 = 1;
24367  +   end;
24368  +   else if _dm12 = '3'  then do;
24369  +      TOTORDQ123 = 1;
24370  +   end;
24371  +   else if _dm12 = '4'  then do;
24372  +      TOTORDQ124 = 1;
24373  +   end;
24374  +   else if _dm12 = '5'  then do;
24375  +      TOTORDQ125 = 1;
24376  +   end;
24377  +   else if _dm12 = '7'  then do;
24378  +      TOTORDQ127 = 1;
24379  +   end;
24380  +   else if _dm12 = '6'  then do;
24381  +      TOTORDQ126 = 1;
24382  +   end;
24383  +   else if _dm12 = '9'  then do;
24384  +      TOTORDQ129 = 1;
24385  +   end;
24386  +   else if _dm12 = '21'  then do;
24387  +      TOTORDQ1221 = 1;
24388  +   end;
24389  +   else do;
24390  +      delete;
24391  +   end;
24392  +end;
24393  +
24394  +*** Generate dummy variables for TOTORDQ13 ;
24395  +label TOTORDQ130 = 'TOTORDQ13=0' ;
24396  +label TOTORDQ131 = 'TOTORDQ13=1' ;
24397  +label TOTORDQ132 = 'TOTORDQ13=2' ;
24398  +label TOTORDQ133 = 'TOTORDQ13=3' ;
24399  +label TOTORDQ134 = 'TOTORDQ13=4' ;
24400  +label TOTORDQ135 = 'TOTORDQ13=5' ;
24401  +*** encoding is sparse, initialize to zero;
24402  +TOTORDQ130 = 0;
24403  +TOTORDQ131 = 0;
24404  +TOTORDQ132 = 0;
24405  +TOTORDQ133 = 0;
24406  +TOTORDQ134 = 0;
24407  +TOTORDQ135 = 0;
24408  +if missing( TOTORDQ13 ) then do;
24409  +   TOTORDQ130 = .;
24410  +   TOTORDQ131 = .;
24411  +   TOTORDQ132 = .;
24412  +   TOTORDQ133 = .;
24413  +   TOTORDQ134 = .;
24414  +   TOTORDQ135 = .;
24415  +end;
24416  +else do;
24417  +   length _dm12 $ 12; drop _dm12 ;
24418  +   _dm12 = put( TOTORDQ13 , BEST12. );
24419  +   %DMNORMIP( _dm12 )
24420  +   if _dm12 = '0'  then do;
24421  +      TOTORDQ130 = 1;
24422  +   end;
24423  +   else if _dm12 = '1'  then do;
24424  +      TOTORDQ131 = 1;
24425  +   end;
24426  +   else if _dm12 = '2'  then do;
24427  +      TOTORDQ132 = 1;
24428  +   end;
24429  +   else if _dm12 = '3'  then do;
24430  +      TOTORDQ133 = 1;
24431  +   end;
24432  +   else if _dm12 = '4'  then do;
24433  +      TOTORDQ134 = 1;
24434  +   end;
24435  +   else if _dm12 = '5'  then do;
24436  +      TOTORDQ135 = 1;
24437  +   end;
24438  +   else do;
24439  +      delete;
24440  +   end;
24441  +end;
24442  +
24443  +*** Generate dummy variables for TOTORDQ14 ;
24444  +label TOTORDQ140 = 'TOTORDQ14=0' ;
24445  +label TOTORDQ141 = 'TOTORDQ14=1' ;
24446  +label TOTORDQ142 = 'TOTORDQ14=2' ;
24447  +label TOTORDQ143 = 'TOTORDQ14=3' ;
24448  +label TOTORDQ144 = 'TOTORDQ14=4' ;
24449  +label TOTORDQ145 = 'TOTORDQ14=5' ;
24450  +label TOTORDQ146 = 'TOTORDQ14=6' ;
24451  +*** encoding is sparse, initialize to zero;
24452  +TOTORDQ140 = 0;
24453  +TOTORDQ141 = 0;
24454  +TOTORDQ142 = 0;
24455  +TOTORDQ143 = 0;
24456  +TOTORDQ144 = 0;
24457  +TOTORDQ145 = 0;
24458  +TOTORDQ146 = 0;
24459  +if missing( TOTORDQ14 ) then do;
24460  +   TOTORDQ140 = .;
24461  +   TOTORDQ141 = .;
24462  +   TOTORDQ142 = .;
24463  +   TOTORDQ143 = .;
24464  +   TOTORDQ144 = .;
24465  +   TOTORDQ145 = .;
24466  +   TOTORDQ146 = .;
24467  +end;
24468  +else do;
24469  +   length _dm12 $ 12; drop _dm12 ;
24470  +   _dm12 = put( TOTORDQ14 , BEST12. );
24471  +   %DMNORMIP( _dm12 )
24472  +   if _dm12 = '0'  then do;
24473  +      TOTORDQ140 = 1;
24474  +   end;
24475  +   else if _dm12 = '1'  then do;
24476  +      TOTORDQ141 = 1;
24477  +   end;
24478  +   else if _dm12 = '2'  then do;
24479  +      TOTORDQ142 = 1;
24480  +   end;
24481  +   else if _dm12 = '3'  then do;
24482  +      TOTORDQ143 = 1;
24483  +   end;
24484  +   else if _dm12 = '4'  then do;
24485  +      TOTORDQ144 = 1;
24486  +   end;
24487  +   else if _dm12 = '5'  then do;
24488  +      TOTORDQ145 = 1;
24489  +   end;
24490  +   else if _dm12 = '6'  then do;
24491  +      TOTORDQ146 = 1;
24492  +   end;
24493  +   else do;
24494  +      delete;
24495  +   end;
24496  +end;
24497  +
24498  +*** Generate dummy variables for TOTORDQ15 ;
24499  +label TOTORDQ150 = 'TOTORDQ15=0' ;
24500  +label TOTORDQ151 = 'TOTORDQ15=1' ;
24501  +label TOTORDQ152 = 'TOTORDQ15=2' ;
24502  +label TOTORDQ153 = 'TOTORDQ15=3' ;
24503  +label TOTORDQ154 = 'TOTORDQ15=4' ;
24504  +label TOTORDQ155 = 'TOTORDQ15=5' ;
24505  +label TOTORDQ158 = 'TOTORDQ15=8' ;
24506  +*** encoding is sparse, initialize to zero;
24507  +TOTORDQ150 = 0;
24508  +TOTORDQ151 = 0;
24509  +TOTORDQ152 = 0;
24510  +TOTORDQ153 = 0;
24511  +TOTORDQ154 = 0;
24512  +TOTORDQ155 = 0;
24513  +TOTORDQ158 = 0;
24514  +if missing( TOTORDQ15 ) then do;
24515  +   TOTORDQ150 = .;
24516  +   TOTORDQ151 = .;
24517  +   TOTORDQ152 = .;
24518  +   TOTORDQ153 = .;
24519  +   TOTORDQ154 = .;
24520  +   TOTORDQ155 = .;
24521  +   TOTORDQ158 = .;
24522  +end;
24523  +else do;
24524  +   length _dm12 $ 12; drop _dm12 ;
24525  +   _dm12 = put( TOTORDQ15 , BEST12. );
24526  +   %DMNORMIP( _dm12 )
24527  +   if _dm12 = '0'  then do;
24528  +      TOTORDQ150 = 1;
24529  +   end;
24530  +   else if _dm12 = '1'  then do;
24531  +      TOTORDQ151 = 1;
24532  +   end;
24533  +   else if _dm12 = '2'  then do;
24534  +      TOTORDQ152 = 1;
24535  +   end;
24536  +   else if _dm12 = '3'  then do;
24537  +      TOTORDQ153 = 1;
24538  +   end;
24539  +   else if _dm12 = '4'  then do;
24540  +      TOTORDQ154 = 1;
24541  +   end;
24542  +   else if _dm12 = '5'  then do;
24543  +      TOTORDQ155 = 1;
24544  +   end;
24545  +   else if _dm12 = '8'  then do;
24546  +      TOTORDQ158 = 1;
24547  +   end;
24548  +   else do;
24549  +      delete;
24550  +   end;
24551  +end;
24552  +
24553  +*** Generate dummy variables for TOTORDQ16 ;
24554  +label TOTORDQ160 = 'TOTORDQ16=0' ;
24555  +label TOTORDQ161 = 'TOTORDQ16=1' ;
24556  +label TOTORDQ162 = 'TOTORDQ16=2' ;
24557  +label TOTORDQ163 = 'TOTORDQ16=3' ;
24558  +label TOTORDQ164 = 'TOTORDQ16=4' ;
24559  +label TOTORDQ165 = 'TOTORDQ16=5' ;
24560  +label TOTORDQ166 = 'TOTORDQ16=6' ;
24561  +label TOTORDQ167 = 'TOTORDQ16=7' ;
24562  +label TOTORDQ1610 = 'TOTORDQ16=10' ;
24563  +*** encoding is sparse, initialize to zero;
24564  +TOTORDQ160 = 0;
24565  +TOTORDQ161 = 0;
24566  +TOTORDQ162 = 0;
24567  +TOTORDQ163 = 0;
24568  +TOTORDQ164 = 0;
24569  +TOTORDQ165 = 0;
24570  +TOTORDQ166 = 0;
24571  +TOTORDQ167 = 0;
24572  +TOTORDQ1610 = 0;
24573  +if missing( TOTORDQ16 ) then do;
24574  +   TOTORDQ160 = .;
24575  +   TOTORDQ161 = .;
24576  +   TOTORDQ162 = .;
24577  +   TOTORDQ163 = .;
24578  +   TOTORDQ164 = .;
24579  +   TOTORDQ165 = .;
24580  +   TOTORDQ166 = .;
24581  +   TOTORDQ167 = .;
24582  +   TOTORDQ1610 = .;
24583  +end;
24584  +else do;
24585  +   length _dm12 $ 12; drop _dm12 ;
24586  +   _dm12 = put( TOTORDQ16 , BEST12. );
24587  +   %DMNORMIP( _dm12 )
24588  +   if _dm12 = '0'  then do;
24589  +      TOTORDQ160 = 1;
24590  +   end;
24591  +   else if _dm12 = '1'  then do;
24592  +      TOTORDQ161 = 1;
24593  +   end;
24594  +   else if _dm12 = '2'  then do;
24595  +      TOTORDQ162 = 1;
24596  +   end;
24597  +   else if _dm12 = '3'  then do;
24598  +      TOTORDQ163 = 1;
24599  +   end;
24600  +   else if _dm12 = '4'  then do;
24601  +      TOTORDQ164 = 1;
24602  +   end;
24603  +   else if _dm12 = '5'  then do;
24604  +      TOTORDQ165 = 1;
24605  +   end;
24606  +   else if _dm12 = '6'  then do;
24607  +      TOTORDQ166 = 1;
24608  +   end;
24609  +   else if _dm12 = '7'  then do;
24610  +      TOTORDQ167 = 1;
24611  +   end;
24612  +   else if _dm12 = '10'  then do;
24613  +      TOTORDQ1610 = 1;
24614  +   end;
24615  +   else do;
24616  +      delete;
24617  +   end;
24618  +end;
24619  +
24620  +*** Generate dummy variables for TOTORDQ17 ;
24621  +label TOTORDQ170 = 'TOTORDQ17=0' ;
24622  +label TOTORDQ171 = 'TOTORDQ17=1' ;
24623  +label TOTORDQ172 = 'TOTORDQ17=2' ;
24624  +label TOTORDQ173 = 'TOTORDQ17=3' ;
24625  +label TOTORDQ174 = 'TOTORDQ17=4' ;
24626  +label TOTORDQ175 = 'TOTORDQ17=5' ;
24627  +*** encoding is sparse, initialize to zero;
24628  +TOTORDQ170 = 0;
24629  +TOTORDQ171 = 0;
24630  +TOTORDQ172 = 0;
24631  +TOTORDQ173 = 0;
24632  +TOTORDQ174 = 0;
24633  +TOTORDQ175 = 0;
24634  +if missing( TOTORDQ17 ) then do;
24635  +   TOTORDQ170 = .;
24636  +   TOTORDQ171 = .;
24637  +   TOTORDQ172 = .;
24638  +   TOTORDQ173 = .;
24639  +   TOTORDQ174 = .;
24640  +   TOTORDQ175 = .;
24641  +end;
24642  +else do;
24643  +   length _dm12 $ 12; drop _dm12 ;
24644  +   _dm12 = put( TOTORDQ17 , BEST12. );
24645  +   %DMNORMIP( _dm12 )
24646  +   if _dm12 = '0'  then do;
24647  +      TOTORDQ170 = 1;
24648  +   end;
24649  +   else if _dm12 = '1'  then do;
24650  +      TOTORDQ171 = 1;
24651  +   end;
24652  +   else if _dm12 = '2'  then do;
24653  +      TOTORDQ172 = 1;
24654  +   end;
24655  +   else if _dm12 = '3'  then do;
24656  +      TOTORDQ173 = 1;
24657  +   end;
24658  +   else if _dm12 = '4'  then do;
24659  +      TOTORDQ174 = 1;
24660  +   end;
24661  +   else if _dm12 = '5'  then do;
24662  +      TOTORDQ175 = 1;
24663  +   end;
24664  +   else do;
24665  +      delete;
24666  +   end;
24667  +end;
24668  +
24669  +*** Generate dummy variables for TOTORDQ18 ;
24670  +label TOTORDQ180 = 'TOTORDQ18=0' ;
24671  +label TOTORDQ181 = 'TOTORDQ18=1' ;
24672  +label TOTORDQ182 = 'TOTORDQ18=2' ;
24673  +label TOTORDQ183 = 'TOTORDQ18=3' ;
24674  +label TOTORDQ184 = 'TOTORDQ18=4' ;
24675  +label TOTORDQ185 = 'TOTORDQ18=5' ;
24676  +*** encoding is sparse, initialize to zero;
24677  +TOTORDQ180 = 0;
24678  +TOTORDQ181 = 0;
24679  +TOTORDQ182 = 0;
24680  +TOTORDQ183 = 0;
24681  +TOTORDQ184 = 0;
24682  +TOTORDQ185 = 0;
24683  +if missing( TOTORDQ18 ) then do;
24684  +   TOTORDQ180 = .;
24685  +   TOTORDQ181 = .;
24686  +   TOTORDQ182 = .;
24687  +   TOTORDQ183 = .;
24688  +   TOTORDQ184 = .;
24689  +   TOTORDQ185 = .;
24690  +end;
24691  +else do;
24692  +   length _dm12 $ 12; drop _dm12 ;
24693  +   _dm12 = put( TOTORDQ18 , BEST12. );
24694  +   %DMNORMIP( _dm12 )
24695  +   if _dm12 = '0'  then do;
24696  +      TOTORDQ180 = 1;
24697  +   end;
24698  +   else if _dm12 = '1'  then do;
24699  +      TOTORDQ181 = 1;
24700  +   end;
24701  +   else if _dm12 = '2'  then do;
24702  +      TOTORDQ182 = 1;
24703  +   end;
24704  +   else if _dm12 = '3'  then do;
24705  +      TOTORDQ183 = 1;
24706  +   end;
24707  +   else if _dm12 = '4'  then do;
24708  +      TOTORDQ184 = 1;
24709  +   end;
24710  +   else if _dm12 = '5'  then do;
24711  +      TOTORDQ185 = 1;
24712  +   end;
24713  +   else do;
24714  +      delete;
24715  +   end;
24716  +end;
24717  +
24718  +*** Generate dummy variables for TOTORDQ19 ;
24719  +label TOTORDQ190 = 'TOTORDQ19=0' ;
24720  +label TOTORDQ191 = 'TOTORDQ19=1' ;
24721  +label TOTORDQ192 = 'TOTORDQ19=2' ;
24722  +label TOTORDQ193 = 'TOTORDQ19=3' ;
24723  +label TOTORDQ194 = 'TOTORDQ19=4' ;
24724  +label TOTORDQ195 = 'TOTORDQ19=5' ;
24725  +*** encoding is sparse, initialize to zero;
24726  +TOTORDQ190 = 0;
24727  +TOTORDQ191 = 0;
24728  +TOTORDQ192 = 0;
24729  +TOTORDQ193 = 0;
24730  +TOTORDQ194 = 0;
24731  +TOTORDQ195 = 0;
24732  +if missing( TOTORDQ19 ) then do;
24733  +   TOTORDQ190 = .;
24734  +   TOTORDQ191 = .;
24735  +   TOTORDQ192 = .;
24736  +   TOTORDQ193 = .;
24737  +   TOTORDQ194 = .;
24738  +   TOTORDQ195 = .;
24739  +end;
24740  +else do;
24741  +   length _dm12 $ 12; drop _dm12 ;
24742  +   _dm12 = put( TOTORDQ19 , BEST12. );
24743  +   %DMNORMIP( _dm12 )
24744  +   if _dm12 = '0'  then do;
24745  +      TOTORDQ190 = 1;
24746  +   end;
24747  +   else if _dm12 = '1'  then do;
24748  +      TOTORDQ191 = 1;
24749  +   end;
24750  +   else if _dm12 = '2'  then do;
24751  +      TOTORDQ192 = 1;
24752  +   end;
24753  +   else if _dm12 = '3'  then do;
24754  +      TOTORDQ193 = 1;
24755  +   end;
24756  +   else if _dm12 = '4'  then do;
24757  +      TOTORDQ194 = 1;
24758  +   end;
24759  +   else if _dm12 = '5'  then do;
24760  +      TOTORDQ195 = 1;
24761  +   end;
24762  +   else do;
24763  +      delete;
24764  +   end;
24765  +end;
24766  +
24767  +*** Generate dummy variables for TOTORDQ20 ;
24768  +label TOTORDQ200 = 'TOTORDQ20=0' ;
24769  +label TOTORDQ201 = 'TOTORDQ20=1' ;
24770  +label TOTORDQ202 = 'TOTORDQ20=2' ;
24771  +label TOTORDQ203 = 'TOTORDQ20=3' ;
24772  +label TOTORDQ204 = 'TOTORDQ20=4' ;
24773  +label TOTORDQ205 = 'TOTORDQ20=5' ;
24774  +label TOTORDQ207 = 'TOTORDQ20=7' ;
24775  +label TOTORDQ208 = 'TOTORDQ20=8' ;
24776  +label TOTORDQ2010 = 'TOTORDQ20=10' ;
24777  +label TOTORDQ2027 = 'TOTORDQ20=27' ;
24778  +*** encoding is sparse, initialize to zero;
24779  +TOTORDQ200 = 0;
24780  +TOTORDQ201 = 0;
24781  +TOTORDQ202 = 0;
24782  +TOTORDQ203 = 0;
24783  +TOTORDQ204 = 0;
24784  +TOTORDQ205 = 0;
24785  +TOTORDQ207 = 0;
24786  +TOTORDQ208 = 0;
24787  +TOTORDQ2010 = 0;
24788  +TOTORDQ2027 = 0;
24789  +if missing( TOTORDQ20 ) then do;
24790  +   TOTORDQ200 = .;
24791  +   TOTORDQ201 = .;
24792  +   TOTORDQ202 = .;
24793  +   TOTORDQ203 = .;
24794  +   TOTORDQ204 = .;
24795  +   TOTORDQ205 = .;
24796  +   TOTORDQ207 = .;
24797  +   TOTORDQ208 = .;
24798  +   TOTORDQ2010 = .;
24799  +   TOTORDQ2027 = .;
24800  +end;
24801  +else do;
24802  +   length _dm12 $ 12; drop _dm12 ;
24803  +   _dm12 = put( TOTORDQ20 , BEST12. );
24804  +   %DMNORMIP( _dm12 )
24805  +   if _dm12 = '0'  then do;
24806  +      TOTORDQ200 = 1;
24807  +   end;
24808  +   else if _dm12 = '1'  then do;
24809  +      TOTORDQ201 = 1;
24810  +   end;
24811  +   else if _dm12 = '2'  then do;
24812  +      TOTORDQ202 = 1;
24813  +   end;
24814  +   else if _dm12 = '3'  then do;
24815  +      TOTORDQ203 = 1;
24816  +   end;
24817  +   else if _dm12 = '4'  then do;
24818  +      TOTORDQ204 = 1;
24819  +   end;
24820  +   else if _dm12 = '5'  then do;
24821  +      TOTORDQ205 = 1;
24822  +   end;
24823  +   else if _dm12 = '7'  then do;
24824  +      TOTORDQ207 = 1;
24825  +   end;
24826  +   else if _dm12 = '8'  then do;
24827  +      TOTORDQ208 = 1;
24828  +   end;
24829  +   else if _dm12 = '10'  then do;
24830  +      TOTORDQ2010 = 1;
24831  +   end;
24832  +   else if _dm12 = '27'  then do;
24833  +      TOTORDQ2027 = 1;
24834  +   end;
24835  +   else do;
24836  +      delete;
24837  +   end;
24838  +end;
24839  +
24840  +*** Generate dummy variables for TOTORDQ21 ;
24841  +label TOTORDQ210 = 'TOTORDQ21=0' ;
24842  +label TOTORDQ211 = 'TOTORDQ21=1' ;
24843  +label TOTORDQ212 = 'TOTORDQ21=2' ;
24844  +label TOTORDQ213 = 'TOTORDQ21=3' ;
24845  +label TOTORDQ214 = 'TOTORDQ21=4' ;
24846  +label TOTORDQ215 = 'TOTORDQ21=5' ;
24847  +label TOTORDQ219 = 'TOTORDQ21=9' ;
24848  +*** encoding is sparse, initialize to zero;
24849  +TOTORDQ210 = 0;
24850  +TOTORDQ211 = 0;
24851  +TOTORDQ212 = 0;
24852  +TOTORDQ213 = 0;
24853  +TOTORDQ214 = 0;
24854  +TOTORDQ215 = 0;
24855  +TOTORDQ219 = 0;
24856  +if missing( TOTORDQ21 ) then do;
24857  +   TOTORDQ210 = .;
24858  +   TOTORDQ211 = .;
24859  +   TOTORDQ212 = .;
24860  +   TOTORDQ213 = .;
24861  +   TOTORDQ214 = .;
24862  +   TOTORDQ215 = .;
24863  +   TOTORDQ219 = .;
24864  +end;
24865  +else do;
24866  +   length _dm12 $ 12; drop _dm12 ;
24867  +   _dm12 = put( TOTORDQ21 , BEST12. );
24868  +   %DMNORMIP( _dm12 )
24869  +   if _dm12 = '0'  then do;
24870  +      TOTORDQ210 = 1;
24871  +   end;
24872  +   else if _dm12 = '1'  then do;
24873  +      TOTORDQ211 = 1;
24874  +   end;
24875  +   else if _dm12 = '2'  then do;
24876  +      TOTORDQ212 = 1;
24877  +   end;
24878  +   else if _dm12 = '3'  then do;
24879  +      TOTORDQ213 = 1;
24880  +   end;
24881  +   else if _dm12 = '4'  then do;
24882  +      TOTORDQ214 = 1;
24883  +   end;
24884  +   else if _dm12 = '5'  then do;
24885  +      TOTORDQ215 = 1;
24886  +   end;
24887  +   else if _dm12 = '9'  then do;
24888  +      TOTORDQ219 = 1;
24889  +   end;
24890  +   else do;
24891  +      delete;
24892  +   end;
24893  +end;
24894  +
24895  +*** Generate dummy variables for TOTORDQ22 ;
24896  +label TOTORDQ220 = 'TOTORDQ22=0' ;
24897  +label TOTORDQ221 = 'TOTORDQ22=1' ;
24898  +label TOTORDQ222 = 'TOTORDQ22=2' ;
24899  +label TOTORDQ223 = 'TOTORDQ22=3' ;
24900  +label TOTORDQ224 = 'TOTORDQ22=4' ;
24901  +label TOTORDQ225 = 'TOTORDQ22=5' ;
24902  +label TOTORDQ226 = 'TOTORDQ22=6' ;
24903  +*** encoding is sparse, initialize to zero;
24904  +TOTORDQ220 = 0;
24905  +TOTORDQ221 = 0;
24906  +TOTORDQ222 = 0;
24907  +TOTORDQ223 = 0;
24908  +TOTORDQ224 = 0;
24909  +TOTORDQ225 = 0;
24910  +TOTORDQ226 = 0;
24911  +if missing( TOTORDQ22 ) then do;
24912  +   TOTORDQ220 = .;
24913  +   TOTORDQ221 = .;
24914  +   TOTORDQ222 = .;
24915  +   TOTORDQ223 = .;
24916  +   TOTORDQ224 = .;
24917  +   TOTORDQ225 = .;
24918  +   TOTORDQ226 = .;
24919  +end;
24920  +else do;
24921  +   length _dm12 $ 12; drop _dm12 ;
24922  +   _dm12 = put( TOTORDQ22 , BEST12. );
24923  +   %DMNORMIP( _dm12 )
24924  +   if _dm12 = '0'  then do;
24925  +      TOTORDQ220 = 1;
24926  +   end;
24927  +   else if _dm12 = '1'  then do;
24928  +      TOTORDQ221 = 1;
24929  +   end;
24930  +   else if _dm12 = '2'  then do;
24931  +      TOTORDQ222 = 1;
24932  +   end;
24933  +   else if _dm12 = '3'  then do;
24934  +      TOTORDQ223 = 1;
24935  +   end;
24936  +   else if _dm12 = '4'  then do;
24937  +      TOTORDQ224 = 1;
24938  +   end;
24939  +   else if _dm12 = '5'  then do;
24940  +      TOTORDQ225 = 1;
24941  +   end;
24942  +   else if _dm12 = '6'  then do;
24943  +      TOTORDQ226 = 1;
24944  +   end;
24945  +   else do;
24946  +      delete;
24947  +   end;
24948  +end;
24949  +
24950  +*** End Class Look-up, Standardization, Replacement ;
24951  +
24952  +
24953  +/*-------------------------------------------------*/
24954  +/* Varclus Score Code Begins: GCLUSTER 1*/
24955  +/*-------------------------------------------------*/
24956  +
24957  +GC1_CLUS1 = 0 ; /*---Global Cluster 1 : Cluster Component 1------ */
24958  +GC1_CLUS1 = GC1_CLUS1+0.02403274451862 * (ACTBUY3 - 0.0514657980456)/0.22094927955546;
24959  +GC1_CLUS1 = GC1_CLUS1+0.02121224694661 * (ACTBUY5 - 0.00896541026834)/0.09426190815315;
24960  +GC1_CLUS1 = GC1_CLUS1+0.03596050802604 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
24961  +GC1_CLUS1 = GC1_CLUS1+0.07679925990842 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
24962  +GC1_CLUS1 = GC1_CLUS1+0.03943895164691 * (DEPT01 - 0.50547541492166)/1.82274128473225;
24963  +GC1_CLUS1 = GC1_CLUS1+0.03502874300207 * (DEPT02 - 0.29257018768419)/1.15307534710204;
24964  +GC1_CLUS1 = GC1_CLUS1+0.04468169103157 * (DEPT03 - 1.08161935784085)/2.82203775857088;
24965  +GC1_CLUS1 = GC1_CLUS1+0.03848425075317 * (DEPT04 - 0.68006824879789)/2.28175674515779;
24966  +GC1_CLUS1 = GC1_CLUS1+0.03934102799526 * (DEPT05 - 0.54295020939972)/1.52515347226129;
24967  +GC1_CLUS1 = GC1_CLUS1+0.04532602847659 * (DEPT06 - 0.85925236544129)/1.98131768775175;
24968  +GC1_CLUS1 = GC1_CLUS1+0.00297802542579 * (DEPT079 - 0.00003102218085)/0.00556975590661;
24969  +GC1_CLUS1 = GC1_CLUS1+0.03010556168453 * (DEPT08 - 0.31512331316891)/1.29408639394269;
24970  +GC1_CLUS1 = GC1_CLUS1+0.02180241102851 * (DEPT09 - 0.2486427795874)/1.20923480324609;
24971  +GC1_CLUS1 = GC1_CLUS1+0.02678374758298 * (DEPT10 - 0.39066232356134)/1.7648701612552;
24972  +GC1_CLUS1 = GC1_CLUS1+0.00241250440498 * (DEPT1129 - 0.00003102218085)/0.00556975590661;
24973  +GC1_CLUS1 = GC1_CLUS1+0.00588232834129 * (DEPT1213 - 0.00009306654257)/0.009646800928;
24974  +GC1_CLUS1 = GC1_CLUS1+0.02019172818798 * (DEPT123 - 0.05013184426865)/0.21822034675722;
24975  +GC1_CLUS1 = GC1_CLUS1+0.01463037343335 * (DEPT125 - 0.00614239181014)/0.07813355373221;
24976  +GC1_CLUS1 = GC1_CLUS1+0.05265378905906 * (DEPT13 - 1.30395532805956)/2.58742913517547;
24977  +GC1_CLUS1 = GC1_CLUS1+0.04783731053128 * (DEPT14 - 0.83527221963704)/2.18699342328426;
24978  +GC1_CLUS1 = GC1_CLUS1+0.03020115809854 * (DEPT15 - 0.28949899177912)/1.23869079532202;
24979  +GC1_CLUS1 = GC1_CLUS1+0.03039823798033 * (DEPT16 - 0.22491081123002)/1.0272304883634;
24980  +GC1_CLUS1 = GC1_CLUS1+0.05846297558764 * (DEPT22 - 2.12771831859779)/3.55134640550257;
24981  +GC1_CLUS1 = GC1_CLUS1+0.05036335120328 * (DEPT23 - 2.14223669923995)/3.81941288304535;
24982  +GC1_CLUS1 = GC1_CLUS1+0.04012422131232 * (DEPT24 - 0.64039087947882)/1.70711269742472;
24983  +GC1_CLUS1 = GC1_CLUS1+0.04311760931496 * (DEPT25 - 1.77676438653637)/4.75421718243184;
24984  +GC1_CLUS1 = GC1_CLUS1+0.03719953654458 * (DEPT27 - 0.58712579494338)/1.55259848403997;
24985  +GC1_CLUS1 = GC1_CLUS1+0.07926960842935 * (DOLINDET - 197.869031487513)/314.244548218948;
24986  +GC1_CLUS1 = GC1_CLUS1+0.03178425235174 * (DOLLARQ01 - 3.60255901969907)/18.9572343997303;
24987  +GC1_CLUS1 = GC1_CLUS1+0.02957447611031 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
24988  +GC1_CLUS1 = GC1_CLUS1+0.02029895811947 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
24989  +GC1_CLUS1 = GC1_CLUS1+0.02237975677114 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
24990  +GC1_CLUS1 = GC1_CLUS1+0.02835505585164 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
24991  +GC1_CLUS1 = GC1_CLUS1+0.02956640433695 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
24992  +GC1_CLUS1 = GC1_CLUS1+0.02921452555171 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
24993  +GC1_CLUS1 = GC1_CLUS1+0.03017629337041 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
24994  +GC1_CLUS1 = GC1_CLUS1+0.02710846864214 * (DOLLARQ09 - 4.29424383434155)/20.7683103640237;
24995  +GC1_CLUS1 = GC1_CLUS1+0.02941947448416 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
24996  +GC1_CLUS1 = GC1_CLUS1+0.02842082883057 * (DOLLARQ11 - 4.15352411974561)/20.8177653006881;
24997  +GC1_CLUS1 = GC1_CLUS1+0.03128795254225 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
24998  +GC1_CLUS1 = GC1_CLUS1+0.0290929595258 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
24999  +GC1_CLUS1 = GC1_CLUS1+0.02386456655579 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
25000  +GC1_CLUS1 = GC1_CLUS1+0.02877937023151 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
25001  +GC1_CLUS1 = GC1_CLUS1+0.02590136989857 * (DOLLARQ17 - 5.57017403443462)/26.1415799982751;
25002  +GC1_CLUS1 = GC1_CLUS1+0.02460106532201 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
25003  +GC1_CLUS1 = GC1_CLUS1+0.0212075140634 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
25004  +GC1_CLUS1 = GC1_CLUS1+0.07861654531454 * (DOLNETDT - 189.18095548317)/303.615750735174;
25005  +GC1_CLUS1 = GC1_CLUS1+0.07462298923671 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
25006  +GC1_CLUS1 = GC1_CLUS1+0.03596050802604 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
25007  +GC1_CLUS1 = GC1_CLUS1+0.02543369568207 * (TOTORDQ011 - 0.05853885528152)/0.23476321571557;
25008  +GC1_CLUS1 = GC1_CLUS1+0.01544838870701 * (TOTORDQ012 - 0.00791065611912)/0.08859075070754;
25009  +GC1_CLUS1 = GC1_CLUS1+0.02407829936758 * (TOTORDQ021 - 0.05627423607879)/0.2304541038742;
25010  +GC1_CLUS1 = GC1_CLUS1+0.01516633969091 * (TOTORDQ022 - 0.00639056925701)/0.07968642839386;
25011  +GC1_CLUS1 = GC1_CLUS1+0.0183773802853 * (TOTORDQ031 - 0.04920117884287)/0.21629117901362;
25012  +GC1_CLUS1 = GC1_CLUS1+0.01684075428632 * (TOTORDQ041 - 0.0732743911897)/0.2605904093015;
25013  +GC1_CLUS1 = GC1_CLUS1+0.00920411424924 * (TOTORDQ043 - 0.00102373196835)/0.03197992601749;
25014  +GC1_CLUS1 = GC1_CLUS1+0.0221703136336 * (TOTORDQ051 - 0.06781448735846)/0.25143119100849;
25015  +GC1_CLUS1 = GC1_CLUS1+0.02283967511052 * (TOTORDQ061 - 0.06446409182565)/0.24558164355085;
25016  +GC1_CLUS1 = GC1_CLUS1+0.02079546053 * (TOTORDQ071 - 0.06769039863502)/0.25121776686543;
25017  +GC1_CLUS1 = GC1_CLUS1+0.01637653045396 * (TOTORDQ072 - 0.0071661237785)/0.08435040705909;
25018  +GC1_CLUS1 = GC1_CLUS1+0.02156080172429 * (TOTORDQ081 - 0.09083294555607)/0.28737585758179;
25019  +GC1_CLUS1 = GC1_CLUS1+0.02133973297426 * (TOTORDQ091 - 0.07256088102993)/0.25941836346204;
25020  +GC1_CLUS1 = GC1_CLUS1+0.02229345634202 * (TOTORDQ101 - 0.05934543198386)/0.23627374697278;
25021  +GC1_CLUS1 = GC1_CLUS1+0.01620383655141 * (TOTORDQ102 - 0.00614239181014)/0.07813355373221;
25022  +GC1_CLUS1 = GC1_CLUS1+0.00413621873077 * (TOTORDQ104 - 0.00012408872343)/0.01113899342716;
25023  +GC1_CLUS1 = GC1_CLUS1+0.02051791178266 * (TOTORDQ111 - 0.06902435241197)/0.25349947679037;
25024  +GC1_CLUS1 = GC1_CLUS1+0.01603964994282 * (TOTORDQ112 - 0.00722816814022)/0.08471212631733;
25025  +GC1_CLUS1 = GC1_CLUS1+0.00518070078124 * (TOTORDQ115 - 0.00006204436171)/0.00787670215937;
25026  +GC1_CLUS1 = GC1_CLUS1+0.01923582331917 * (TOTORDQ121 - 0.09626182720645)/0.29495455023242;
25027  +GC1_CLUS1 = GC1_CLUS1+0.01661657226127 * (TOTORDQ122 - 0.01098185202419)/0.10421894213846;
25028  +GC1_CLUS1 = GC1_CLUS1+0.01898376902918 * (TOTORDQ131 - 0.08621064060803)/0.2806791941105;
25029  +GC1_CLUS1 = GC1_CLUS1+0.0167005688948 * (TOTORDQ132 - 0.0088413215449)/0.09361316381141;
25030  +GC1_CLUS1 = GC1_CLUS1+0.01823765088004 * (TOTORDQ141 - 0.0719714595936)/0.25844465690351;
25031  +GC1_CLUS1 = GC1_CLUS1+0.01867065462108 * (TOTORDQ151 - 0.07584923220102)/0.264760836941;
25032  +GC1_CLUS1 = GC1_CLUS1+0.01581561970053 * (TOTORDQ152 - 0.00905847681091)/0.09474544466925;
25033  +GC1_CLUS1 = GC1_CLUS1+0.01749893197787 * (TOTORDQ171 - 0.08329455560725)/0.27633121690163;
25034  +GC1_CLUS1 = GC1_CLUS1+0.01607554744595 * (TOTORDQ172 - 0.00961687606638)/0.09759450413666;
25035  +GC1_CLUS1 = GC1_CLUS1+0.01913304631168 * (TOTORDQ181 - 0.07476345587094)/0.26301335998085;
25036  +GC1_CLUS1 = GC1_CLUS1+0.01442295631512 * (TOTORDQ182 - 0.00744532340623)/0.08596580612805;
25037  +GC1_CLUS1 = GC1_CLUS1+0.0158534933606 * (TOTORDQ191 - 0.06775244299674)/0.25132450925054;
25038  +GC1_CLUS1 = GC1_CLUS1+0.07999816878672 * (UNITSIDD - 10.9602916085)/17.1055734908767;
25039  +
25040  +/*-------------------------------------------------*/
25041  +/* Varclus Score Code Begins: GCLUSTER 2*/
25042  +/*-------------------------------------------------*/
25043  +
25044  +GC2_CLUS1 = 0 ; /*---Global Cluster 2 : Cluster Component 1------ */
25045  +GC2_CLUS1 = GC2_CLUS1+0.00314158680649 * (ACTBUY1 - 0.37512021095082)/0.48416145062171;
25046  +GC2_CLUS1 = GC2_CLUS1+0.00459105554269 * (ACTBUY10 - 0.00006204436171)/0.00787670215937;
25047  +GC2_CLUS1 = GC2_CLUS1+0.01064321207564 * (ACTBUY2 - 0.13730417248332)/0.34417351938694;
25048  +GC2_CLUS1 = GC2_CLUS1+0.01443741649106 * (ACTBUY4 - 0.02196370404839)/0.14656727523669;
25049  +GC2_CLUS1 = GC2_CLUS1+0.0118676806299 * (ACTBUY6 - 0.00499457111834)/0.07049666340397;
25050  +GC2_CLUS1 = GC2_CLUS1+0.00908652540594 * (ACTBUY7 - 0.00186133085155)/0.04310364179361;
25051  +GC2_CLUS1 = GC2_CLUS1+0.01253243037523 * (ACTBUY8 - 0.00105475414921)/0.03246035012406;
25052  +GC2_CLUS1 = GC2_CLUS1+0.00493552598957 * (ACTBUY9 - 0.00024817744687)/0.01575193804466;
25053  +GC2_CLUS1 = GC2_CLUS1+0.0493815003883 * (BUYPROP - 0.18928931964407)/0.25656954904129;
25054  +GC2_CLUS1 = GC2_CLUS1+-0.15685437204876 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
25055  +GC2_CLUS1 = GC2_CLUS1+0.15685437204876 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
25056  +GC2_CLUS1 = GC2_CLUS1+0.0102493874838 * (DEPT073 - 0.00555297037381)/0.07431222112026;
25057  +GC2_CLUS1 = GC2_CLUS1+0.00199099826855 * (DEPT074 - 0.00065146579804)/0.02551590852213;
25058  +GC2_CLUS1 = GC2_CLUS1+0.00483303799478 * (DEPT075 - 0.00077555452148)/0.02783841012245;
25059  +GC2_CLUS1 = GC2_CLUS1+0.00188504640788 * (DEPT076 - 0.00006204436171)/0.00787670215937;
25060  +GC2_CLUS1 = GC2_CLUS1+-0.00038861704426 * (DEPT077 - 0.00012408872343)/0.01113899342716;
25061  +GC2_CLUS1 = GC2_CLUS1+0.00067990607655 * (DEPT078 - 0.00003102218085)/0.00556975590661;
25062  +GC2_CLUS1 = GC2_CLUS1+0.00115662497896 * (DEPT1110 - 0.00003102218085)/0.00556975590661;
25063  +GC2_CLUS1 = GC2_CLUS1+0.01089840273066 * (DEPT1111 - 0.00009306654257)/0.009646800928;
25064  +GC2_CLUS1 = GC2_CLUS1+0.00243611074432 * (DEPT1113 - 0.00006204436171)/0.00787670215937;
25065  +GC2_CLUS1 = GC2_CLUS1+0.00152232402345 * (DEPT1116 - 0.00003102218085)/0.00556975590661;
25066  +GC2_CLUS1 = GC2_CLUS1+0.00065286899208 * (DEPT1118 - 0.00003102218085)/0.00556975590661;
25067  +GC2_CLUS1 = GC2_CLUS1+0.01281484285037 * (DEPT113 - 0.03601675197766)/0.18633470601066;
25068  +GC2_CLUS1 = GC2_CLUS1+0.00709313387419 * (DEPT114 - 0.00210950829843)/0.04588162571985;
25069  +GC2_CLUS1 = GC2_CLUS1+0.00744010392835 * (DEPT115 - 0.00390879478827)/0.06239901361948;
25070  +GC2_CLUS1 = GC2_CLUS1+0.00327544370976 * (DEPT116 - 0.00055839925546)/0.02362424092676;
25071  +GC2_CLUS1 = GC2_CLUS1+0.0024936886243 * (DEPT117 - 0.0006824879789)/0.02611595963267;
25072  +GC2_CLUS1 = GC2_CLUS1+0.00403706295323 * (DEPT118 - 0.00018613308515)/0.01364200179552;
25073  +GC2_CLUS1 = GC2_CLUS1+0.00283086465388 * (DEPT119 - 0.00018613308515)/0.01364200179552;
25074  +GC2_CLUS1 = GC2_CLUS1+0.00148081349615 * (DEPT1210 - 0.00006204436171)/0.00787670215937;
25075  +GC2_CLUS1 = GC2_CLUS1+0.00205275793169 * (DEPT1211 - 0.00012408872343)/0.01113899342716;
25076  +GC2_CLUS1 = GC2_CLUS1+0.00145190057297 * (DEPT1212 - 0.00003102218085)/0.00556975590661;
25077  +GC2_CLUS1 = GC2_CLUS1+0.00196278191138 * (DEPT1215 - 0.00006204436171)/0.00787670215937;
25078  +GC2_CLUS1 = GC2_CLUS1+0.01134643883544 * (DEPT1216 - 0.00003102218085)/0.00556975590661;
25079  +GC2_CLUS1 = GC2_CLUS1+0.00397128111367 * (DEPT124 - 0.00245075228788)/0.04944514076042;
25080  +GC2_CLUS1 = GC2_CLUS1+0.00454718804383 * (DEPT126 - 0.00071351015976)/0.02670249393877;
25081  +GC2_CLUS1 = GC2_CLUS1+0.00310914554063 * (DEPT127 - 0.00105475414921)/0.03246035012406;
25082  +GC2_CLUS1 = GC2_CLUS1+0.00280275393696 * (DEPT128 - 0.00034124398945)/0.01846992487371;
25083  +GC2_CLUS1 = GC2_CLUS1+0.00663559071665 * (DEPT129 - 0.00046533271288)/0.02156688683426;
25084  +GC2_CLUS1 = GC2_CLUS1+0.0018009528014 * (DEPT1710 - 0.00040328835117)/0.02007830211705;
25085  +GC2_CLUS1 = GC2_CLUS1+0.00308034890098 * (DEPT1711 - 0.00015511090429)/0.01245358005496;
25086  +GC2_CLUS1 = GC2_CLUS1+0.00503119031769 * (DEPT1712 - 0.00018613308515)/0.01364200179552;
25087  +GC2_CLUS1 = GC2_CLUS1+0.00375944374874 * (DEPT1713 - 0.00009306654257)/0.009646800928;
25088  +GC2_CLUS1 = GC2_CLUS1+0.00824962040809 * (DEPT1714 - 0.00012408872343)/0.01113899342716;
25089  +GC2_CLUS1 = GC2_CLUS1+0.0023478862885 * (DEPT1715 - 0.00006204436171)/0.00787670215937;
25090  +GC2_CLUS1 = GC2_CLUS1+-5.3143847459944E-6 * (DEPT1716 - 0.00003102218085)/0.00556975590661;
25091  +GC2_CLUS1 = GC2_CLUS1+0.00574661051866 * (DEPT1717 - 0.00012408872343)/0.01113899342716;
25092  +GC2_CLUS1 = GC2_CLUS1+0.00371300213267 * (DEPT1723 - 0.00003102218085)/0.00556975590661;
25093  +GC2_CLUS1 = GC2_CLUS1+0.01345941379745 * (DEPT173 - 0.03449666511555)/0.18250391362458;
25094  +GC2_CLUS1 = GC2_CLUS1+0.00365541131298 * (DEPT1734 - 0.00003102218085)/0.00556975590661;
25095  +GC2_CLUS1 = GC2_CLUS1+0.0100677642224 * (DEPT174 - 0.00499457111834)/0.07049666340397;
25096  +GC2_CLUS1 = GC2_CLUS1+0.00924908083393 * (DEPT175 - 0.00536683728866)/0.07306298617482;
25097  +GC2_CLUS1 = GC2_CLUS1+0.00908559695544 * (DEPT176 - 0.00161315340468)/0.04013229503948;
25098  +GC2_CLUS1 = GC2_CLUS1+0.00571135264879 * (DEPT177 - 0.0013649759578)/0.03692093019532;
25099  +GC2_CLUS1 = GC2_CLUS1+0.00556166552246 * (DEPT178 - 0.00058942143632)/0.02427122357082;
25100  +GC2_CLUS1 = GC2_CLUS1+0.00815760850118 * (DEPT179 - 0.00046533271288)/0.02156688683426;
25101  +GC2_CLUS1 = GC2_CLUS1+0.00430126305894 * (DEPT1810 - 0.00015511090429)/0.01245358005496;
25102  +GC2_CLUS1 = GC2_CLUS1+0.00061375380229 * (DEPT1811 - 0.00012408872343)/0.01113899342716;
25103  +GC2_CLUS1 = GC2_CLUS1+-0.0015778988164 * (DEPT1812 - 0.00003102218085)/0.00556975590661;
25104  +GC2_CLUS1 = GC2_CLUS1+0.00195309546325 * (DEPT1813 - 0.00003102218085)/0.00556975590661;
25105  +GC2_CLUS1 = GC2_CLUS1+0.01063724274914 * (DEPT183 - 0.02953311617806)/0.16929796330267;
25106  +GC2_CLUS1 = GC2_CLUS1+0.00712251153847 * (DEPT184 - 0.00341243989452)/0.05831724146293;
25107  +GC2_CLUS1 = GC2_CLUS1+0.00612767725955 * (DEPT185 - 0.00310221808593)/0.0556119615809;
25108  +GC2_CLUS1 = GC2_CLUS1+0.00815965086652 * (DEPT186 - 0.00062044361718)/0.02490136347819;
25109  +GC2_CLUS1 = GC2_CLUS1+0.00747922287849 * (DEPT187 - 0.00071351015976)/0.02670249393877;
25110  +GC2_CLUS1 = GC2_CLUS1+0.00376465469871 * (DEPT188 - 0.00009306654257)/0.009646800928;
25111  +GC2_CLUS1 = GC2_CLUS1+0.00495690941406 * (DEPT189 - 0.00009306654257)/0.009646800928;
25112  +GC2_CLUS1 = GC2_CLUS1+0.00289645872311 * (DEPT1910 - 0.00015511090429)/0.01245358005496;
25113  +GC2_CLUS1 = GC2_CLUS1+0.00013946233498 * (DEPT1911 - 0.00009306654257)/0.009646800928;
25114  +GC2_CLUS1 = GC2_CLUS1+0.00489313542804 * (DEPT1912 - 0.00006204436171)/0.00787670215937;
25115  +GC2_CLUS1 = GC2_CLUS1+0.00227493896734 * (DEPT1913 - 0.00003102218085)/0.00556975590661;
25116  +GC2_CLUS1 = GC2_CLUS1+0.00217634204399 * (DEPT1914 - 0.00003102218085)/0.00556975590661;
25117  +GC2_CLUS1 = GC2_CLUS1+0.00606763951703 * (DEPT1915 - 0.00003102218085)/0.00556975590661;
25118  +GC2_CLUS1 = GC2_CLUS1+0.00124326691564 * (DEPT1918 - 0.00003102218085)/0.00556975590661;
25119  +GC2_CLUS1 = GC2_CLUS1+0.00486559216652 * (DEPT1920 - 0.00003102218085)/0.00556975590661;
25120  +GC2_CLUS1 = GC2_CLUS1+0.00847671718491 * (DEPT193 - 0.01091980766247)/0.1039273810436;
25121  +GC2_CLUS1 = GC2_CLUS1+0.00615408830182 * (DEPT194 - 0.00331937335194)/0.05751919460555;
25122  +GC2_CLUS1 = GC2_CLUS1+0.00769212407575 * (DEPT195 - 0.00210950829843)/0.04588162571985;
25123  +GC2_CLUS1 = GC2_CLUS1+0.00536363841497 * (DEPT196 - 0.00080657670234)/0.02838927858765;
25124  +GC2_CLUS1 = GC2_CLUS1+0.00133691442421 * (DEPT197 - 0.00034124398945)/0.01846992487371;
25125  +GC2_CLUS1 = GC2_CLUS1+0.00289937810936 * (DEPT198 - 0.00027919962773)/0.01670719409516;
25126  +GC2_CLUS1 = GC2_CLUS1+0.00971308189618 * (DEPT203 - 0.00859314409803)/0.0923014965646;
25127  +GC2_CLUS1 = GC2_CLUS1+0.00241535419603 * (DEPT204 - 0.00012408872343)/0.01113899342716;
25128  +GC2_CLUS1 = GC2_CLUS1+0.00536277024769 * (DEPT205 - 0.0005273770746)/0.02295899170903;
25129  +GC2_CLUS1 = GC2_CLUS1+0.00132607968788 * (DEPT206 - 0.00003102218085)/0.00556975590661;
25130  +GC2_CLUS1 = GC2_CLUS1+-0.00028279043188 * (DEPT207 - 0.00003102218085)/0.00556975590661;
25131  +GC2_CLUS1 = GC2_CLUS1+0.00234331036089 * (DEPT208 - 0.00003102218085)/0.00556975590661;
25132  +GC2_CLUS1 = GC2_CLUS1+0.00606408362712 * (DEPT213 - 0.00527377074608)/0.07243010999791;
25133  +GC2_CLUS1 = GC2_CLUS1+-0.00046361581138 * (DEPT214 - 0.00012408872343)/0.01113899342716;
25134  +GC2_CLUS1 = GC2_CLUS1+0.00430645161008 * (DEPT215 - 0.00024817744687)/0.01575193804466;
25135  +GC2_CLUS1 = GC2_CLUS1+0.00269575082068 * (DEPT216 - 0.00006204436171)/0.00787670215937;
25136  +GC2_CLUS1 = GC2_CLUS1+0.00491889202435 * (DEPT219 - 0.00003102218085)/0.00556975590661;
25137  +GC2_CLUS1 = GC2_CLUS1+0.00024761856571 * (DEPT2610 - 0.00003102218085)/0.00556975590661;
25138  +GC2_CLUS1 = GC2_CLUS1+0.00414508156978 * (DEPT2611 - 0.00009306654257)/0.009646800928;
25139  +GC2_CLUS1 = GC2_CLUS1+0.00700780295763 * (DEPT2614 - 0.00003102218085)/0.00556975590661;
25140  +GC2_CLUS1 = GC2_CLUS1+0.00135722135059 * (DEPT2615 - 0.00003102218085)/0.00556975590661;
25141  +GC2_CLUS1 = GC2_CLUS1+0.00175783138139 * (DEPT2625 - 0.00003102218085)/0.00556975590661;
25142  +GC2_CLUS1 = GC2_CLUS1+0.01794683155632 * (DEPT263 - 0.03750581665891)/0.19000065864136;
25143  +GC2_CLUS1 = GC2_CLUS1+0.01191208543439 * (DEPT264 - 0.00719714595936)/0.0845314658605;
25144  +GC2_CLUS1 = GC2_CLUS1+0.01057320441903 * (DEPT265 - 0.00456026058631)/0.06737659414192;
25145  +GC2_CLUS1 = GC2_CLUS1+0.00889633557409 * (DEPT2655 - 0.00003102218085)/0.00556975590661;
25146  +GC2_CLUS1 = GC2_CLUS1+0.00762219104083 * (DEPT266 - 0.00158213122382)/0.03974515177532;
25147  +GC2_CLUS1 = GC2_CLUS1+0.00980161924451 * (DEPT267 - 0.00093066542577)/0.03049308336231;
25148  +GC2_CLUS1 = GC2_CLUS1+0.0109775762695 * (DEPT268 - 0.00034124398945)/0.01846992487371;
25149  +GC2_CLUS1 = GC2_CLUS1+0.00461867872075 * (DEPT269 - 0.00027919962773)/0.01670719409516;
25150  +GC2_CLUS1 = GC2_CLUS1+0.0829328139924 * (DOLINDEA - 47.8585866898046)/37.591191668842;
25151  +GC2_CLUS1 = GC2_CLUS1+0.0876750005459 * (DOLL24 - 45.4938073522568)/93.9875146751151;
25152  +GC2_CLUS1 = GC2_CLUS1+0.05163894852436 * (DOLLARQ16 - 7.79008624166279)/31.0104071776129;
25153  +GC2_CLUS1 = GC2_CLUS1+0.0630929742567 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
25154  +GC2_CLUS1 = GC2_CLUS1+0.03963318945855 * (DOLLARQ21 - 4.7463651310687)/24.268088572003;
25155  +GC2_CLUS1 = GC2_CLUS1+0.04042375289191 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
25156  +GC2_CLUS1 = GC2_CLUS1+0.07823630994548 * (DOLNETDA - 45.411597554134)/36.1502695431938;
25157  +GC2_CLUS1 = GC2_CLUS1+0.15685437204876 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
25158  +GC2_CLUS1 = GC2_CLUS1+-0.16009256423817 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
25159  +GC2_CLUS1 = GC2_CLUS1+0.16009256423817 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
25160  +GC2_CLUS1 = GC2_CLUS1+-0.16009256423817 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
25161  +GC2_CLUS1 = GC2_CLUS1+0.00350199136868 * (TOTORDQ013 - 0.00077555452148)/0.02783841012245;
25162  +GC2_CLUS1 = GC2_CLUS1+0.00592651935749 * (TOTORDQ014 - 0.00024817744687)/0.01575193804466;
25163  +GC2_CLUS1 = GC2_CLUS1+0.00278444896392 * (TOTORDQ015 - 0.00009306654257)/0.009646800928;
25164  +GC2_CLUS1 = GC2_CLUS1+0.00639795992533 * (TOTORDQ023 - 0.00120986505351)/0.03476260589299;
25165  +GC2_CLUS1 = GC2_CLUS1+0.00221667449818 * (TOTORDQ024 - 0.00018613308515)/0.01364200179552;
25166  +GC2_CLUS1 = GC2_CLUS1+0.00277055025015 * (TOTORDQ025 - 0.00003102218085)/0.00556975590661;
25167  +GC2_CLUS1 = GC2_CLUS1+0.00353933656089 * (TOTORDQ032 - 0.00384675042655)/0.06190373023441;
25168  +GC2_CLUS1 = GC2_CLUS1+0.00097999358008 * (TOTORDQ033 - 0.00046533271288)/0.02156688683426;
25169  +GC2_CLUS1 = GC2_CLUS1+0.00618615706231 * (TOTORDQ034 - 0.00003102218085)/0.00556975590661;
25170  +GC2_CLUS1 = GC2_CLUS1+0.00699718217847 * (TOTORDQ042 - 0.00604932526756)/0.07754300397319;
25171  +GC2_CLUS1 = GC2_CLUS1+0.00025599635234 * (TOTORDQ044 - 0.00021715526601)/0.01473481743971;
25172  +GC2_CLUS1 = GC2_CLUS1+0.00342310954944 * (TOTORDQ045 - 0.00006204436171)/0.00787670215937;
25173  +GC2_CLUS1 = GC2_CLUS1+0.02038115449199 * (TOTORDQ046 - 0.00003102218085)/0.00556975590661;
25174  +GC2_CLUS1 = GC2_CLUS1+0.00785920803031 * (TOTORDQ052 - 0.00772452303396)/0.08755051436602;
25175  +GC2_CLUS1 = GC2_CLUS1+0.00526394666724 * (TOTORDQ053 - 0.00133395377695)/0.03649952975734;
25176  +GC2_CLUS1 = GC2_CLUS1+0.00218688719646 * (TOTORDQ054 - 0.00006204436171)/0.00787670215937;
25177  +GC2_CLUS1 = GC2_CLUS1+0.00260822717595 * (TOTORDQ055 - 0.00003102218085)/0.00556975590661;
25178  +GC2_CLUS1 = GC2_CLUS1+0.00501934215439 * (TOTORDQ062 - 0.00626648053358)/0.07891390842548;
25179  +GC2_CLUS1 = GC2_CLUS1+0.00546898161479 * (TOTORDQ063 - 0.00086862106406)/0.02946003200026;
25180  +GC2_CLUS1 = GC2_CLUS1+0.00212121242674 * (TOTORDQ064 - 0.00012408872343)/0.01113899342716;
25181  +GC2_CLUS1 = GC2_CLUS1+0.00755893422733 * (TOTORDQ065 - 0.00006204436171)/0.00787670215937;
25182  +GC2_CLUS1 = GC2_CLUS1+0.00457979757585 * (TOTORDQ073 - 0.0008375988832)/0.02892962624192;
25183  +GC2_CLUS1 = GC2_CLUS1+0.00185113408182 * (TOTORDQ074 - 0.00012408872343)/0.01113899342716;
25184  +GC2_CLUS1 = GC2_CLUS1+0.00533455082006 * (TOTORDQ075 - 0.00006204436171)/0.00787670215937;
25185  +GC2_CLUS1 = GC2_CLUS1+0.00916366163803 * (TOTORDQ082 - 0.01002016441755)/0.09959954048469;
25186  +GC2_CLUS1 = GC2_CLUS1+0.00483145354829 * (TOTORDQ083 - 0.00117884287265)/0.03431457023532;
25187  +GC2_CLUS1 = GC2_CLUS1+0.0043040241581 * (TOTORDQ084 - 0.00043431053203)/0.02083591548788;
25188  +GC2_CLUS1 = GC2_CLUS1+0.00447541638614 * (TOTORDQ085 - 0.00009306654257)/0.009646800928;
25189  +GC2_CLUS1 = GC2_CLUS1+0.00120246024662 * (TOTORDQ086 - 0.00003102218085)/0.00556975590661;
25190  +GC2_CLUS1 = GC2_CLUS1+0.00717421389554 * (TOTORDQ092 - 0.00732123468279)/0.08525174291693;
25191  +GC2_CLUS1 = GC2_CLUS1+0.0069134229465 * (TOTORDQ093 - 0.00102373196835)/0.03197992601749;
25192  +GC2_CLUS1 = GC2_CLUS1+0.00390251753786 * (TOTORDQ094 - 0.00015511090429)/0.01245358005496;
25193  +GC2_CLUS1 = GC2_CLUS1+0.00077681981252 * (TOTORDQ095 - 0.00006204436171)/0.00787670215937;
25194  +GC2_CLUS1 = GC2_CLUS1+0.00916591621323 * (TOTORDQ103 - 0.00089964324492)/0.02998102352496;
25195  +GC2_CLUS1 = GC2_CLUS1+0.00851430073309 * (TOTORDQ113 - 0.00055839925546)/0.02362424092676;
25196  +GC2_CLUS1 = GC2_CLUS1+0.00555930937507 * (TOTORDQ114 - 0.00015511090429)/0.01245358005496;
25197  +GC2_CLUS1 = GC2_CLUS1+0.0016793638473 * (TOTORDQ117 - 0.00003102218085)/0.00556975590661;
25198  +GC2_CLUS1 = GC2_CLUS1+0.00741314921633 * (TOTORDQ123 - 0.00164417558554)/0.04051571541781;
25199  +GC2_CLUS1 = GC2_CLUS1+0.00486306318056 * (TOTORDQ124 - 0.00021715526601)/0.01473481743971;
25200  +GC2_CLUS1 = GC2_CLUS1+0.00568108809342 * (TOTORDQ125 - 0.00012408872343)/0.01113899342716;
25201  +GC2_CLUS1 = GC2_CLUS1+0.00092353446856 * (TOTORDQ126 - 0.00003102218085)/0.00556975590661;
25202  +GC2_CLUS1 = GC2_CLUS1+0.00062183337194 * (TOTORDQ127 - 0.00006204436171)/0.00787670215937;
25203  +GC2_CLUS1 = GC2_CLUS1+0.007765789284 * (TOTORDQ133 - 0.00120986505351)/0.03476260589299;
25204  +GC2_CLUS1 = GC2_CLUS1+0.00545477868438 * (TOTORDQ134 - 0.00012408872343)/0.01113899342716;
25205  +GC2_CLUS1 = GC2_CLUS1+0.00277999607031 * (TOTORDQ135 - 0.00006204436171)/0.00787670215937;
25206  +GC2_CLUS1 = GC2_CLUS1+0.00931351922093 * (TOTORDQ142 - 0.00710407941678)/0.08398708411191;
25207  +GC2_CLUS1 = GC2_CLUS1+0.01019356096245 * (TOTORDQ143 - 0.0006824879789)/0.02611595963267;
25208  +GC2_CLUS1 = GC2_CLUS1+0.00188900471522 * (TOTORDQ144 - 0.00009306654257)/0.009646800928;
25209  +GC2_CLUS1 = GC2_CLUS1+0.00491889202435 * (TOTORDQ145 - 0.00003102218085)/0.00556975590661;
25210  +GC2_CLUS1 = GC2_CLUS1+0.00417669885104 * (TOTORDQ146 - 0.00003102218085)/0.00556975590661;
25211  +GC2_CLUS1 = GC2_CLUS1+0.01238637867356 * (TOTORDQ153 - 0.00111679851093)/0.03340038742182;
25212  +GC2_CLUS1 = GC2_CLUS1+0.00125278643995 * (TOTORDQ154 - 0.00012408872343)/0.01113899342716;
25213  +GC2_CLUS1 = GC2_CLUS1+-0.00019864573531 * (TOTORDQ155 - 0.00003102218085)/0.00556975590661;
25214  +GC2_CLUS1 = GC2_CLUS1+0.00475822922128 * (TOTORDQ158 - 0.00003102218085)/0.00556975590661;
25215  +GC2_CLUS1 = GC2_CLUS1+0.02584320410617 * (TOTORDQ161 - 0.10696447960291)/0.30907287673359;
25216  +GC2_CLUS1 = GC2_CLUS1+0.02208850301731 * (TOTORDQ162 - 0.01495269117418)/0.12136541988586;
25217  +GC2_CLUS1 = GC2_CLUS1+0.01654287983888 * (TOTORDQ163 - 0.00198541957499)/0.04451448253965;
25218  +GC2_CLUS1 = GC2_CLUS1+0.00824876639622 * (TOTORDQ164 - 0.00046533271288)/0.02156688683426;
25219  +GC2_CLUS1 = GC2_CLUS1+0.00731810585105 * (TOTORDQ165 - 0.00012408872343)/0.01113899342716;
25220  +GC2_CLUS1 = GC2_CLUS1+0.00152084765988 * (TOTORDQ166 - 0.00006204436171)/0.00787670215937;
25221  +GC2_CLUS1 = GC2_CLUS1+0.00115429183613 * (TOTORDQ167 - 0.00003102218085)/0.00556975590661;
25222  +GC2_CLUS1 = GC2_CLUS1+0.00575023759249 * (TOTORDQ173 - 0.0013649759578)/0.03692093019532;
25223  +GC2_CLUS1 = GC2_CLUS1+0.00594801186745 * (TOTORDQ174 - 0.00037226617031)/0.01929090803403;
25224  +GC2_CLUS1 = GC2_CLUS1+0.00655293416952 * (TOTORDQ175 - 0.00003102218085)/0.00556975590661;
25225  +GC2_CLUS1 = GC2_CLUS1+0.01139501728445 * (TOTORDQ183 - 0.00096168760663)/0.03099665416568;
25226  +GC2_CLUS1 = GC2_CLUS1+0.0073531437731 * (TOTORDQ184 - 0.00012408872343)/0.01113899342716;
25227  +GC2_CLUS1 = GC2_CLUS1+0.00655293416952 * (TOTORDQ185 - 0.00003102218085)/0.00556975590661;
25228  +GC2_CLUS1 = GC2_CLUS1+0.01079681600191 * (TOTORDQ192 - 0.00573910345897)/0.07554034136585;
25229  +GC2_CLUS1 = GC2_CLUS1+0.00899100139606 * (TOTORDQ193 - 0.00071351015976)/0.02670249393877;
25230  +GC2_CLUS1 = GC2_CLUS1+0.00216625978299 * (TOTORDQ195 - 0.00006204436171)/0.00787670215937;
25231  +GC2_CLUS1 = GC2_CLUS1+0.0354268171777 * (TOTORDQ201 - 0.12349930200093)/0.32901456286213;
25232  +GC2_CLUS1 = GC2_CLUS1+0.0003166719459 * (TOTORDQ2010 - 0.00003102218085)/0.00556975590661;
25233  +GC2_CLUS1 = GC2_CLUS1+0.02228950722723 * (TOTORDQ202 - 0.01247091670544)/0.11097646148697;
25234  +GC2_CLUS1 = GC2_CLUS1+0.00889633557409 * (TOTORDQ2027 - 0.00003102218085)/0.00556975590661;
25235  +GC2_CLUS1 = GC2_CLUS1+0.01509465840062 * (TOTORDQ203 - 0.00189235303241)/0.04346067910265;
25236  +GC2_CLUS1 = GC2_CLUS1+0.01309808890178 * (TOTORDQ204 - 0.0006824879789)/0.02611595963267;
25237  +GC2_CLUS1 = GC2_CLUS1+0.00209002169002 * (TOTORDQ205 - 0.00018613308515)/0.01364200179552;
25238  +GC2_CLUS1 = GC2_CLUS1+0.01859872106889 * (TOTORDQ207 - 0.00006204436171)/0.00787670215937;
25239  +GC2_CLUS1 = GC2_CLUS1+0.01599218171462 * (TOTORDQ211 - 0.07280905847681)/0.25982685347701;
25240  +GC2_CLUS1 = GC2_CLUS1+0.0187824955713 * (TOTORDQ212 - 0.00763145649139)/0.08702558421647;
25241  +GC2_CLUS1 = GC2_CLUS1+0.01225411488259 * (TOTORDQ213 - 0.00089964324492)/0.02998102352496;
25242  +GC2_CLUS1 = GC2_CLUS1+0.00258325253909 * (TOTORDQ214 - 0.00015511090429)/0.01245358005496;
25243  +GC2_CLUS1 = GC2_CLUS1+0.00509798126134 * (TOTORDQ215 - 0.00003102218085)/0.00556975590661;
25244  +GC2_CLUS1 = GC2_CLUS1+0.02038115449199 * (TOTORDQ219 - 0.00003102218085)/0.00556975590661;
25245  +GC2_CLUS1 = GC2_CLUS1+0.02041772275253 * (TOTORDQ221 - 0.07097874980611)/0.25679332657203;
25246  +GC2_CLUS1 = GC2_CLUS1+0.01572887274461 * (TOTORDQ222 - 0.00586319218241)/0.0763478617121;
25247  +GC2_CLUS1 = GC2_CLUS1+0.01235901383816 * (TOTORDQ223 - 0.00077555452148)/0.02783841012245;
25248  +GC2_CLUS1 = GC2_CLUS1+0.00538289340385 * (TOTORDQ224 - 0.00018613308515)/0.01364200179552;
25249  +GC2_CLUS1 = GC2_CLUS1+0.02038115449199 * (TOTORDQ225 - 0.00003102218085)/0.00556975590661;
25250  +GC2_CLUS1 = GC2_CLUS1+0.00268073023232 * (TOTORDQ226 - 0.00003102218085)/0.00556975590661;
25251  +GC2_CLUS1 = GC2_CLUS1+0.05962398181007 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
25252  +
25253  +/*-------------------------------------------------*/
25254  +/* Varclus Score Code Begins: GCLUSTER 3*/
25255  +/*-------------------------------------------------*/
25256  +
25257  +GC3_CLUS1 = 0 ; /*---Global Cluster 3 : Cluster Component 1------ */
25258  +GC3_CLUS1 = GC3_CLUS1+0.07347212969273 * (DEPT0711 - 0.00006204436171)/0.00787670215937;
25259  +GC3_CLUS1 = GC3_CLUS1+0.04796917964258 * (DEPT199 - 0.00015511090429)/0.01245358005496;
25260  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (DEPT2622 - 0.00003102218085)/0.00556975590661;
25261  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ016 - 0.00003102218085)/0.00556975590661;
25262  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ028 - 0.00003102218085)/0.00556975590661;
25263  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ049 - 0.00003102218085)/0.00556975590661;
25264  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ069 - 0.00003102218085)/0.00556975590661;
25265  +GC3_CLUS1 = GC3_CLUS1+0.07347212969273 * (TOTORDQ078 - 0.00006204436171)/0.00787670215937;
25266  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ0810 - 0.00003102218085)/0.00556975590661;
25267  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ106 - 0.00003102218085)/0.00556975590661;
25268  +GC3_CLUS1 = GC3_CLUS1+0.09874611979456 * (TOTORDQ129 - 0.00003102218085)/0.00556975590661;
25269  +GC3_CLUS1 = GC3_CLUS1+0.05334450065098 * (TOTORDQ194 - 0.00012408872343)/0.01113899342716;
25270  +GC3_CLUS1 = GC3_CLUS1+0.07347212969273 * (TOTORDQ208 - 0.00006204436171)/0.00787670215937;
25271  +
25272  +/*-------------------------------------------------*/
25273  +/* Varclus Score Code Begins: GCLUSTER 4*/
25274  +/*-------------------------------------------------*/
25275  +
25276  +GC4_CLUS1 = 0 ; /*---Global Cluster 4 : Cluster Component 1------ */
25277  +GC4_CLUS1 = GC4_CLUS1+0.25 * (TOTORDQ0416 - 0.00003102218085)/0.00556975590661;
25278  +GC4_CLUS1 = GC4_CLUS1+0.25 * (TOTORDQ0823 - 0.00003102218085)/0.00556975590661;
25279  +GC4_CLUS1 = GC4_CLUS1+0.24999999999999 * (TOTORDQ1221 - 0.00003102218085)/0.00556975590661;
25280  +GC4_CLUS1 = GC4_CLUS1+0.25 * (TOTORDQ1610 - 0.00003102218085)/0.00556975590661;
25281  +
25282  +/*-------------------------------------------------*/
25283  +/* Varclus Score Code Begins: GCLUSTER 5*/
25284  +/*-------------------------------------------------*/
25285  +
25286  +GC5_CLUS1 = 0 ; /*---Global Cluster 5 : Cluster Component 1------ */
25287  +GC5_CLUS1 = GC5_CLUS1+0.0697543435676 * (ACTBUY0 - 0.39695982627578)/0.48927512608284;
25288  +GC5_CLUS1 = GC5_CLUS1+0.09750350598641 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
25289  +GC5_CLUS1 = GC5_CLUS1+0.20793837134815 * (DAYLAST - 1182.17608189855)/1226.0780195912;
25290  +GC5_CLUS1 = GC5_CLUS1+0.02326303571361 * (DEPT070 - 0.99270978749806)/0.08507226234284;
25291  +GC5_CLUS1 = GC5_CLUS1+0.04850256861665 * (DEPT110 - 0.95607259190321)/0.20493680444998;
25292  +GC5_CLUS1 = GC5_CLUS1+0.05979321930493 * (DEPT120 - 0.93829688227082)/0.24061928248315;
25293  +GC5_CLUS1 = GC5_CLUS1+0.04705303566689 * (DEPT170 - 0.94986815573134)/0.21822034675722;
25294  +GC5_CLUS1 = GC5_CLUS1+0.04461612672791 * (DEPT180 - 0.96209089498991)/0.1909794131409;
25295  +GC5_CLUS1 = GC5_CLUS1+0.03276641279447 * (DEPT190 - 0.98160384675042)/0.13438115568369;
25296  +GC5_CLUS1 = GC5_CLUS1+0.02462574733152 * (DEPT200 - 0.99066232356134)/0.09618092958834;
25297  +GC5_CLUS1 = GC5_CLUS1+0.01722455343947 * (DEPT210 - 0.99426089654102)/0.07554034136585;
25298  +GC5_CLUS1 = GC5_CLUS1+0.046474417213 * (DEPT260 - 0.94732433690088)/0.22338864272858;
25299  +GC5_CLUS1 = GC5_CLUS1+0.16501064384473 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
25300  +GC5_CLUS1 = GC5_CLUS1+0.20793725844011 * (MONLAST - 38.7579959671164)/40.2783526824403;
25301  +GC5_CLUS1 = GC5_CLUS1+0.05199733852573 * (TENURE - 83.4682798200713)/60.0499642836247;
25302  +GC5_CLUS1 = GC5_CLUS1+0.05789519611996 * (TOTORDQ010 - 0.93240266790755)/0.25105753944269;
25303  +GC5_CLUS1 = GC5_CLUS1+0.05578697639662 * (TOTORDQ020 - 0.93587715216379)/0.24497544765707;
25304  +GC5_CLUS1 = GC5_CLUS1+0.03656048625851 * (TOTORDQ030 - 0.94645571583682)/0.22511967032131;
25305  +GC5_CLUS1 = GC5_CLUS1+0.03766955298958 * (TOTORDQ040 - 0.91928028540406)/0.27240841454353;
25306  +GC5_CLUS1 = GC5_CLUS1+0.05889095347788 * (TOTORDQ050 - 0.92303396928804)/0.26654167550805;
25307  +GC5_CLUS1 = GC5_CLUS1+0.05775072328062 * (TOTORDQ060 - 0.92818365131068)/0.25818758435395;
25308  +GC5_CLUS1 = GC5_CLUS1+0.05440901535255 * (TOTORDQ070 - 0.92405770125639)/0.26490987723425;
25309  +GC5_CLUS1 = GC5_CLUS1+0.06480273075055 * (TOTORDQ080 - 0.89734760353652)/0.30350904378116;
25310  +GC5_CLUS1 = GC5_CLUS1+0.06164790474445 * (TOTORDQ090 - 0.91887699705289)/0.2730281558173;
25311  +GC5_CLUS1 = GC5_CLUS1+0.06116343917301 * (TOTORDQ100 - 0.93345742205677)/0.24923200086665;
25312  +GC5_CLUS1 = GC5_CLUS1+0.06124517483298 * (TOTORDQ110 - 0.92294090274546)/0.26668933083571;
25313  +GC5_CLUS1 = GC5_CLUS1+0.0723028890182 * (TOTORDQ120 - 0.89061579029005)/0.31212549820402;
25314  +GC5_CLUS1 = GC5_CLUS1+0.06585716786276 * (TOTORDQ130 - 0.90355203970839)/0.2952091712368;
25315  +GC5_CLUS1 = GC5_CLUS1+0.06225722368083 * (TOTORDQ140 - 0.9200868621064)/0.271162883384;
25316  +GC5_CLUS1 = GC5_CLUS1+0.06725036176448 * (TOTORDQ150 - 0.91378935939196)/0.2806791941105;
25317  +GC5_CLUS1 = GC5_CLUS1+0.07963966632779 * (TOTORDQ160 - 0.87538389948813)/0.33028822598524;
25318  +GC5_CLUS1 = GC5_CLUS1+0.07032583668734 * (TOTORDQ170 - 0.90532030401737)/0.29277655355917;
25319  +GC5_CLUS1 = GC5_CLUS1+0.07147030958113 * (TOTORDQ180 - 0.91667442221188)/0.27637799387312;
25320  +GC5_CLUS1 = GC5_CLUS1+0.06159374944925 * (TOTORDQ190 - 0.92560881029936)/0.26241051190929;
25321  +GC5_CLUS1 = GC5_CLUS1+0.07968796721355 * (TOTORDQ200 - 0.86108267411199)/0.34586560023062;
25322  +GC5_CLUS1 = GC5_CLUS1+0.0657536344856 * (TOTORDQ210 - 0.91844268652086)/0.27369333551993;
25323  +GC5_CLUS1 = GC5_CLUS1+0.06516478568558 * (TOTORDQ220 - 0.92213432604312)/0.26796424821009;
25324  +GC5_CLUS1 = GC5_CLUS1+0.08853411162087 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
NOTE: %INCLUDE (level 1) ending.
25325   run;

NOTE: DATA STEP view saved on file EMWS3.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           13.82 seconds
      cpu time            0.07 seconds
      

25326   quit;
25327   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.

25329   *------------------------------------------------------------*;
25330   * VarClus: Computing metadata for TRAIN data;
25331   *------------------------------------------------------------*;

NOTE: View EMWS3.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           5.03 seconds
      cpu time            0.09 seconds
      
NOTE: View EMWS3.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           5.03 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS3.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           5.28 seconds
      cpu time            0.06 seconds
      
