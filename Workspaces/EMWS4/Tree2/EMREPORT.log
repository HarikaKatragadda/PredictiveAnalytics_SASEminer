*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                13:09:33
*------------------------------------------------------------*
18358  data EMWS4.Tree2_EMOUTFIT;
18359  set EMWS4.Tree2_EMOUTFIT;
18360  length TargetLabel $200;
18361  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18362  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18363  run;

NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: The data set EMWS4.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

18364  proc sort data=EMWS4.Tree2_EMREPORTFIT nothreads;
18365  by TARGET;
18366  run;

NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The data set EMWS4.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

18367  %let _EMwarndup = 0;
18368  %let _EMtargetdup =;
18369  %let _EMASEtargetdup =;
18370  data _null_;
18371  set EMWS4.Tree2_EMOUTFIT;
18372  if .<_ASE_<0.000001 then do;
18373  call symput('_EMwarndup', '1');
18374  call symput('_EMtargetdup', target);
18375  call symput('_EMASEtargetdup', put(_ASE_, best.));
18376  end;
18377  run;

NOTE: There were 1 observations read from the data set EMWS4.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18378  %let EMEXCEPTIONSTRING=;
18379  *------------------------------------------------------------*;
18380  * REPORT: Tree2;
18381  *------------------------------------------------------------*;
18382  %let EM_ACTION = REPORT;
18383  %let syscc = 0;
18384  %macro main;
18385  
18386    %if %upcase(&EM_ACTION) = CREATE %then %do;
18387      filename temp catalog 'sashelp.emmodl.tree_create.source';
18388      %include temp;
18389      filename temp;
18390  
18391      %em_tree_create;
18392    %end;
18393  
18394     %else
18395     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18396  
18397         filename temp catalog 'sashelp.emmodl.tree_train.source';
18398         %include temp;
18399         filename temp;
18400         %em_tree_train;
18401     %end;
18402  
18403    %else
18404    %if %upcase(&EM_ACTION) = SCORE %then %do;
18405      filename temp catalog 'sashelp.emmodl.tree_score.source';
18406      %include temp;
18407      filename temp;
18408  
18409      %em_tree_score;
18410  
18411    %end;
18412  
18413    %else
18414    %if %upcase(&EM_ACTION) = REPORT %then %do;
18415  
18416         filename temp catalog 'sashelp.emmodl.tree_report.source';
18417         %include temp;
18418         filename temp;
18419  
18420         %em_tree_report;
18421     %end;
18422  
18423    %else
18424    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18425  
18426         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18427         %include temp;
18428         filename temp;
18429         %EM_TREE_OPENTREEVIEWER;
18430  
18431     %end;
18432  
18433    %else
18434    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18435  
18436         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18437         %include temp;
18438         filename temp;
18439         %EM_TREE_CLOSETREEVIEWER;
18440  
18441     %end;
18442  
18443  
18444     %doendm:
18445  %mend main;
18446  
18447  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18449 +%macro em_tree_makePlotDs( multipleTar= );
18451 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18452 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18453 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18454 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18456 +  /* determine if validation statistics will be displayed */
18457 +  %let validflag=N;
18458 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18459 +    /* determine if validation data exists */
18460 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18461 +      %let validflag=Y;
18462 +    %end;
18463 +  %end;
18465 +   /* retrieve name of decmeta even in presence of multiple targets */
18466 +   %let decmeta = ;
18467 +   %if &EM_DEC_DECMETA eq %then %do;
18468 +     data _Target;
18469 +       set &em_data_variableset;
18470 +       where ROLE='TARGET' and USE in('D', 'Y');
18471 +       keep NAME;
18472 +     run;
18473 +     proc sort data=_Target;
18474 +       by NAME;
18475 +     run;
18476 +     proc sort data=EM_TARGETDECINFO;
18477 +       by TARGET;
18478 +     run;
18479 +     data _Target;
18480 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18481 +       by NAME;
18482 +       if _a then do;
18483 +         call symput('decmeta', trim(DECMETA));
18484 +       end;
18485 +     run;
18486 +     proc delete data=_Target;run;
18487 +   %end;
18488 +   %else %let decmeta = &EM_DEC_DECMETA;
18491 +  /* retrieve targetEvent from decmeta */
18492 +  %let targetEvent=;
18493 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18494 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18495 +      data _null_;
18496 +       set &DECMETA(where=(_TYPE_="TARGET"));
18497 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18498 +      run;
18499 +    %end;
18500 +  %end;
18502 +  /* retrieve predicted var for targetEvent from decmeta */
18503 +  %let predTarget=;
18504 +  %let predLvl=;
18505 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18506 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18507 +      data _null_;
18508 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18509 +       call symput('predTarget', strip(VARIABLE));
18510 +       call symput('predLvl', strip(LEVEL));
18511 +      run;
18512 +    %end;
18513 +  %end;
18514 +  %else %do;
18515 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18516 +      data _null_;
18517 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18518 +       call symput('predTarget', strip(VARIABLE));
18519 +      run;
18520 +    %end;
18521 +  %end;
18523 +  /* create BelowText value */
18524 +  data belowtext;
18525 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18526 +    keep node belowtext;
18527 +  run;
18529 +  /* relace belowtext with variable label if it exists */
18530 +  data belowtext2;
18531 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18532 +    keep node belowtextlbl;
18533 +  run;
18535 +  proc sort data=belowtext; by node; run;
18536 +  proc sort data=belowtext2; by node; run;
18538 +  data belowtext;
18539 +    merge belowtext belowtext2(in=_a);
18540 +    by node;
18541 +    if _a then belowtext=belowtextlbl;
18542 +    keep node belowtext;
18543 +  run;
18545 +  /* create AboveText value */
18546 +  data abovetext;
18547 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18548 +  run;
18549 +  proc sort data=abovetext; by node numeric_value; run;
18551 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18552 +  data abovetext;
18553 +    set abovetext(rename=(node=parent));
18554 +    by parent numeric_value;
18555 +    retain abovetext tempstring flag branch origval origchar ;
18556 +    length abovetext $256;
18557 +    length tempstring origchar $64;
18559 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18560 +      if first.parent then do;
18561 +        if missing(character_value) then do;
18562 +          numeric_value = round(numeric_value, &sp_precision);
18563 +          abovetext = "< "||strip(NUMERIC_VALUE);
18564 +          branch = 1;
18565 +          origval = numeric_value;
18566 +          output;
18567 +        end;
18568 +        else do;
18569 +          abovetext = "< "||strip(CHARACTER_VALUE);
18570 +          branch = 1;
18571 +          origchar = character_value;
18572 +          output;
18573 +        end;
18575 +        if first.parent AND last.parent then do;
18576 +          if missing(character_value) then do;
18577 +            numeric_value = round(numeric_value, &sp_precision);
18578 +            branch = branch + 1;
18579 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18580 +            output;
18581 +          end;
18582 +          else do;
18583 +            branch = branch + 1;
18584 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18585 +            output;
18586 +          end;
18587 +        end;
18588 +      end;
18589 +      else if last.parent then do;
18590 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18591 +          if missing(character_value) then do;
18592 +            numeric_value = round(numeric_value, &sp_precision);
18593 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18594 +          end;
18595 +          else do;
18596 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18597 +          end;
18598 +          branch = branch + 1;
18599 +          output;
18601 +          if missing(character_value) then do;
18602 +            numeric_value = round(numeric_value, &sp_precision);
18603 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18604 +          end;
18605 +          else do;
18606 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18607 +          end;
18608 +          branch = branch + 1;
18609 +          output;
18610 +        end;
18611 +        else do;
18612 +          if missing(character_value) then do;
18613 +            numeric_value = round(numeric_value, &sp_precision);
18614 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18615 +          end;
18616 +          else do;
18617 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18618 +          end;
18619 +          branch = branch + 1;
18620 +          output;
18621 +        end;
18622 +      end;
18623 +      else do;
18624 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18625 +          if missing(character_value) then do;
18626 +            numeric_value = round(numeric_value,&sp_precision);
18627 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18628 +            origval = numeric_value;
18629 +          end;
18630 +          else do;
18631 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18632 +            origchar = character_value;
18633 +          end;
18634 +          branch = branch + 1;
18635 +          output;
18637 +        end;
18638 +        else do;
18639 +          if missing(character_value) then do;
18640 +            numeric_value = round(numeric_value, &sp_precision);
18641 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18642 +            origval = numeric_value;
18643 +          end;
18644 +          else do;
18645 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18646 +            origval = character_value;
18647 +          end;
18648 +          branch = branch + 1;
18649 +          output;
18650 +        end;
18651 +      end;
18652 +    end;
18653 +    else do;
18654 +       if first.numeric_value then do;
18655 +         flag = 0;
18656 +         abovetext = strip(CHARACTER_VALUE);
18657 +         branch = numeric_value;
18658 +         if first.numeric_value AND last.numeric_value then do;
18659 +           output;
18660 +         end;
18661 +       end;
18662 +       else if last.numeric_value then do;
18663 +         if flag=0 then do;
18664 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18665 +           length = length(strip(tempstring));
18666 +           if length < 32 then do;
18667 +             abovetext = strip(tempstring);
18668 +           end;
18669 +           else do;
18670 +             abovetext = strip(abovetext)||", ...";
18671 +             flag = 1;
18672 +           end;
18673 +         end;
18674 +         branch = numeric_value;
18675 +         output;
18676 +       end;
18677 +       else do;
18678 +         if flag=0 then do;
18679 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18680 +           length = length(strip(tempstring));
18681 +           if length < 32 then do;
18682 +             abovetext = strip(tempstring);
18683 +           end;
18684 +           else do;
18685 +             abovetext = strip(abovetext)||", ...";
18686 +             flag=1;
18687 +           end;
18688 +         end;
18689 +         branch = numeric_value;
18690 +       end;
18691 +    end;
18692 +    keep parent branch abovetext;
18693 +  run;
18695 +  /* MIssing value to abovetext */
18696 +  data tempmissing;
18697 +    set &EM_USER_OUTRULES;
18698 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18699 +    rename node=parent numeric_value=branch character_value=misschar;
18700 +  run;
18703 +  proc sort data=abovetext; by parent branch; run;
18704 +  proc sort data=tempmissing; by parent branch; run;
18705 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18707 +  data tempoutnodes;
18708 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18709 +    by parent branch;
18710 +    length traintotal validtotal 8;
18711 +    retain traintotal validtotal;
18713 +    if _a then do;
18714 +      if ^MISSING(abovetext) then do;
18715 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18716 +      end;
18717 +      else do;
18718 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18719 +      end;
18720 +    end;
18721 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18723 +    if node=1 then do;
18724 +      traintotal = N;
18725 +      validtotal=VN;
18726 +    end;
18728 +    drop role rank stat misschar belowtext;
18729 +  run;
18730 +  proc sort data=tempoutnodes; by node; run;
18731 +  proc sort data=belowtext; by node; run;
18733 +  data tempoutnodes;
18734 +    merge tempoutnodes belowtext;
18735 +    by node;
18737 +  run;
18739 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18740 +  %let adjusted = N;
18741 +  %let npriors = 0;
18742 +  data _null_ ;
18743 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18744 +    if eof then do ;
18745 +      call symput("npriors" , strip(put(_N_,best.))) ;
18746 +    end;
18747 +  run;
18748 +  %if &npriors gt 0 %then %let adjusted=Y;
18751 +  /* create a table with targetUsed and targetLevel columns for each node */
18752 +  data temptarmeta;
18753 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18754 +    %if &multipleTar eq N %then %do;
18755 +      AND USE in ('D', 'Y')
18756 +    %end;
18757 +    ));
18758 +    length TARGET $32;
18759 +    Target=name;
18760 +    keep target level;
18761 +  run;
18763 +  %if &multipleTar eq Y %then %do;
18764 +    data temptargetused;
18765 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18766 +      keep node target;
18767 +    run;
18768 +    proc sort data=temptargetused; by target; run;
18769 +    proc sort data=temptarmeta; by target; run;
18770 +    data temptargetused;
18771 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18772 +      by target;
18773 +      if _a and _b;
18774 +    run;
18775 +  %end;
18776 +  %else %do;
18777 +    data temptargetused;
18778 +      set &EM_USER_OUTSTATS;
18779 +      length target $32 tarlevel $10;
18780 +      target="%EM_TARGET";
18781 +      tarlevel="%EM_TARGET_LEVEL";
18782 +      keep node target tarlevel;
18783 +    run;
18784 +    proc sort data=temptargetused nodupkey; by node; run;
18785 +  %end;
18787 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18788 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18789 +  proc sort data=temptargetused; by node; run;
18792 +  /* create tables for all interval targets as well as all class targets */
18793 +  data tempinterval tempclass;
18794 +    merge tempoutstats temptargetused( rename=(target=targetused));
18795 +    by node;
18796 +    %if "&multipleTar" eq "Y" %then %do;
18797 +      if ((missing(Target)) OR (target=targetused ));
18798 +    %end;
18800 +    if tarlevel="INTERVAL" then output tempinterval;
18801 +    else output tempclass;
18802 +  run;
18804 +  /* iniitalize intTarget and classTarget flags */
18805 +  %let em_intNobs =0;
18806 +  %let em_classNobs = 0;
18807 +  %let em_intTarget= N;
18808 +  %let em_classTarget= N;
18810 +  proc sql;
18811 +    reset noprint;
18812 +    select count(*) into :em_intNobs from tempinterval;
18813 +  quit;
18814 +  proc sql;
18815 +    reset noprint;
18816 +    select count(*) into :em_classNobs from tempclass;
18817 +  quit;
18819 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18820 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18822 +  /* retrieve all information for interval targets */
18823 +  %if &em_intTarget eq Y %then %do;
18825 +    /* determine if leaf variable exists */
18826 +    %let dsid=%sysfunc(open(tempinterval,i));
18827 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18828 +    %let rc=%sysfunc(close(&dsid));
18830 +    proc transpose data=tempinterval
18831 +      %if &leafexists %then %do;
18832 +        (drop=leaf)
18833 +      %end;
18834 +      %if &validexist %then %do;
18835 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18836 +      %end;
18837 +      %else %do;
18838 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18839 +      %end;
18840 +      by node;
18841 +      id statname;
18842 +    run;
18843 +    data tempinterval;
18844 +      set tempinterval;
18845 +      if missing(N) then delete;
18846 +    run;
18847 +  %end;
18849 +  /* retrieve all information for class targets */
18850 +  %if &em_classTarget eq Y %then %do;
18851 +    proc sort data=tempclass; by node category; run;
18852 +    %if &validflag eq N %then %do;
18853 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18854 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18855 +    %end;
18856 +    %else %do;
18857 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18858 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18859 +    %end;
18860 +      set tempclass;
18862 +      %if &validflag eq N %then %do;
18863 +        %if "&adjusted" eq "N" %then %do;
18864 +          if statname="N" then output tempn;
18865 +        %end;
18866 +        %else %do;
18867 +          if statname="NPRIORS" then output tempn;
18868 +        %end;
18869 +        else if statname="PREDICTION" then output temppredict;
18870 +        else if statname="PROBABILITY" then output tempprob;
18871 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18872 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18873 +      %end;
18874 +      %else %do;
18875 +        %if "&adjusted" eq "N" %then %do;
18876 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18877 +        %end;
18878 +        %else %do;
18879 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18880 +        %end;
18881 +        else if statname="PREDICTION" then output temppredict;
18882 +        else if statname="PROBABILITY" then output tempprob;
18883 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18884 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18885 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18886 +      %end;
18887 +    run;
18890 +    /* determine if profit/loss exists in tempprofit */
18891 +    %let em_profitflag=0;
18892 +    %let em_lossflag=0;
18893 +    proc sql;
18894 +      reset noprint;
18895 +      select count(*) into :em_profitflag from tempprofit;
18896 +    quit;
18897 +    proc sql;
18898 +      reset noprint;
18899 +      select count(*) into :em_lossflag from temploss;
18900 +    quit;
18902 +    %if &validFlag eq Y %then %do;
18903 +      proc transpose data=tempn
18904 +        %if "&adjusted" eq "N" %then %do;
18905 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18906 +        %end;
18907 +        %else %do;
18908 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18909 +        %end;
18910 +        by node;
18911 +        id statname;
18912 +      run;
18913 +      %if &em_profitflag ne 0 %then %do;
18914 +        proc transpose data=tempprofit out=tempprofit;
18915 +          by node category;
18916 +          id statname ;
18917 +        run;
18918 +      %end;
18919 +      %if &em_lossflag ne 0 %then %do;
18920 +        proc transpose data=temploss out=temploss;
18921 +          by node category;
18922 +          id statname ;
18923 +        run;
18924 +      %end;
18925 +      data tempprob;
18926 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18927 +        by node
18928 +        %if &multipleTar eq Y %then %do;
18929 +          target
18930 +        %end;
18931 +        category;
18932 +      run;
18933 +    %end;
18935 +    /* store percentcorrect value */
18936 +    data temppredict;
18937 +      merge tempprob temppredict(in=_a);
18938 +      by node category;
18939 +      if _a then do;
18940 +        percentCorrect = statvalue;
18941 +        %if &validFlag eq Y %then %do;
18942 +          vpercentCorrect= vstatvalue;
18943 +        %end;
18944 +      end;
18945 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18946 +      %if &validFlag eq Y %then %do;
18947 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18948 +      %end;
18949 +      ;
18950 +      if missing(percentCorrect) then delete;
18951 +      drop target;
18952 +    run;
18954 +    /* build profittext */
18955 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18956 +      data tempprofittext(keep= node profittext profitloss);
18957 +        length profittext $800 profitloss 8.;
18958 +        retain profittext profitloss;
18960 +        merge tempprob
18961 +        %if &em_profitflag ne 0 %then %do;
18962 +          tempprofit
18963 +        %end;
18964 +        %else %if &em_lossflag ne 0 %then %do;
18965 +          temploss
18966 +        %end;
18967 +        ;
18968 +        by node category;
18970 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18971 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18972 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18973 +          %let profittype = ALL;
18974 +        %end;
18976 +        /* create the profitloss variable for nodecolor if selected */
18977 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18979 +        %if "&profittype" eq "ALL" %then %do;
18980 +          if strip(CATEGORY)="&targetEvent" then do;
18981 +            profitloss=statvalue;
18982 +          end;
18983 +          if first.node then do;
18984 +            %if &validFlag eq N %then %do;
18985 +             %if &em_profitflag ne 0 %then %do;
18986 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18987 +             %end;
18988 +             %if &em_lossflag ne 0 %then %do;
18989 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18990 +             %end;
18991 +            %end;
18992 +            %else %do;
18993 +             %if &em_profitflag ne 0 %then %do;
18994 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18994!+;
18995 +             %end;
18996 +             %if &em_lossflag ne 0 %then %do;
18997 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18998 +             %end;
18999 +            %end;
19000 +          end;
19001 +          else if last.node then do;
19002 +            %if &validFlag eq N %then %do;
19003 +             %if &em_profitflag ne 0 %then %do;
19004 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19005 +             %end;
19006 +             %if &em_lossflag ne 0 %then %do;
19007 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19008 +             %end;
19009 +             /*if CATEGORY="&targetEvent" then do;
19010 +               profitloss=statvalue;
19011 +             end;*/
19012 +            %end;
19013 +            %else %do;
19014 +             %if &em_profitflag ne 0 %then %do;
19015 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19015!+14.&EM_PROPERTY_SPLITPRECISION);
19016 +                if CATEGORY="&targetEvent" then do;
19017 +                 profitloss=ALTERNATIVE_PROFIT;
19018 +                end;
19019 +             %end;
19020 +             %if &em_lossflag ne 0 %then %do;
19021 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19021!+14.&EM_PROPERTY_SPLITPRECISION);
19022 +                if CATEGORY="&targetEvent" then do;
19023 +                  profitloss=ALTERNATIVE_LOSS;
19024 +                end;
19025 +             %end;
19026 +            %end;
19027 +            output;
19028 +          end;
19029 +          else do;
19030 +            %if &validFlag eq N %then %do;
19031 +             %if &em_profitflag ne 0 %then %do;
19032 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19033 +             %end;
19034 +             %if &em_lossflag ne 0 %then %do;
19035 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19036 +             %end;
19037 +            %end;
19038 +            %else %do;
19039 +             %if &em_profitflag ne 0 %then %do;
19040 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19040!+14.&EM_PROPERTY_SPLITPRECISION);
19041 +             %end;
19042 +             %if &em_lossflag ne 0 %then %do;
19043 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19043!+14.&EM_PROPERTY_SPLITPRECISION);
19044 +             %end;
19045 +            %end;
19046 +          end;
19047 +        %end;
19048 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19049 +          if strip(CATEGORY) = "&targetevent" then do;
19050 +            %if &validFlag eq N %then %do;
19051 +             %if &em_profitflag ne 0 %then %do;
19052 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19053 +             %end;
19054 +             %if &em_lossflag ne 0 %then %do;
19055 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19056 +             %end;
19057 +             profitloss=statvalue;
19058 +            %end;
19059 +            %else %do;
19060 +             %if &em_profitflag ne 0 %then %do;
19061 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19061!+;
19062 +                profitloss=ALTERNATIVE_PROFIT;
19063 +             %end;
19064 +             %if &em_lossflag ne 0 %then %do;
19065 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19066 +                profitloss=ALTERNATIVE_LOSS;
19067 +             %end;
19068 +            %end;
19069 +            output;
19070 +          end;
19071 +        %end;
19072 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19073 +          if strip(CATEGORY) = "&targetevent" then do;
19074 +            %if &validFlag eq N %then %do;
19075 +             profitloss=statvalue;
19076 +            %end;
19077 +            %else %do;
19078 +             %if &em_profitflag ne 0 %then %do;
19079 +                profitloss=ALTERNATIVE_PROFIT;
19080 +             %end;
19081 +             %if &em_lossflag ne 0 %then %do;
19082 +                profitloss=ALTERNATIVE_LOSS;
19083 +             %end;
19084 +            %end;
19085 +            output;
19086 +          end;
19087 +        %end;
19088 +      run;
19089 +    %end;
19091 +    data tempprob(keep= node probtext);
19092 +      length probtext $800;
19093 +      retain probtext;
19094 +      set tempprob ;
19095 +      by node;
19097 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19098 +      %let probtype = &EM_PROPERTY_TARGET;
19099 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19100 +        %let probtype = ALL;
19101 +      %end;
19103 +      %if "&probtype" eq "ALL" %then %do;
19104 +        if first.node then do;
19105 +          %if &validFlag eq N %then %do;
19106 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19107 +          %end;
19108 +          %else %do;
19109 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19110 +          %end;
19111 +        end;
19112 +        else if last.node then do;
19113 +          %if &validFlag eq N %then %do;
19114 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19115 +          %end;
19116 +          %else %do;
19117 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19118 +          %end;
19119 +          output;
19120 +        end;
19121 +        else do;
19122 +          %if &validFlag eq N %then %do;
19123 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19124 +          %end;
19125 +          %else %do;
19126 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19127 +          %end;
19128 +        end;
19129 +      %end;
19130 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19131 +        if strip(CATEGORY) = "&targetevent" then do;
19132 +          %if &validFlag eq N %then %do;
19133 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19134 +          %end;
19135 +          %else %do;
19136 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19137 +          %end;
19138 +          output;
19139 +        end;
19140 +      %end;
19141 +      %else %if "&probtype" eq "NONE" %then %do;
19142 +        if last.node then do;
19143 +          output;
19144 +        end;
19145 +      %end;
19146 +    run;
19147 +  %end;
19149 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19151 +  %let oldexists=0;
19152 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19153 +     data old_tree_plot;
19154 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19155 +        rename nodecolor=oldnodecolor;
19156 +     run;
19158 +     proc sort data=old_tree_plot;
19159 +        by node;
19160 +     run;
19162 +     %let oldexists=1;
19163 +  %end;
19165 +  data &EM_USER_TREE_PLOT;
19166 +    length textall $800;
19167 +    merge tempoutnodes temptargetused
19169 +    %if &em_intTarget eq Y %then %do;
19170 +      tempinterval
19171 +    %end;
19173 +    %if &em_classTarget eq Y %then %do;
19175 +      %if &validFlag eq N %then %do;
19176 +        tempn(rename=(statvalue=N))
19177 +      %end;
19178 +      %else %do;
19179 +        tempn
19180 +      %end;
19182 +      temppredict tempprob
19184 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19185 +        tempprofittext
19186 +      %end;
19187 +    %end;
19188 +    ;
19189 +    by node;
19191 +    /* build nodetext based on user selection */
19192 +    textall="";
19194 +    %if &em_intTarget eq Y %then %do;
19195 +    if tarlevel="INTERVAL" then do;
19196 +      /* Nodeid */
19197 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19198 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19199 +      %end;
19201 +      /* Target identifier if multiple targets are used */
19202 +      %if "&multipleTar" eq "Y" %then %do;
19203 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19204 +      %end;
19206 +      %if &validFlag eq Y %then %do;
19207 +         /* Column labels displayed in validflag eq Y only */
19208 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19209 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19209!+noquote ))";
19210 +         %end;
19212 +         /* Average values */
19213 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19214 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19215 +         %end;
19217 +         /* RASE */
19218 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19219 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19220 +         %end;
19222 +         /* Count */
19223 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19224 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19225 +         %end;
19226 +      %end;
19227 +      %else %do;
19228 +         /* Average values */
19229 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19230 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19231 +         %end;
19233 +         /* RASE */
19234 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19235 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19236 +         %end;
19238 +         /* Count */
19239 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19240 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19241 +         %end;
19242 +      %end;
19244 +      /* nodecolor */
19245 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19246 +        nodecolor=PREDICTION;
19247 +      %end;
19248 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19249 +        nodecolor=RASE;
19250 +      %end;
19251 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19252 +        nodecolor=1;
19253 +      %end;
19255 +    end;
19256 +    %end;
19257 +    %if &em_classTarget eq Y %then %do;
19258 +    if tarlevel^="INTERVAL" then  do;
19260 +      /* Nodeid */
19261 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19262 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19263 +      %end;
19264 +      /* Target identifier if multiple targets are used */
19265 +      %if "&multipleTar" eq "Y" %then %do;
19266 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19267 +      %end;
19269 +      /* Predicted values */
19270 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19271 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19272 +      %end;
19274 +      /* Column labels displayed in validflag eq Y only */
19275 +      %if "&ValidFlag" eq "Y" %then %do;
19276 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19277 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19277!+noquote ))";
19278 +        %end;
19279 +      %end;
19281 +      /* Target Values */
19282 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19283 +        textall=strip(textall)||"0A"x||strip(probtext);
19284 +      %end;
19286 +      /* include profit or loss for all target levels */
19287 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19288 +        textall=strip(textall)||"0A"x||strip(profittext);
19289 +      %end;
19291 +      %if &validFlag eq N %then %do;
19292 +        /* Percent Correct */
19293 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19294 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19295 +        %end;
19297 +         /* Count */
19298 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19299 +          %if "&adjusted" eq "N" %then %do;
19300 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19301 +          %end;
19302 +          %else %do;
19303 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19304 +          %end;
19305 +         %end;
19306 +      %end;
19307 +      %else %do;
19308 +        /* Percent Correct */
19309 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19310 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19311 +        %end;
19313 +         /* Count */
19314 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19315 +          %if "&adjusted" eq "N" %then %do;
19316 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19317 +          %end;
19318 +          %else %do;
19319 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19320 +          %end;
19321 +         %end;
19322 +      %end;
19324 +      /* nodecolor */
19325 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19326 +       %if &multipleTar ne Y %then %do;
19327 +        nodecolor=&predTarget;
19328 +       %end;
19329 +       %else %do;
19330 +         nodecolor=percentcorrect;
19331 +       %end;
19332 +      %end;
19333 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19334 +        nodecolor=percentcorrect;
19335 +      %end;
19336 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19337 +        nodecolor=1;
19338 +      %end;
19339 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19340 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19341 +          nodecolor=percentcorrect;
19342 +        %end;
19343 +        %else %do;
19344 +          nodecolor=profitloss;
19345 +        %end;
19346 +      %end;
19348 +    end;
19349 +    %end;
19350 +    %if &em_intTarget eq Y %then %do;
19351 +     drop  PREDICTION  TARGET TARLEVEL
19352 +     %if &ValidFlag eq Y %then %do;
19353 +         VPREDICTION
19354 +     %end;
19355 +     ;
19356 +    %end;
19357 +    %if &em_classTarget eq Y %then %do;
19358 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19359 +     %if &ValidFlag eq Y %then %do;
19360 +         VSTATVALUE
19361 +     %end;
19362 +     ;
19363 +    %end;
19365 +  run;
19367 +  /* add leaf index information to plotds - based on primary target only*/
19368 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19369 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19370 +      set &EM_USER_OUTSTATS;
19371 +      if ((statname="PROBABILITY"
19372 +      %if &validexist %then %do;
19373 +       or statname="VALID: PROBABILITY"
19374 +      %end;
19375 +      ) AND (CATEGORY="&TARGETEVENT")
19376 +      %if "&multipleTar" eq "Y" %then %do;
19377 +        AND (Target="%EM_TARGET")
19378 +      %end;
19379 +      );
19380 +    run;
19382 +    %if &validexist %then %do;
19383 +      proc sort data=tempprob; by node; run;
19384 +      %let vpredTarget = V%substr(&predTarget, 2);
19385 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19386 +         by node;
19387 +         id statname;
19388 +      run;
19389 +    %end;
19390 +  %end;
19391 +  %else %do;
19392 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19393 +      set &EM_USER_OUTSTATS;
19394 +      if ((statname="PREDICTION"
19395 +      %if &validexist %then %do;
19396 +       or statname="VALID: PREDICTION"
19397 +      %end;
19398 +      )
19399 +      %if "&multipleTar" eq "Y" %then %do;
19400 +        AND (Target="%EM_TARGET")
19401 +      %end;
19402 +      );
19403 +    run;
19404 +    %if &validexist %then %do;
19405 +      proc sort data=tempprob; by node; run;
19406 +      %let vpredTarget = V%substr(&predTarget, 2);
19407 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19408 +         by node;
19409 +         id statname;
19410 +      run;
19411 +    %end;
19412 +  %end;
19414 +  proc sort data=tempprob; by node; run;
19415 +  data tempoutnodes;
19416 +    merge tempoutnodes tempprob;
19417 +    by node;
19418 +  run;
19420 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19421 +  data tempnodes;
19422 +    retain traintotal validtotal;
19423 +    set tempnodes(where=(leaf ne . ));
19424 +    tprob=round(&predTarget, .01);
19425 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19426 +      percevent_train=round(tprob*100, .01);
19427 +    %end;
19428 +    %else %do;
19429 +      percevent_train=tprob;
19430 +    %end;
19432 +    perc_train=round((n/traintotal)*100, 0.01);
19433 +    /* leafwidth already has a *10 multiplier */
19434 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19436 +    %if &validexist %then %do;
19437 +      %let vpredTarget = V%substr(&predTarget,2);
19438 +      vprob=round(&vpredTarget, .01);
19439 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19440 +        percevent_valid=round(vprob*100, .01);
19441 +      %end;
19442 +      %else %do;
19443 +        percevent_valid=vprob;
19444 +      %end;
19445 +      perc_valid=round((vn/validtotal)*100, .01);
19446 +    %end;
19448 +    index=_N_;
19449 +    keep node index tprob perc_train percevent_train
19450 +    %if &validexist %then %do;
19451 +        vprob percevent_valid perc_valid
19452 +    %end;
19453 +    ;
19454 +  run;
19455 +  proc sort data=tempnodes; by node; run;
19456 +  data &EM_USER_TREE_PLOT;
19457 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19458 +    by node;
19459 +    if missing(node) then delete;
19460 +    %if &oldexists %then %do;
19461 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19462 +      drop oldnodecolor;
19463 +    %end;
19464 +    abovetext = compbl(abovetext);
19466 +    /* add variable labels */
19467 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19468 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19469 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19470 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19471 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19472 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19474 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19475 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19476 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19477 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19478 +          %end;
19479 +          %else %do;
19480 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19481 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19482 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19483 +          %end;
19484 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19486 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19487 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19488 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19489 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19490 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19491 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19492 +          %end;
19493 +          %else %do;
19494 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19495 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19496 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19497 +          %end;
19498 +    ;
19499 +  run;
19501 +  /* delete temporary tables */
19502 +  proc datasets lib=work nolist;
19503 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19504 +  run;
19506 +%mend em_tree_makePlotDs;
19510 +%macro em_tree_report;
19512 +   /* report properties */
19513 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19514 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19515 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19516 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19517 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19518 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19519 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19520 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19521 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19522 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19523 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19524 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19525 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19527 +   %let validexist=0;
19528 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19529 +     %let validexist=1;
19530 +   %end;
19532 +   /* determine if multiple targets will be processed */
19533 +   %let em_tree_multipleTargets=N;
19534 +   %let em_tree_numTarget=1;
19535 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19536 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19537 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19538 +         %let em_tree_multipleTargets=N;
19539 +      %end;
19540 +      %else %do;
19541 +        data _null_;
19542 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19543 +          if eof then
19544 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19545 +        run;
19547 +        %if &em_tree_numTarget gt 1 %then %do;
19548 +           %let em_tree_multipleTargets=Y;
19549 +        %end;
19550 +     %end;
19551 +   %end;
19553 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19555 +   /* variable importance */
19556 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19557 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19559 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19560 +     /* and the columns may not be generated                                                                                 */
19561 +     %let em_tree_cvexists=;
19562 +     %let em_tree_surrexists=.;
19563 +     data _null_;
19564 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19565 +       if eof then do ;
19566 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19567 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19568 +       end;
19569 +     run;
19571 +     data &EM_USER_OUTIMPORT;
19572 +         set &EM_USER_OUTIMPORT;
19573 +         /* format columns based on Precison value specified */
19574 +         format importance 15.&EM_PROPERTY_PRECISION
19575 +              %if &validexist %then %do;
19576 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19577 +              %end;
19578 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19579 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19580 +              %end;
19581 +         ;
19582 +     run;
19584 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19585 +     proc print data=&EM_USER_OUTIMPORT
19586 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19587 +          (where=((nrules>0) OR (nsurrogates>0)))
19588 +        %end;
19589 +        %else %do;
19590 +           (where=(nrules>0))
19591 +        %end;
19592 +        label noobs
19593 +        ;
19594 +     run;
19595 +     title10;
19597 +   %end;
19599 +   /* Sequence */
19600 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19601 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19602 +   data _null_ ;
19603 +      set &EM_USER_outseq (obs=2) end=eof ;
19604 +      if eof then do ;
19605 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19606 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19607 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19608 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19609 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19610 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19611 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19612 +      end;
19613 +    run;
19615 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19616 +      data &EM_USER_OUTSEQ;
19617 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19618 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19619 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19620 +           _XMISC_=_VMISC_
19621 +        %end;
19622 +        %if "&em_tree_aprof" ne "."  %then %do;
19623 +           _XAPROF_=_VAPROF_
19624 +           _XPROF_ = _VPROF_
19625 +        %end;
19626 +        %if "&em_tree_aloss" ne "."  %then %do;
19627 +           _XALOSS_=_VALOSS_
19628 +        %end;
19629 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19630 +           _XPASE_ = _VPASE_
19631 +           _XPMISC_ = _VPMISC_
19632 +        %end;
19634 +        ));
19635 +     %end;
19636 +     %else %do;
19637 +        set &EM_USER_OUTSEQ;
19638 +     %end;
19640 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19641 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19642 +            _MISC_   15.&EM_PROPERTY_PRECISION
19643 +         %end;
19644 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19645 +            _PASE_  15.&EM_PROPERTY_PRECISION
19646 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19647 +         %end;
19648 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19649 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19650 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19651 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19652 +            %end;
19653 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19654 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19655 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19656 +            %end;
19657 +         %end;
19658 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19659 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19660 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19661 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19662 +            %end;
19663 +         %end;
19664 +         %if "&em_tree_seq" ne "." %then %do;
19665 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19666 +         %end;
19667 +         %if "&em_tree_vseq" ne "." %then %do;
19668 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19669 +         %end;
19670 +         %if "&em_tree_aprof" ne "." %then %do;
19671 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19672 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19673 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19674 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19675 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19676 +           %end;
19677 +         %end;
19678 +         %else %if "&em_tree_aloss" ne "." %then %do;
19679 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19680 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19681 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19682 +           %end;
19683 +         %end;
19684 +      ;
19685 +    run;
19686 +   %end;
19688 +   /* Observation Based Importance */
19689 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19691 +      /* need to check for 0 obs */
19692 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19693 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19694 +      %let rc=%sysfunc(close(&dsid));
19696 +      %if &onobs %then %do;
19697 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19698 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19700 +         data &EM_USER_OUTOBSIMP;
19701 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19702 +           if _a;
19703 +           by _INPUT1_;
19704 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19705 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19706 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19707 +                   %end;
19708 +                   ;
19709 +         run;
19710 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19711 +      %end;
19712 +   %end;
19714 +  %end;
19716 +  /* create dataset to support tree diagram and icicle plot */
19717 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19718 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19720 +  /* display tree diagram */
19721 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19722 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19724 +  /* display icicle diagram */
19725 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19726 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19728 +  /* Leaf Statistics Plot */
19729 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19731 +  /* print leaf information to output window */
19732 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19734 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19735 +       by descending N;
19736 +     run;
19738 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19739 +     %local vn;
19740 +     data _null_;
19741 +       set t (obs=2) end=eof;
19742 +       if eof then do;
19743 +         call symput("vn", strip(put(vn, best.)));
19744 +       end;
19745 +     run;
19747 +     data t;
19748 +       set t;
19749 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19750 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19751 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19752 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19753 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19754 +       %end;
19755 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19756 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19757 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19758 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19759 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19760 +          %end;
19761 +       %end;
19762 +       ;
19763 +     run;
19765 +     /* determine if rase is found in t */
19766 +    %let dsid=%sysfunc(open(t,i));
19767 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19768 +    %let rc=%sysfunc(close(&dsid));
19770 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19771 +     proc print data=t noobs label;
19772 +       where tprob ne .;
19773 +       var node depth N tprob
19774 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19775 +         %if "&vn" ne "." %then %do;
19776 +           VN
19777 +         %end;
19778 +         vprob
19779 +       %end;
19780 +       %if &raseexists %then %do;
19781 +            RASE
19782 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19783 +              VRASE
19784 +            %end;
19785 +       %end;
19786 +       ;
19787 +     run;
19788 +     title10;
19789 +  %end;
19791 +  /* create plots that are done during training of node */
19792 +  /* display iterative plot, including reference line */
19793 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19794 +   /* %if &nleaves eq  %then %do; */
19795 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19796 +      data _null_;
19797 +        set &EM_USER_OUTTOPOLOGY end=eof;
19798 +        if eof then do;
19799 +          call symput('nleaves', LEAF);
19800 +        end;
19801 +      run;
19802 +   /* %end; */
19804 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19805 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19806 +  %end;
19808 +  /* display leaf statistics */
19809 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19811 +  /* stats by node if multiple targets = Y */
19812 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19813 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19814 +    data &EM_USER_OUTSTATS;
19815 +      set &EM_USER_OUTSTATS;
19817 +     * if STATNAME="TARGET" then delete;
19818 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19819 +      drop leaf;
19820 +    run;
19821 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19823 +  %end;
19824 +  %else %do;
19825 +    /* add outstats and outdescribe to spk but not results */
19826 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19827 +  %end;
19829 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 92 observations read from the data set EMWS4.TREE2_OUTIMPORT.
NOTE: The data set EMWS4.TREE2_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set EMWS4.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 21 observations read from the data set EMWS4.TREE2_OUTSEQ.
NOTE: The data set EMWS4.TREE2_OUTSEQ has 21 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 4 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 4 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set EMWS4.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 5 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 267 observations read from the data set EMWS4.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set EMWS4.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 5 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 0 observations read from the data set EMWS4.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS4.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 77 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 77 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 77 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 66 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 77 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 77 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 77 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 11 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 77 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 77 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 77 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 77 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 22 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 11 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 22 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 22 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 22 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 11 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: There were 22 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 22 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: There were 11 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 11 observations read from the data set WORK.TEMPN.
NOTE: There were 11 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 11 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 11 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      


NOTE: There were 77 observations read from the data set EMWS4.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 11 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 11 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 6 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: There were 6 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE2_TREE_PLOT has 11 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 11 observations read from the data set EMWS4.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 11 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 11 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 11 observations read from the data set EMWS4.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

19830  
19831  *------------------------------------------------------------*;
19832  * End REPORT: Tree2;
19833  *------------------------------------------------------------*;

19834  /* Reset EM Options */
19835  options formchar="|----|+|---+=|-/\<>*";
19836  options nocenter ls=256 ps=10000;
19837  goptions reset=all device=GIF NODISPLAY;

19838  proc sort data=WORK.EM_USER_REPORT;
19839  by ID VIEW;
19840  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19841  proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19842  by NAME;
19843  run;

NOTE: There were 99 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19844  proc sort data=EMWS4.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19845  by NAME;
19846  run;

NOTE: There were 99 observations read from the data set EMWS4.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19847  data WORK.ASSESS_META;
19848  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19849  by NAME;
19850  run;

NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19851  data EM_temp_assessMeta;
19852  set EMWS4.Tree2_CMeta_TRAIN;
19853  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19854  run;

NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19855  data EM_temp_assessdata;
19856  set EMWS4.Tree2_TRAIN(keep=
19857  F_RESPOND
19858  I_RESPOND
19859  P_RESPOND0
19860  P_RESPOND1
19861  Q_RESPOND0
19862  Q_RESPOND1
19863  R_RESPOND0
19864  R_RESPOND1
19865  U_RESPOND
19866  V_RESPOND0
19867  V_RESPOND1
19868  _WARN_
19869  RESPOND
19870  );
19871  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
















24156   data EM_temp_assessMeta;
24157   set EMWS4.Tree2_CMeta_TRAIN;
24158   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24159   run;

NOTE: There were 12 observations read from the data set EMWS4.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24160   data EM_temp_assessdata;
24161   set EMWS4.Tree2_VALIDATE(keep=
24162   F_RESPOND
24163   I_RESPOND
24164   P_RESPOND0
24165   P_RESPOND1
24166   Q_RESPOND0
24167   Q_RESPOND1
24168   R_RESPOND0
24169   R_RESPOND1
24170   U_RESPOND
24171   V_RESPOND0
24172   V_RESPOND1
24173   _WARN_
24174   RESPOND
24175   );
24176   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 16121 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS4.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
















28470   %let _cn = %sysfunc(getoption(CENTER));
28471   options nocenter;
28472   proc print data=EMWS4.Tree2_EMREPORTFIT noobs label;
28473   var STAT LABEL TRAIN
28474   VALIDATE
28475   ;
28476   by TARGET TARGETLABEL;
28477   title9 ' ';
28478   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28479   run;

NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28480   title10;
28481   options &_cn;

28482   proc sort data=EMWS4.Tree2_EMCLASSIFICATION nothreads;
28483   by DATAROLE TARGET TARGETLABEL;
28484   run;

NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

28485   %let _cn = %sysfunc(getoption(CENTER));
28486   options nocenter;
28487   proc print data=EMWS4.Tree2_EMCLASSIFICATION noobs label;
28488   var from into pct_row pct_col count percent
28489   ;
28490   by DATAROLE TARGET TARGETLABEL;
28491   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28492   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28493   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28494   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28495   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28496   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28497   where _TYPE_='PREDICTION';
28498   title9 ' ';
28499   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28500   run;

NOTE: There were 8 observations read from the data set EMWS4.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28501   title9;
28502   title10;
28503   options &_cn;

28504   %let _cn = %sysfunc(getoption(CENTER));
28505   options nocenter;
28506   data EMWS4.Tree2_EMEVENTREPORT;
28507   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28507 !  8;
28508   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28508 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28508 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28508 ! FALSEEVENT
28509   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28509 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28509 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28510      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28511   FALSEEVENT=0;
28512   FALSENEVENT=0;
28513   TRUEEVENT=0;
28514   TRUENEVENT=0;
28515   set EMWS4.Tree2_EMEVENTREPORT;
28516   run;

NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

28517   proc print data=EMWS4.Tree2_EMEVENTREPORT noobs label;
28518   title9 ' ';
28519   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28520   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28521   run;

NOTE: There were 2 observations read from the data set EMWS4.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28522   title10;
28523   options &_cn;

28524   proc datasets library=EMWS4 nolist;
28525   modify Tree2_EMRANK;
28526   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28527   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28528   run;

NOTE: MODIFY was successful for EMWS4.TREE2_EMRANK.DATA.
28529   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

28530   %let _cn = %sysfunc(getoption(CENTER));
28531   options nocenter;
28532   proc print data=EMWS4.Tree2_EMRANK label noobs;
28533   var
28534   decile gain lift liftc resp respc N _meanP_;
28535   by
28536   notsorted DATAROLE
28537   notsorted TARGET
28538   notsorted TARGETLABEL
28539   ;
28540   title9 ' ';
28541   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28542   run;

NOTE: There were 40 observations read from the data set EMWS4.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28543   title10;
28544   options &_cn;

28545   proc datasets library=EMWS4 nolist;
28546   modify Tree2_EMSCOREDIST;
28547   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28548   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28549   run;

NOTE: MODIFY was successful for EMWS4.TREE2_EMSCOREDIST.DATA.
28550   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

