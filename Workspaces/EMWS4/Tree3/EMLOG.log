*------------------------------------------------------------*
User:                hkatrag1
Date:                December 12, 2017
Time:                13:10:19
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 12, 2017
Time:                13:10:07
*------------------------------------------------------------*
14715  proc freq data=EMWS4.Tree3_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree3META;
14717  run;
 
NOTE: There were 99 observations read from the data set EMWS4.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.Tree3META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN
EMWS4.Part_TRAIN EMWS4.Part_TRAIN EMWS4 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14754  data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS4.IDS_RESPOND_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14769  title9 ' ';
14770  proc print data=WORK.Tree3_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14775  title10;
 
"No decisions defined for target "RESPOND"."
14776  proc print data = EMWS4.Ids_RESPOND_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;
 
NOTE: There were 7 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14783  title10;
 
14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15329  *------------------------------------------------------------*;
15330  * Tree3: Generation of macros and macro variables;
15331  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15332  *------------------------------------------------------------*;
 
15333  %let EMEXCEPTIONSTRING=;
15334  *------------------------------------------------------------*;
15335  * TRAIN: Tree3;
15336  *------------------------------------------------------------*;
15337  %let EM_ACTION = TRAIN;
15338  %let syscc = 0;
15339  %macro main;
15340
15341    %if %upcase(&EM_ACTION) = CREATE %then %do;
15342      filename temp catalog 'sashelp.emmodl.tree_create.source';
15343      %include temp;
15344      filename temp;
15345
15346      %em_tree_create;
15347    %end;
15348
15349     %else
15350     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15351
15352         filename temp catalog 'sashelp.emmodl.tree_train.source';
15353         %include temp;
15354         filename temp;
15355         %em_tree_train;
15356     %end;
15357
15358    %else
15359    %if %upcase(&EM_ACTION) = SCORE %then %do;
15360      filename temp catalog 'sashelp.emmodl.tree_score.source';
15361      %include temp;
15362      filename temp;
15363
15364      %em_tree_score;
15365
15366    %end;
15367
15368    %else
15369    %if %upcase(&EM_ACTION) = REPORT %then %do;
15370
15371         filename temp catalog 'sashelp.emmodl.tree_report.source';
15372         %include temp;
15373         filename temp;
15374
15375         %em_tree_report;
15376     %end;
15377
15378    %else
15379    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15380
15381         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15382         %include temp;
15383         filename temp;
15384         %EM_TREE_OPENTREEVIEWER;
15385
15386     %end;
15387
15388    %else
15389    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15390
15391         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15392         %include temp;
15393         filename temp;
15394         %EM_TREE_CLOSETREEVIEWER;
15395
15396     %end;
15397
15398
15399     %doendm:
15400  %mend main;
15401
15402  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15404 +%macro em_tree_train;
15406 +   %if &EM_IMPORT_DATA eq %then %do;
15407 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15408 +       %put &em_codebar;
15409 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15410 +       %put &errormsg;
15411 +       %put &em_codebar;
15412 +       %goto doendm;
15413 +   %end;
15414 +   %else
15415 +       %let EMEXCEPTIONSTRING =;
15417 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15418 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15419 +        %put &em_codebar;
15420 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15421 +        %put &errormsg;
15422 +        %put &em_codebar;
15423 +        %goto doendm;
15424 +   %end;
15426 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15427 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15428 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15429 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15430 +        %put &em_codebar;
15431 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15432 +        %put &errormsg;
15433 +        %put &em_codebar;
15434 +        %goto doendm;
15435 +   %end;
15437 +   /* Initialize property macro variables */
15438 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15439 +   %include temp;
15440 +   filename temp;
15442 +   %EM_SetProperties;
15444 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15445 +   %EM_GETNAME(key=EMTREE, type=DATA);
15446 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15447 +     /* if import eq Y and no importtable defined, throw an exception */
15448 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15449 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15450 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15451 +         %put &em_codebar;
15452 +         %put &errmsg;
15453 +         %put &em_codebar;
15454 +         %goto doendm;
15455 +      %end;
15456 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15457 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15458 +         %put &em_codebar;
15459 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15460 +         %put &errormsg;
15461 +         %put &em_codebar;
15462 +         %goto doendm;
15463 +      %end;
15464 +      %else %do;
15465 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15466 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15467 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15468 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15469 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15470 +         %let dsid = %sysfunc(close(&dsid));
15471 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15472 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15473 +            %put &em_codebar;
15474 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15475 +            %put &errormsg;
15476 +            %put &em_codebar;
15477 +            %goto doendm;
15478 +         %end;
15479 +      %end;
15480 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15481 +         proc delete data=&EM_USER_EMTREE;
15482 +         run;
15483 +      %end;
15484 +   %end;
15485 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15486 +      proc delete data=&EM_USER_EMTREE;
15487 +      run;
15488 +   %end;
15490 +   /* load tree macros */
15491 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15492 +   %include temp;
15493 +   filename temp;
15495 +   /* data sets */
15496 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15497 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15498 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15500 +   /* files */
15501 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15503 +   /* check actual num of target levels */
15504 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15505 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15506 +                              nLevel=_nTargetLevel );
15507 +      %if &_nTargetLevel  > 2 %then %do;
15508 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15509 +        %put &em_codebar;
15510 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15511 +        %put &errormsg;
15512 +        %put &em_codebar;
15513 +        %goto doendm;
15514 +      %end;
15515 +   %end;
15517 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15518 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15519 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15520 +        %let costflag=0;
15521 +        data _null_;
15522 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15523 +          if eof then call symput("costflag", _N_);
15524 +        run;
15525 +        %if &costflag gt 0 %then %do;
15526 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15527 +          %put &em_codebar;
15528 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15529 +          %put &errormsg;
15530 +          %put &em_codebar;
15531 +          %goto doendm;
15532 +       %end;
15533 +     %end;
15534 +   %end;
15536 +   /* determine if multiple targets will be processed */
15537 +   %let em_tree_multipleTargets=N;
15538 +   %let em_tree_numTarget = 1;
15539 +   %let em_tree_targetVars=;
15541 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15542 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15543 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15544 +         %let em_tree_multipleTargets=N;
15545 +      %end;
15546 +      %else %do;
15547 +         /* create macro array of targets  */
15548 +         data _null_;
15549 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15550 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15551 +           if eof then
15552 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15553 +        run;
15555 +        %if &em_tree_numTarget gt 1 %then %do;
15556 +           %let em_tree_multipleTargets=Y;
15557 +        %end;
15558 +      %end;
15559 +   %end;
15561 +   /* create view of only necessary variable for performance reasons */
15562 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15563 +   data &tempData / view=&tempData;
15564 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15565 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15566 +       %EM_TARGET
15567 +     %end;
15568 +     %else %do;
15569 +       %if &em_tree_numTarget ne 0 %then %do;
15570 +         %do i=1 %to &em_tree_numTarget;
15571 +            &&em_tree_targetVars&i
15572 +         %end;
15573 +       %end;
15574 +     %end;
15575 +     );
15576 +   run;
15578 +   /* run Tree procedure */
15579 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15581 +   /* Check return code and throw exception if error is detected */
15582 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15583 +   %if &syserr %then %do;
15584 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15585 +     %goto doendm;
15586 +   %end;
15588 +   /* add decision score code if multiple targets are processed */
15589 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15590 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15591 +   %end;
15593 +   /* create outfit dataset if multiple score statements have been executed */
15594 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15596 +   /* create English Rules */
15597 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15598 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15599 +       %em_tree_makeEnglishRules;
15601 +       /* English Rules */
15602 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15604 +     %end;
15605 +   filename x;
15607 +   %doendm:
15608 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15609 +%macro EM_SetProperties;
15611 +   /* train properties */
15612 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15654 +   /* properties for interactive sample */
15655 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15660 +   /* report properties */
15661 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15675 +   /* score properties */
15676 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15679 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15681 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15682 +  %global &nLevel;
15683 +  proc dmdb batch data=&indata
15684 +    classout=_tmp_dmdbout;
15685 +    class &target;
15686 +  run;
15687 +  data _tmp_dmdbout;
15688 +    set _tmp_dmdbout;
15689 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15690 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15691 +  run;
15692 +  data _null_;
15693 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15694 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15695 +    %let dsid = %sysfunc(close(&dsid));
15696 +     call symput("&nLevel", put(&_obs, Best12.));
15697 +  run;
15699 +  proc datasets lib=work nolist;
15700 +     delete _tmp_dmdbout;
15701 +  run;
15702 +  quit;
15703 +%Mend EM_CheckBinaryTargetLevel;
15706 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15708 +  /* determine the number of obs in training data */
15709 +  proc sql;
15710 +    reset noprint;
15711 +    select count(*) into :em_nobs from &indata;
15712 +  quit;
15714 +  /* determine the number of input variables */
15715 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15716 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15718 +  /* retrieve targetEvent from decmeta */
15719 +  %let targetEvent=;
15720 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15721 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15722 +      data _null_;
15723 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15724 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15725 +      run;
15726 +    %end;
15727 +  %end;
15729 +  /* create targetTable if multipleTar eq Y */
15730 +  data temptarget;
15731 +    set &EM_DATA_VARIABLESET;
15732 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15733 +  run;
15735 + /* data sets */
15736 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15737 + %EM_GETNAME(key=EMTREE,        type=DATA);
15738 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15739 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15740 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15741 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15742 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15743 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15744 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15745 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15747 + /* files */
15748 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15749 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15751 + /* turn on pmml if requested */
15752 + %let nnpmml=0;
15753 + %if %symexist(EM_PMML) %then %do;
15754 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15755 +       %let nnpmml=1;
15757 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15758 +%end;
15760 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15762 + %if &nnpmml or &numClassTarget %then %do;
15764 +       /* create dmdb needed for pmml generation */
15765 +       %let tree_maxlevel = 512;
15766 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15767 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15768 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15769 +         %end;
15770 +       %end;
15771 +       %if &tree_maxlevel gt 0 %then %do;
15772 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15773 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15774 +       %end;
15776 +       %let targetOrderString =;
15777 +       %let targetString = ;
15778 +       data _null_;
15779 +          length orderString nameString $10000;
15780 +          retain orderString nameString;
15781 +          set &em_data_variableset end=eof;
15782 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15783 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15784 +          %end;
15785 +          %else %do;
15786 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15787 +          %end;          select(order);
15788 +            when('')        order ='DESC';
15789 +            when('FMTASC')  order='ASCFMT';
15790 +            when('FMTDESC') order='DESFMT';
15791 +            otherwise;
15792 +          end;
15793 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15794 +          nameString = trim(nameString)!!' '!!trim(NAME);
15796 +          if eof then do;
15797 +             call symput('targetOrderString', trim(orderString));
15798 +             call symput('targetString', trim(nameString));
15799 +          end;
15800 +       run;
15802 +       %let arborkluge= "work._treeDMDB";
15804 +       proc dmdb batch data=&indata
15805 +       %if &nnpmml %then %do;
15806 +           PMML
15807 +       %end;
15808 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15811 +   %if &nnpmml %then %do;
15812 +        %if "%EM_ID" ne "" %then %do;
15813 +          id %EM_ID;
15814 +        %end;
15815 +        %if &EM_NUM_CLASS gt 0 %then %do;
15816 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15817 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15818 +               &targetOrderString;
15819 +        %end;
15820 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15821 +          var %EM_INTERVAL;
15822 +        %end;
15823 +        target &targetString %EM_INTERVAL_TARGET;
15824 +        %if "%EM_FREQ" ne "" %then %do;
15825 +          freq %EM_FREQ;
15826 +        %end;
15827 +  %end;
15828 +  %else %do;
15829 +      class  &targetOrderString;
15830 +      target &targetString %EM_INTERVAL_TARGET;
15831 +  %end;
15832 +       run;
15833 +       quit;
15835 +       proc datasets lib=work nolist;
15836 +          delete classout varout;
15837 +       run;
15838 +       quit;
15840 +    %end;
15841 + %end;
15843 + /* run Arbor procedure */
15844 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15845 +  proc arbor data=&INDATA
15847 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15848 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15849 +  %end;
15851 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15852 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15853 +  %end;
15855 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15856 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15857 +  %end;
15859 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15860 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15861 +  %end;
15863 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15864 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15865 +  %end;
15867 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15868 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15869 +  %end;
15870 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15871 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15872 +  %end;
15873 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15874 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15875 +  %end;
15877 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15878 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15879 +      alpha = &EM_PROPERTY_SIGLEVEL
15880 +    %end;
15881 +  %end;
15883 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15884 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15885 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15886 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15887 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15889 +        padjust =
15890 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15891 +          &chaid
15892 +        %end;
15893 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15894 +          DEPTH
15895 +        %end;
15896 +      %end;
15897 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15898 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15899 +         pvars = &num_inputs
15900 +      %end;
15901 +    %end;
15902 +  %end;
15903 +  %else %do;
15904 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15905 +         padjust = NONE
15906 +      %end;
15907 +  %end;
15909 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15910 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15911 +    Maxrules = &num_nrules
15912 +  %end;
15914 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15915 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15916 +    Maxsurrs = &num_nsurrs
15917 +  %end;
15919 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15920 +     Missing=&EM_PROPERTY_MISSINGVALUE
15921 +  %end;
15923 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15924 +     USEVARONCE
15925 +  %end;
15927 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15928 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15929 +  %end;
15932 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15933 +    event = "&targetEvent"
15934 +  %end;
15936 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15937 +     DECSEARCH
15938 +  %end;
15940 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15941 +     PRIORSSEARCH
15942 +  %end;
15944 +  %if &arbor_1 ne %then %do;
15945 +    &arbor_1
15946 +  %end;
15948 +  %if &em_arbor ne %then %do;
15949 +     &em_arbor
15950 +  %end;
15951 +  ;
15952 + %end;
15953 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15954 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15955 +       interact;
15956 + %end;
15957 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15958 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15959 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15960 +    %put &em_codebar;
15961 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15962 +    %put &errormsg;
15963 +    %put &em_codebar;
15964 +    %goto doendm;
15965 +   %end;
15966 +   %else %do;
15967 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15968 +       interact;
15969 +   %end;
15970 + %end;
15972 + %else %do;
15973 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15974 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15975 +    %put &em_codebar;
15976 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15977 +    %put &errormsg;
15978 +    %put &em_codebar;
15979 +    %goto doendm;
15980 +   %end;
15981 +   %else %do;
15982 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15983 +        interact;
15984 +   %end;
15985 + %end;
15987 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15988 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15989 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15990 +    %end;
15992 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15993 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15994 +    %end;
15996 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15997 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15998 +    %end;
16000 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16001 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16002 +    %end;
16004 +    %if "%EM_FREQ" ne "" %then %do;
16005 +       freq %EM_FREQ;
16006 +    %end;
16008 +    %if "&multipleTar" eq "Y" %then %do;
16009 +       /* cycle through all target vars in variableset */
16010 +       %let tdsid = %sysfunc(open(temptarget));
16011 +       %if &tdsid %then %do;
16012 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16013 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16014 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16015 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16016 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16017 +             target &var / level = &lvl
16018 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16019 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16020 +             %end;
16021 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16022 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16023 +             %end;
16024 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16025 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16026 +             %end;
16027 +          %end;
16028 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16029 +       %end;
16030 +       useTarget variable = %EM_TARGET;
16031 +    %end;
16032 +    %else %do;
16033 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16034 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16035 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16036 +      %end;
16037 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16038 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16039 +      %end;
16040 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16041 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16042 +      %end;
16043 +    %end;
16045 +    %if "&multipleTar" eq "N" %then %do;
16046 +      &EM_DEC_STATEMENT;
16047 +    %end;
16049 +    Performance &EM_PROPERTY_PERFORMANCE
16050 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16051 +      nodesize=&EM_PROPERTY_NODESAMPLE
16052 +    %end;
16053 +    ;
16055 +    %if "&intFlag" eq "Y" %then %do;
16056 +       INTERACT Largest;
16057 +       Train maxnewdepth=0;
16058 +    %end;
16060 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16061 +         Assess
16062 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16063 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16064 +              %put &em_codebar;
16065 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16066 +              %put &errormsg;
16067 +              %put &em_codebar;
16068 +            %end;
16069 +            %else %do;
16070 +               Validata=&EM_IMPORT_VALIDATE
16071 +            %end;
16072 +         %end;
16073 +         %else %do;
16074 +           NoValidata
16075 +         %end;
16076 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16077 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16078 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16079 +               %if &dsid %then %do;
16080 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16081 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16082 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16083 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16084 +                   %else %do;
16085 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16086 +                      %else %let measure= MISC;
16087 +                   %end;
16088 +                 %end;
16089 +               %end;
16090 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16091 +            %end;
16092 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16093 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16094 +                 %let measure=ASE;
16095 +              %end;
16096 +              %else %do;
16097 +                 %let measure=MISC;
16098 +              %end;
16099 +            %end;
16100 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16101 +              %let measure=ASE;
16102 +            %end;
16103 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16104 +               %let measure = LIFT;
16105 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16106 +               %if &dsid %then %do;
16107 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16108 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16109 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16110 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16111 +                 %end;
16112 +               %end;
16113 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16114 +            %end;
16115 +            measure=&measure
16116 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16117 +               event = "&targetEvent"
16118 +            %end;
16119 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16120 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16121 +            %end;
16122 +         %end;
16123 +         %if "&multipleTar" eq "N" %then %do;
16124 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16125 +               CV
16126 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16127 +                 CVNITer = &EM_PROPERTY_CVNITER
16128 +               %end;
16129 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16130 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16131 +               %end;
16132 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16133 +                 CVSeed = &EM_PROPERTY_CVSEED
16134 +               %end;
16135 +            %end;
16136 +         %end;
16137 +       %end;
16138 +      ;
16140 +      %if "&intFlag" ne "Y" %then %do;
16141 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16142 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16143 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16144 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16146 +          SUBTREE &subtree
16147 +          %if "&subtree" eq "NLEAVES" %then %do;
16148 +            =&EM_PROPERTY_NSUBTREE
16149 +          %end;
16150 +          ;
16151 +        %end;
16153 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16154 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16155 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16156 +          %end;
16157 +       %end;
16158 +      %end;
16159 + %end;
16162 + MakeMacro nleaves = nleaves;
16163 + save
16164 + %if "&EM_USER_EMTREE" ne "" %then %do;
16165 +   MODEL=&EM_USER_EMTREE
16166 + %end;
16167 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16168 +   SEQUENCE=&EM_USER_OUTSEQ
16169 + %end;
16170 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16171 +   IMPORTANCE=&EM_USER_OUTIMPORT
16172 + %end;
16173 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16174 +   NODESTAT=&EM_USER_OUTNODES
16175 + %end;
16176 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16177 +   SUMMARY=&EM_USER_OUTSUMMARY
16178 + %end;
16179 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16180 +   STATSBYNODE=&EM_USER_OUTSTATS
16181 + %end;
16182 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16183 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16184 + %end;
16185 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16186 +   Pathlistnonmissing=&EM_USER_OUTPATH
16187 + %end;
16188 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16189 +   RULES = &EM_USER_OUTRULES
16190 + %end;
16191 + ;
16193 + %if "&intFlag" ne "Y" %then %do;
16195 +   %let lookupString = ;
16196 +   %if ^%symexist(EM_OPTION) %then
16197 +      %let EM_OPTION=;
16199 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16200 +      %let lookupString = LOOKUP=SELECT;
16201 +   %end;
16203 +   %let codetext=;
16204 +   %let norescodetxt=;
16206 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16207 +     %let codetext=&codetext DUMMY;
16208 +     %let norescodetxt=&norescodetxt DUMMY;
16209 +   %end;
16210 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16211 +     %let codetext=&codetext NOLEAFID;
16212 +     %let norescodetxt=&norescodetxt NOLEAFID;
16213 +   %end;
16214 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16215 +     %let norescodetxt=&norescodetxt NOPRED;
16216 +   %end;
16218 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16219 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16221 +   %if &nnpmml %then %do;
16222 +     code pmml;
16223 +   %end;
16225 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16226 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16227 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16228 +   %end;
16229 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16230 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16231 +   %end;
16232 + %end;
16234 + run;
16235 + quit;
16237 + /*%em_checkerror(); */
16238 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16239 +   /* Delete DMDB catalog */
16240 +   proc datasets lib=work nolist;
16241 +       delete _treeDMDB / mt=cat;
16242 +  run;
16243 +  %end;
16245 + %if &nnpmml %then %do;
16246 +    ods pmml close;
16247 + %end;
16249 +  %doendm:
16251 +%mend em_tree_runTreeProcedure;
16253 +%macro em_tree_createFitStats( multipleTar= );
16256 +  /* create targetTable is multipleTar eq Y */
16257 +  data temptarget;
16258 +    set &EM_DATA_VARIABLESET;
16259 +    where ROLE="TARGET";
16260 +  run;
16262 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16263 +   data &EM_USER_EMOUTFIT;
16264 +     length target $32;
16265 +     merge work.fit_train
16266 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16267 +       work.fit_valid
16268 +     %end;
16269 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16270 +       work.fit_test
16271 +     %end;
16272 +     ;
16273 +     %if "&multipleTar" eq "N" %then %do;
16274 +       target="%EM_TARGET";
16275 +     %end;
16276 +     %else %do;
16277 +       target = _TARGET_;
16278 +     %end;
16279 +     drop _NW_ _SUMW_
16280 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16281 +        _VSUMW_
16282 +     %end;
16283 +     ;
16284 +   run;
16286 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16287 +     proc datasets library=work nolist;
16288 +       delete fit_valid;
16289 +     run;
16290 +   %end;
16291 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16292 +     proc datasets library=work nolist;
16293 +       delete fit_test;
16294 +     run;
16295 +   %end;
16297 +%mend em_tree_createFitStats;
16300 +%macro em_tree_makeEnglishRules;
16302 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16303 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16305 +  /* verify that necessary tables exist and if not, skip processing */
16306 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16307 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16308 +    %goto doendm;
16309 +  %end;
16310 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16311 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16312 +    %goto doendm;
16313 +  %end;
16315 +  /* determine length of variable in outpath dataset */
16316 +  %let vlength= ;
16317 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16318 +  %if &dsid ne %then %do;
16319 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16320 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16321 +  %end;
16322 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16324 +  data tempoutpath;
16325 +    length varname $&vlength;
16326 +    retain varname;
16327 +    set &EM_USER_OUTPATH;
16329 +    if ^missing(variable) then varname=variable;
16330 +    else if ^missing(var_name) then varname=var_name;
16331 +    output;
16332 +  run;
16334 +  /* create an array of generated predicted variable names */
16335 +  %let tree_pred_vars = ;
16336 +  %let tree_pred_label = ;
16337 +  %let numpred= 0;
16338 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16340 +    data _null_;
16341 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16342 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16343 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16344 +     if eof then
16345 +       call symput('numpred', strip(put(_N_, BEST.)));
16346 +    run;
16347 +  %end;
16349 +  /* determine if NPRIORS exists in outnodes  */
16350 +  %local nprior_flag;
16351 +  data _null_;
16352 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16353 +    if eof then do;
16354 +      call symput('nprior_flag', strip(put(npriors, best.)));
16355 +    end;
16356 +  run;
16358 +  proc sort data=tempoutpath; by node; run;
16359 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16361 +  data tempoutpath;
16362 +    merge tempoutpath(in=_a) outnodes(keep= node
16363 +    %if "&nprior_flag" ne "." %then %do;
16364 +      NPRIORS
16365 +    %end;
16366 +    %else %do;
16367 +      N
16368 +    %end;
16369 +    %if &numpred gt 0 %then %do;
16370 +      %do i=1 %to &numpred;
16371 +        &&tree_pred_vars&i
16372 +      %end;
16373 +    %end;
16374 +    );
16375 +    by node;
16376 +    if _a;
16377 +  run;
16379 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16381 +  data _null_;
16382 +    file x;
16383 +    set tempoutpath;
16384 +    by node descending varname;
16385 +    retain origvar oldnode string;
16386 +    length origvar $32 oldnode 8 string $200;
16388 +    if _N_ = 1 then do;
16389 +      origvar = varname;
16390 +      oldnode = node;
16391 +    end;
16393 +    if first.node then do;
16394 +       put "&EM_CODEBAR";
16395 +       put " Node = " node;
16396 +       put "&EM_CODEBAR";
16397 +    end;
16399 +      if first.varname then do;
16400 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16401 +            if MISSING(CHARACTER_VALUE) then do;
16402 +             if NUMERIC_VALUE ne .  then do;
16403 +              if ^first.node then do;
16404 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16405 +              end;
16406 +              else do;
16407 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16408 +              end;
16409 +             end;
16410 +            end;
16411 +            else do;
16412 +              if ^first.node then do;
16413 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16414 +              end;
16415 +              else do;
16416 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16417 +              end;
16418 +             end;
16419 +         end;
16420 +         else if RELATION in ("=") then do;
16421 +            if ^first.node then do;
16422 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16423 +            end;
16424 +            else do;
16425 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16426 +            end;
16427 +         end;
16428 +         else if RELATION in ("ISMISSING") then do;
16429 +            if ^first.node then do;
16430 +              string = " AND "|| strip(varname) || " equals Missing";
16431 +            end;
16432 +            else do;
16433 +              string = "if "|| strip(varname) ||" equals Missing";
16434 +            end;
16435 +         end;
16436 +         else if RELATION in ("ISNOTMISSING") then do;
16437 +            if ^first.node then do;
16438 +              string = " AND "|| strip(varname) || " equals All Values";
16439 +            end;
16440 +            else do;
16441 +              string = "if "|| strip(varname) ||" equals All Values";
16442 +            end;
16443 +         end;
16444 +         if ^missing(varname) then origvar = varname;
16445 +         oldnode=node;
16447 +      end;
16448 +      else do;
16449 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16450 +          if MISSING(CHARACTER_VALUE) then do;
16451 +           if  NUMERIC_VALUE ne .  then do;
16452 +            if ^MISSING(string) then
16453 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16454 +            else
16455 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16456 +           end;
16457 +          end;
16458 +          else do;
16459 +            if ^MISSING(string) then
16460 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16461 +            else
16462 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16463 +          end;
16465 +         end;
16466 +         else if RELATION in ("=") then do;
16467 +           string = strip(string)||", "||strip(character_value);
16468 +         end;
16469 +         else if RELATION in ("ISMISSING") then do;
16471 +         end;
16472 +         if ^missing(varname) then origvar = varname;
16473 +         oldnode=node;
16474 +      end;
16475 +      if last.varname then do;
16476 +         if RELATION in ("ISMISSING") then do;
16477 +           if ^first.varname then do;
16478 +             string = strip(string) || " or MISSING";
16479 +           end;
16480 +         end;
16481 +         put string;
16482 +         if ^missing(varname) then origvar = varname;
16483 +         oldnode=node;
16484 +      end;
16486 +      if last.node then do;
16487 +         put "then ";
16488 +         put " Tree Node Identifier   = " node;
16490 +         %if "&nprior_flag" ne "." %then %do;
16491 +           put " Number of Observations = " NPRIORS;
16492 +         %end;
16493 +         %else %do;
16494 +           put " Number of Observations = " N;
16495 +         %end;
16497 +         %if &numpred gt 0 %then %do;
16498 +           %do i=1 %to &numpred;
16499 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16500 +           %end;
16501 +         %end;
16503 +         put " ";
16504 +         if ^missing(varname) then origvar = varname;
16505 +         oldnode=node;
16506 +      end;
16508 +  run;
16510 +  proc datasets lib=work nolist;
16511 +    delete tempoutpath outnodes;
16512 +  run;
16514 +  %doendm:
16515 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS4.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.EM_TREE3.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: View EMWS4.EM_TREE3.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596690 kilobytes of physical memory.
NOTE: Will use 32235 out of 32235 training cases.
NOTE: Using memory pool with 1633961984 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 71834328 bytes of work memory.
NOTE: The subtree sequence contains 21 subtrees. The largest has 41 nodes and 21 leaves.
NOTE: Using subtree with 25 nodes and 13 leaves.
NOTE: Using subtree with 25 nodes and 13 leaves.
NOTE: Created macro variable NLEAVES equal to 13.
NOTE: The data set EMWS4.TREE3_OUTIMPORT has 92 observations and 6 variables.
NOTE: The data set EMWS4.TREE3_EMTREE has 2036 observations and 4 variables.
NOTE: The data set EMWS4.TREE3_OUTNODES has 25 observations and 24 variables.
NOTE: The data set EMWS4.TREE3_OUTPATH has 153 observations and 7 variables.
NOTE: The data set EMWS4.TREE3_OUTRULES has 434 observations and 6 variables.
NOTE: The data set EMWS4.TREE3_OUTSEQ has 21 observations and 20 variables.
NOTE: The data set EMWS4.TREE3_OUTSTATS has 175 observations and 5 variables.
NOTE: The data set EMWS4.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE3_OUTTOPOLOGY has 25 observations and 5 variables.
NOTE: External file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\TREEFLOW.sas opened.
NOTE: External file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\TREEPUBLISH.sas opened.
NOTE: View EMWS4.EM_TREE3.VIEW used (Total process time):
      real time           0.43 seconds
      cpu time            0.12 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS4.EM_TREE3.VIEW used (Total process time):
      real time           4.40 seconds
      cpu time            3.81 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           4.43 seconds
      cpu time            3.84 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS4.TREE3_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 153 observations read from the data set EMWS4.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 153 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 153 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 153 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS4.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 153 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 25 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 153 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 153 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 153 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=12Dec2017:13:10:17,
      Create Time=12Dec2017:13:10:17
 
NOTE: 175 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 73.
NOTE: There were 153 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16517
16518  *------------------------------------------------------------*;
16519  * End TRAIN: Tree3;
16520  *------------------------------------------------------------*;
 
16521  *------------------------------------------------------------*;
16522  * Close any missing semi colons;
16523  *------------------------------------------------------------*;
16524  ;
16525  ;
16526  ;
16527  ;
16528  quit;
16529  *------------------------------------------------------------*;
16530  * Close any unbalanced quotes;
16531  *------------------------------------------------------------*;
16532  /*; *"; *'; */
16533  ;
16534  run;
16535  quit;
16536  /* Reset EM Options */
16537  options formchar="|----|+|---+=|-/\<>*";
16538  options nocenter ls=256 ps=10000;
16539  goptions reset=all device=GIF NODISPLAY;
 
16540  proc sort data=WORK.EM_USER_REPORT;
16541  by ID VIEW;
16542  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 12, 2017
Time:                13:10:13
*------------------------------------------------------------*
16644  %let EMEXCEPTIONSTRING=;
16645  *------------------------------------------------------------*;
16646  * SCORE: Tree3;
16647  *------------------------------------------------------------*;
16648  %let EM_ACTION = SCORE;
16649  %let syscc = 0;
16650  %macro main;
16651
16652    %if %upcase(&EM_ACTION) = CREATE %then %do;
16653      filename temp catalog 'sashelp.emmodl.tree_create.source';
16654      %include temp;
16655      filename temp;
16656
16657      %em_tree_create;
16658    %end;
16659
16660     %else
16661     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16662
16663         filename temp catalog 'sashelp.emmodl.tree_train.source';
16664         %include temp;
16665         filename temp;
16666         %em_tree_train;
16667     %end;
16668
16669    %else
16670    %if %upcase(&EM_ACTION) = SCORE %then %do;
16671      filename temp catalog 'sashelp.emmodl.tree_score.source';
16672      %include temp;
16673      filename temp;
16674
16675      %em_tree_score;
16676
16677    %end;
16678
16679    %else
16680    %if %upcase(&EM_ACTION) = REPORT %then %do;
16681
16682         filename temp catalog 'sashelp.emmodl.tree_report.source';
16683         %include temp;
16684         filename temp;
16685
16686         %em_tree_report;
16687     %end;
16688
16689    %else
16690    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16691
16692         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16693         %include temp;
16694         filename temp;
16695         %EM_TREE_OPENTREEVIEWER;
16696
16697     %end;
16698
16699    %else
16700    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16701
16702         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16703         %include temp;
16704         filename temp;
16705         %EM_TREE_CLOSETREEVIEWER;
16706
16707     %end;
16708
16709
16710     %doendm:
16711  %mend main;
16712
16713  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16715 +%macro em_tree_score;
16717 +   /* determine if multiple targets will be processed */
16718 +   %let em_tree_multipleTargets=N;
16719 +   %let em_tree_numTarget=1;
16720 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16721 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16722 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16723 +         %let em_tree_multipleTargets=N;
16724 +      %end;
16725 +      %else %do;
16726 +         /* create macro array of targets  */
16727 +         data _null_;
16728 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16729 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16730 +           if eof then
16731 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16732 +        run;
16734 +        %if &em_tree_numTarget gt 1 %then %do;
16735 +           %let em_tree_multipleTargets=Y;
16736 +        %end;
16737 +      %end;
16738 +   %end;
16740 +   /* build flow and publish scoring code */
16741 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16742 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16744 +   filename treeflow "&EM_USER_TREEFLOW";
16745 +   filename treepub "&EM_USER_TREEPUBLISH";
16747 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16748 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16750 +   %em_copyfile(infref=treeflow, outfref=flowref);
16751 +   %em_copyfile(infref=treepub, outfref=pubref);
16753 +   filename treeflow;
16754 +   filename treepub;
16756 +   /* if priors are used, add code to generate unadjusted residuals in export */
16757 +   %let useAdjPriors = N;
16758 +   data _null_;
16759 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16760 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16761 +   run;
16762 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16763 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16764 +      %include temp;
16765 +      filename temp;
16767 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16768 +      filename adjref "&EM_USER_adjResidualCode";
16769 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16771 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16773 +      filename adjref;
16774 +   %end;
16776 +   /* LEAF */
16777 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16778 +      data _null_;
16779 +        file flowref mod;
16780 +        put 'drop _LEAF_;';
16781 +      run;
16783 +      data _null_;
16784 +        file pubref mod;
16785 +        put 'drop _LEAF_;';
16786 +      run;
16788 +   %end;
16790 +   filename flowref;
16791 +   filename pubref;
16793 +   /* em_metachange code */
16794 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16795 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16796 +   %end;
16798 +   /* variable selection based on importance stat    */
16799 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16800 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16801 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16802 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16803 +     %let obs = %sysfunc(fetch(&dsid));
16804 +     %do %while(&obs=0);
16805 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16806 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16807 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16808 +       %let obs = %sysfunc(fetch(&dsid));
16809 +     %end;
16810 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16811 +   %end;
16813 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16814 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16815 +    %let tree_pred_vars = ;
16816 +    %let tree_pred_lvl =;
16817 +    %let numpred= 0;
16819 +    data _null_;
16820 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16821 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16822 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16823 +     if eof then
16824 +       call symput('numpred', strip(put(_N_, BEST.)));
16825 +    run;
16826 +   %end;
16828 +   %if &numpred ne 0 %then %do;
16829 +    %do i=1 %to &numpred;
16830 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16831 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16832 +    %end;
16833 +   %end;
16835 +   /* determine if multiple targets will be processed */
16836 +   %let em_tree_multipleTargets=N;
16837 +   %let em_tree_numTarget=1;
16838 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16839 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16840 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16841 +         %let em_tree_multipleTargets=N;
16842 +      %end;
16843 +      %else %do;
16844 +        data _null_;
16845 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16846 +          if eof then
16847 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16848 +        run;
16850 +        %if &em_tree_numTarget gt 1 %then %do;
16851 +           %let em_tree_multipleTargets=Y;
16852 +        %end;
16853 +     %end;
16854 +   %end;
16856 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16857 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16859 +      /* variable importance */
16860 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16861 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16863 +         %let validexist=0;
16864 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16865 +           %let validexist=1;
16866 +         %end;
16868 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16869 +         /* and the columns may not be generated                                                                                 */
16870 +         %let em_tree_cvexists=;
16871 +         %let em_tree_surrexists=.;
16872 +         data _null_;
16873 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16874 +            if eof then do ;
16875 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16876 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16877 +            end;
16878 +         run;
16880 +         data &EM_USER_OUTIMPORT;
16881 +            set &EM_USER_OUTIMPORT;
16883 +            /* format columns based on Precison value specified */
16884 +            format importance 15.&EM_PROPERTY_PRECISION
16885 +                 %if &validexist %then %do;
16886 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16887 +                 %end;
16888 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16889 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16890 +                 %end;
16891 +            ;
16892 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16893 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16894 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16895 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16896 +                 %if "&em_tree_surrexists" ne "" %then %do;
16897 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16898 +                 %end;
16899 +                 %if &validexist %then %do;
16900 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16901 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16902 +                 %end;
16903 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16904 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16905 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16906 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16907 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16908 +                 %end;
16909 +            ;
16910 +         run;
16912 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16913 +      %end;
16914 +   %end;
16916 +   %doendm:
16917 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2017:13:10:17,
      Create Time=12Dec2017:13:10:17
 
NOTE: 245 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2017:13:10:17,
      Create Time=12Dec2017:13:10:17
 
NOTE: 223 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9226,
      Last Modified=12Dec2017:13:10:17,
      Create Time=12Dec2017:13:10:17
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8597,
      Last Modified=12Dec2017:13:10:17,
      Create Time=12Dec2017:13:10:17
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 34 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 35 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 36 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 36 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 37 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 37 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 38 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 39 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 40 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 40 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 41 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 41 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 42 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 43 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 43 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 44 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 44 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 45 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 45 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 46 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 47 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 48 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 49 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 50 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 51 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 51 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 52 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 53 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 53 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 54 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 55 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 55 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 56 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 56 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 57 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 57 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 58 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 58 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 59 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 59 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 60 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 61 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 61 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 62 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 63 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 63 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 64 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 64 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 65 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 65 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 66 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 66 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 67 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 67 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 68 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 68 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 69 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 69 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 70 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 71 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 72 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 72 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 73 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 73 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 74 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 74 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 75 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 75 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 76 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 76 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 77 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 77 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 78 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 79 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 80 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 80 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 81 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 82 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 82 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 83 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 83 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 84 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 84 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 85 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 85 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 92 observations read from the data set EMWS4.TREE3_OUTIMPORT.
NOTE: The data set EMWS4.TREE3_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16918
16919  *------------------------------------------------------------*;
16920  * End SCORE: Tree3;
16921  *------------------------------------------------------------*;
 
16922  proc sort data=WORK.EM_METACHANGE;
16923  by key uname;
16924  run;
 
NOTE: There were 86 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 86 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16925  filename x "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\CDELTA_TRAIN.sas";
16926  data _null_;
16927  file x;
16928  put 'if upcase(NAME) = "BOTHPAYM" then do;';
16929  put 'ROLE = "REJECTED";';
16930  put 'end;';
16931  put 'else ';
16932  put 'if upcase(NAME) = "BUYPROP" then do;';
16933  put 'ROLE = "REJECTED";';
16934  put 'end;';
16935  put 'else ';
16936  put 'if upcase(NAME) = "CATALOGCNT" then do;';
16937  put 'ROLE = "REJECTED";';
16938  put 'end;';
16939  put 'else ';
16940  put 'if upcase(NAME) = "CCPAYM" then do;';
16941  put 'ROLE = "REJECTED";';
16942  put 'end;';
16943  put 'else ';
16944  put 'if upcase(NAME) = "DEPT01" then do;';
16945  put 'ROLE = "REJECTED";';
16946  put 'end;';
16947  put 'else ';
16948  put 'if upcase(NAME) = "DEPT02" then do;';
16949  put 'ROLE = "REJECTED";';
16950  put 'end;';
16951  put 'else ';
16952  put 'if upcase(NAME) = "DEPT03" then do;';
16953  put 'ROLE = "REJECTED";';
16954  put 'end;';
16955  put 'else ';
16956  put 'if upcase(NAME) = "DEPT05" then do;';
16957  put 'ROLE = "REJECTED";';
16958  put 'end;';
16959  put 'else ';
16960  put 'if upcase(NAME) = "DEPT06" then do;';
16961  put 'ROLE = "REJECTED";';
16962  put 'end;';
16963  put 'else ';
16964  put 'if upcase(NAME) = "DEPT07" then do;';
16965  put 'ROLE = "REJECTED";';
16966  put 'end;';
16967  put 'else ';
16968  put 'if upcase(NAME) = "DEPT08" then do;';
16969  put 'ROLE = "REJECTED";';
16970  put 'end;';
16971  put 'else ';
16972  put 'if upcase(NAME) = "DEPT09" then do;';
16973  put 'ROLE = "REJECTED";';
16974  put 'end;';
16975  put 'else ';
16976  put 'if upcase(NAME) = "DEPT10" then do;';
16977  put 'ROLE = "REJECTED";';
16978  put 'end;';
16979  put 'else ';
16980  put 'if upcase(NAME) = "DEPT11" then do;';
16981  put 'ROLE = "REJECTED";';
16982  put 'end;';
16983  put 'else ';
16984  put 'if upcase(NAME) = "DEPT12" then do;';
16985  put 'ROLE = "REJECTED";';
16986  put 'end;';
16987  put 'else ';
16988  put 'if upcase(NAME) = "DEPT13" then do;';
16989  put 'ROLE = "REJECTED";';
16990  put 'end;';
16991  put 'else ';
16992  put 'if upcase(NAME) = "DEPT14" then do;';
16993  put 'ROLE = "REJECTED";';
16994  put 'end;';
16995  put 'else ';
16996  put 'if upcase(NAME) = "DEPT15" then do;';
16997  put 'ROLE = "REJECTED";';
16998  put 'end;';
16999  put 'else ';
17000  put 'if upcase(NAME) = "DEPT16" then do;';
17001  put 'ROLE = "REJECTED";';
17002  put 'end;';
17003  put 'else ';
17004  put 'if upcase(NAME) = "DEPT17" then do;';
17005  put 'ROLE = "REJECTED";';
17006  put 'end;';
17007  put 'else ';
17008  put 'if upcase(NAME) = "DEPT18" then do;';
17009  put 'ROLE = "REJECTED";';
17010  put 'end;';
17011  put 'else ';
17012  put 'if upcase(NAME) = "DEPT19" then do;';
17013  put 'ROLE = "REJECTED";';
17014  put 'end;';
17015  put 'else ';
17016  put 'if upcase(NAME) = "DEPT20" then do;';
17017  put 'ROLE = "REJECTED";';
17018  put 'end;';
17019  put 'else ';
17020  put 'if upcase(NAME) = "DEPT21" then do;';
17021  put 'ROLE = "REJECTED";';
17022  put 'end;';
17023  put 'else ';
17024  put 'if upcase(NAME) = "DEPT22" then do;';
17025  put 'ROLE = "REJECTED";';
17026  put 'end;';
17027  put 'else ';
17028  put 'if upcase(NAME) = "DEPT23" then do;';
17029  put 'ROLE = "REJECTED";';
17030  put 'end;';
17031  put 'else ';
17032  put 'if upcase(NAME) = "DEPT24" then do;';
17033  put 'ROLE = "REJECTED";';
17034  put 'end;';
17035  put 'else ';
17036  put 'if upcase(NAME) = "DEPT26" then do;';
17037  put 'ROLE = "REJECTED";';
17038  put 'end;';
17039  put 'else ';
17040  put 'if upcase(NAME) = "DEPT27" then do;';
17041  put 'ROLE = "REJECTED";';
17042  put 'end;';
17043  put 'else ';
17044  put 'if upcase(NAME) = "DOLINDEA" then do;';
17045  put 'ROLE = "REJECTED";';
17046  put 'end;';
17047  put 'else ';
17048  put 'if upcase(NAME) = "DOLINDET" then do;';
17049  put 'ROLE = "REJECTED";';
17050  put 'end;';
17051  put 'else ';
17052  put 'if upcase(NAME) = "DOLLARQ01" then do;';
17053  put 'ROLE = "REJECTED";';
17054  put 'end;';
17055  put 'else ';
17056  put 'if upcase(NAME) = "DOLLARQ02" then do;';
17057  put 'ROLE = "REJECTED";';
17058  put 'end;';
17059  put 'else ';
17060  put 'if upcase(NAME) = "DOLLARQ03" then do;';
17061  put 'ROLE = "REJECTED";';
17062  put 'end;';
17063  put 'else ';
17064  put 'if upcase(NAME) = "DOLLARQ04" then do;';
17065  put 'ROLE = "REJECTED";';
17066  put 'end;';
17067  put 'else ';
17068  put 'if upcase(NAME) = "DOLLARQ05" then do;';
17069  put 'ROLE = "REJECTED";';
17070  put 'end;';
17071  put 'else ';
17072  put 'if upcase(NAME) = "DOLLARQ06" then do;';
17073  put 'ROLE = "REJECTED";';
17074  put 'end;';
17075  put 'else ';
17076  put 'if upcase(NAME) = "DOLLARQ07" then do;';
17077  put 'ROLE = "REJECTED";';
17078  put 'end;';
17079  put 'else ';
17080  put 'if upcase(NAME) = "DOLLARQ08" then do;';
17081  put 'ROLE = "REJECTED";';
17082  put 'end;';
17083  put 'else ';
17084  put 'if upcase(NAME) = "DOLLARQ09" then do;';
17085  put 'ROLE = "REJECTED";';
17086  put 'end;';
17087  put 'else ';
17088  put 'if upcase(NAME) = "DOLLARQ10" then do;';
17089  put 'ROLE = "REJECTED";';
17090  put 'end;';
17091  put 'else ';
17092  put 'if upcase(NAME) = "DOLLARQ11" then do;';
17093  put 'ROLE = "REJECTED";';
17094  put 'end;';
17095  put 'else ';
17096  put 'if upcase(NAME) = "DOLLARQ12" then do;';
17097  put 'ROLE = "REJECTED";';
17098  put 'end;';
17099  put 'else ';
17100  put 'if upcase(NAME) = "DOLLARQ13" then do;';
17101  put 'ROLE = "REJECTED";';
17102  put 'end;';
17103  put 'else ';
17104  put 'if upcase(NAME) = "DOLLARQ14" then do;';
17105  put 'ROLE = "REJECTED";';
17106  put 'end;';
17107  put 'else ';
17108  put 'if upcase(NAME) = "DOLLARQ15" then do;';
17109  put 'ROLE = "REJECTED";';
17110  put 'end;';
17111  put 'else ';
17112  put 'if upcase(NAME) = "DOLLARQ16" then do;';
17113  put 'ROLE = "REJECTED";';
17114  put 'end;';
17115  put 'else ';
17116  put 'if upcase(NAME) = "DOLLARQ17" then do;';
17117  put 'ROLE = "REJECTED";';
17118  put 'end;';
17119  put 'else ';
17120  put 'if upcase(NAME) = "DOLLARQ18" then do;';
17121  put 'ROLE = "REJECTED";';
17122  put 'end;';
17123  put 'else ';
17124  put 'if upcase(NAME) = "DOLLARQ19" then do;';
17125  put 'ROLE = "REJECTED";';
17126  put 'end;';
17127  put 'else ';
17128  put 'if upcase(NAME) = "DOLLARQ20" then do;';
17129  put 'ROLE = "REJECTED";';
17130  put 'end;';
17131  put 'else ';
17132  put 'if upcase(NAME) = "DOLLARQ21" then do;';
17133  put 'ROLE = "REJECTED";';
17134  put 'end;';
17135  put 'else ';
17136  put 'if upcase(NAME) = "DOLLARQ22" then do;';
17137  put 'ROLE = "REJECTED";';
17138  put 'end;';
17139  put 'else ';
17140  put 'if upcase(NAME) = "DOLNETDA" then do;';
17141  put 'ROLE = "REJECTED";';
17142  put 'end;';
17143  put 'else ';
17144  put 'if upcase(NAME) = "DTBUYLST" then do;';
17145  put 'ROLE = "REJECTED";';
17146  put 'end;';
17147  put 'else ';
17148  put 'if upcase(NAME) = "METHPAYM" then do;';
17149  put 'ROLE = "REJECTED";';
17150  put 'end;';
17151  put 'else ';
17152  put 'if upcase(NAME) = "MONLAST" then do;';
17153  put 'ROLE = "REJECTED";';
17154  put 'end;';
17155  put 'else ';
17156  put 'if upcase(NAME) = "PCPAYM" then do;';
17157  put 'ROLE = "REJECTED";';
17158  put 'end;';
17159  put 'else ';
17160  put 'if upcase(NAME) = "Q_RESPOND0" then do;';
17161  put 'ROLE = "ASSESS";';
17162  put 'end;';
17163  put 'else ';
17164  put 'if upcase(NAME) = "Q_RESPOND1" then do;';
17165  put 'ROLE = "ASSESS";';
17166  put 'end;';
17167  put 'else ';
17168  put 'if upcase(NAME) = "TENURE" then do;';
17169  put 'ROLE = "REJECTED";';
17170  put 'end;';
17171  put 'else ';
17172  put 'if upcase(NAME) = "TOTORDQ01" then do;';
17173  put 'ROLE = "REJECTED";';
17174  put 'end;';
17175  put 'else ';
17176  put 'if upcase(NAME) = "TOTORDQ02" then do;';
17177  put 'ROLE = "REJECTED";';
17178  put 'end;';
17179  put 'else ';
17180  put 'if upcase(NAME) = "TOTORDQ03" then do;';
17181  put 'ROLE = "REJECTED";';
17182  put 'end;';
17183  put 'else ';
17184  put 'if upcase(NAME) = "TOTORDQ04" then do;';
17185  put 'ROLE = "REJECTED";';
17186  put 'end;';
17187  put 'else ';
17188  put 'if upcase(NAME) = "TOTORDQ05" then do;';
17189  put 'ROLE = "REJECTED";';
17190  put 'end;';
17191  put 'else ';
17192  put 'if upcase(NAME) = "TOTORDQ06" then do;';
17193  put 'ROLE = "REJECTED";';
17194  put 'end;';
17195  put 'else ';
17196  put 'if upcase(NAME) = "TOTORDQ07" then do;';
17197  put 'ROLE = "REJECTED";';
17198  put 'end;';
17199  put 'else ';
17200  put 'if upcase(NAME) = "TOTORDQ08" then do;';
17201  put 'ROLE = "REJECTED";';
17202  put 'end;';
17203  put 'else ';
17204  put 'if upcase(NAME) = "TOTORDQ09" then do;';
17205  put 'ROLE = "REJECTED";';
17206  put 'end;';
17207  put 'else ';
17208  put 'if upcase(NAME) = "TOTORDQ10" then do;';
17209  put 'ROLE = "REJECTED";';
17210  put 'end;';
17211  put 'else ';
17212  put 'if upcase(NAME) = "TOTORDQ11" then do;';
17213  put 'ROLE = "REJECTED";';
17214  put 'end;';
17215  put 'else ';
17216  put 'if upcase(NAME) = "TOTORDQ12" then do;';
17217  put 'ROLE = "REJECTED";';
17218  put 'end;';
17219  put 'else ';
17220  put 'if upcase(NAME) = "TOTORDQ13" then do;';
17221  put 'ROLE = "REJECTED";';
17222  put 'end;';
17223  put 'else ';
17224  put 'if upcase(NAME) = "TOTORDQ14" then do;';
17225  put 'ROLE = "REJECTED";';
17226  put 'end;';
17227  put 'else ';
17228  put 'if upcase(NAME) = "TOTORDQ15" then do;';
17229  put 'ROLE = "REJECTED";';
17230  put 'end;';
17231  put 'else ';
17232  put 'if upcase(NAME) = "TOTORDQ16" then do;';
17233  put 'ROLE = "REJECTED";';
17234  put 'end;';
17235  put 'else ';
17236  put 'if upcase(NAME) = "TOTORDQ17" then do;';
17237  put 'ROLE = "REJECTED";';
17238  put 'end;';
17239  put 'else ';
17240  put 'if upcase(NAME) = "TOTORDQ18" then do;';
17241  put 'ROLE = "REJECTED";';
17242  put 'end;';
17243  put 'else ';
17244  put 'if upcase(NAME) = "TOTORDQ19" then do;';
17245  put 'ROLE = "REJECTED";';
17246  put 'end;';
17247  put 'else ';
17248  put 'if upcase(NAME) = "TOTORDQ20" then do;';
17249  put 'ROLE = "REJECTED";';
17250  put 'end;';
17251  put 'else ';
17252  put 'if upcase(NAME) = "TOTORDQ21" then do;';
17253  put 'ROLE = "REJECTED";';
17254  put 'end;';
17255  put 'else ';
17256  put 'if upcase(NAME) = "UNITSIDD" then do;';
17257  put 'ROLE = "REJECTED";';
17258  put 'end;';
17259  put 'else ';
17260  put 'if upcase(NAME) = "UNITSLAP" then do;';
17261  put 'ROLE = "REJECTED";';
17262  put 'end;';
17263  put 'else ';
17264  put 'if upcase(NAME) = "UNTLANPO" then do;';
17265  put 'ROLE = "REJECTED";';
17266  put 'end;';
17267  put 'else ';
17268  put 'if upcase(NAME) = "_NODE_" then do;';
17269  put 'ROLE = "SEGMENT";';
17270  put 'LEVEL = "NOMINAL";';
17271  put 'end;';
17272  run;
 
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12Dec2017:13:10:18,
      Create Time=12Dec2017:13:08:17
 
NOTE: 344 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 39.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17273  filename x;
NOTE: Fileref X has been deassigned.
 
17274  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMFLOWSCORE.sas";
17275  *------------------------------------------------------------*;
17276  * Tree3: Scoring DATA data;
17277  *------------------------------------------------------------*;
17278  data EMWS4.Tree3_TRAIN
17279  / view=EMWS4.Tree3_TRAIN
17280  ;
17281  set EMWS4.Part_TRAIN
17282  ;
17283  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMFLOWSCORE.sas.
17284 +****************************************************************;
17285 +******             DECISION TREE SCORING CODE             ******;
17286 +****************************************************************;
17287 +
17288 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17289 +LENGTH F_RESPOND  $   12;
17290 +LENGTH I_RESPOND  $   12;
17291 +LENGTH _WARN_  $    4;
17292 +
17293 +******              LABELS FOR NEW VARIABLES              ******;
17294 +label _NODE_ = 'Node' ;
17295 +label _LEAF_ = 'Leaf' ;
17296 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17297 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17298 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17299 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17300 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17301 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17302 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17303 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17304 +label F_RESPOND = 'From: RESPOND' ;
17305 +label I_RESPOND = 'Into: RESPOND' ;
17306 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17307 +label _WARN_ = 'Warnings' ;
17308 +
17309 +
17310 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17311 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17312 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17313 +
17314 +
17315 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17316 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17317 +
17318 +******             ASSIGN OBSERVATION TO NODE             ******;
17319 +IF  NOT MISSING(DTBUYORG ) AND
17320 +               17715.5 <= DTBUYORG  THEN DO;
17321 +  _NODE_  =                    3;
17322 +  _LEAF_  =                   13;
17323 +  P_RESPOND1  =                    1;
17324 +  P_RESPOND0  =                    0;
17325 +  Q_RESPOND1  =                    1;
17326 +  Q_RESPOND0  =                    0;
17327 +  V_RESPOND1  =                    1;
17328 +  V_RESPOND0  =                    0;
17329 +  I_RESPOND  = '1' ;
17330 +  U_RESPOND  =                    1;
17331 +  END;
17332 +ELSE DO;
17333 +  IF  NOT MISSING(DOLL24 ) AND
17334 +                 119.975 <= DOLL24  THEN DO;
17335 +    IF  NOT MISSING(DEPT25 ) AND
17336 +                      32.5 <= DEPT25  THEN DO;
17337 +      _NODE_  =                    9;
17338 +      _LEAF_  =                   12;
17339 +      P_RESPOND1  =      0.4390243902439;
17340 +      P_RESPOND0  =     0.56097560975609;
17341 +      Q_RESPOND1  =      0.4390243902439;
17342 +      Q_RESPOND0  =     0.56097560975609;
17343 +      V_RESPOND1  =      0.3076923076923;
17344 +      V_RESPOND0  =     0.69230769230769;
17345 +      I_RESPOND  = '0' ;
17346 +      U_RESPOND  =                    0;
17347 +      END;
17348 +    ELSE DO;
17349 +      IF  NOT MISSING(FREQPRCH ) AND
17350 +                         6.5 <= FREQPRCH  THEN DO;
17351 +        IF  NOT MISSING(TOTORDQ22 ) AND
17352 +                           2.5 <= TOTORDQ22  THEN DO;
17353 +          _NODE_  =                   27;
17354 +          _LEAF_  =                   11;
17355 +          P_RESPOND1  =     0.52380952380952;
17356 +          P_RESPOND0  =     0.47619047619047;
17357 +          Q_RESPOND1  =     0.52380952380952;
17358 +          Q_RESPOND0  =     0.47619047619047;
17359 +          V_RESPOND1  =     0.66666666666666;
17360 +          V_RESPOND0  =     0.33333333333333;
17361 +          I_RESPOND  = '1' ;
17362 +          U_RESPOND  =                    1;
17363 +          END;
17364 +        ELSE DO;
17365 +          IF  NOT MISSING(DOLL24 ) AND
17366 +                         293.525 <= DOLL24  THEN DO;
17367 +            _NODE_  =                   41;
17368 +            _LEAF_  =                   10;
17369 +            P_RESPOND1  =     0.23019801980198;
17370 +            P_RESPOND0  =     0.76980198019802;
17371 +            Q_RESPOND1  =     0.23019801980198;
17372 +            Q_RESPOND0  =     0.76980198019802;
17373 +            V_RESPOND1  =     0.20171673819742;
17374 +            V_RESPOND0  =     0.79828326180257;
17375 +            I_RESPOND  = '0' ;
17376 +            U_RESPOND  =                    0;
17377 +            END;
17378 +          ELSE DO;
17379 +            _NODE_  =                   40;
17380 +            _LEAF_  =                    9;
17381 +            P_RESPOND1  =     0.13790035587188;
17382 +            P_RESPOND0  =     0.86209964412811;
17383 +            Q_RESPOND1  =     0.13790035587188;
17384 +            Q_RESPOND0  =     0.86209964412811;
17385 +            V_RESPOND1  =     0.15535714285714;
17386 +            V_RESPOND0  =     0.84464285714285;
17387 +            I_RESPOND  = '0' ;
17388 +            U_RESPOND  =                    0;
17389 +            END;
17390 +          END;
17391 +        END;
17392 +      ELSE DO;
17393 +        _NODE_  =                   14;
17394 +        _LEAF_  =                    8;
17395 +        P_RESPOND1  =     0.09039548022598;
17396 +        P_RESPOND0  =     0.90960451977401;
17397 +        Q_RESPOND1  =     0.09039548022598;
17398 +        Q_RESPOND0  =     0.90960451977401;
17399 +        V_RESPOND1  =     0.07944389275074;
17400 +        V_RESPOND0  =     0.92055610724925;
17401 +        I_RESPOND  = '0' ;
17402 +        U_RESPOND  =                    0;
17403 +        END;
17404 +      END;
17405 +    END;
17406 +  ELSE DO;
17407 +    IF  NOT MISSING(DAYLAST ) AND
17408 +      DAYLAST  <                684.5 THEN DO;
17409 +      IF  NOT MISSING(ACTBUY ) AND
17410 +                         1.5 <= ACTBUY  THEN DO;
17411 +        IF  NOT MISSING(DEPT04 ) AND
17412 +                           8.5 <= DEPT04  THEN DO;
17413 +          _NODE_  =                   21;
17414 +          _LEAF_  =                    6;
17415 +          P_RESPOND1  =     0.22302158273381;
17416 +          P_RESPOND0  =     0.77697841726618;
17417 +          Q_RESPOND1  =     0.22302158273381;
17418 +          Q_RESPOND0  =     0.77697841726618;
17419 +          V_RESPOND1  =     0.16666666666666;
17420 +          V_RESPOND0  =     0.83333333333333;
17421 +          I_RESPOND  = '0' ;
17422 +          U_RESPOND  =                    0;
17423 +          END;
17424 +        ELSE DO;
17425 +          IF  NOT MISSING(ACTBUY ) AND
17426 +                             3.5 <= ACTBUY  THEN DO;
17427 +            _NODE_  =                   33;
17428 +            _LEAF_  =                    5;
17429 +            P_RESPOND1  =     0.13412228796844;
17430 +            P_RESPOND0  =     0.86587771203155;
17431 +            Q_RESPOND1  =     0.13412228796844;
17432 +            Q_RESPOND0  =     0.86587771203155;
17433 +            V_RESPOND1  =     0.14396887159533;
17434 +            V_RESPOND0  =     0.85603112840466;
17435 +            I_RESPOND  = '0' ;
17436 +            U_RESPOND  =                    0;
17437 +            END;
17438 +          ELSE DO;
17439 +            _NODE_  =                   32;
17440 +            _LEAF_  =                    4;
17441 +            P_RESPOND1  =     0.08362919132149;
17442 +            P_RESPOND0  =      0.9163708086785;
17443 +            Q_RESPOND1  =     0.08362919132149;
17444 +            Q_RESPOND0  =      0.9163708086785;
17445 +            V_RESPOND1  =     0.07595993322203;
17446 +            V_RESPOND0  =     0.92404006677796;
17447 +            I_RESPOND  = '0' ;
17448 +            U_RESPOND  =                    0;
17449 +            END;
17450 +          END;
17451 +        END;
17452 +      ELSE DO;
17453 +        IF  NOT MISSING(DOLNETDT ) AND
17454 +          DOLNETDT  <               52.675 THEN DO;
17455 +          _NODE_  =                   18;
17456 +          _LEAF_  =                    1;
17457 +          P_RESPOND1  =     0.03650231544538;
17458 +          P_RESPOND0  =     0.96349768455461;
17459 +          Q_RESPOND1  =     0.03650231544538;
17460 +          Q_RESPOND0  =     0.96349768455461;
17461 +          V_RESPOND1  =     0.04773996952767;
17462 +          V_RESPOND0  =     0.95226003047232;
17463 +          I_RESPOND  = '0' ;
17464 +          U_RESPOND  =                    0;
17465 +          END;
17466 +        ELSE DO;
17467 +          IF  NOT MISSING(DEPT25 ) AND
17468 +                             1.5 <= DEPT25  THEN DO;
17469 +            _NODE_  =                   31;
17470 +            _LEAF_  =                    3;
17471 +            P_RESPOND1  =     0.08140262993112;
17472 +            P_RESPOND0  =     0.91859737006887;
17473 +            Q_RESPOND1  =     0.08140262993112;
17474 +            Q_RESPOND0  =     0.91859737006887;
17475 +            V_RESPOND1  =     0.07115135834411;
17476 +            V_RESPOND0  =     0.92884864165588;
17477 +            I_RESPOND  = '0' ;
17478 +            U_RESPOND  =                    0;
17479 +            END;
17480 +          ELSE DO;
17481 +            _NODE_  =                   30;
17482 +            _LEAF_  =                    2;
17483 +            P_RESPOND1  =     0.05296145408962;
17484 +            P_RESPOND0  =     0.94703854591037;
17485 +            Q_RESPOND1  =     0.05296145408962;
17486 +            Q_RESPOND0  =     0.94703854591037;
17487 +            V_RESPOND1  =     0.05428747686613;
17488 +            V_RESPOND0  =     0.94571252313386;
17489 +            I_RESPOND  = '0' ;
17490 +            U_RESPOND  =                    0;
17491 +            END;
17492 +          END;
17493 +        END;
17494 +      END;
17495 +    ELSE DO;
17496 +      _NODE_  =                    7;
17497 +      _LEAF_  =                    7;
17498 +      P_RESPOND1  =      0.0343143025309;
17499 +      P_RESPOND0  =     0.96568569746909;
17500 +      Q_RESPOND1  =      0.0343143025309;
17501 +      Q_RESPOND0  =     0.96568569746909;
17502 +      V_RESPOND1  =     0.03600810778585;
17503 +      V_RESPOND0  =     0.96399189221414;
17504 +      I_RESPOND  = '0' ;
17505 +      U_RESPOND  =                    0;
17506 +      END;
17507 +    END;
17508 +  END;
17509 +
17510 +*****  RESIDUALS R_ *************;
17511 +IF  F_RESPOND  NE '1'
17512 +AND F_RESPOND  NE '0'  THEN DO;
17513 +        R_RESPOND1  = .;
17514 +        R_RESPOND0  = .;
17515 + END;
17516 + ELSE DO;
17517 +       R_RESPOND1  =  -P_RESPOND1 ;
17518 +       R_RESPOND0  =  -P_RESPOND0 ;
17519 +       SELECT( F_RESPOND  );
17520 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17521 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17522 +       END;
17523 + END;
17524 +
17525 +****************************************************************;
17526 +******          END OF DECISION TREE SCORING CODE         ******;
17527 +****************************************************************;
17528 +
17529 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17530  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17531  quit;
17532  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17533  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMFLOWSCORE.sas";
17534  *------------------------------------------------------------*;
17535  * Tree3: Scoring VALIDATE data;
17536  *------------------------------------------------------------*;
17537  data EMWS4.Tree3_VALIDATE
17538  / view=EMWS4.Tree3_VALIDATE
17539  ;
17540  set EMWS4.Part_VALIDATE
17541  ;
17542  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\Tree3\EMFLOWSCORE.sas.
17543 +****************************************************************;
17544 +******             DECISION TREE SCORING CODE             ******;
17545 +****************************************************************;
17546 +
17547 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17548 +LENGTH F_RESPOND  $   12;
17549 +LENGTH I_RESPOND  $   12;
17550 +LENGTH _WARN_  $    4;
17551 +
17552 +******              LABELS FOR NEW VARIABLES              ******;
17553 +label _NODE_ = 'Node' ;
17554 +label _LEAF_ = 'Leaf' ;
17555 +label P_RESPOND1 = 'Predicted: RESPOND=1' ;
17556 +label P_RESPOND0 = 'Predicted: RESPOND=0' ;
17557 +label Q_RESPOND1 = 'Unadjusted P: RESPOND=1' ;
17558 +label Q_RESPOND0 = 'Unadjusted P: RESPOND=0' ;
17559 +label V_RESPOND1 = 'Validated: RESPOND=1' ;
17560 +label V_RESPOND0 = 'Validated: RESPOND=0' ;
17561 +label R_RESPOND1 = 'Residual: RESPOND=1' ;
17562 +label R_RESPOND0 = 'Residual: RESPOND=0' ;
17563 +label F_RESPOND = 'From: RESPOND' ;
17564 +label I_RESPOND = 'Into: RESPOND' ;
17565 +label U_RESPOND = 'Unnormalized Into: RESPOND' ;
17566 +label _WARN_ = 'Warnings' ;
17567 +
17568 +
17569 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17570 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17571 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17572 +
17573 +
17574 +_ARBFMT_12 = PUT( RESPOND , BEST12.);
17575 + %DMNORMCP( _ARBFMT_12, F_RESPOND );
17576 +
17577 +******             ASSIGN OBSERVATION TO NODE             ******;
17578 +IF  NOT MISSING(DTBUYORG ) AND
17579 +               17715.5 <= DTBUYORG  THEN DO;
17580 +  _NODE_  =                    3;
17581 +  _LEAF_  =                   13;
17582 +  P_RESPOND1  =                    1;
17583 +  P_RESPOND0  =                    0;
17584 +  Q_RESPOND1  =                    1;
17585 +  Q_RESPOND0  =                    0;
17586 +  V_RESPOND1  =                    1;
17587 +  V_RESPOND0  =                    0;
17588 +  I_RESPOND  = '1' ;
17589 +  U_RESPOND  =                    1;
17590 +  END;
17591 +ELSE DO;
17592 +  IF  NOT MISSING(DOLL24 ) AND
17593 +                 119.975 <= DOLL24  THEN DO;
17594 +    IF  NOT MISSING(DEPT25 ) AND
17595 +                      32.5 <= DEPT25  THEN DO;
17596 +      _NODE_  =                    9;
17597 +      _LEAF_  =                   12;
17598 +      P_RESPOND1  =      0.4390243902439;
17599 +      P_RESPOND0  =     0.56097560975609;
17600 +      Q_RESPOND1  =      0.4390243902439;
17601 +      Q_RESPOND0  =     0.56097560975609;
17602 +      V_RESPOND1  =      0.3076923076923;
17603 +      V_RESPOND0  =     0.69230769230769;
17604 +      I_RESPOND  = '0' ;
17605 +      U_RESPOND  =                    0;
17606 +      END;
17607 +    ELSE DO;
17608 +      IF  NOT MISSING(FREQPRCH ) AND
17609 +                         6.5 <= FREQPRCH  THEN DO;
17610 +        IF  NOT MISSING(TOTORDQ22 ) AND
17611 +                           2.5 <= TOTORDQ22  THEN DO;
17612 +          _NODE_  =                   27;
17613 +          _LEAF_  =                   11;
17614 +          P_RESPOND1  =     0.52380952380952;
17615 +          P_RESPOND0  =     0.47619047619047;
17616 +          Q_RESPOND1  =     0.52380952380952;
17617 +          Q_RESPOND0  =     0.47619047619047;
17618 +          V_RESPOND1  =     0.66666666666666;
17619 +          V_RESPOND0  =     0.33333333333333;
17620 +          I_RESPOND  = '1' ;
17621 +          U_RESPOND  =                    1;
17622 +          END;
17623 +        ELSE DO;
17624 +          IF  NOT MISSING(DOLL24 ) AND
17625 +                         293.525 <= DOLL24  THEN DO;
17626 +            _NODE_  =                   41;
17627 +            _LEAF_  =                   10;
17628 +            P_RESPOND1  =     0.23019801980198;
17629 +            P_RESPOND0  =     0.76980198019802;
17630 +            Q_RESPOND1  =     0.23019801980198;
17631 +            Q_RESPOND0  =     0.76980198019802;
17632 +            V_RESPOND1  =     0.20171673819742;
17633 +            V_RESPOND0  =     0.79828326180257;
17634 +            I_RESPOND  = '0' ;
17635 +            U_RESPOND  =                    0;
17636 +            END;
17637 +          ELSE DO;
17638 +            _NODE_  =                   40;
17639 +            _LEAF_  =                    9;
17640 +            P_RESPOND1  =     0.13790035587188;
17641 +            P_RESPOND0  =     0.86209964412811;
17642 +            Q_RESPOND1  =     0.13790035587188;
17643 +            Q_RESPOND0  =     0.86209964412811;
17644 +            V_RESPOND1  =     0.15535714285714;
17645 +            V_RESPOND0  =     0.84464285714285;
17646 +            I_RESPOND  = '0' ;
17647 +            U_RESPOND  =                    0;
17648 +            END;
17649 +          END;
17650 +        END;
17651 +      ELSE DO;
17652 +        _NODE_  =                   14;
17653 +        _LEAF_  =                    8;
17654 +        P_RESPOND1  =     0.09039548022598;
17655 +        P_RESPOND0  =     0.90960451977401;
17656 +        Q_RESPOND1  =     0.09039548022598;
17657 +        Q_RESPOND0  =     0.90960451977401;
17658 +        V_RESPOND1  =     0.07944389275074;
17659 +        V_RESPOND0  =     0.92055610724925;
17660 +        I_RESPOND  = '0' ;
17661 +        U_RESPOND  =                    0;
17662 +        END;
17663 +      END;
17664 +    END;
17665 +  ELSE DO;
17666 +    IF  NOT MISSING(DAYLAST ) AND
17667 +      DAYLAST  <                684.5 THEN DO;
17668 +      IF  NOT MISSING(ACTBUY ) AND
17669 +                         1.5 <= ACTBUY  THEN DO;
17670 +        IF  NOT MISSING(DEPT04 ) AND
17671 +                           8.5 <= DEPT04  THEN DO;
17672 +          _NODE_  =                   21;
17673 +          _LEAF_  =                    6;
17674 +          P_RESPOND1  =     0.22302158273381;
17675 +          P_RESPOND0  =     0.77697841726618;
17676 +          Q_RESPOND1  =     0.22302158273381;
17677 +          Q_RESPOND0  =     0.77697841726618;
17678 +          V_RESPOND1  =     0.16666666666666;
17679 +          V_RESPOND0  =     0.83333333333333;
17680 +          I_RESPOND  = '0' ;
17681 +          U_RESPOND  =                    0;
17682 +          END;
17683 +        ELSE DO;
17684 +          IF  NOT MISSING(ACTBUY ) AND
17685 +                             3.5 <= ACTBUY  THEN DO;
17686 +            _NODE_  =                   33;
17687 +            _LEAF_  =                    5;
17688 +            P_RESPOND1  =     0.13412228796844;
17689 +            P_RESPOND0  =     0.86587771203155;
17690 +            Q_RESPOND1  =     0.13412228796844;
17691 +            Q_RESPOND0  =     0.86587771203155;
17692 +            V_RESPOND1  =     0.14396887159533;
17693 +            V_RESPOND0  =     0.85603112840466;
17694 +            I_RESPOND  = '0' ;
17695 +            U_RESPOND  =                    0;
17696 +            END;
17697 +          ELSE DO;
17698 +            _NODE_  =                   32;
17699 +            _LEAF_  =                    4;
17700 +            P_RESPOND1  =     0.08362919132149;
17701 +            P_RESPOND0  =      0.9163708086785;
17702 +            Q_RESPOND1  =     0.08362919132149;
17703 +            Q_RESPOND0  =      0.9163708086785;
17704 +            V_RESPOND1  =     0.07595993322203;
17705 +            V_RESPOND0  =     0.92404006677796;
17706 +            I_RESPOND  = '0' ;
17707 +            U_RESPOND  =                    0;
17708 +            END;
17709 +          END;
17710 +        END;
17711 +      ELSE DO;
17712 +        IF  NOT MISSING(DOLNETDT ) AND
17713 +          DOLNETDT  <               52.675 THEN DO;
17714 +          _NODE_  =                   18;
17715 +          _LEAF_  =                    1;
17716 +          P_RESPOND1  =     0.03650231544538;
17717 +          P_RESPOND0  =     0.96349768455461;
17718 +          Q_RESPOND1  =     0.03650231544538;
17719 +          Q_RESPOND0  =     0.96349768455461;
17720 +          V_RESPOND1  =     0.04773996952767;
17721 +          V_RESPOND0  =     0.95226003047232;
17722 +          I_RESPOND  = '0' ;
17723 +          U_RESPOND  =                    0;
17724 +          END;
17725 +        ELSE DO;
17726 +          IF  NOT MISSING(DEPT25 ) AND
17727 +                             1.5 <= DEPT25  THEN DO;
17728 +            _NODE_  =                   31;
17729 +            _LEAF_  =                    3;
17730 +            P_RESPOND1  =     0.08140262993112;
17731 +            P_RESPOND0  =     0.91859737006887;
17732 +            Q_RESPOND1  =     0.08140262993112;
17733 +            Q_RESPOND0  =     0.91859737006887;
17734 +            V_RESPOND1  =     0.07115135834411;
17735 +            V_RESPOND0  =     0.92884864165588;
17736 +            I_RESPOND  = '0' ;
17737 +            U_RESPOND  =                    0;
17738 +            END;
17739 +          ELSE DO;
17740 +            _NODE_  =                   30;
17741 +            _LEAF_  =                    2;
17742 +            P_RESPOND1  =     0.05296145408962;
17743 +            P_RESPOND0  =     0.94703854591037;
17744 +            Q_RESPOND1  =     0.05296145408962;
17745 +            Q_RESPOND0  =     0.94703854591037;
17746 +            V_RESPOND1  =     0.05428747686613;
17747 +            V_RESPOND0  =     0.94571252313386;
17748 +            I_RESPOND  = '0' ;
17749 +            U_RESPOND  =                    0;
17750 +            END;
17751 +          END;
17752 +        END;
17753 +      END;
17754 +    ELSE DO;
17755 +      _NODE_  =                    7;
17756 +      _LEAF_  =                    7;
17757 +      P_RESPOND1  =      0.0343143025309;
17758 +      P_RESPOND0  =     0.96568569746909;
17759 +      Q_RESPOND1  =      0.0343143025309;
17760 +      Q_RESPOND0  =     0.96568569746909;
17761 +      V_RESPOND1  =     0.03600810778585;
17762 +      V_RESPOND0  =     0.96399189221414;
17763 +      I_RESPOND  = '0' ;
17764 +      U_RESPOND  =                    0;
17765 +      END;
17766 +    END;
17767 +  END;
17768 +
17769 +*****  RESIDUALS R_ *************;
17770 +IF  F_RESPOND  NE '1'
17771 +AND F_RESPOND  NE '0'  THEN DO;
17772 +        R_RESPOND1  = .;
17773 +        R_RESPOND0  = .;
17774 + END;
17775 + ELSE DO;
17776 +       R_RESPOND1  =  -P_RESPOND1 ;
17777 +       R_RESPOND0  =  -P_RESPOND0 ;
17778 +       SELECT( F_RESPOND  );
17779 +          WHEN( '1'  ) R_RESPOND1  = R_RESPOND1  +1;
17780 +          WHEN( '0'  ) R_RESPOND0  = R_RESPOND0  +1;
17781 +       END;
17782 + END;
17783 +
17784 +****************************************************************;
17785 +******          END OF DECISION TREE SCORING CODE         ******;
17786 +****************************************************************;
17787 +
17788 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17789  run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17790  quit;
17791  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS4.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17793  proc sort data=WORK.EM_USER_REPORT;
17794  by ID VIEW;
17795  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17796  *------------------------------------------------------------*;
17797  * Tree3: Computing metadata for TRAIN data;
17798  *------------------------------------------------------------*;
 
NOTE: View EMWS4.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18487  data EMWS4.Tree3_EMINFO;
18488  length TARGET KEY $32 DATA $43;
18489  input TARGET KEY DATA $;
18490  cards;
 
NOTE: The data set EMWS4.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
18494  run;
18495  proc sort data = EMWS4.Tree3_EMINFO NOTHREADS;
18496  by TARGET KEY;
18497  run;
 
NOTE: There were 3 observations read from the data set EMWS4.TREE3_EMINFO.
NOTE: The data set EMWS4.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18498  proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18499  by TARGET KEY;
18500  run;
 
NOTE: There were 3 observations read from the data set EMWS4.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18501  proc sort data = EMWS4.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18502  by TARGET KEY;
18503  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS4.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18504  data EMWS4.Tree3_EMINFO;
18505  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18506  by TARGET KEY;
18507  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS4.TREE3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18508  proc datasets lib=work nolist;
18509  delete TEMP_INFO SORTEDEMINFO;
18510  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18511  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                13:10:15
*------------------------------------------------------------*
18535  data EMWS4.Tree3_EMOUTFIT;
18536  set EMWS4.Tree3_EMOUTFIT;
18537  length TargetLabel $200;
18538  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18539  if upcase(TARGET) eq "RESPOND" then TargetLabel = 'response target';
18540  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE3_EMOUTFIT.
NOTE: The data set EMWS4.TREE3_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
18541  proc sort data=EMWS4.Tree3_EMREPORTFIT nothreads;
18542  by TARGET;
18543  run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE3_EMREPORTFIT.
NOTE: The data set EMWS4.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18544  %let _EMwarndup = 0;
18545  %let _EMtargetdup =;
18546  %let _EMASEtargetdup =;
18547  data _null_;
18548  set EMWS4.Tree3_EMOUTFIT;
18549  if .<_ASE_<0.000001 then do;
18550  call symput('_EMwarndup', '1');
18551  call symput('_EMtargetdup', target);
18552  call symput('_EMASEtargetdup', put(_ASE_, best.));
18553  end;
18554  run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18555  %let EMEXCEPTIONSTRING=;
18556  *------------------------------------------------------------*;
18557  * REPORT: Tree3;
18558  *------------------------------------------------------------*;
18559  %let EM_ACTION = REPORT;
18560  %let syscc = 0;
18561  %macro main;
18562
18563    %if %upcase(&EM_ACTION) = CREATE %then %do;
18564      filename temp catalog 'sashelp.emmodl.tree_create.source';
18565      %include temp;
18566      filename temp;
18567
18568      %em_tree_create;
18569    %end;
18570
18571     %else
18572     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18573
18574         filename temp catalog 'sashelp.emmodl.tree_train.source';
18575         %include temp;
18576         filename temp;
18577         %em_tree_train;
18578     %end;
18579
18580    %else
18581    %if %upcase(&EM_ACTION) = SCORE %then %do;
18582      filename temp catalog 'sashelp.emmodl.tree_score.source';
18583      %include temp;
18584      filename temp;
18585
18586      %em_tree_score;
18587
18588    %end;
18589
18590    %else
18591    %if %upcase(&EM_ACTION) = REPORT %then %do;
18592
18593         filename temp catalog 'sashelp.emmodl.tree_report.source';
18594         %include temp;
18595         filename temp;
18596
18597         %em_tree_report;
18598     %end;
18599
18600    %else
18601    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18602
18603         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18604         %include temp;
18605         filename temp;
18606         %EM_TREE_OPENTREEVIEWER;
18607
18608     %end;
18609
18610    %else
18611    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18612
18613         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18614         %include temp;
18615         filename temp;
18616         %EM_TREE_CLOSETREEVIEWER;
18617
18618     %end;
18619
18620
18621     %doendm:
18622  %mend main;
18623
18624  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18626 +%macro em_tree_makePlotDs( multipleTar= );
18628 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18629 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18630 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18631 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18633 +  /* determine if validation statistics will be displayed */
18634 +  %let validflag=N;
18635 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18636 +    /* determine if validation data exists */
18637 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18638 +      %let validflag=Y;
18639 +    %end;
18640 +  %end;
18642 +   /* retrieve name of decmeta even in presence of multiple targets */
18643 +   %let decmeta = ;
18644 +   %if &EM_DEC_DECMETA eq %then %do;
18645 +     data _Target;
18646 +       set &em_data_variableset;
18647 +       where ROLE='TARGET' and USE in('D', 'Y');
18648 +       keep NAME;
18649 +     run;
18650 +     proc sort data=_Target;
18651 +       by NAME;
18652 +     run;
18653 +     proc sort data=EM_TARGETDECINFO;
18654 +       by TARGET;
18655 +     run;
18656 +     data _Target;
18657 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18658 +       by NAME;
18659 +       if _a then do;
18660 +         call symput('decmeta', trim(DECMETA));
18661 +       end;
18662 +     run;
18663 +     proc delete data=_Target;run;
18664 +   %end;
18665 +   %else %let decmeta = &EM_DEC_DECMETA;
18668 +  /* retrieve targetEvent from decmeta */
18669 +  %let targetEvent=;
18670 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18671 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18672 +      data _null_;
18673 +       set &DECMETA(where=(_TYPE_="TARGET"));
18674 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18675 +      run;
18676 +    %end;
18677 +  %end;
18679 +  /* retrieve predicted var for targetEvent from decmeta */
18680 +  %let predTarget=;
18681 +  %let predLvl=;
18682 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18683 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18684 +      data _null_;
18685 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18686 +       call symput('predTarget', strip(VARIABLE));
18687 +       call symput('predLvl', strip(LEVEL));
18688 +      run;
18689 +    %end;
18690 +  %end;
18691 +  %else %do;
18692 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18693 +      data _null_;
18694 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18695 +       call symput('predTarget', strip(VARIABLE));
18696 +      run;
18697 +    %end;
18698 +  %end;
18700 +  /* create BelowText value */
18701 +  data belowtext;
18702 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18703 +    keep node belowtext;
18704 +  run;
18706 +  /* relace belowtext with variable label if it exists */
18707 +  data belowtext2;
18708 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18709 +    keep node belowtextlbl;
18710 +  run;
18712 +  proc sort data=belowtext; by node; run;
18713 +  proc sort data=belowtext2; by node; run;
18715 +  data belowtext;
18716 +    merge belowtext belowtext2(in=_a);
18717 +    by node;
18718 +    if _a then belowtext=belowtextlbl;
18719 +    keep node belowtext;
18720 +  run;
18722 +  /* create AboveText value */
18723 +  data abovetext;
18724 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18725 +  run;
18726 +  proc sort data=abovetext; by node numeric_value; run;
18728 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18729 +  data abovetext;
18730 +    set abovetext(rename=(node=parent));
18731 +    by parent numeric_value;
18732 +    retain abovetext tempstring flag branch origval origchar ;
18733 +    length abovetext $256;
18734 +    length tempstring origchar $64;
18736 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18737 +      if first.parent then do;
18738 +        if missing(character_value) then do;
18739 +          numeric_value = round(numeric_value, &sp_precision);
18740 +          abovetext = "< "||strip(NUMERIC_VALUE);
18741 +          branch = 1;
18742 +          origval = numeric_value;
18743 +          output;
18744 +        end;
18745 +        else do;
18746 +          abovetext = "< "||strip(CHARACTER_VALUE);
18747 +          branch = 1;
18748 +          origchar = character_value;
18749 +          output;
18750 +        end;
18752 +        if first.parent AND last.parent then do;
18753 +          if missing(character_value) then do;
18754 +            numeric_value = round(numeric_value, &sp_precision);
18755 +            branch = branch + 1;
18756 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18757 +            output;
18758 +          end;
18759 +          else do;
18760 +            branch = branch + 1;
18761 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18762 +            output;
18763 +          end;
18764 +        end;
18765 +      end;
18766 +      else if last.parent then do;
18767 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18768 +          if missing(character_value) then do;
18769 +            numeric_value = round(numeric_value, &sp_precision);
18770 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18771 +          end;
18772 +          else do;
18773 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18774 +          end;
18775 +          branch = branch + 1;
18776 +          output;
18778 +          if missing(character_value) then do;
18779 +            numeric_value = round(numeric_value, &sp_precision);
18780 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18781 +          end;
18782 +          else do;
18783 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18784 +          end;
18785 +          branch = branch + 1;
18786 +          output;
18787 +        end;
18788 +        else do;
18789 +          if missing(character_value) then do;
18790 +            numeric_value = round(numeric_value, &sp_precision);
18791 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18792 +          end;
18793 +          else do;
18794 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18795 +          end;
18796 +          branch = branch + 1;
18797 +          output;
18798 +        end;
18799 +      end;
18800 +      else do;
18801 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18802 +          if missing(character_value) then do;
18803 +            numeric_value = round(numeric_value,&sp_precision);
18804 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18805 +            origval = numeric_value;
18806 +          end;
18807 +          else do;
18808 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18809 +            origchar = character_value;
18810 +          end;
18811 +          branch = branch + 1;
18812 +          output;
18814 +        end;
18815 +        else do;
18816 +          if missing(character_value) then do;
18817 +            numeric_value = round(numeric_value, &sp_precision);
18818 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18819 +            origval = numeric_value;
18820 +          end;
18821 +          else do;
18822 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18823 +            origval = character_value;
18824 +          end;
18825 +          branch = branch + 1;
18826 +          output;
18827 +        end;
18828 +      end;
18829 +    end;
18830 +    else do;
18831 +       if first.numeric_value then do;
18832 +         flag = 0;
18833 +         abovetext = strip(CHARACTER_VALUE);
18834 +         branch = numeric_value;
18835 +         if first.numeric_value AND last.numeric_value then do;
18836 +           output;
18837 +         end;
18838 +       end;
18839 +       else if last.numeric_value then do;
18840 +         if flag=0 then do;
18841 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18842 +           length = length(strip(tempstring));
18843 +           if length < 32 then do;
18844 +             abovetext = strip(tempstring);
18845 +           end;
18846 +           else do;
18847 +             abovetext = strip(abovetext)||", ...";
18848 +             flag = 1;
18849 +           end;
18850 +         end;
18851 +         branch = numeric_value;
18852 +         output;
18853 +       end;
18854 +       else do;
18855 +         if flag=0 then do;
18856 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18857 +           length = length(strip(tempstring));
18858 +           if length < 32 then do;
18859 +             abovetext = strip(tempstring);
18860 +           end;
18861 +           else do;
18862 +             abovetext = strip(abovetext)||", ...";
18863 +             flag=1;
18864 +           end;
18865 +         end;
18866 +         branch = numeric_value;
18867 +       end;
18868 +    end;
18869 +    keep parent branch abovetext;
18870 +  run;
18872 +  /* MIssing value to abovetext */
18873 +  data tempmissing;
18874 +    set &EM_USER_OUTRULES;
18875 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18876 +    rename node=parent numeric_value=branch character_value=misschar;
18877 +  run;
18880 +  proc sort data=abovetext; by parent branch; run;
18881 +  proc sort data=tempmissing; by parent branch; run;
18882 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18884 +  data tempoutnodes;
18885 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18886 +    by parent branch;
18887 +    length traintotal validtotal 8;
18888 +    retain traintotal validtotal;
18890 +    if _a then do;
18891 +      if ^MISSING(abovetext) then do;
18892 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18893 +      end;
18894 +      else do;
18895 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18896 +      end;
18897 +    end;
18898 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18900 +    if node=1 then do;
18901 +      traintotal = N;
18902 +      validtotal=VN;
18903 +    end;
18905 +    drop role rank stat misschar belowtext;
18906 +  run;
18907 +  proc sort data=tempoutnodes; by node; run;
18908 +  proc sort data=belowtext; by node; run;
18910 +  data tempoutnodes;
18911 +    merge tempoutnodes belowtext;
18912 +    by node;
18914 +  run;
18916 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18917 +  %let adjusted = N;
18918 +  %let npriors = 0;
18919 +  data _null_ ;
18920 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18921 +    if eof then do ;
18922 +      call symput("npriors" , strip(put(_N_,best.))) ;
18923 +    end;
18924 +  run;
18925 +  %if &npriors gt 0 %then %let adjusted=Y;
18928 +  /* create a table with targetUsed and targetLevel columns for each node */
18929 +  data temptarmeta;
18930 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18931 +    %if &multipleTar eq N %then %do;
18932 +      AND USE in ('D', 'Y')
18933 +    %end;
18934 +    ));
18935 +    length TARGET $32;
18936 +    Target=name;
18937 +    keep target level;
18938 +  run;
18940 +  %if &multipleTar eq Y %then %do;
18941 +    data temptargetused;
18942 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18943 +      keep node target;
18944 +    run;
18945 +    proc sort data=temptargetused; by target; run;
18946 +    proc sort data=temptarmeta; by target; run;
18947 +    data temptargetused;
18948 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18949 +      by target;
18950 +      if _a and _b;
18951 +    run;
18952 +  %end;
18953 +  %else %do;
18954 +    data temptargetused;
18955 +      set &EM_USER_OUTSTATS;
18956 +      length target $32 tarlevel $10;
18957 +      target="%EM_TARGET";
18958 +      tarlevel="%EM_TARGET_LEVEL";
18959 +      keep node target tarlevel;
18960 +    run;
18961 +    proc sort data=temptargetused nodupkey; by node; run;
18962 +  %end;
18964 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18965 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18966 +  proc sort data=temptargetused; by node; run;
18969 +  /* create tables for all interval targets as well as all class targets */
18970 +  data tempinterval tempclass;
18971 +    merge tempoutstats temptargetused( rename=(target=targetused));
18972 +    by node;
18973 +    %if "&multipleTar" eq "Y" %then %do;
18974 +      if ((missing(Target)) OR (target=targetused ));
18975 +    %end;
18977 +    if tarlevel="INTERVAL" then output tempinterval;
18978 +    else output tempclass;
18979 +  run;
18981 +  /* iniitalize intTarget and classTarget flags */
18982 +  %let em_intNobs =0;
18983 +  %let em_classNobs = 0;
18984 +  %let em_intTarget= N;
18985 +  %let em_classTarget= N;
18987 +  proc sql;
18988 +    reset noprint;
18989 +    select count(*) into :em_intNobs from tempinterval;
18990 +  quit;
18991 +  proc sql;
18992 +    reset noprint;
18993 +    select count(*) into :em_classNobs from tempclass;
18994 +  quit;
18996 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18997 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18999 +  /* retrieve all information for interval targets */
19000 +  %if &em_intTarget eq Y %then %do;
19002 +    /* determine if leaf variable exists */
19003 +    %let dsid=%sysfunc(open(tempinterval,i));
19004 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19005 +    %let rc=%sysfunc(close(&dsid));
19007 +    proc transpose data=tempinterval
19008 +      %if &leafexists %then %do;
19009 +        (drop=leaf)
19010 +      %end;
19011 +      %if &validexist %then %do;
19012 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19013 +      %end;
19014 +      %else %do;
19015 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19016 +      %end;
19017 +      by node;
19018 +      id statname;
19019 +    run;
19020 +    data tempinterval;
19021 +      set tempinterval;
19022 +      if missing(N) then delete;
19023 +    run;
19024 +  %end;
19026 +  /* retrieve all information for class targets */
19027 +  %if &em_classTarget eq Y %then %do;
19028 +    proc sort data=tempclass; by node category; run;
19029 +    %if &validflag eq N %then %do;
19030 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19031 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19032 +    %end;
19033 +    %else %do;
19034 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19035 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19036 +    %end;
19037 +      set tempclass;
19039 +      %if &validflag eq N %then %do;
19040 +        %if "&adjusted" eq "N" %then %do;
19041 +          if statname="N" then output tempn;
19042 +        %end;
19043 +        %else %do;
19044 +          if statname="NPRIORS" then output tempn;
19045 +        %end;
19046 +        else if statname="PREDICTION" then output temppredict;
19047 +        else if statname="PROBABILITY" then output tempprob;
19048 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19049 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19050 +      %end;
19051 +      %else %do;
19052 +        %if "&adjusted" eq "N" %then %do;
19053 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19054 +        %end;
19055 +        %else %do;
19056 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19057 +        %end;
19058 +        else if statname="PREDICTION" then output temppredict;
19059 +        else if statname="PROBABILITY" then output tempprob;
19060 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19061 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19062 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19063 +      %end;
19064 +    run;
19067 +    /* determine if profit/loss exists in tempprofit */
19068 +    %let em_profitflag=0;
19069 +    %let em_lossflag=0;
19070 +    proc sql;
19071 +      reset noprint;
19072 +      select count(*) into :em_profitflag from tempprofit;
19073 +    quit;
19074 +    proc sql;
19075 +      reset noprint;
19076 +      select count(*) into :em_lossflag from temploss;
19077 +    quit;
19079 +    %if &validFlag eq Y %then %do;
19080 +      proc transpose data=tempn
19081 +        %if "&adjusted" eq "N" %then %do;
19082 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19083 +        %end;
19084 +        %else %do;
19085 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19086 +        %end;
19087 +        by node;
19088 +        id statname;
19089 +      run;
19090 +      %if &em_profitflag ne 0 %then %do;
19091 +        proc transpose data=tempprofit out=tempprofit;
19092 +          by node category;
19093 +          id statname ;
19094 +        run;
19095 +      %end;
19096 +      %if &em_lossflag ne 0 %then %do;
19097 +        proc transpose data=temploss out=temploss;
19098 +          by node category;
19099 +          id statname ;
19100 +        run;
19101 +      %end;
19102 +      data tempprob;
19103 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19104 +        by node
19105 +        %if &multipleTar eq Y %then %do;
19106 +          target
19107 +        %end;
19108 +        category;
19109 +      run;
19110 +    %end;
19112 +    /* store percentcorrect value */
19113 +    data temppredict;
19114 +      merge tempprob temppredict(in=_a);
19115 +      by node category;
19116 +      if _a then do;
19117 +        percentCorrect = statvalue;
19118 +        %if &validFlag eq Y %then %do;
19119 +          vpercentCorrect= vstatvalue;
19120 +        %end;
19121 +      end;
19122 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19123 +      %if &validFlag eq Y %then %do;
19124 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19125 +      %end;
19126 +      ;
19127 +      if missing(percentCorrect) then delete;
19128 +      drop target;
19129 +    run;
19131 +    /* build profittext */
19132 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19133 +      data tempprofittext(keep= node profittext profitloss);
19134 +        length profittext $800 profitloss 8.;
19135 +        retain profittext profitloss;
19137 +        merge tempprob
19138 +        %if &em_profitflag ne 0 %then %do;
19139 +          tempprofit
19140 +        %end;
19141 +        %else %if &em_lossflag ne 0 %then %do;
19142 +          temploss
19143 +        %end;
19144 +        ;
19145 +        by node category;
19147 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19148 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19149 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19150 +          %let profittype = ALL;
19151 +        %end;
19153 +        /* create the profitloss variable for nodecolor if selected */
19154 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19156 +        %if "&profittype" eq "ALL" %then %do;
19157 +          if strip(CATEGORY)="&targetEvent" then do;
19158 +            profitloss=statvalue;
19159 +          end;
19160 +          if first.node then do;
19161 +            %if &validFlag eq N %then %do;
19162 +             %if &em_profitflag ne 0 %then %do;
19163 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19164 +             %end;
19165 +             %if &em_lossflag ne 0 %then %do;
19166 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19167 +             %end;
19168 +            %end;
19169 +            %else %do;
19170 +             %if &em_profitflag ne 0 %then %do;
19171 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19171!+;
19172 +             %end;
19173 +             %if &em_lossflag ne 0 %then %do;
19174 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19175 +             %end;
19176 +            %end;
19177 +          end;
19178 +          else if last.node then do;
19179 +            %if &validFlag eq N %then %do;
19180 +             %if &em_profitflag ne 0 %then %do;
19181 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19182 +             %end;
19183 +             %if &em_lossflag ne 0 %then %do;
19184 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19185 +             %end;
19186 +             /*if CATEGORY="&targetEvent" then do;
19187 +               profitloss=statvalue;
19188 +             end;*/
19189 +            %end;
19190 +            %else %do;
19191 +             %if &em_profitflag ne 0 %then %do;
19192 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19192!+14.&EM_PROPERTY_SPLITPRECISION);
19193 +                if CATEGORY="&targetEvent" then do;
19194 +                 profitloss=ALTERNATIVE_PROFIT;
19195 +                end;
19196 +             %end;
19197 +             %if &em_lossflag ne 0 %then %do;
19198 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19198!+14.&EM_PROPERTY_SPLITPRECISION);
19199 +                if CATEGORY="&targetEvent" then do;
19200 +                  profitloss=ALTERNATIVE_LOSS;
19201 +                end;
19202 +             %end;
19203 +            %end;
19204 +            output;
19205 +          end;
19206 +          else do;
19207 +            %if &validFlag eq N %then %do;
19208 +             %if &em_profitflag ne 0 %then %do;
19209 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19210 +             %end;
19211 +             %if &em_lossflag ne 0 %then %do;
19212 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19213 +             %end;
19214 +            %end;
19215 +            %else %do;
19216 +             %if &em_profitflag ne 0 %then %do;
19217 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19217!+14.&EM_PROPERTY_SPLITPRECISION);
19218 +             %end;
19219 +             %if &em_lossflag ne 0 %then %do;
19220 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19220!+14.&EM_PROPERTY_SPLITPRECISION);
19221 +             %end;
19222 +            %end;
19223 +          end;
19224 +        %end;
19225 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19226 +          if strip(CATEGORY) = "&targetevent" then do;
19227 +            %if &validFlag eq N %then %do;
19228 +             %if &em_profitflag ne 0 %then %do;
19229 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19230 +             %end;
19231 +             %if &em_lossflag ne 0 %then %do;
19232 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19233 +             %end;
19234 +             profitloss=statvalue;
19235 +            %end;
19236 +            %else %do;
19237 +             %if &em_profitflag ne 0 %then %do;
19238 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19238!+;
19239 +                profitloss=ALTERNATIVE_PROFIT;
19240 +             %end;
19241 +             %if &em_lossflag ne 0 %then %do;
19242 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19243 +                profitloss=ALTERNATIVE_LOSS;
19244 +             %end;
19245 +            %end;
19246 +            output;
19247 +          end;
19248 +        %end;
19249 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19250 +          if strip(CATEGORY) = "&targetevent" then do;
19251 +            %if &validFlag eq N %then %do;
19252 +             profitloss=statvalue;
19253 +            %end;
19254 +            %else %do;
19255 +             %if &em_profitflag ne 0 %then %do;
19256 +                profitloss=ALTERNATIVE_PROFIT;
19257 +             %end;
19258 +             %if &em_lossflag ne 0 %then %do;
19259 +                profitloss=ALTERNATIVE_LOSS;
19260 +             %end;
19261 +            %end;
19262 +            output;
19263 +          end;
19264 +        %end;
19265 +      run;
19266 +    %end;
19268 +    data tempprob(keep= node probtext);
19269 +      length probtext $800;
19270 +      retain probtext;
19271 +      set tempprob ;
19272 +      by node;
19274 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19275 +      %let probtype = &EM_PROPERTY_TARGET;
19276 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19277 +        %let probtype = ALL;
19278 +      %end;
19280 +      %if "&probtype" eq "ALL" %then %do;
19281 +        if first.node then do;
19282 +          %if &validFlag eq N %then %do;
19283 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19284 +          %end;
19285 +          %else %do;
19286 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19287 +          %end;
19288 +        end;
19289 +        else if last.node then do;
19290 +          %if &validFlag eq N %then %do;
19291 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19292 +          %end;
19293 +          %else %do;
19294 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19295 +          %end;
19296 +          output;
19297 +        end;
19298 +        else do;
19299 +          %if &validFlag eq N %then %do;
19300 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19301 +          %end;
19302 +          %else %do;
19303 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19304 +          %end;
19305 +        end;
19306 +      %end;
19307 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19308 +        if strip(CATEGORY) = "&targetevent" then do;
19309 +          %if &validFlag eq N %then %do;
19310 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19311 +          %end;
19312 +          %else %do;
19313 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19314 +          %end;
19315 +          output;
19316 +        end;
19317 +      %end;
19318 +      %else %if "&probtype" eq "NONE" %then %do;
19319 +        if last.node then do;
19320 +          output;
19321 +        end;
19322 +      %end;
19323 +    run;
19324 +  %end;
19326 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19328 +  %let oldexists=0;
19329 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19330 +     data old_tree_plot;
19331 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19332 +        rename nodecolor=oldnodecolor;
19333 +     run;
19335 +     proc sort data=old_tree_plot;
19336 +        by node;
19337 +     run;
19339 +     %let oldexists=1;
19340 +  %end;
19342 +  data &EM_USER_TREE_PLOT;
19343 +    length textall $800;
19344 +    merge tempoutnodes temptargetused
19346 +    %if &em_intTarget eq Y %then %do;
19347 +      tempinterval
19348 +    %end;
19350 +    %if &em_classTarget eq Y %then %do;
19352 +      %if &validFlag eq N %then %do;
19353 +        tempn(rename=(statvalue=N))
19354 +      %end;
19355 +      %else %do;
19356 +        tempn
19357 +      %end;
19359 +      temppredict tempprob
19361 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19362 +        tempprofittext
19363 +      %end;
19364 +    %end;
19365 +    ;
19366 +    by node;
19368 +    /* build nodetext based on user selection */
19369 +    textall="";
19371 +    %if &em_intTarget eq Y %then %do;
19372 +    if tarlevel="INTERVAL" then do;
19373 +      /* Nodeid */
19374 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19375 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19376 +      %end;
19378 +      /* Target identifier if multiple targets are used */
19379 +      %if "&multipleTar" eq "Y" %then %do;
19380 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19381 +      %end;
19383 +      %if &validFlag eq Y %then %do;
19384 +         /* Column labels displayed in validflag eq Y only */
19385 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19386 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19386!+noquote ))";
19387 +         %end;
19389 +         /* Average values */
19390 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19391 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19392 +         %end;
19394 +         /* RASE */
19395 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19396 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19397 +         %end;
19399 +         /* Count */
19400 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19401 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19402 +         %end;
19403 +      %end;
19404 +      %else %do;
19405 +         /* Average values */
19406 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19407 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19408 +         %end;
19410 +         /* RASE */
19411 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19412 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19413 +         %end;
19415 +         /* Count */
19416 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19417 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19418 +         %end;
19419 +      %end;
19421 +      /* nodecolor */
19422 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19423 +        nodecolor=PREDICTION;
19424 +      %end;
19425 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19426 +        nodecolor=RASE;
19427 +      %end;
19428 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19429 +        nodecolor=1;
19430 +      %end;
19432 +    end;
19433 +    %end;
19434 +    %if &em_classTarget eq Y %then %do;
19435 +    if tarlevel^="INTERVAL" then  do;
19437 +      /* Nodeid */
19438 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19439 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19440 +      %end;
19441 +      /* Target identifier if multiple targets are used */
19442 +      %if "&multipleTar" eq "Y" %then %do;
19443 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19444 +      %end;
19446 +      /* Predicted values */
19447 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19448 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19449 +      %end;
19451 +      /* Column labels displayed in validflag eq Y only */
19452 +      %if "&ValidFlag" eq "Y" %then %do;
19453 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19454 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19454!+noquote ))";
19455 +        %end;
19456 +      %end;
19458 +      /* Target Values */
19459 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19460 +        textall=strip(textall)||"0A"x||strip(probtext);
19461 +      %end;
19463 +      /* include profit or loss for all target levels */
19464 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19465 +        textall=strip(textall)||"0A"x||strip(profittext);
19466 +      %end;
19468 +      %if &validFlag eq N %then %do;
19469 +        /* Percent Correct */
19470 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19471 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19472 +        %end;
19474 +         /* Count */
19475 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19476 +          %if "&adjusted" eq "N" %then %do;
19477 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19478 +          %end;
19479 +          %else %do;
19480 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19481 +          %end;
19482 +         %end;
19483 +      %end;
19484 +      %else %do;
19485 +        /* Percent Correct */
19486 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19487 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19488 +        %end;
19490 +         /* Count */
19491 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19492 +          %if "&adjusted" eq "N" %then %do;
19493 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19494 +          %end;
19495 +          %else %do;
19496 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19497 +          %end;
19498 +         %end;
19499 +      %end;
19501 +      /* nodecolor */
19502 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19503 +       %if &multipleTar ne Y %then %do;
19504 +        nodecolor=&predTarget;
19505 +       %end;
19506 +       %else %do;
19507 +         nodecolor=percentcorrect;
19508 +       %end;
19509 +      %end;
19510 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19511 +        nodecolor=percentcorrect;
19512 +      %end;
19513 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19514 +        nodecolor=1;
19515 +      %end;
19516 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19517 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19518 +          nodecolor=percentcorrect;
19519 +        %end;
19520 +        %else %do;
19521 +          nodecolor=profitloss;
19522 +        %end;
19523 +      %end;
19525 +    end;
19526 +    %end;
19527 +    %if &em_intTarget eq Y %then %do;
19528 +     drop  PREDICTION  TARGET TARLEVEL
19529 +     %if &ValidFlag eq Y %then %do;
19530 +         VPREDICTION
19531 +     %end;
19532 +     ;
19533 +    %end;
19534 +    %if &em_classTarget eq Y %then %do;
19535 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19536 +     %if &ValidFlag eq Y %then %do;
19537 +         VSTATVALUE
19538 +     %end;
19539 +     ;
19540 +    %end;
19542 +  run;
19544 +  /* add leaf index information to plotds - based on primary target only*/
19545 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19546 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19547 +      set &EM_USER_OUTSTATS;
19548 +      if ((statname="PROBABILITY"
19549 +      %if &validexist %then %do;
19550 +       or statname="VALID: PROBABILITY"
19551 +      %end;
19552 +      ) AND (CATEGORY="&TARGETEVENT")
19553 +      %if "&multipleTar" eq "Y" %then %do;
19554 +        AND (Target="%EM_TARGET")
19555 +      %end;
19556 +      );
19557 +    run;
19559 +    %if &validexist %then %do;
19560 +      proc sort data=tempprob; by node; run;
19561 +      %let vpredTarget = V%substr(&predTarget, 2);
19562 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19563 +         by node;
19564 +         id statname;
19565 +      run;
19566 +    %end;
19567 +  %end;
19568 +  %else %do;
19569 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19570 +      set &EM_USER_OUTSTATS;
19571 +      if ((statname="PREDICTION"
19572 +      %if &validexist %then %do;
19573 +       or statname="VALID: PREDICTION"
19574 +      %end;
19575 +      )
19576 +      %if "&multipleTar" eq "Y" %then %do;
19577 +        AND (Target="%EM_TARGET")
19578 +      %end;
19579 +      );
19580 +    run;
19581 +    %if &validexist %then %do;
19582 +      proc sort data=tempprob; by node; run;
19583 +      %let vpredTarget = V%substr(&predTarget, 2);
19584 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19585 +         by node;
19586 +         id statname;
19587 +      run;
19588 +    %end;
19589 +  %end;
19591 +  proc sort data=tempprob; by node; run;
19592 +  data tempoutnodes;
19593 +    merge tempoutnodes tempprob;
19594 +    by node;
19595 +  run;
19597 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19598 +  data tempnodes;
19599 +    retain traintotal validtotal;
19600 +    set tempnodes(where=(leaf ne . ));
19601 +    tprob=round(&predTarget, .01);
19602 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19603 +      percevent_train=round(tprob*100, .01);
19604 +    %end;
19605 +    %else %do;
19606 +      percevent_train=tprob;
19607 +    %end;
19609 +    perc_train=round((n/traintotal)*100, 0.01);
19610 +    /* leafwidth already has a *10 multiplier */
19611 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19613 +    %if &validexist %then %do;
19614 +      %let vpredTarget = V%substr(&predTarget,2);
19615 +      vprob=round(&vpredTarget, .01);
19616 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19617 +        percevent_valid=round(vprob*100, .01);
19618 +      %end;
19619 +      %else %do;
19620 +        percevent_valid=vprob;
19621 +      %end;
19622 +      perc_valid=round((vn/validtotal)*100, .01);
19623 +    %end;
19625 +    index=_N_;
19626 +    keep node index tprob perc_train percevent_train
19627 +    %if &validexist %then %do;
19628 +        vprob percevent_valid perc_valid
19629 +    %end;
19630 +    ;
19631 +  run;
19632 +  proc sort data=tempnodes; by node; run;
19633 +  data &EM_USER_TREE_PLOT;
19634 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19635 +    by node;
19636 +    if missing(node) then delete;
19637 +    %if &oldexists %then %do;
19638 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19639 +      drop oldnodecolor;
19640 +    %end;
19641 +    abovetext = compbl(abovetext);
19643 +    /* add variable labels */
19644 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19645 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19646 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19647 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19648 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19649 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19651 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19652 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19653 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19654 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19655 +          %end;
19656 +          %else %do;
19657 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19658 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19659 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19660 +          %end;
19661 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19663 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19664 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19665 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19666 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19667 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19668 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19669 +          %end;
19670 +          %else %do;
19671 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19672 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19673 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19674 +          %end;
19675 +    ;
19676 +  run;
19678 +  /* delete temporary tables */
19679 +  proc datasets lib=work nolist;
19680 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19681 +  run;
19683 +%mend em_tree_makePlotDs;
19687 +%macro em_tree_report;
19689 +   /* report properties */
19690 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19691 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19692 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19693 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19694 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19695 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19696 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19697 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19698 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19699 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19700 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19701 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19702 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19704 +   %let validexist=0;
19705 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19706 +     %let validexist=1;
19707 +   %end;
19709 +   /* determine if multiple targets will be processed */
19710 +   %let em_tree_multipleTargets=N;
19711 +   %let em_tree_numTarget=1;
19712 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19713 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19714 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19715 +         %let em_tree_multipleTargets=N;
19716 +      %end;
19717 +      %else %do;
19718 +        data _null_;
19719 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19720 +          if eof then
19721 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19722 +        run;
19724 +        %if &em_tree_numTarget gt 1 %then %do;
19725 +           %let em_tree_multipleTargets=Y;
19726 +        %end;
19727 +     %end;
19728 +   %end;
19730 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19732 +   /* variable importance */
19733 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19734 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19736 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19737 +     /* and the columns may not be generated                                                                                 */
19738 +     %let em_tree_cvexists=;
19739 +     %let em_tree_surrexists=.;
19740 +     data _null_;
19741 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19742 +       if eof then do ;
19743 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19744 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19745 +       end;
19746 +     run;
19748 +     data &EM_USER_OUTIMPORT;
19749 +         set &EM_USER_OUTIMPORT;
19750 +         /* format columns based on Precison value specified */
19751 +         format importance 15.&EM_PROPERTY_PRECISION
19752 +              %if &validexist %then %do;
19753 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19754 +              %end;
19755 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19756 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19757 +              %end;
19758 +         ;
19759 +     run;
19761 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19762 +     proc print data=&EM_USER_OUTIMPORT
19763 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19764 +          (where=((nrules>0) OR (nsurrogates>0)))
19765 +        %end;
19766 +        %else %do;
19767 +           (where=(nrules>0))
19768 +        %end;
19769 +        label noobs
19770 +        ;
19771 +     run;
19772 +     title10;
19774 +   %end;
19776 +   /* Sequence */
19777 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19778 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19779 +   data _null_ ;
19780 +      set &EM_USER_outseq (obs=2) end=eof ;
19781 +      if eof then do ;
19782 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19783 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19784 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19785 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19786 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19787 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19788 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19789 +      end;
19790 +    run;
19792 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19793 +      data &EM_USER_OUTSEQ;
19794 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19795 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19796 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19797 +           _XMISC_=_VMISC_
19798 +        %end;
19799 +        %if "&em_tree_aprof" ne "."  %then %do;
19800 +           _XAPROF_=_VAPROF_
19801 +           _XPROF_ = _VPROF_
19802 +        %end;
19803 +        %if "&em_tree_aloss" ne "."  %then %do;
19804 +           _XALOSS_=_VALOSS_
19805 +        %end;
19806 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19807 +           _XPASE_ = _VPASE_
19808 +           _XPMISC_ = _VPMISC_
19809 +        %end;
19811 +        ));
19812 +     %end;
19813 +     %else %do;
19814 +        set &EM_USER_OUTSEQ;
19815 +     %end;
19817 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19818 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19819 +            _MISC_   15.&EM_PROPERTY_PRECISION
19820 +         %end;
19821 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19822 +            _PASE_  15.&EM_PROPERTY_PRECISION
19823 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19824 +         %end;
19825 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19826 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19827 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19828 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19829 +            %end;
19830 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19831 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19832 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19833 +            %end;
19834 +         %end;
19835 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19836 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19837 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19838 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19839 +            %end;
19840 +         %end;
19841 +         %if "&em_tree_seq" ne "." %then %do;
19842 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19843 +         %end;
19844 +         %if "&em_tree_vseq" ne "." %then %do;
19845 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19846 +         %end;
19847 +         %if "&em_tree_aprof" ne "." %then %do;
19848 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19849 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19850 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19851 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19852 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19853 +           %end;
19854 +         %end;
19855 +         %else %if "&em_tree_aloss" ne "." %then %do;
19856 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19857 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19858 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19859 +           %end;
19860 +         %end;
19861 +      ;
19862 +    run;
19863 +   %end;
19865 +   /* Observation Based Importance */
19866 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19868 +      /* need to check for 0 obs */
19869 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19870 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19871 +      %let rc=%sysfunc(close(&dsid));
19873 +      %if &onobs %then %do;
19874 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19875 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19877 +         data &EM_USER_OUTOBSIMP;
19878 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19879 +           if _a;
19880 +           by _INPUT1_;
19881 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19882 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19883 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19884 +                   %end;
19885 +                   ;
19886 +         run;
19887 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19888 +      %end;
19889 +   %end;
19891 +  %end;
19893 +  /* create dataset to support tree diagram and icicle plot */
19894 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19895 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19897 +  /* display tree diagram */
19898 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19899 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19901 +  /* display icicle diagram */
19902 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19903 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19905 +  /* Leaf Statistics Plot */
19906 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19908 +  /* print leaf information to output window */
19909 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19911 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19912 +       by descending N;
19913 +     run;
19915 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19916 +     %local vn;
19917 +     data _null_;
19918 +       set t (obs=2) end=eof;
19919 +       if eof then do;
19920 +         call symput("vn", strip(put(vn, best.)));
19921 +       end;
19922 +     run;
19924 +     data t;
19925 +       set t;
19926 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19927 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19928 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19929 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19930 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19931 +       %end;
19932 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19933 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19934 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19935 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19936 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19937 +          %end;
19938 +       %end;
19939 +       ;
19940 +     run;
19942 +     /* determine if rase is found in t */
19943 +    %let dsid=%sysfunc(open(t,i));
19944 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19945 +    %let rc=%sysfunc(close(&dsid));
19947 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19948 +     proc print data=t noobs label;
19949 +       where tprob ne .;
19950 +       var node depth N tprob
19951 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19952 +         %if "&vn" ne "." %then %do;
19953 +           VN
19954 +         %end;
19955 +         vprob
19956 +       %end;
19957 +       %if &raseexists %then %do;
19958 +            RASE
19959 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19960 +              VRASE
19961 +            %end;
19962 +       %end;
19963 +       ;
19964 +     run;
19965 +     title10;
19966 +  %end;
19968 +  /* create plots that are done during training of node */
19969 +  /* display iterative plot, including reference line */
19970 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19971 +   /* %if &nleaves eq  %then %do; */
19972 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19973 +      data _null_;
19974 +        set &EM_USER_OUTTOPOLOGY end=eof;
19975 +        if eof then do;
19976 +          call symput('nleaves', LEAF);
19977 +        end;
19978 +      run;
19979 +   /* %end; */
19981 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19982 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19983 +  %end;
19985 +  /* display leaf statistics */
19986 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19988 +  /* stats by node if multiple targets = Y */
19989 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19990 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19991 +    data &EM_USER_OUTSTATS;
19992 +      set &EM_USER_OUTSTATS;
19994 +     * if STATNAME="TARGET" then delete;
19995 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19996 +      drop leaf;
19997 +    run;
19998 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20000 +  %end;
20001 +  %else %do;
20002 +    /* add outstats and outdescribe to spk but not results */
20003 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20004 +  %end;
20006 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 92 observations read from the data set EMWS4.TREE3_OUTIMPORT.
NOTE: The data set EMWS4.TREE3_OUTIMPORT has 92 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS4.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS4.TREE3_OUTSEQ.
NOTE: The data set EMWS4.TREE3_OUTSEQ has 21 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_RESPOND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS4.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS4.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS4.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 434 observations read from the data set EMWS4.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS4.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS4.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS4.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 175 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 150 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS4.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 175 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 50 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 25 observations read from the data set WORK.TEMPN.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS4.TREE3_TREE_PLOT has 25 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS4.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS4.TREE3_TREE_PLOT.
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE3_TREE_PLOT has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS4.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 25 observations read from the data set EMWS4.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
20007
20008  *------------------------------------------------------------*;
20009  * End REPORT: Tree3;
20010  *------------------------------------------------------------*;
 
20011  /* Reset EM Options */
20012  options formchar="|----|+|---+=|-/\<>*";
20013  options nocenter ls=256 ps=10000;
20014  goptions reset=all device=GIF NODISPLAY;
 
20015  proc sort data=WORK.EM_USER_REPORT;
20016  by ID VIEW;
20017  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20018  proc sort data=EMWS4.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20019  by NAME;
20020  run;
 
NOTE: There were 99 observations read from the data set EMWS4.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 99 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20021  proc sort data=EMWS4.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20022  by NAME;
20023  run;
 
NOTE: There were 99 observations read from the data set EMWS4.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 99 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20024  data WORK.ASSESS_META;
20025  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20026  by NAME;
20027  run;
 
NOTE: There were 99 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 99 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 99 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20028  data EM_temp_assessMeta;
20029  set EMWS4.Tree3_CMeta_TRAIN;
20030  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20031  run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20032  data EM_temp_assessdata;
20033  set EMWS4.Tree3_TRAIN(keep=
20034  F_RESPOND
20035  I_RESPOND
20036  P_RESPOND0
20037  P_RESPOND1
20038  Q_RESPOND0
20039  Q_RESPOND1
20040  R_RESPOND0
20041  R_RESPOND1
20042  U_RESPOND
20043  V_RESPOND0
20044  V_RESPOND1
20045  _WARN_
20046  RESPOND
20047  );
20048  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 32235 observations read from the data set EMWS4.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 32235 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24333   data EM_temp_assessMeta;
24334   set EMWS4.Tree3_CMeta_TRAIN;
24335   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24336   run;
 
NOTE: There were 12 observations read from the data set EMWS4.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24337   data EM_temp_assessdata;
24338   set EMWS4.Tree3_VALIDATE(keep=
24339   F_RESPOND
24340   I_RESPOND
24341   P_RESPOND0
24342   P_RESPOND1
24343   Q_RESPOND0
24344   Q_RESPOND1
24345   R_RESPOND0
24346   R_RESPOND1
24347   U_RESPOND
24348   V_RESPOND0
24349   V_RESPOND1
24350   _WARN_
24351   RESPOND
24352   );
24353   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS4.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 16121 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 16121 observations read from the data set EMWS4.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 16121 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28647   %let _cn = %sysfunc(getoption(CENTER));
28648   options nocenter;
28649   proc print data=EMWS4.Tree3_EMREPORTFIT noobs label;
28650   var STAT LABEL TRAIN
28651   VALIDATE
28652   ;
28653   by TARGET TARGETLABEL;
28654   title9 ' ';
28655   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28656   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28657   title10;
28658   options &_cn;
 
28659   proc sort data=EMWS4.Tree3_EMCLASSIFICATION nothreads;
28660   by DATAROLE TARGET TARGETLABEL;
28661   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28662   %let _cn = %sysfunc(getoption(CENTER));
28663   options nocenter;
28664   proc print data=EMWS4.Tree3_EMCLASSIFICATION noobs label;
28665   var from into pct_row pct_col count percent
28666   ;
28667   by DATAROLE TARGET TARGETLABEL;
28668   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28669   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28670   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28671   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28672   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28673   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28674   where _TYPE_='PREDICTION';
28675   title9 ' ';
28676   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28677   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28678   title9;
28679   title10;
28680   options &_cn;
 
28681   %let _cn = %sysfunc(getoption(CENTER));
28682   options nocenter;
28683   data EMWS4.Tree3_EMEVENTREPORT;
28684   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28684 !  8;
28685   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28685 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28685 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28685 ! FALSEEVENT
28686   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28686 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28686 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28687      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28688   FALSEEVENT=0;
28689   FALSENEVENT=0;
28690   TRUEEVENT=0;
28691   TRUENEVENT=0;
28692   set EMWS4.Tree3_EMEVENTREPORT;
28693   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
28694   proc print data=EMWS4.Tree3_EMEVENTREPORT noobs label;
28695   title9 ' ';
28696   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28697   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28698   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28699   title10;
28700   options &_cn;
 
28701   proc datasets library=EMWS4 nolist;
28702   modify Tree3_EMRANK;
28703   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28704   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28705   run;
 
NOTE: MODIFY was successful for EMWS4.TREE3_EMRANK.DATA.
28706   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
28707   %let _cn = %sysfunc(getoption(CENTER));
28708   options nocenter;
28709   proc print data=EMWS4.Tree3_EMRANK label noobs;
28710   var
28711   decile gain lift liftc resp respc N _meanP_;
28712   by
28713   notsorted DATAROLE
28714   notsorted TARGET
28715   notsorted TARGETLABEL
28716   ;
28717   title9 ' ';
28718   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28719   run;
 
NOTE: There were 40 observations read from the data set EMWS4.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28720   title10;
28721   options &_cn;
 
28722   proc datasets library=EMWS4 nolist;
28723   modify Tree3_EMSCOREDIST;
28724   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28725   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28726   run;
 
NOTE: MODIFY was successful for EMWS4.TREE3_EMSCOREDIST.DATA.
28727   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
