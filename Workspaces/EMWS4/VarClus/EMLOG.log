*------------------------------------------------------------*
User:                hkatrag1
Date:                December 12, 2017
Time:                12:42:53
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 12, 2017
Time:                12:42:34
*------------------------------------------------------------*
14715  proc freq data=EMWS4.VarClus_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.VarClusMETA;
14717  run;
 
NOTE: There were 99 observations read from the data set EMWS4.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
14718  proc print data=WORK.VarClusMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15122  *------------------------------------------------------------*;
15123  * VarClus: Generation of macros and macro variables;
15124  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15125  *------------------------------------------------------------*;
 
15126  %let EMEXCEPTIONSTRING=;
15127  *------------------------------------------------------------*;
15128  * TRAIN: VarClus;
15129  *------------------------------------------------------------*;
15130  %let EM_ACTION = TRAIN;
15131  %let syscc = 0;
15132
15133  %macro main;
15134
15135     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15136     %include temp;
15137     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15138     %include temp;
15139     filename temp;
15140
15141    %SetProperties;
15142
15143     %if %upcase(&EM_ACTION) = CREATE %then %do;
15144         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15145         %include temp;
15146         filename temp;
15147         %create;
15148     %end;
15149     %else
15150     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15151          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15152             %include temp;
15153             filename temp;
15154             %train;
15155     %end;
15156     %else
15157     %if %upcase(&EM_ACTION) = SCORE %then %do;
15158             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15159             %include temp;
15160             filename temp;
15161             %score;
15162     %end;
15163     %else
15164     %if %upcase(&EM_ACTION) = REPORT %then %do;
15165             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15166             %include temp;
15167             filename temp;
15168             %report;
15169     %end;
15170     /*
15171     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15172         %put 'OPENING TABLE';
15173     %end;
15174     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15175         %put 'CLOSE TABLE';
15176     %end;
15177     */
15178  %mend main;
15179  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15180 +
15181 +/* Initialize property macro variables */
15182 +%macro SetProperties;
15183 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15184 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15185 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15186 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15187 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15188 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15189 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15190 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15191 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15192 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15193 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15194 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15195 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15196 +
15197 +%mend SetProperties;
15198 +
15199 +%Macro MakeDummyVariables(indata=,
15200 +                          outvar=,
15201 +                          outdata=,
15202 +                          fileref=,
15203 +                          recreatecmeta=N, /* optional */
15204 +                          incmeta=,     /* optional */
15205 +                          outcmeta=,    /* optional */
15206 +                          ndummyvars=_ndummyvars
15207 +                          );
15208 +    %global &ndummyvars;
15209 +
15210 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15211 +       class
15212 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15213 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15214 +    ;
15215 +    run;
15216 +    %let &ndummyvars = 0;
15217 +    data _null_;
15218 +    %let dsid = %sysfunc(open(work._classout));
15219 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15220 +    %let dsid = %sysfunc(close(&dsid));
15221 +    run;
15222 +
15223 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15224 +       input
15225 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15226 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15227 +        / level=nominal stdize=no;
15228 +       make outvar = &outvar;
15229 +       score data = &indata out =&outdata;
15230 +       code  file=  "&fileref";
15231 +    run;
15232 +    %if &recreatecmeta eq Y %then %do;
15233 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15234 +    data _tmpds;
15235 +        set _tmpds;
15236 +           ROLE = 'INPUT';
15237 +           LEVEL = 'INTERVAL';
15238 +           CREATOR='DMZIP';
15239 +           if NAME = '_TYPE_' then delete;
15240 +    run;
15241 +    data &outcmeta;
15242 +         set &incmeta _tmpds;
15243 +    run;
15244 +    %end;
15245 +    proc datasets lib=work nolist;
15246 +      delete  _dmdbdat _dmdbcat _classout
15247 +    %if &recreatecmeta eq Y %then %do;
15248 +    _tmpds
15249 +    %end;
15250 +    ;
15251 +    quit;
15252 +%Mend MakeDummyVariables;
15253 +
15254 +/*--- Determine Optimal Number of Cluster ----
15255 +%macro FindClusNum(statds=, groupds=, minvariation=);
15256 +   %global optnclus;
15257 +   data varclus_tmp(drop=_NAME_);
15258 +      set &statDs;
15259 +      where _type_ ='PROPOR';
15260 +   run;
15261 +   proc sort data=varclus_tmp;
15262 +      by _NCL_;
15263 +   run;
15264 +   proc transpose data=varclus_tmp out=varclus_tmp;
15265 +      by _NCL_;
15266 +      var %EM_INTERVAL_INPUT
15267 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15268 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15269 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15270 +          %do i = 2 %to &nvar;
15271 +          %let varname = %sysfunc(varname(&dsid, &i));
15272 +          &varname
15273 +          %end;
15274 +      %end;
15275 +   ;
15276 +   run;
15277 +
15278 +   %if &minVariation eq %then %do;
15279 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15280 +   %end;
15281 +   %if ^(0<&minVariation<100) %then %do;
15282 +       %let minVariation = 90;
15283 +   %end;
15284 +
15285 +   data _null_;
15286 +      set varclus_tmp end=eof;
15287 +      by _NCL_;
15288 +      retain flag 0;
15289 +      if first._ncl_ then flag=0;
15290 +      if .<col1 < &minVariation then flag=1;
15291 +      if last._ncl_ and ^flag then do;
15292 +         call symput('OPTNCL', _ncl_);
15293 +         stop;
15294 +      end;
15295 +     if eof then call symput('OPTNCL', _ncl_);
15296 +   run;
15297 +
15298 +   %let optnclus = &OPTNCL;
15299 +
15300 +   data varclus_tmp(drop=_NCL_ _NAME_);
15301 +      set &statDs;
15302 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15303 +   run;
15304 +   proc sort data=varclus_tmp;
15305 +      by _TYPE_;
15306 +   run;
15307 +   proc transpose data=varclus_tmp out=varclus_tmp;
15308 +      by _TYPE_;
15309 +   run;
15310 +   proc sort data=varclus_tmp;
15311 +      by _name_ _type_;
15312 +   run;
15313 +
15314 +  proc transpose data=varclus_tmp out=&groupds;
15315 +      by _NAME_;
15316 +   run;
15317 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15318 +      by Cluster descending Rsquare;
15319 +      where Cluster ne 0;
15320 +   run;
15321 +   proc datasets lib=work nolist mt=(DATA VIEW);
15322 +      delete varclus_tmp;
15323 +   run;
15324 +   quit;
15325 +%mend findClusNum;
15326 +*/
15327 +
15328 +%macro getNclusfromTrain(inoutstat=, nc=);
15329 +%global &nc;
15330 +data _null_;
15331 +    set &inoutstat end=eof;
15332 +    if eof then do;
15333 +    call symput("&nc", _ncl_);
15334 +    end;
15335 +run;
15336 +%mend  getNclusfromTrain;
15337 +
15338 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15339 +
15340 +     *--- Build Code to Modify Metadata ---*;
15341 +     filename X "&deltacodefile";
15342 +     data _null_;
15343 +        FILE X;
15344 +        set &groupds end=eof;
15345 +        /*by Cluster;*/
15346 +         if _N_=1 then do;
15347 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15348 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15349 +           %end;
15350 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15351 +           put "if upcase(strip(NAME)) in (";
15352 +        end;
15353 +        if Strip(upcase(Selected)) eq 'YES' then do;
15354 +           string = '"'!!trim(left(VARIABLE))!!'"';
15355 +           put string;
15356 +        end;
15357 +        if eof then do;
15358 +           put ') then ROLE="INPUT";';
15359 +           put 'else ROLE="REJECTED";';
15360 +           put 'end;';
15361 +
15362 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15363 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15364 +           %end;
15365 +        end;
15366 +     run;
15367 +     quit;
15368 +
15369 +     filename X;
15370 +
15371 +     quit;
15372 +%mend MakeDeltaCode;
15373 +
15374 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15375 +    %if ^%sysfunc(exist(&statds)) %then %do;
15376 +         %goto doendc;
15377 +    %end;
15378 +
15379 +    data &corrds(drop=_TYPE_ _NCL_) ;
15380 +       set &statds;
15381 +       where _type_ eq 'CORR' ;
15382 +    run ;
15383 +    proc sort data=&corrds;
15384 +       by _NAME_ ;
15385 +    run ;
15386 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15387 +      BY _NAME_ ;
15388 +    run ;
15389 +    data &corrplotds;
15390 +       length _Y_ $100;
15391 +       set &corrplotDs;
15392 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15393 +    run ;
15394 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15395 +       set &corrplotds;
15396 +       where _LABEL_ ne '' ;
15397 +       keep _TMP_ _LABEL_ ;
15398 +    run ;
15399 +    data _null_;
15400 +       nobs=0;
15401 +       dsid = open('varclus_match');
15402 +       if dsid then do;
15403 +          nobs = attrn(dsid, 'NOBS');
15404 +          dsid = close(dsid);
15405 +       end;
15406 +       call symput ('CORR_NOBS', nobs);
15407 +    run;
15408 +    %if &corr_nobs %then %do;
15409 +        proc sort data=varclus_match;
15410 +           by _name_;
15411 +        run ;
15412 +        proc sort data=&corrplotds;
15413 +           by _name_;
15414 +        run ;
15415 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15416 +           merge varclus_match &corrplotds;
15417 +           by _NAME_ ;
15418 +           if _X_ eq '' then _X_=_NAME_ ;
15419 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15420 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15421 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15422 +
15423 +       run ;
15424 +    %end;
15425 +    %else %do;
15426 +        proc sort data=&corrplotds;
15427 +           by _name_;
15428 +        run ;
15429 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15430 +           set &corrplotds;
15431 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15432 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15433 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15434 +
15435 +        run ;
15436 +    %end;
15437 +    proc sort data=&corrplotds;
15438 +       by _X_ _Y_;
15439 +    run ;
15440 +    proc datasets lib=work nolist mt=(DATA VIEW);
15441 +       delete varclus_match;
15442 +    run;
15443 +    quit;
15444 +
15445 +%doendc:
15446 +
15447 +%mend MakeVarClusCorrData;
15448 +
15449 +%macro MakeStatPlotData(statds= , outstatplotds=);
15450 +   %if %sysfunc(exist(&statds)) %then %do;
15451 +
15452 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15453 +          set &statDs;
15454 +          where _type_ in('MEAN', 'STD', 'N');
15455 +       run ;
15456 +       proc transpose data=varclus_tmp out=&outstatplotds;
15457 +          id _TYPE_ ;
15458 +       run ;
15459 +       data &outstatplotds;
15460 +          set &outstatplotds(obs=1000);
15461 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15462 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15463 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15464 +          else SCALEDSTD= STD ;
15465 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15466 +       run ;
15467 +       proc sort data=&outstatplotds;
15468 +          by descending SCALEDSTD ;
15469 +       run ;
15470 +       proc datasets lib=work nolist mt=(DATA VIEW);
15471 +          delete varclus_tmp;
15472 +       run;
15473 +       quit;
15474 +    %end;
15475 +
15476 +%mend MakeStatPlotData;
15477 +
15478 +
15479 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15480 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15481 +    data &EM_USER_OUTSTATSCORE;
15482 +          set &indata;
15483 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15484 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15485 +          if _TYPE_ = 'STD' then _NAME_='STD';
15486 +          DROP _TYPE_ _NCL_;
15487 +     run;
15488 +
15489 +     filename _file_  "&fileRef";
15490 +
15491 +     data _null_;
15492 +        FILE _file_ MOD;
15493 +        put ' ';
15494 +        put '/*-------------------------------------------------*/';
15495 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15496 +        put '/*-------------------------------------------------*/';
15497 +        put ' ';
15498 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15499 +
15500 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15501 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15502 +
15503 +        %let k = 1;
15504 +        %do %while(^%sysfunc(fetch(&dsid)));
15505 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15506 +                %if &k > 2 %then %do;
15507 +                 %let cn = %eval(&k-2);
15508 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15509 +                %end;
15510 +                %let k = %eval(&k+1);
15511 +        %end;
15512 +
15513 +        %let rc = %sysfunc(rewind(&dsid));
15514 +
15515 +        %do i= 2 %to &nvar;
15516 +            %let _varname =  %sysfunc(varname(&dsid, &i));
15517 +            %do %while(^%sysfunc(fetch(&dsid)));
15518 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15519 +                %if &_name = MEAN %then
15520 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
15521 +                %else %if &_name = STD %then
15522 +                %let _std = %sysfunc(getvarn(&dsid, &i));
15523 +                %else %do;
15524 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
15525 +                      %let abscoeff = %sysfunc(abs(&coeff));
15526 +                          %if &abscoeff >  0 %then %do;
15527 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
15528 +                           %end;
15529 +                 %end;
15530 +             %end;
15531 +             %let rc = %sysfunc(rewind(&dsid));
15532 +         %end;
15533 +
15534 +        %let dsid= %sysfunc(close(&dsid));
15535 +       run;
15536 +%mend CreateScoreCode;
15537 +
15538 +
15539 +
15540 +/*----------------------------------------------------------
15541 +    Instead of using %MakeRSquareData,
15542 +    %MakeVarClusResultTable at macro2.source is used
15543 + +----------------------------------------------------------*/
15544 +
15545 +
15546 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
15547 +
15548 +/* modifying  from ods rsquare = data */
15549 +
15550 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
15551 +    Length Cluster $16;
15552 +    length Variable $32;
15553 +    Length VariableLabel $64;
15554 +    set &indata; retain CurrentCluster;
15555 +    if NumberOfClusters ^= &ncluster then delete;
15556 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
15557 +    CurrentCluster = Cluster;
15558 +   run;
15559 +proc sort data =&outdata ;
15560 +     by Cluster RsquareRatio;
15561 +run;
15562 +data _tmprsq(drop=index);
15563 +     set &outdata; by Cluster;
15564 +     if first.Cluster then do;
15565 +     index = strip(scan(Cluster,2 ));
15566 +     Variable = "Clus"||index;
15567 +     VariableLabel = "Cluster Component "||index;
15568 +     OwnCluster = 1;
15569 +     NextClosest = .;
15570 +     RsquareRatio = 0;
15571 +     output;
15572 +     end;
15573 +run;
15574 +
15575 +proc sort data = _tmprsq ;
15576 +     by Cluster RsquareRatio;
15577 +run;
15578 +data &outdata;
15579 +     set &outdata _tmprsq;
15580 +by Cluster;
15581 +run;
15582 +
15583 +
15584 +/* Just create the Selected variable with all YES */
15585 +
15586 +data &outdata;
15587 +    set &outdata; by cluster;
15588 +    length Selected $8;
15589 +    Selected = 'YES';
15590 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15591 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15592 +    rename OwnCluster = RSqWithClusterComp;
15593 +    rename NextClosest = RSqWithNextClusComp;
15594 +run;
15595 +
15596 +
15597 +/* Selected = Y/N will be done %score section -----
15598 +
15599 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
15600 +data &outdata;
15601 +    set &outdata; by cluster;
15602 +    length Selected $8;
15603 +    if first.Cluster then Selected = 'YES';
15604 +    else Selected = 'NO';
15605 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15606 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15607 +    rename OwnCluster = RSqWithClusterComp;
15608 +    rename NextClosest = RSqWithNextClusComp;
15609 +run;
15610 +%end;
15611 +%else %do;
15612 +data &outdata;
15613 +    set &outdata; by cluster;
15614 +    if last.Cluster then Selected = 'YES';
15615 +    else Selected = 'NO';
15616 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15617 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15618 +    rename OwnCluster = RSqWithClusterComp;
15619 +    rename NextClosest = RSqWithNextClusComp;
15620 +run;
15621 +%end;
15622 +---------------------------------------------------------------*/
15623 +
15624 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
15625 +/* to calculate NextClosestClusRsq */
15626 +proc transpose data = &inClusRSquare  out=_clusRsq;
15627 +      by cluster;
15628 +      run;
15629 +data _clusRsq;
15630 +     set _clusRsq;
15631 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
15632 +run;
15633 +
15634 +proc sort data=_clusRsq;
15635 +    by cluster col1;
15636 +    run;
15637 +data _clusRsq(drop=_NAME_ _LABEL_);
15638 +     set _clusRsq; by cluster;
15639 +     if last.Cluster then output;
15640 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
15641 +     rename COL1 = RSqWithNextClusComp;
15642 +     rename Cluster = Variable;
15643 +     label  Cluster = "Variable";
15644 +run;
15645 +
15646 +proc sort data =&outdata;
15647 +     by Variable;
15648 +run;
15649 +data &outdata;
15650 +    merge &outdata _clusRsq;
15651 +    by Variable;
15652 +run;
15653 +proc sort data =&outdata;
15654 +by Cluster  RsquareRatio;
15655 +run;
15656 +quit;
15657 +%end;
15658 +
15659 +proc datasets lib = work nolist;
15660 +     delete _tmprsq _clusRsq;
15661 +     run;
15662 +quit;
15663 +
15664 +%mend MakeRSquareData;
15665 +
15666 +
15667 +/*-------------------------------------------------------------------------*/
15668 +
15669 +
15670 +
15671 +%macro ModifyCorr(indata=,
15672 +                  outdata=,
15673 +                  rsquare = Y
15674 +                  );
15675 +    data corr_tmp;
15676 +        set &indata;
15677 +    run;
15678 +     proc sql;
15679 +           update &indata
15680 +           set
15681 +     %let dsid = %sysfunc(open(work.corr_tmp));
15682 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
15683 +          %do i = 4 %to &nvar;
15684 +          %let _name = %sysfunc(varname(&dsid, &i));
15685 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
15686 +            %else  %let _name_md = &_name;
15687 +            %if &i < &nvar %then %do;
15688 +               &_name = 1- &_name_md ,
15689 +            %end;
15690 +            %else %do;
15691 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
15692 +            %end;
15693 +          %end;
15694 +      %let dsid= %sysfunc(close(&dsid));
15695 +
15696 +      select * from &indata;
15697 +      run;
15698 +      proc datasets lib = work nolist;
15699 +           delete corr_tmp;
15700 +      run;
15701 +      quit;
15702 +
15703 + %mend ModifyCorr;
15704 +
15705 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
15706 +    data &outdata(drop= _NCL_  _TYPE_);
15707 +       set &indata;
15708 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
15709 +       rename _NAME_ = Cluster;
15710 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15711 +    run;
15712 +    %if &RSquare eq Y %then %do;
15713 +     data corr_tmp;
15714 +        set &outdata;
15715 +     run;
15716 +
15717 +     data &outdata(drop=i);
15718 +          set &outdata;
15719 +          %let dsid = %sysfunc(open(work.corr_tmp));
15720 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15721 +          %do i = 2 %to &nvar;
15722 +            %let _name = %sysfunc(varname(&dsid, &i));
15723 +            %let _name_md = &_name.**2;
15724 +                &_name = &_name_md;
15725 +          %end;
15726 +      %let dsid= %sysfunc(close(&dsid));
15727 +      run;
15728 +      proc datasets lib = work nolist;
15729 +           delete corr_tmp;
15730 +      run;
15731 +
15732 +    %end;
15733 +     quit;
15734 +%mend MakeClusStructCorrData;
15735 +
15736 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
15737 +    data &outdata(drop= _NCL_  _TYPE_);
15738 +       set &indata;
15739 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15740 +       rename _NAME_ = Cluster;
15741 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15742 +    run;
15743 +    data corr_tmp;
15744 +        set &outdata;
15745 +    run;
15746 +
15747 +    %let dsid = %sysfunc(open(work.corr_tmp));
15748 +    %let nclus2= %eval(&ncluster+1);
15749 +    data &outdata;
15750 +         set &outdata;
15751 +          %do i = 2 %to &nclus2;
15752 +          %let i_1 = %eval(&i-1);
15753 +            %let _name = %sysfunc(varname(&dsid, &i));
15754 +            %let _newName = Clus&i_1;
15755 +                rename &_name = &_newName; ;
15756 +                *label &_name ="Cluster &i_1";
15757 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15758 +          %end;
15759 +          keep Cluster
15760 +          %do i = 2 %to &nclus2;
15761 +                %let _name = %sysfunc(varname(&dsid, &i));
15762 +                &_name
15763 +          %end;
15764 +          ;
15765 +    %let dsid= %sysfunc(close(&dsid));
15766 +     run;
15767 +     quit;
15768 +
15769 +    %if &RSquare eq Y %then %do;
15770 +
15771 +       data corr_tmp;
15772 +        set &outdata;
15773 +     run;
15774 +
15775 +     data &outdata(drop=i);
15776 +          set &outdata;
15777 +          %let dsid = %sysfunc(open(work.corr_tmp));
15778 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15779 +          %do i = 2 %to &nvar;
15780 +            %let _name = %sysfunc(varname(&dsid, &i));
15781 +            %let _name_md = &_name.**2;
15782 +                &_name = &_name_md;
15783 +          %end;
15784 +      %let dsid= %sysfunc(close(&dsid));
15785 +      run;
15786 +    %end;
15787 +
15788 +    %if &makeplotds eq Y %then %do;
15789 +     proc transpose data = &outdata
15790 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15791 +          by cluster;
15792 +     run;
15793 +     data &plotds;
15794 +          set  &plotds;
15795 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15796 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15797 +     run;
15798 +     %end;
15799 +     proc datasets lib = work nolist;
15800 +           delete corr_tmp;
15801 +     run;
15802 +     quit;
15803 +%mend MakeInterClusCorrData;
15804 +
15805 +
15806 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15807 +
15808 +data &outlink(drop = Selected);
15809 +     set &indata;
15810 +     LINKID = _N_;
15811 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15812 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15813 +run;
15814 +data &outnode(keep=NODEID TYPE LABEL);
15815 +    set &indata;
15816 +    length TYPE $16;
15817 +    rename Variable = NODEID;
15818 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15819 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15820 +    then  TYPE = "CLUSTER";
15821 +    else  TYPE="VARIABLE";
15822 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15823 +run;
15824 +quit;
15825 +%mend MakeClusConstellData;
15826 +
15827 +
15828 +
15829 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15830 +
15831 +data &outlink(drop = Selected);
15832 +     set &indata;
15833 +     LINKID = _N_;
15834 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15835 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15836 +run;
15837 +data &outnode(keep=NODEID TYPE LABEL);
15838 +    set &indata;
15839 +    length TYPE $16;
15840 +    rename Variable = NODEID;
15841 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15842 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15843 +    then  TYPE = "CLUSTER";
15844 +    else  TYPE="VARIABLE";
15845 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15846 +run;
15847 +quit;
15848 +%mend MakeClusConstellData;
15849 +
15850 +
15851 +/*--- This will work only when inds is not a view data -------
15852 +
15853 +%macro getNVarNObs(inds=, nvar=, nobs=);
15854 +
15855 +    %global &nvar;
15856 +    %global &nobs;
15857 +    data _null_;
15858 +         dsid = open("&inds");
15859 +         nv = attrn(dsid, 'NVAR');
15860 +         no = attrn(dsid, 'NOBS');
15861 +         dsid = close(dsid);
15862 +         call symput("&nvar", nv);
15863 +         call symput("&nobs", no);
15864 +    run;
15865 +    quit;
15866 +%mend  getNVarNObs;
15867 +
15868 ++---------------------------------------------------------------*/
15869 +
15870 +
15871 +%macro getNVar(inds=, nvar=);
15872 +    %global &nvar;
15873 +    data _null_;
15874 +         dsid = open("&inds");
15875 +         nv = attrn(dsid, 'NVAR');
15876 +         dsid = close(dsid);
15877 +         call symput("&nvar", nv);
15878 +    run;
15879 +    quit;
15880 +%mend  getNVar;
15881 +
15882 +
15883 +
15884 +%macro getNObs(inds=, nobs=);
15885 +    %global &nobs;
15886 +    data _null_;
15887 +        set &inds end=eof;
15888 +        if eof then call symput("&nobs", _N_);
15889 +    run;
15890 +    quit;
15891 +%mend  getNObs;
15892 +
15893 +%Macro CreateVarclusMeta(trainnum=);
15894 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
15895 +    data &EM_USER_VARCLUSMETA;
15896 +         length TrainNum 8.;
15897 +         length NewTrain $8;
15898 +         length NGCluster 8.;
15899 +         length ExportedComp $16;
15900 +         length HideVariable $8;
15901 +         TrainNum = &trainnum;
15902 +         NewTrain = "Y";
15903 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
15904 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
15905 +         NGCluster = 0; /* zero means no twostage */
15906 +   run;
15907 +   quit;
15908 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
15909 +
15910 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
15911 +    data &outdata(drop= _NCL_  _TYPE_);
15912 +       set &indata;
15913 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15914 +       %if &globalclusid ne %then %do;
15915 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
15916 +       rename _NAME_ = Cluster;
15917 +       %end;
15918 +       %else %do;
15919 +        _NAME_ = upcase(_NAME_);
15920 +       rename _NAME_ = Cluster;
15921 +       %end;
15922 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15923 +    run;
15924 +    data corr_tmp;
15925 +        set &outdata;
15926 +    run;
15927 +
15928 +    %let dsid = %sysfunc(open(work.corr_tmp));
15929 +    %let nclus2= %eval(&ncluster+1);
15930 +    data &outdata;
15931 +         set &outdata;
15932 +          %do i = 2 %to &nclus2;
15933 +          %let i_1 = %eval(&i-1);
15934 +            %let _name = %sysfunc(varname(&dsid, &i));
15935 +            %if &globalclusid ne %then
15936 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
15937 +                     rename &_name = &_newName;
15938 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
15939 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
15940 +                %end;
15941 +            %else
15942 +                %do; %let _newName = CLUS&i_1;
15943 +                     rename &_name = &_newName;
15944 +                     *label &_name ="Cluster &i_1";
15945 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15946 +                %end;
15947 +          %end;
15948 +          keep Cluster
15949 +          %do i = 2 %to &nclus2;
15950 +                %let _name = %sysfunc(varname(&dsid, &i));
15951 +                &_name
15952 +          %end;
15953 +          ;
15954 +    %let dsid= %sysfunc(close(&dsid));
15955 +     run;
15956 +     quit;
15957 +
15958 +    %if &RSquare eq Y %then %do;
15959 +
15960 +       data corr_tmp;
15961 +        set &outdata;
15962 +     run;
15963 +
15964 +     data &outdata;
15965 +          set &outdata;
15966 +          %let dsid = %sysfunc(open(work.corr_tmp));
15967 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15968 +          %do i = 2 %to &nvar;
15969 +            %let _name = %sysfunc(varname(&dsid, &i));
15970 +            %let _name_md = &_name.**2;
15971 +                &_name = &_name_md;
15972 +          %end;
15973 +      %let dsid= %sysfunc(close(&dsid));
15974 +      run;
15975 +    %end;
15976 +
15977 +    %if &makeplotds eq Y %then %do;
15978 +     proc transpose data = &outdata
15979 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15980 +          by cluster;
15981 +     run;
15982 +     data &plotds;
15983 +          set  &plotds;
15984 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15985 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15986 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15987 +     run;
15988 +     %end;
15989 +     proc datasets lib = work nolist;
15990 +           delete corr_tmp;
15991 +     run;
15992 +     quit;
15993 +%mend MakeInterClusCorrData;
15994 +
15995 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
15996 +    data _tmpds(drop= _NCL_);
15997 +       set &indata;
15998 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
15999 +       %if &globalclusid ne %then %do;
16000 +           _NAME_ = "GC&globalclusid.";
16001 +       rename _NAME_ = Cluster;
16002 +       %end;
16003 +       %else %do;
16004 +        _NAME_ = "CLUS";
16005 +        rename _NAME_ = Cluster;
16006 +       %end;
16007 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
16008 +    run;
16009 +    proc transpose data =_tmpds out =&outdata;
16010 +    run;
16011 +
16012 +    data &outdata(drop=COL1);
16013 +        %if &globalclusid ne %then %do;
16014 +        length GCluster $16;
16015 +        %end;
16016 +        length Cluster $32;
16017 +        length _NAME_ $32;
16018 +         set &outdata;
16019 +         _NAME_ = upcase(_NAME_);
16020 +         rename _NAME_=Variable;
16021 +         *label _NAME_="Variable";
16022 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16023 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16024 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16025 +
16026 +         %if &globalclusid ne %then %do;
16027 +          GCluster = "GC&globalclusid";
16028 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16029 +         %end;
16030 +         %else %do;
16031 +         Cluster = "CLUS"||strip(COL1);
16032 +        %end;
16033 +         rename COL2 = RSqWithOwnClusComp;
16034 +         *label COL2 = "R-Square With Own Cluster Component";
16035 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16036 +
16037 +   run;
16038 +   proc sort data =&outdata;
16039 +        by Cluster RSqWithOwnClusComp;
16040 +   run;
16041 +   proc datasets lib = work nolist;
16042 +           delete _tmpds;
16043 +   run;
16044 +   quit;
16045 +%mend MakeOwnRSquare;
16046 +
16047 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16048 +    data &outdata(drop= _NCL_  _TYPE_);
16049 +       %if &globalclusid ne %then %do;
16050 +        length GCluster $16;
16051 +        %end;
16052 +       set &indata;
16053 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16054 +       %if &globalclusid ne %then %do;
16055 +         GCluster = "GC&globalclusid";
16056 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16057 +         rename _NAME_ = Cluster;
16058 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16059 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16060 +
16061 +       %end;
16062 +       %else %do;
16063 +         _NAME_ = upcase(_NAME_);
16064 +         rename _NAME_ = Cluster;
16065 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16066 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16067 +
16068 +       %end;
16069 +     run;
16070 +    %if &RSquare eq Y %then %do;
16071 +     data corr_tmp;
16072 +          set &outdata;
16073 +     run;
16074 +     %let istart = 2;
16075 +     %if &globalclusid ne %then %let istart = 3;
16076 +     data &outdata;
16077 +          set &outdata;
16078 +          %let dsid = %sysfunc(open(work.corr_tmp));
16079 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16080 +          %do i =&istart %to &nvar;
16081 +            %let _name = %sysfunc(varname(&dsid, &i));
16082 +            %let _name_md = &_name.**2;
16083 +                &_name = &_name_md;
16084 +          %end;
16085 +      %let dsid= %sysfunc(close(&dsid));
16086 +      run;
16087 +      proc datasets lib = work nolist;
16088 +           delete corr_tmp;
16089 +      run;
16090 +    %end;
16091 +     quit;
16092 +%mend MakeClusStructCorrData;
16093 +
16094 +/*
16095 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16096 +*/
16097 +
16098 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16099 +
16100 +     /* The indata should be the outdata
16101 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16102 +
16103 +     proc sort data =&indata out=_tmpclusRsq;
16104 +     by cluster;
16105 +     run;
16106 +
16107 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16108 +      by cluster;
16109 +     run;
16110 +
16111 +     proc sort data=_tmpclusRsq;
16112 +        by _NAME_ COL1;
16113 +     run;
16114 +
16115 +     data _tmpclusRsq;
16116 +         length _NAME_ $32;
16117 +         set _tmpclusRsq; by _NAME_;
16118 +          _NAME_ = upcase(_NAME_);
16119 +          %if &ncluster ne 1 %then %do;
16120 +             if last._NAME_ then delete;
16121 +          %end;
16122 +          %else %do;
16123 +             COL1 = 0;
16124 +          %end;
16125 +     run;
16126 +     /* need to sort again */
16127 +     proc sort data=_tmpclusRsq;
16128 +        by _NAME_ COL1;
16129 +     run;
16130 +
16131 +     data &outdata;
16132 +         set _tmpclusRsq; by _NAME_;
16133 +         Cluster = upcase(Cluster);
16134 +         if last._NAME_ then output;
16135 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16136 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16137 +         rename COL1 = RSqWithNextClusComp;
16138 +         Cluster = upcase(Cluster);
16139 +         rename Cluster = ClosestCluster;
16140 +         *label  Cluster = "Next Closest Cluster";
16141 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16142 +         rename _NAME_ = Variable;
16143 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16144 +    run;
16145 +
16146 +
16147 +    %if &globalclusid ne %then %do;
16148 +    data &outdata;
16149 +       length GCluster $16;
16150 +       set &outdata;
16151 +       GCluster = "GC&globalclusid";
16152 +       run;
16153 +    %end;
16154 +    proc datasets lib = work nolist;
16155 +           delete _tmpclusRsq;
16156 +    run;
16157 +    quit;
16158 +%mend FindNextClosestClusByVar;
16159 +
16160 +
16161 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16162 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16163 +     proc sort data =&indata out=_tmpclusRsq;
16164 +     by cluster;
16165 +     run;
16166 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16167 +     by cluster;
16168 +     run;
16169 +     proc sort data=_tmpclusRsq;
16170 +        by _NAME_ col1;
16171 +     run;
16172 +     data _tmpclusRsq;
16173 +         length _NAME_ $32;
16174 +         set _tmpclusRsq; by _NAME_;
16175 +          _NAME_ = upcase(_NAME_);
16176 +          %if &ncluster ne 1 %then %do;
16177 +             if last._NAME_ then delete;
16178 +          %end;
16179 +          %else %do;
16180 +             COL1 = 0;
16181 +          %end;
16182 +     run;
16183 +     data &outdata;
16184 +         set _tmpclusRsq; by _NAME_;
16185 +         Cluster = upcase(Cluster);
16186 +         if last._NAME_ then output;
16187 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16188 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16189 +         rename COL1 = RSqWithNextClusComp;
16190 +         Cluster = upcase(Cluster);
16191 +         rename Cluster = ClosestCluster;
16192 +         *label  Cluster = "Next Closest Cluster";
16193 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16194 +         rename _NAME_ = Variable;
16195 +         *label  _NAME_ = "Variable";
16196 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16197 +
16198 +    run;
16199 +    %if &globalclusid ne %then %do;
16200 +    data &outdata;
16201 +       length GCluster $16;
16202 +       set &outdata;
16203 +       GCluster = "GC&globalclusid";
16204 +       run;
16205 +    %end;
16206 +
16207 +    proc datasets lib = work nolist;
16208 +           delete _tmpclusRsq;
16209 +    run;
16210 +
16211 +    quit;
16212 +%mend FindNextClosestClusByCluster;
16213 +
16214 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16215 +/*----
16216 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16217 +-----------*/
16218 +
16219 +proc sort data =&indata1;
16220 +    by Variable;
16221 +run;
16222 +proc sort data =&indata2;
16223 +    by Variable;
16224 +run;
16225 +data &outdata;
16226 +    merge &indata1 &indata2;
16227 +    by Variable;
16228 +    length Type $16;
16229 +    Type = 'Variable';
16230 +    *label Type ='Type';
16231 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16232 +run;
16233 +
16234 +
16235 +data &indata3;
16236 +    set  &indata3 ;
16237 +    length RSqWithOwnClusComp 8.;
16238 +    Cluster = Variable;
16239 +    RSqWithOwnClusComp = 1;
16240 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16241 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16242 +    length Type $16;
16243 +    Type = 'ClusterComp';
16244 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16245 +
16246 +;
16247 +run;
16248 +
16249 +proc sort data=&outdata;
16250 +    by Cluster;
16251 +run;
16252 +proc sort data =&indata3;
16253 +    by Cluster;
16254 +run;
16255 +
16256 +data &outdata;
16257 +     set &outdata &indata3;
16258 +     by Cluster;
16259 +run;
16260 +
16261 +
16262 +/* Create the Selected variable with all YES */
16263 +
16264 +data &outdata;
16265 +     set &outdata;
16266 +     length RsqRatio 8.;
16267 +     length Selected $8;
16268 +     *label RSqRatio = "1-R**2 Ratio";
16269 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16270 +     *label Selected = "Variable Selected";
16271 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16272 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16273 +     Selected ='YES';
16274 +     rename _LABEL_ = Label;
16275 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16276 +run;
16277 +
16278 +
16279 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16280 +        Just create the Selected variable with all YES at the step above
16281 + +------------------------------------------------------------------------------+
16282 +
16283 +proc sort data=&outdata;
16284 +    by Cluster RsqRatio;
16285 +run;
16286 +
16287 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16288 +data &outdata;
16289 +     set &outdata; by Cluster;
16290 +     length Selected $8;
16291 +     label Selected = "Variable Selected";
16292 +     if  first.Cluster then Selected ='Yes';
16293 +     else Selected = 'No';
16294 +    run;
16295 +%end;
16296 +%else %do;
16297 +data &outdata(drop = _var _varchange);
16298 +     set &outdata; retain _var 0; by Cluster;
16299 +     length Selected $8;
16300 +     label Selected = "Variable Selected";
16301 +     if first.Cluster then  _varchange = 0;
16302 +     else _varchange =1;
16303 +     if _var ne _varchange then  Selected  = 'Yes';
16304 +     else Selected = 'No';
16305 +     if last.cluster then  _var = 0;
16306 +     else _var = _varchange;
16307 +run;
16308 +%end;
16309 +
16310 +--------------------------------------------------------------*/
16311 +
16312 +quit;
16313 +%mend MakeVarClusResultTable;
16314 +
16315 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16316 +     proc sort data =&indata;
16317 +        by cluster;
16318 +     run;
16319 +     proc transpose data =&indata
16320 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16321 +          by cluster;
16322 +     run;
16323 +     data &outdata;
16324 +          set  &outdata;
16325 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16326 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16327 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16328 +     run;
16329 +     %if &globalclusid ne %then %do;
16330 +     data &outdata;
16331 +          Length GCluster $16;
16332 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16333 +          set  &outdata;
16334 +          GCluster ="GC&globalclusid.";
16335 +          run;
16336 +     %end;
16337 +
16338 +%Mend MakePlotDataFromCorrTable;
16339 +
16340 +
16341 +%macro MakeCorrelation(indata=,
16342 +                       outstat=_tmpoutstat,
16343 +                       corrmatrix=N,
16344 +                       outcorr=_tmpoutcorr,
16345 +                       includeclassvar=N,
16346 +                       target=,
16347 +                       freq=,
16348 +                       weight=);
16349 +   %if &target eq  %then %do;
16350 +
16351 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16352 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16353 +       %if &includeclassvar eq Y %then %do;
16354 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16355 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16356 +          %do i = 2 %to &nvar;
16357 +          %let varname = %sysfunc(varname(&dsid, &i));
16358 +          &varname
16359 +          %end;
16360 +       %end;
16361 +       ;
16362 +      %if &freq ne  %then %do;
16363 +          freq &freq;
16364 +      %end;
16365 +      %if &weight ne  %then %do;
16366 +          weight &weight;
16367 +      %end;
16368 +
16369 +      run;
16370 +      %if &corrmatrix eq Y %then %do;
16371 +      data  &outcorr (drop = _NCL_ _TYPE_);
16372 +           set  &outstat ;
16373 +           if _TYPE_ ='CORR' then output;
16374 +      run;
16375 +      %end;
16376 +    %end;
16377 +    %else %do;
16378 +       proc corr data=&indata outp=&outstat noprint;
16379 +            var
16380 +       %let dsid = %sysfunc(open(&indata));
16381 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16382 +          %do i = 1 %to &nvar;
16383 +              %let _name = %sysfunc(varname(&dsid, &i));
16384 +              %if &_name ne &target %then;
16385 +              &_name
16386 +           %end;
16387 +        %let dsid= %sysfunc(close(&dsid));
16388 +        ;
16389 +        with &target;
16390 +        run;
16391 +    %end;
16392 +    quit;
16393 +%mend MakeCorrelation;
16394 +
16395 +
16396 +%macro MakeCorrelationDistance(indata=,
16397 +                               outdata=,
16398 +                               rsquare = N
16399 +                               );
16400 +    data corr_tmp;
16401 +        set &indata;
16402 +        if _N_ = 1 then do;
16403 +           output;
16404 +           stop;
16405 +         end;
16406 +    run;
16407 +    %if &outdata ne  %then %let  _outdata = &outdata;
16408 +    %else %let _outdata = &indata;
16409 +
16410 +    data &_outdata;
16411 +         set &indata;
16412 +
16413 +         %let dsid = %sysfunc(open(work.corr_tmp));
16414 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16415 +          %do i = 2 %to &nvar;
16416 +              %let _name = %sysfunc(varname(&dsid, &i));
16417 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16418 +              %else  %let _name_md = &_name;
16419 +              &_name = 1- &_name_md;
16420 +          %end;
16421 +      %let dsid= %sysfunc(close(&dsid));
16422 +      run;
16423 +      proc datasets lib = work nolist;
16424 +           delete corr_tmp;
16425 +      run;
16426 +      quit;
16427 +  %mend MakeCorrelationDistance;
16428 +
16429 +
16430 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16431 +                                   rsquare = N
16432 +                                   );
16433 +    data corr_tmp;
16434 +        set &indata;
16435 +    run;
16436 +    proc sql noprint;
16437 +           update &indata
16438 +           set
16439 +     %let dsid = %sysfunc(open(work.corr_tmp));
16440 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16441 +          %do i = 4 %to &nvar;
16442 +          %let _name = %sysfunc(varname(&dsid, &i));
16443 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16444 +            %else  %let _name_md = &_name;
16445 +            %if &i < &nvar %then %do;
16446 +               &_name = 1- &_name_md ,
16447 +            %end;
16448 +            %else %do;
16449 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16450 +            %end;
16451 +          %end;
16452 +      %let dsid= %sysfunc(close(&dsid));
16453 +
16454 +      select * from &indata;
16455 +      run;
16456 +     data &indata( drop = _NCL_);
16457 +           set &indata;
16458 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16459 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16460 +     run;
16461 +     data &indata(DROP = _NCL_);
16462 +           set &indata;
16463 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16464 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16465 +           rename _NAME_ = _VAR_;
16466 +     run;
16467 +     proc datasets lib = work nolist;
16468 +           delete corr_tmp;
16469 +     run;
16470 +     quit;
16471 + %mend UpdateOutStatCorrToDistance;
16472 +
16473 +
16474 +%macro HierClusWithCorr(indata= ,
16475 +                        ncluster=,
16476 +                        method = Ward,
16477 +                        outtree = _outtree,
16478 +                        idvar =_VAR_,
16479 +                        outdata=,
16480 +                        rescore = N,
16481 +                        newncluster=
16482 +                        );
16483 +      %global &newncluster;
16484 +      %if &rescore ne Y %then %do;
16485 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16486 +                   method=&method outtree=&outtree noprint;
16487 +           id &idvar;
16488 +      run;
16489 +      %end;
16490 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16491 +      run;
16492 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16493 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16494 +      run;
16495 +      data _outcontent;
16496 +          set _outcontent;
16497 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16498 +          index = 1;
16499 +          rename NAME = _NAME_;
16500 +      run;
16501 +      proc sort data=_outcontent;
16502 +          by _NAME_;
16503 +      run;
16504 +      proc sort data =&outdata;
16505 +           by _NAME_;
16506 +      run;
16507 +      data &outdata(drop=index);
16508 +          merge &outdata _outcontent;
16509 +          by _NAME_;
16510 +          if index = . then delete;
16511 +      run;
16512 +      /*-----------------------------------------------------------*/
16513 +      data &outdata;
16514 +           length CLUSNAME $16;
16515 +           set &outdata;
16516 +           if CLUSTER > &ncluster then delete;
16517 +           CLUSNAME='GC'||strip(CLUSTER);
16518 +           *label CLUSNAME = "Cluster Name";
16519 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
16520 +           rename _NAME_ = VARIABLE ;
16521 +           *label _NAME_ = "Variable";
16522 +           *label CLUSTER = "Cluster";
16523 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16524 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16525 +      run;
16526 +      proc sort data=&outdata out=&outdata;
16527 +           by CLUSTER;
16528 +      run;
16529 +      proc means data =&outdata noprint;
16530 +           output out=_meanout;
16531 +      run;
16532 +      data _null_;
16533 +            set _meanout;
16534 +            if strip(_STAT_) eq 'MAX' then do;
16535 +            call symput("&newncluster", CLUSTER);
16536 +            stop;
16537 +            end;
16538 +      run;
16539 +
16540 +      proc datasets lib = work nolist;
16541 +           delete _outcontent _meanout;
16542 +      run;
16543 +      quit;
16544 +%mend  HierClusWithCorr;
16545 +
16546 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
16547 +
16548 +     data _tmpindata;
16549 +          set &indata;
16550 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16551 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16552 +          if _TYPE_ = 'STD' then _NAME_='STD';
16553 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
16554 +          DROP _TYPE_ _NCL_;
16555 +     run;
16556 +
16557 +     filename _file_  "&fileRef";
16558 +
16559 +     data _null_;
16560 +        FILE _file_ MOD;
16561 +        put ' ';
16562 +        put "/*-------------------------------------------------*/";
16563 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
16564 +        put "/*-------------------------------------------------*/";
16565 +        put ' ';
16566 +        %let dsid = %sysfunc(open(work._tmpindata));
16567 +
16568 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16569 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16570 +        %let k = 1;
16571 +        %do %while(^%sysfunc(fetch(&dsid)));
16572 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16573 +               %if &k > 2 %then %do;
16574 +                %let cn = %eval(&k-2);
16575 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
16576 +                %end;
16577 +                %let k = %eval(&k+1);
16578 +
16579 +        %end;
16580 +        %let rc = %sysfunc(rewind(&dsid));
16581 +
16582 +        %do j= 2 %to &nvar;
16583 +            %let _varname = %sysfunc(varname(&dsid, &j));
16584 +            %do %while(^%sysfunc(fetch(&dsid)));
16585 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16586 +                %if &_name = MEAN %then
16587 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
16588 +                %else %if &_name = STD %then
16589 +                %let _std = %sysfunc(getvarn(&dsid, &j));
16590 +                %else %do;
16591 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
16592 +                      %let abscoeff = %sysfunc(abs(&coeff));
16593 +                          %if &abscoeff >  0 %then %do;
16594 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16595 +                           %end;
16596 +                 %end;
16597 +             %end;
16598 +             %let rc = %sysfunc(rewind(&dsid));
16599 +         %end;
16600 +
16601 +        %let dsid= %sysfunc(close(&dsid));
16602 +
16603 +     run;
16604 +
16605 +     filename _file_;
16606 +     proc datasets lib = work nolist;
16607 +           delete _tmpindata;
16608 +     run;
16609 +     quit;
16610 +%mend CreateScoreCode2;
16611 +
16612 +
16613 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
16614 +
16615 +     /*--- Build Code to Modify Metadata ---*/
16616 +     filename X "&deltacodefile";
16617 +     data _null_;
16618 +        FILE X;
16619 +        set &groupds end=eof;
16620 +        if _N_=1 then do;
16621 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16622 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16623 +           %end;
16624 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16625 +           put "if upcase(strip(NAME)) in (";
16626 +        end;
16627 +        if Strip(upcase(Selected)) eq 'YES' then do;
16628 +           string = '"'!!trim(left(VARIABLE))!!'"';
16629 +           put string;
16630 +        end;
16631 +        if eof then do;
16632 +           put ') then ROLE="INPUT";';
16633 +           put 'else ROLE="REJECTED";';
16634 +           put 'end;';
16635 +
16636 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16637 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16638 +           %end;
16639 +        end;
16640 +     run;
16641 +     quit;
16642 +
16643 +     filename X;
16644 +     quit;
16645 +%mend MakeDeltaCode2;
16646 +
16647 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
16648 +  %global &ngc;
16649 +  data _null_;
16650 +  %if &indata ne %then %do;
16651 +      %let dsid = %sysfunc(open(&indata));
16652 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
16653 +      %let dsid = %sysfunc(close(&dsid));
16654 +  %end;
16655 +  %else %do;
16656 +       %let nvar = %eval(&ninput+&ndummy); ;
16657 +  %end;
16658 +  %let numgc = %eval(&nvar/&div+2);
16659 +  %let &ngc = &numgc;
16660 +   run;
16661 +  quit;
16662 +%mend getInitialGClusterNumber;
16663 +
16664 +
16665 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
16666 +data &outlink(drop = Selected);
16667 +     set &indata;
16668 +     LINKID = _N_;
16669 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
16670 +run;
16671 +data &outnode(keep=NODEID TYPE LABEL);
16672 +    set &indata;
16673 +    length TYPE $16;
16674 +    rename VARIABLE = NODEID;
16675 +    *label  CLUSNAME="Node ID";
16676 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16677 +    TYPE = "VARIABLE";
16678 +    *label TYPE = "Node Type";
16679 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16680 +    run;
16681 +data _tmp(keep=NODEID TYPE LABEL);
16682 +    set &indata;
16683 +    length TYPE $16;
16684 +    rename CLUSNAME = NODEID;
16685 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16686 +    TYPE = "GCLUSTER";
16687 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16688 +    run;
16689 +proc sort data=_tmp;
16690 +    by NODEID;
16691 +run;
16692 +data _tmp;
16693 +    set _tmp; by NODEID;
16694 +    if first.NODEID then output;
16695 +run;
16696 +proc sort data=&outnode;
16697 +    by NODEID;
16698 +run;
16699 +data  &outnode;
16700 +    set _tmp &outnode;
16701 +run;
16702 +proc datasets lib = work nolist;
16703 +     delete _tmp;
16704 +run;
16705 +quit;
16706 +%mend MakeGobalConstellData;
16707 +
16708 +/* Make contellation plot data among GCLUSTERS */
16709 +
16710 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
16711 +
16712 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
16713 +     set &indata;
16714 +     LINKID = _N_;
16715 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
16716 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
16717 +     end;
16718 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
16719 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
16720 +     end;
16721 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
16722 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
16723 +    end;
16724 +run;
16725 +
16726 +data _tmp_outrsquare;
16727 +        set &inoutrsq;
16728 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
16729 +run;
16730 +
16731 +proc freq data =_tmp_outrsquare noprint;
16732 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
16733 +run;
16734 +
16735 +data &outnode(keep=_NAME_ TYPE LABEL);
16736 +    set &outlink;
16737 +    length TYPE $16;
16738 +    length LABEL $100;
16739 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
16740 +
16741 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16742 +    TYPE = "GCLUSTER";
16743 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16744 +    end;
16745 +    else do;
16746 +    TYPE= "ROOT";
16747 +    LABEL= _NAME_;
16748 +    end;
16749 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16750 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16751 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16752 +    run;
16753 +
16754 +proc sort data=&outnode;
16755 +     by _NAME_;
16756 +proc sort data=_tmp_GCLUSFREQ;
16757 +     by _NAME_;
16758 +run;
16759 +
16760 +data  &outnode;
16761 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
16762 +     if COUNT=. then COUNT=1;
16763 +run;
16764 +
16765 +proc datasets lib = work nolist;
16766 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
16767 +run;
16768 +
16769 +quit;
16770 +%Mend MakeGClusterConstData;
16771 +
16772 +
16773 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
16774 +
16775 +    data _gscoretmpds;
16776 +          set &indata;
16777 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
16778 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16779 +          if _TYPE_ = 'STD' then _NAME_='STD';
16780 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
16781 +          DROP _TYPE_ _NCL_;
16782 +     run;
16783 +
16784 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
16785 +        GCluster Component &globalclusid ------ */
16786 +
16787 +    filename _file_  "&fileref";
16788 +
16789 +    data _null_;
16790 +        %if &globalclusid eq 1 %then %do;
16791 +          FILE _file_;
16792 +        %end;
16793 +        %else %do;
16794 +          FILE _file_ MOD;
16795 +        %end;
16796 +
16797 +        %let dsid = %sysfunc(open(work._gscoretmpds));
16798 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16799 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16800 +
16801 +        %let k = 1;
16802 +        %do %while(^%sysfunc(fetch(&dsid)));
16803 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16804 +                %if &k > 2 %then %do;
16805 +                put "&_name = 0 ; ";
16806 +                %end;
16807 +                %let k = %eval(&k+1);
16808 +        %end;
16809 +
16810 +        %let rc = %sysfunc(rewind(&dsid));
16811 +        %do i= 2 %to &nvar;
16812 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16813 +            %do %while(^%sysfunc(fetch(&dsid)));
16814 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16815 +                %if &_name = MEAN %then
16816 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16817 +                %else %if &_name = STD %then
16818 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16819 +                %else %do;
16820 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16821 +                      %let abscoeff = %sysfunc(abs(&coeff));
16822 +                          %if &abscoeff >  0 %then %do;
16823 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16824 +                           %end;
16825 +                 %end;
16826 +             %end;
16827 +             %let rc = %sysfunc(rewind(&dsid));
16828 +
16829 +         %end;
16830 +
16831 +        %let dsid= %sysfunc(close(&dsid));
16832 +       run;
16833 +
16834 +
16835 +       proc datasets lib=work nolist;
16836 +            delete _gscoretmpds;
16837 +       run;
16838 +      quit;
16839 +
16840 +%mend CreateGClusterScoreCode;
16841 +
16842 +
16843 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
16844 +
16845 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
16846 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
16847 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
16848 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
16849 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
16850 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
16851 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
16852 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
16853 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
16854 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
16855 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
16856 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
16857 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
16858 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
16859 +
16860 +   filename gsfile "&gscorecode";
16861 +
16862 +   data &EM_USER_GSCORE;
16863 +             set &indata;
16864 +             %include  gsfile;
16865 +        keep
16866 +        %do i=1 %to &ngcluster;
16867 +         %let gcvarname = GC&i;
16868 +         &gcvarname
16869 +        %end;
16870 +     ;
16871 +   run;
16872 +
16873 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
16874 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
16875 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
16876 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
16877 +    noprint  ;
16878 +     var
16879 +       %do i=1 %to &ngcluster;
16880 +         %let gcvarname = GC&i;
16881 +         &gcvarname
16882 +        %end;
16883 +   ;
16884 +   run;
16885 +
16886 +
16887 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
16888 +   data &EM_USER_GSCORECORRPLOT ;
16889 +        set &EM_USER_GSCORECORRPLOT;
16890 +        rename _X_ = X;
16891 +        rename _Y_ = Y;
16892 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16893 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16894 +   run;
16895 +
16896 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
16897 +
16898 +   data &EM_USER_GSCORETREE;
16899 +        length _NAME_ $32;
16900 +        length _LABEL_ $100;
16901 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
16902 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16903 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16904 +        end;else do;
16905 +         _LABEL_ = _NAME_;
16906 +        end;
16907 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16908 +
16909 +   run;
16910 +
16911 +   quit;
16912 +
16913 +%mend MakeGClusterCorrelation;
16914 +
16915 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
16916 +
16917 +
16918 +%macro train;
16919 +
16920 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
16921 +   %include temp;
16922 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
16923 +   %include temp;
16924 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
16925 +   %include temp;
16926 +   filename temp;
16927 +
16928 +   %let VARCLUS_MAXNUMOBS = 100000;
16929 +   %let VARCLUS_MAXNUMVAR = 200;
16930 +   %let trainnum = 0;
16931 +   %let error = 0;
16932 +
16933 +   %if &EM_IMPORT_DATA eq %then %do;
16934 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16935 +       %let  error = 1;
16936 +       %goto endtrain;
16937 +   %end;
16938 +
16939 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
16940 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16941 +        %let  error = 1;
16942 +        %goto endline;
16943 +    %end;
16944 +
16945 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
16946 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
16947 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
16948 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
16949 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
16950 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
16951 +
16952 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
16953 +        %if  &_num_input_total < 2 %then %do;
16954 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16955 +            %let error = 2;
16956 +            %goto endtrain;
16957 +        %end;
16958 +   %end;
16959 +   %else %do;
16960 +         %if  &_num_input_interval < 2 %then %do;
16961 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16962 +         %let error = 2;
16963 +         %goto endtrain;
16964 +         %end;
16965 +   %end;
16966 +
16967 +   %em_checkerror();
16968 +
16969 +   %if &EMEXCEPTIONSTRING ne %then %do;
16970 +       %goto endtrain;
16971 +   %end;
16972 +
16973 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
16974 +
16975 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
16976 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
16977 +                             outvar=&EM_USER_OUTDUMMY,
16978 +                             outdata=_newtrainds,
16979 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
16980 +
16981 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16982 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
16983 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16984 +                proc datasets lib=work nolist;
16985 +                delete  _newtrainds;
16986 +                run;
16987 +                quit;
16988 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16989 +                %let error = 3;
16990 +               %goto endtrain;
16991 +            %end;
16992 +        %end;
16993 +
16994 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16995 +             %getNVar(inds=_newtrainds, nvar=_nvar);
16996 +
16997 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
16998 +                %let trainnum = 2;
16999 +            %end;
17000 +            %else %do;
17001 +                %let trainnum = 1;
17002 +            %end;
17003 +        %end;
17004 +    %end;
17005 +    %else %do;
17006 +
17007 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17008 +
17009 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
17010 +
17011 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17012 +
17013 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17014 +                  %let error = 3;
17015 +                 %goto endtrain;
17016 +            %end;
17017 +        %end;
17018 +
17019 +
17020 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
17021 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
17022 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17023 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17024 +                %let trainnum = 2;
17025 +            %end;
17026 +            %else %do;
17027 +                %let trainnum = 1;
17028 +            %end;
17029 +        %end;
17030 +
17031 +   %end;
17032 +
17033 +    %em_checkerror();
17034 +
17035 +    %if &EMEXCEPTIONSTRING ne %then %do;
17036 +       %let error = 4;
17037 +       %goto endtrain;
17038 +    %end;
17039 +
17040 +    %CreateVarclusMeta(trainnum=&trainnum);
17041 +
17042 +    %if &error > 0 %then  %goto endtrain;
17043 +
17044 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17045 +
17046 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17047 +           %train1;
17048 +       %end;
17049 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17050 +           %train2;
17051 +       %end;
17052 +
17053 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17054 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17055 +      %em_copyfile(infref=_in, outfref=_out);
17056 +      filename _in;
17057 +      filename _out;
17058 +
17059 +
17060 +   %endtrain:
17061 +
17062 +
17063 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17065 +%macro VarClus(indata=,
17066 +               outstat=,
17067 +               outtree=,
17068 +               vars=,
17069 +               freq=,
17070 +               weight=,
17071 +               includeclassvar=
17072 +               );
17074 +   %if &vars eq %then
17075 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17077 +        /*Add by ruzhan, May 28, 2013*/
17078 +        ods graphics on;
17079 +        %let odspath =;
17080 +        data _null_;
17081 +            path = pathname('WORK');
17082 +            call symput('odspath', path);
17083 +        run;
17084 +        ods listing gpath="&odspath";
17085 +        ods output DENDROGRAM=&outtree;
17086 +       proc varclus data = &indata outstat= &outstat
17087 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17088 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17089 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17090 +        /*-----------------------
17091 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17092 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17093 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17094 +       %end;
17095 +       -------------------------*/
17096 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17097 +            maxc = &EM_PROPERTY_MAXCLUS
17098 +       %end;
17100 +       /*------------------------------------------------------------------------------------------------------
17101 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17102 +        ------------------------------------------------------------------------------------------------------*/
17104 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17105 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17106 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17107 +       %end;
17109 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17110 +            proportion = &EM_PROPERTY_PROPORTION
17111 +       %end;
17112 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17113 +               summary
17114 +       %end;
17116 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17117 +           short
17118 +       %end;
17119 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17120 +           corr trace simple
17121 +       %end;
17122 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17123 +          noprint
17124 +       %end;
17125 +        /*Comment out by ruzhan, May 28, 2013*/
17126 +       /*       outtree=&outtree*/
17127 +       ;
17128 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17130 +      %if &includeclassvar eq Y %then %do;
17131 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17132 +          %if &dsid > 0 %then %do;
17133 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17134 +              %do i = 2 %to &nvar;
17135 +                  %let varname = %sysfunc(varname(&dsid, &i));
17136 +                   &varname
17137 +              %end;
17139 +          %end;
17140 +      %end;
17142 +      ;
17143 +      /*------------------------
17144 +      %if &freq ne  %then %do;
17145 +          freq &freq;
17146 +      %end;
17147 +      %if &weight ne  %then %do;
17148 +          weight &weight;
17149 +      %end;
17150 +      ----------------------------*/
17151 +      %if %EM_FREQ ne %then %do;
17152 +           Freq %EM_FREQ;
17153 +      %end;
17154 +      ;
17155 +    run;
17156 +    ods graphics off;
17157 +    %endline:
17158 +    quit;
17159 +%mend VarClus;
17161 +%macro Train1;
17163 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17164 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17165 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17166 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17167 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17168 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17169 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17170 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17171 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17172 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17173 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17174 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17175 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17177 +   /*
17178 +     %let VARCLUS_MAXNUMOBS = 100;
17179 +     %let VARCLUS_MAXNUMVAR = 200;
17180 +   */
17182 +   /* Train
17184 +   %if &EM_IMPORT_DATA eq %then %do;
17185 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17186 +       %goto endtrain1;
17187 +   %end;
17189 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17190 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17191 +        %goto endtrain1;
17192 +   %end;
17193 +   */
17194 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17195 +       /* moved this to pretrain ------------
17197 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17198 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17199 +                             outvar=&EM_USER_OUTDUMMY,
17200 +                             outdata=_newtrainds,
17201 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17203 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17204 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17205 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17206 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17207 +                %goto endtrain;
17208 +            %end;
17209 +        %end;
17211 +        +-------------------------------------*/
17213 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17214 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17215 +          There is no _newtrainds */
17216 +         %VarClus( indata=&EM_IMPORT_DATA,
17217 +                  outstat=&EM_USER_OUTSTAT,
17218 +                  outtree = &EM_USER_OUTTREE,
17219 +                  includeclassvar=N
17220 +                 );
17221 +        %end;
17222 +        %else %do;
17223 +        %VarClus( indata=_newtrainds,
17224 +                  outstat=&EM_USER_OUTSTAT,
17225 +                  outtree = &EM_USER_OUTTREE,
17226 +                  includeclassvar=Y
17227 +                 );
17228 +         proc datasets lib=work nolist;
17229 +              delete  _newtrainds;
17230 +         run;
17231 +         %end;
17232 +    %end;
17233 +    %else %do;
17235 +        /*----- moved this to pretrain ------------
17236 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17237 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17238 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17239 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17240 +                 %goto endtrain;
17241 +            %end;
17242 +        %end;
17243 +        +-------------------------------------*/
17245 +        %VarClus(indata=&EM_IMPORT_DATA,
17246 +                  outstat=&EM_USER_OUTSTAT,
17247 +                  outtree =&EM_USER_OUTTREE,
17248 +                  includeclassvar=N
17249 +               );
17251 +   %end;
17253 +   %em_checkerror();
17255 +   %if &EMEXCEPTIONSTRING ne %then %do;
17256 +       %goto endtrain1;
17257 +   %end;
17258 +    /*
17259 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17260 +    */
17262 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17264 +    %let gid=;
17266 +    /*--- To make the main result table ----------------------*/
17268 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17269 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17270 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17271 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17272 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17273 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17275 +   /* Inter Cluster Correlation Plot ------------------------*/
17277 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17278 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17280 +   /* Create some other data sets for results ----*/
17282 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17283 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17284 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17286 +  /*---- move this to Score action ------------
17287 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17288 +   */
17290 +   /* create score code at training time */
17291 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17292 +   %endtrain1:
17293 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17296 +%macro VarClus2( indata=,
17297 +                 outdata=,
17298 +                 outstat =outstat,
17299 +                 outrsquare=outrsquare,
17300 +                 outtree = outtree,
17301 +                 outclusstruct = outclusstruct,
17302 +                 outcluscorr =outcluscorr,
17303 +                 outcluscorrplot =outcluscorrplot,
17304 +                 outclusrsquare =outclusrsquare,
17305 +                 outstatplot = outstatplot,
17306 +                 outcorr = outcorr,
17307 +                 outcorrplot = outcorrplot,
17308 +                 clusdata=,
17309 +                 outnode=outnode,
17310 +                 outlink=outlink,
17311 +                 ngroup =1  );
17312 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17313 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17314 +              %goto endline;
17315 +         %end;
17317 +        %global numglobalcluster;
17318 +        %let  numglobalcluster = &ngroup;
17319 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17320 +        %do vci =1 %to &ngroup;
17321 +           data tmp_clusdata;
17322 +                set &clusdata;
17323 +                if CLUSTER ne &vci then delete;
17324 +           run;
17325 +           %let outstatds = &outstat.&vci;
17326 +           %let outrsquareds = &outrsquare.&vci;
17327 +           %let outtreeds = &outtree.&vci;
17328 +           %let outclusstuctds = &outclusstruct.&vci;
17329 +           %let outcluscorrds = &outcluscorr.&vci;
17330 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17331 +           %let outclusrsquareds = &outclussquare.&vci;
17332 +           %let outstatplotds = &outstatplot.&vci;
17333 +           %let outcorrds = &outcorr.&vci;
17334 +           %let outcorrplotds = &outcorrplot.&vci;
17335 +           %let outnodeds = &outnode.&vci;
17336 +           %let outlinkds = &outlink.&vci;
17338 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17339 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17340 +           %let emuseroutstat = &EM_USER_&outstatds;
17342 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17343 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17344 +           %let emuserouttree = &EM_USER_&outtreeds;
17346 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17347 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17348 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17350 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17351 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17352 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17354 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17355 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17356 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17358 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17359 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17360 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17362 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17363 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17364 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17366 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17367 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17368 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17370 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17371 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17372 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17374 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17375 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17376 +           %let emuseroutnode = &EM_USER_&outnodeds;
17378 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17379 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17380 +           %let emuseroutlink = &EM_USER_&outlinkds;
17382 +           /*Add by ruzhan, May 28, 2013*/
17383 +           ods graphics on;
17384 +            %let odspath =;
17385 +            data _null_;
17386 +                path = pathname('WORK');
17387 +                call symput('odspath', path);
17388 +            run;
17389 +            ods listing gpath="&odspath";
17391 +           ods output DENDROGRAM=&emuserouttree;
17393 +           proc varclus data=&indata outstat=&emuseroutstat
17394 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17395 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17396 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17397 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17398 +                  maxc=&EM_PROPERTY_MAXCLUS
17399 +           %end;
17401 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17402 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17403 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17404 +            %end;
17406 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17407 +                proportion = &EM_PROPERTY_PROPORTION
17408 +           %end;
17409 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17410 +               summary
17411 +           %end;
17412 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17413 +               short
17414 +           %end;
17415 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17416 +               corr trace simple
17417 +           %end;
17418 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17419 +               noprint
17420 +           %end;
17421 +            /*Comment out by ruzhan, May 28, 2013*/
17422 +              /*outtree=&emuserouttree*/
17423 +           ;
17424 +           var
17425 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17426 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17427 +                %do %while(^%sysfunc(fetch(&dsid)));
17428 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17429 +                    &_varname
17430 +                %end;
17431 +            %let dsid = %sysfunc(close(&dsid));
17432 +           ;
17433 +           %if %EM_FREQ ne %then %do;
17434 +           Freq %EM_FREQ;
17435 +           %end;
17436 +           run;
17437 +            ods graphics off;
17438 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17440 +            %let gid=&vci;
17441 +            /*--- To make the main result table ----------------------*/
17442 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17443 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17444 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17445 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17446 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17447 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17449 +            /* Inter Cluster Correlation Plot ------------------------*/
17451 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17452 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17454 +           /* Create some other data sets for results ---------------*/
17456 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17457 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17458 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17460 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17462 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17464 +           %if &vci = 1 %then %do;
17465 +           data &EM_USER_OUTRSQUARE;
17466 +                set &emuseroutrsquare;
17467 +           run;
17468 +           %end;
17469 +           %else %do;
17470 +           data &EM_USER_OUTRSQUARE;
17471 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17472 +           run;
17473 +           %end;
17474 +           quit;
17475 +       %end;
17477 +       /*---- move this to Score action ------------
17478 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17479 +       */
17481 +       /* Make Score Gcluster component & correlation  */
17482 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17484 +       quit;
17485 +       %endline:
17486 +%mend VarClus2;
17489 +%macro Train2;
17491 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17492 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17493 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17494 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17495 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17496 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17497 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17498 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17499 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17500 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17501 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17502 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
17503 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
17504 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
17505 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
17506 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
17507 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
17508 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
17512 +    /* Train */
17514 +   /* moved to pretrain ------------
17516 +   %if &EM_IMPORT_DATA eq %then %do;
17517 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17518 +       %goto endtrain2;
17519 +   %end;
17521 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17522 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17523 +        %goto endtrain2;
17524 +   %end;
17525 +   +-------------------------------------------*/
17527 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17530 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17532 +        /*----- moved to pretrain ------------
17534 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17535 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17536 +                             outvar=&EM_USER_OUTDUMMY,
17537 +                             outdata=_newtrainds,
17538 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
17539 +                              ndummyvars=_ndummyvars
17540 +                            );
17542 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17543 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17544 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17545 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17546 +                %goto endtrain;
17547 +            %end;
17548 +        %end;
17550 +        +---------------------------------------*/
17551 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17552 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17553 +          There is no _newtrainds */
17554 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
17555 +                             outstat=&EM_USER_GOUTSTAT,
17556 +                             corrmatrix=Y,
17557 +                             outcorr=&EM_USER_GOUTCORR,
17558 +                             includeclassvar=N,
17559 +                             freq =%EM_FREQ
17560 +                          );
17561 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17563 +        %end;
17564 +        %else %do;
17565 +         %MakeCorrelation(   indata=_newtrainds,
17566 +                             outstat=&EM_USER_GOUTSTAT,
17567 +                             corrmatrix=Y,
17568 +                             outcorr=&EM_USER_GOUTCORR,
17569 +                             includeclassvar=Y,
17570 +                             freq =%EM_FREQ
17571 +                          );
17572 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
17574 +        %end;
17576 +    %end;
17577 +    %else %do;
17579 +        /* moved to pretrain -------------------
17581 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17582 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17583 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17584 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17585 +                %goto endtrain;
17586 +            %end;
17587 +        %end;
17588 +         +------------------------------------------*/
17590 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
17591 +                          outstat=&EM_USER_GOUTSTAT,
17592 +                          corrmatrix=Y,
17593 +                          outcorr=&EM_USER_GOUTCORR,
17594 +                          includeclassvar=N,
17595 +                          freq =%EM_FREQ
17596 +                          );
17597 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17598 +    %end;
17600 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
17601 +                                rsquare = N
17602 +                                );
17603 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
17604 +                      ncluster=&_ngc,
17605 +                      method = Ward,
17606 +                      outtree =&EM_USER_GOUTTREE,
17607 +                      idvar = _VAR_,
17608 +                      outdata=&EM_USER_GOUTGROUP,
17609 +                      rescore = N,
17610 +                      newncluster=_newnclus
17611 +                        );
17613 +   /* store the number of global cluster */
17615 +   data &EM_USER_VARCLUSMETA;
17616 +        set &EM_USER_VARCLUSMETA;
17617 +        NGCluster = &_newnclus;
17618 +   run;
17620 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
17622 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17623 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17624 +            %VarClus2(indata=&EM_IMPORT_DATA,
17625 +                 clusdata=&EM_USER_GOUTGROUP,
17626 +                 ngroup=&_newnclus);
17627 +         %end;
17628 +         %else %do;
17629 +             %VarClus2(indata=_newtrainds,
17630 +                 clusdata=&EM_USER_GOUTGROUP,
17631 +                 ngroup=&_newnclus);
17633 +         %end;
17635 +   %end;
17636 +   %else %do;
17637 +       %VarClus2(indata=&EM_IMPORT_DATA,
17638 +                 clusdata=&EM_USER_GOUTGROUP,
17639 +                 ngroup=&_newnclus);
17640 +   %end;
17642 +   %em_checkerror();
17643 +   %if &EMEXCEPTIONSTRING ne %then %do;
17644 +       %put &em_codebar;
17645 +       %put Error: Variable clustering failed.;
17646 +       %put &em_codebar;
17647 +       %goto endtrain2;
17648 +   %end;
17649 +   /*
17650 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17651 +   */
17652 +   %endtrain2:
17653 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
17655 +%macro em_copyfile(infref=, outfref=, append=N);
17656 +
17657 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
17658 +
17659 +       %let omode =;
17660 +       %if &append=Y %then
17661 +           %let omode = MOD;
17662 +       data _null_;
17663 +          length line $20000;
17664 +          file &outfref &omode lrecl=20000;
17665 +          fid=fopen("&infref",'i',20000,'v');
17666 +          if fid > 0  then do;
17667 +             do while(^fread(fid));
17668 +                rlen = frlen(fid);
17669 +                rc= fget(fid,line,20000);
17670 +                start = length(line)-length(left(line))+1;
17671 +                line=strip(line);
17672 +                put @start line;
17673 +             end;
17674 +             if fid > 0  then rc=fclose(fid);
17675 +          end;
17676 +       run;
17677 +
17678 +   %end;
17679 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
17680  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 32235   Memory used = 511K.
NOTE: There were 32235 observations read from the data set EMWS4.PART_TRAIN.
NOTE: The data set WORK._DMDBDAT has 32235 observations and 4 variables.
NOTE: The data set WORK._CLASSOUT has 10 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.44 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: This is the PROC statement.
NOTE: The training set WORK._DMDBDAT.DATA has 4 variable(s).
NOTE: The PROC statement has finished with return code 0.
NOTE: This is the INPUT statement.
NOTE: 4 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code 0.
NOTE: This is the MAKE statement.
 
NOTE: 4 input variable(s).
NOTE: Number of cases=32235
NOTE: Sum of frequencies=32235
NOTE: Sum of weights=32235
NOTE: VARDEF=DF
NOTE: Maximum number of categories=4
NOTE: The total number of variables is 4 with dimensionality 10.
NOTE: The data set EMWS4.VARCLUS_OUTDUMMY has 3 observations and 11 variables.
NOTE: The MAKE statement has finished with return code 0.
NOTE: This is the SCORE statement.
NOTE: The data set WORK._NEWTRAINDS has 32235 observations and 109 variables.
NOTE: The SCORE statement has finished with return code 0.
NOTE: This is the CODE statement.
NOTE: External file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas opened.
NOTE: The CODE statement has finished with return code 0.
 
 
NOTE: PROCEDURE DMZIP used (Total process time):
      real time           0.29 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The file WORK._DMDBCAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._DMDBDAT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:94
NOTE: There were 32235 observations read from the data set WORK._NEWTRAINDS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:153
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
17681  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS4.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS4.VARCLUS_OUTTREE has 163 observations and 3 variables.
NOTE: The data set EMWS4.VARCLUS_OUTSTAT has 1949 observations and 101 variables.
NOTE: The PROCEDURE VARCLUS printed pages 2-7.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           6.97 seconds
      cpu time            0.92 seconds
 
 
 
NOTE: Deleting WORK._NEWTRAINDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
17682  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 1949 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 1949 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 33 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 33 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 33 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 33 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORR has 33 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 33 observations and 34 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1089 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1089 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1089 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1089 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 1056 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1056 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 33 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 1949 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 100 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 1949 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSSTRUCT has 33 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 33 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSSTRUCT has 33 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 33 observations and 99 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3234 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3234 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3234 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3234 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3136 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3136 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3136 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3136 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 98 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 98 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 98 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 98 observations read from the data set WORK._OWNRSQ.
NOTE: There were 98 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 98 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 33 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 98 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 98 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 33 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 98 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: There were 33 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      48932:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      48932:84
NOTE: There were 1949 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 33 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 33 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 33 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 33 observations and 34 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 1089 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1089 observations read from the data set EMWS4.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCLUSCORRPLOT has 1089 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 98 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 98 observations read from the data set EMWS4.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 98 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 98 observations read from the data set EMWS4.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATPLOT has 98 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 98 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS4.VARCLUS_OUTCORR has 98 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 98 observations read from the data set EMWS4.VARCLUS_OUTCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCORR has 98 observations and 99 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 98 observations read from the data set EMWS4.VARCLUS_OUTCORR.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9604 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9604 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9604 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 9408 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 9408 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9408 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 9408 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9604 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9604 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 9408 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 9604 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9604 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.35 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 9604 observations read from the data set EMWS4.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS4.VARCLUS_OUTCORRPLOT has 9604 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.29 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTLINK has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTNODE has 131 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1949 observations read from the data set EMWS4.VARCLUS_OUTSTAT.
NOTE: The data set EMWS4.VARCLUS_OUTSTATSCORE has 35 observations and 99 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2403,
      Last Modified=12Dec2017:12:42:40,
      Create Time=12Dec2017:12:42:40
 
NOTE: 136 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.88 seconds
      cpu time            0.60 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2017:12:42:52,
      Create Time=12Dec2017:12:42:52
 
NOTE: 249 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 84.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
17683  *------------------------------------------------------------*;
17684  * End TRAIN: VarClus;
17685  *------------------------------------------------------------*;
17686
 
17687  *------------------------------------------------------------*;
17688  * Close any missing semi colons;
17689  *------------------------------------------------------------*;
17690  ;
17691  ;
17692  ;
17693  ;
17694  quit;
17695  *------------------------------------------------------------*;
17696  * Close any unbalanced quotes;
17697  *------------------------------------------------------------*;
17698  /*; *"; *'; */
17699  ;
17700  run;
17701  quit;
17702  /* Reset EM Options */
17703  options formchar="|----|+|---+=|-/\<>*";
17704  options nocenter ls=256 ps=10000;
17705  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                December 12, 2017
Time:                12:42:50
*------------------------------------------------------------*
17807  %let EMEXCEPTIONSTRING=;
17808  *------------------------------------------------------------*;
17809  * SCORE: VarClus;
17810  *------------------------------------------------------------*;
17811  %let EM_ACTION = SCORE;
17812  %let syscc = 0;
17813
17814  %macro main;
17815
17816     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17817     %include temp;
17818     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17819     %include temp;
17820     filename temp;
17821
17822    %SetProperties;
17823
17824     %if %upcase(&EM_ACTION) = CREATE %then %do;
17825         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17826         %include temp;
17827         filename temp;
17828         %create;
17829     %end;
17830     %else
17831     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17832          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17833             %include temp;
17834             filename temp;
17835             %train;
17836     %end;
17837     %else
17838     %if %upcase(&EM_ACTION) = SCORE %then %do;
17839             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17840             %include temp;
17841             filename temp;
17842             %score;
17843     %end;
17844     %else
17845     %if %upcase(&EM_ACTION) = REPORT %then %do;
17846             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17847             %include temp;
17848             filename temp;
17849             %report;
17850     %end;
17851     /*
17852     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17853         %put 'OPENING TABLE';
17854     %end;
17855     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17856         %put 'CLOSE TABLE';
17857     %end;
17858     */
17859  %mend main;
17860  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17861 +
17862 +/* Initialize property macro variables */
17863 +%macro SetProperties;
17864 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17865 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17866 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17867 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17868 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17869 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17870 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17871 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17872 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17873 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17874 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17875 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17876 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17877 +
17878 +%mend SetProperties;
17879 +
17880 +%Macro MakeDummyVariables(indata=,
17881 +                          outvar=,
17882 +                          outdata=,
17883 +                          fileref=,
17884 +                          recreatecmeta=N, /* optional */
17885 +                          incmeta=,     /* optional */
17886 +                          outcmeta=,    /* optional */
17887 +                          ndummyvars=_ndummyvars
17888 +                          );
17889 +    %global &ndummyvars;
17890 +
17891 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17892 +       class
17893 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17894 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17895 +    ;
17896 +    run;
17897 +    %let &ndummyvars = 0;
17898 +    data _null_;
17899 +    %let dsid = %sysfunc(open(work._classout));
17900 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17901 +    %let dsid = %sysfunc(close(&dsid));
17902 +    run;
17903 +
17904 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17905 +       input
17906 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17907 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17908 +        / level=nominal stdize=no;
17909 +       make outvar = &outvar;
17910 +       score data = &indata out =&outdata;
17911 +       code  file=  "&fileref";
17912 +    run;
17913 +    %if &recreatecmeta eq Y %then %do;
17914 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17915 +    data _tmpds;
17916 +        set _tmpds;
17917 +           ROLE = 'INPUT';
17918 +           LEVEL = 'INTERVAL';
17919 +           CREATOR='DMZIP';
17920 +           if NAME = '_TYPE_' then delete;
17921 +    run;
17922 +    data &outcmeta;
17923 +         set &incmeta _tmpds;
17924 +    run;
17925 +    %end;
17926 +    proc datasets lib=work nolist;
17927 +      delete  _dmdbdat _dmdbcat _classout
17928 +    %if &recreatecmeta eq Y %then %do;
17929 +    _tmpds
17930 +    %end;
17931 +    ;
17932 +    quit;
17933 +%Mend MakeDummyVariables;
17934 +
17935 +/*--- Determine Optimal Number of Cluster ----
17936 +%macro FindClusNum(statds=, groupds=, minvariation=);
17937 +   %global optnclus;
17938 +   data varclus_tmp(drop=_NAME_);
17939 +      set &statDs;
17940 +      where _type_ ='PROPOR';
17941 +   run;
17942 +   proc sort data=varclus_tmp;
17943 +      by _NCL_;
17944 +   run;
17945 +   proc transpose data=varclus_tmp out=varclus_tmp;
17946 +      by _NCL_;
17947 +      var %EM_INTERVAL_INPUT
17948 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17949 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17950 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17951 +          %do i = 2 %to &nvar;
17952 +          %let varname = %sysfunc(varname(&dsid, &i));
17953 +          &varname
17954 +          %end;
17955 +      %end;
17956 +   ;
17957 +   run;
17958 +
17959 +   %if &minVariation eq %then %do;
17960 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17961 +   %end;
17962 +   %if ^(0<&minVariation<100) %then %do;
17963 +       %let minVariation = 90;
17964 +   %end;
17965 +
17966 +   data _null_;
17967 +      set varclus_tmp end=eof;
17968 +      by _NCL_;
17969 +      retain flag 0;
17970 +      if first._ncl_ then flag=0;
17971 +      if .<col1 < &minVariation then flag=1;
17972 +      if last._ncl_ and ^flag then do;
17973 +         call symput('OPTNCL', _ncl_);
17974 +         stop;
17975 +      end;
17976 +     if eof then call symput('OPTNCL', _ncl_);
17977 +   run;
17978 +
17979 +   %let optnclus = &OPTNCL;
17980 +
17981 +   data varclus_tmp(drop=_NCL_ _NAME_);
17982 +      set &statDs;
17983 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17984 +   run;
17985 +   proc sort data=varclus_tmp;
17986 +      by _TYPE_;
17987 +   run;
17988 +   proc transpose data=varclus_tmp out=varclus_tmp;
17989 +      by _TYPE_;
17990 +   run;
17991 +   proc sort data=varclus_tmp;
17992 +      by _name_ _type_;
17993 +   run;
17994 +
17995 +  proc transpose data=varclus_tmp out=&groupds;
17996 +      by _NAME_;
17997 +   run;
17998 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17999 +      by Cluster descending Rsquare;
18000 +      where Cluster ne 0;
18001 +   run;
18002 +   proc datasets lib=work nolist mt=(DATA VIEW);
18003 +      delete varclus_tmp;
18004 +   run;
18005 +   quit;
18006 +%mend findClusNum;
18007 +*/
18008 +
18009 +%macro getNclusfromTrain(inoutstat=, nc=);
18010 +%global &nc;
18011 +data _null_;
18012 +    set &inoutstat end=eof;
18013 +    if eof then do;
18014 +    call symput("&nc", _ncl_);
18015 +    end;
18016 +run;
18017 +%mend  getNclusfromTrain;
18018 +
18019 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
18020 +
18021 +     *--- Build Code to Modify Metadata ---*;
18022 +     filename X "&deltacodefile";
18023 +     data _null_;
18024 +        FILE X;
18025 +        set &groupds end=eof;
18026 +        /*by Cluster;*/
18027 +         if _N_=1 then do;
18028 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18029 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18030 +           %end;
18031 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18032 +           put "if upcase(strip(NAME)) in (";
18033 +        end;
18034 +        if Strip(upcase(Selected)) eq 'YES' then do;
18035 +           string = '"'!!trim(left(VARIABLE))!!'"';
18036 +           put string;
18037 +        end;
18038 +        if eof then do;
18039 +           put ') then ROLE="INPUT";';
18040 +           put 'else ROLE="REJECTED";';
18041 +           put 'end;';
18042 +
18043 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18044 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18045 +           %end;
18046 +        end;
18047 +     run;
18048 +     quit;
18049 +
18050 +     filename X;
18051 +
18052 +     quit;
18053 +%mend MakeDeltaCode;
18054 +
18055 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18056 +    %if ^%sysfunc(exist(&statds)) %then %do;
18057 +         %goto doendc;
18058 +    %end;
18059 +
18060 +    data &corrds(drop=_TYPE_ _NCL_) ;
18061 +       set &statds;
18062 +       where _type_ eq 'CORR' ;
18063 +    run ;
18064 +    proc sort data=&corrds;
18065 +       by _NAME_ ;
18066 +    run ;
18067 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18068 +      BY _NAME_ ;
18069 +    run ;
18070 +    data &corrplotds;
18071 +       length _Y_ $100;
18072 +       set &corrplotDs;
18073 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18074 +    run ;
18075 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18076 +       set &corrplotds;
18077 +       where _LABEL_ ne '' ;
18078 +       keep _TMP_ _LABEL_ ;
18079 +    run ;
18080 +    data _null_;
18081 +       nobs=0;
18082 +       dsid = open('varclus_match');
18083 +       if dsid then do;
18084 +          nobs = attrn(dsid, 'NOBS');
18085 +          dsid = close(dsid);
18086 +       end;
18087 +       call symput ('CORR_NOBS', nobs);
18088 +    run;
18089 +    %if &corr_nobs %then %do;
18090 +        proc sort data=varclus_match;
18091 +           by _name_;
18092 +        run ;
18093 +        proc sort data=&corrplotds;
18094 +           by _name_;
18095 +        run ;
18096 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18097 +           merge varclus_match &corrplotds;
18098 +           by _NAME_ ;
18099 +           if _X_ eq '' then _X_=_NAME_ ;
18100 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18101 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18102 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18103 +
18104 +       run ;
18105 +    %end;
18106 +    %else %do;
18107 +        proc sort data=&corrplotds;
18108 +           by _name_;
18109 +        run ;
18110 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18111 +           set &corrplotds;
18112 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18113 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18114 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18115 +
18116 +        run ;
18117 +    %end;
18118 +    proc sort data=&corrplotds;
18119 +       by _X_ _Y_;
18120 +    run ;
18121 +    proc datasets lib=work nolist mt=(DATA VIEW);
18122 +       delete varclus_match;
18123 +    run;
18124 +    quit;
18125 +
18126 +%doendc:
18127 +
18128 +%mend MakeVarClusCorrData;
18129 +
18130 +%macro MakeStatPlotData(statds= , outstatplotds=);
18131 +   %if %sysfunc(exist(&statds)) %then %do;
18132 +
18133 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18134 +          set &statDs;
18135 +          where _type_ in('MEAN', 'STD', 'N');
18136 +       run ;
18137 +       proc transpose data=varclus_tmp out=&outstatplotds;
18138 +          id _TYPE_ ;
18139 +       run ;
18140 +       data &outstatplotds;
18141 +          set &outstatplotds(obs=1000);
18142 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18143 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18144 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18145 +          else SCALEDSTD= STD ;
18146 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18147 +       run ;
18148 +       proc sort data=&outstatplotds;
18149 +          by descending SCALEDSTD ;
18150 +       run ;
18151 +       proc datasets lib=work nolist mt=(DATA VIEW);
18152 +          delete varclus_tmp;
18153 +       run;
18154 +       quit;
18155 +    %end;
18156 +
18157 +%mend MakeStatPlotData;
18158 +
18159 +
18160 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18161 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18162 +    data &EM_USER_OUTSTATSCORE;
18163 +          set &indata;
18164 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18165 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18166 +          if _TYPE_ = 'STD' then _NAME_='STD';
18167 +          DROP _TYPE_ _NCL_;
18168 +     run;
18169 +
18170 +     filename _file_  "&fileRef";
18171 +
18172 +     data _null_;
18173 +        FILE _file_ MOD;
18174 +        put ' ';
18175 +        put '/*-------------------------------------------------*/';
18176 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18177 +        put '/*-------------------------------------------------*/';
18178 +        put ' ';
18179 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18180 +
18181 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18182 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18183 +
18184 +        %let k = 1;
18185 +        %do %while(^%sysfunc(fetch(&dsid)));
18186 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18187 +                %if &k > 2 %then %do;
18188 +                 %let cn = %eval(&k-2);
18189 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18190 +                %end;
18191 +                %let k = %eval(&k+1);
18192 +        %end;
18193 +
18194 +        %let rc = %sysfunc(rewind(&dsid));
18195 +
18196 +        %do i= 2 %to &nvar;
18197 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18198 +            %do %while(^%sysfunc(fetch(&dsid)));
18199 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18200 +                %if &_name = MEAN %then
18201 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18202 +                %else %if &_name = STD %then
18203 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18204 +                %else %do;
18205 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18206 +                      %let abscoeff = %sysfunc(abs(&coeff));
18207 +                          %if &abscoeff >  0 %then %do;
18208 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18209 +                           %end;
18210 +                 %end;
18211 +             %end;
18212 +             %let rc = %sysfunc(rewind(&dsid));
18213 +         %end;
18214 +
18215 +        %let dsid= %sysfunc(close(&dsid));
18216 +       run;
18217 +%mend CreateScoreCode;
18218 +
18219 +
18220 +
18221 +/*----------------------------------------------------------
18222 +    Instead of using %MakeRSquareData,
18223 +    %MakeVarClusResultTable at macro2.source is used
18224 + +----------------------------------------------------------*/
18225 +
18226 +
18227 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18228 +
18229 +/* modifying  from ods rsquare = data */
18230 +
18231 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18232 +    Length Cluster $16;
18233 +    length Variable $32;
18234 +    Length VariableLabel $64;
18235 +    set &indata; retain CurrentCluster;
18236 +    if NumberOfClusters ^= &ncluster then delete;
18237 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18238 +    CurrentCluster = Cluster;
18239 +   run;
18240 +proc sort data =&outdata ;
18241 +     by Cluster RsquareRatio;
18242 +run;
18243 +data _tmprsq(drop=index);
18244 +     set &outdata; by Cluster;
18245 +     if first.Cluster then do;
18246 +     index = strip(scan(Cluster,2 ));
18247 +     Variable = "Clus"||index;
18248 +     VariableLabel = "Cluster Component "||index;
18249 +     OwnCluster = 1;
18250 +     NextClosest = .;
18251 +     RsquareRatio = 0;
18252 +     output;
18253 +     end;
18254 +run;
18255 +
18256 +proc sort data = _tmprsq ;
18257 +     by Cluster RsquareRatio;
18258 +run;
18259 +data &outdata;
18260 +     set &outdata _tmprsq;
18261 +by Cluster;
18262 +run;
18263 +
18264 +
18265 +/* Just create the Selected variable with all YES */
18266 +
18267 +data &outdata;
18268 +    set &outdata; by cluster;
18269 +    length Selected $8;
18270 +    Selected = 'YES';
18271 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18272 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18273 +    rename OwnCluster = RSqWithClusterComp;
18274 +    rename NextClosest = RSqWithNextClusComp;
18275 +run;
18276 +
18277 +
18278 +/* Selected = Y/N will be done %score section -----
18279 +
18280 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18281 +data &outdata;
18282 +    set &outdata; by cluster;
18283 +    length Selected $8;
18284 +    if first.Cluster then Selected = 'YES';
18285 +    else Selected = 'NO';
18286 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18287 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18288 +    rename OwnCluster = RSqWithClusterComp;
18289 +    rename NextClosest = RSqWithNextClusComp;
18290 +run;
18291 +%end;
18292 +%else %do;
18293 +data &outdata;
18294 +    set &outdata; by cluster;
18295 +    if last.Cluster then Selected = 'YES';
18296 +    else Selected = 'NO';
18297 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18298 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18299 +    rename OwnCluster = RSqWithClusterComp;
18300 +    rename NextClosest = RSqWithNextClusComp;
18301 +run;
18302 +%end;
18303 +---------------------------------------------------------------*/
18304 +
18305 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18306 +/* to calculate NextClosestClusRsq */
18307 +proc transpose data = &inClusRSquare  out=_clusRsq;
18308 +      by cluster;
18309 +      run;
18310 +data _clusRsq;
18311 +     set _clusRsq;
18312 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18313 +run;
18314 +
18315 +proc sort data=_clusRsq;
18316 +    by cluster col1;
18317 +    run;
18318 +data _clusRsq(drop=_NAME_ _LABEL_);
18319 +     set _clusRsq; by cluster;
18320 +     if last.Cluster then output;
18321 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18322 +     rename COL1 = RSqWithNextClusComp;
18323 +     rename Cluster = Variable;
18324 +     label  Cluster = "Variable";
18325 +run;
18326 +
18327 +proc sort data =&outdata;
18328 +     by Variable;
18329 +run;
18330 +data &outdata;
18331 +    merge &outdata _clusRsq;
18332 +    by Variable;
18333 +run;
18334 +proc sort data =&outdata;
18335 +by Cluster  RsquareRatio;
18336 +run;
18337 +quit;
18338 +%end;
18339 +
18340 +proc datasets lib = work nolist;
18341 +     delete _tmprsq _clusRsq;
18342 +     run;
18343 +quit;
18344 +
18345 +%mend MakeRSquareData;
18346 +
18347 +
18348 +/*-------------------------------------------------------------------------*/
18349 +
18350 +
18351 +
18352 +%macro ModifyCorr(indata=,
18353 +                  outdata=,
18354 +                  rsquare = Y
18355 +                  );
18356 +    data corr_tmp;
18357 +        set &indata;
18358 +    run;
18359 +     proc sql;
18360 +           update &indata
18361 +           set
18362 +     %let dsid = %sysfunc(open(work.corr_tmp));
18363 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18364 +          %do i = 4 %to &nvar;
18365 +          %let _name = %sysfunc(varname(&dsid, &i));
18366 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18367 +            %else  %let _name_md = &_name;
18368 +            %if &i < &nvar %then %do;
18369 +               &_name = 1- &_name_md ,
18370 +            %end;
18371 +            %else %do;
18372 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18373 +            %end;
18374 +          %end;
18375 +      %let dsid= %sysfunc(close(&dsid));
18376 +
18377 +      select * from &indata;
18378 +      run;
18379 +      proc datasets lib = work nolist;
18380 +           delete corr_tmp;
18381 +      run;
18382 +      quit;
18383 +
18384 + %mend ModifyCorr;
18385 +
18386 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18387 +    data &outdata(drop= _NCL_  _TYPE_);
18388 +       set &indata;
18389 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18390 +       rename _NAME_ = Cluster;
18391 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18392 +    run;
18393 +    %if &RSquare eq Y %then %do;
18394 +     data corr_tmp;
18395 +        set &outdata;
18396 +     run;
18397 +
18398 +     data &outdata(drop=i);
18399 +          set &outdata;
18400 +          %let dsid = %sysfunc(open(work.corr_tmp));
18401 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18402 +          %do i = 2 %to &nvar;
18403 +            %let _name = %sysfunc(varname(&dsid, &i));
18404 +            %let _name_md = &_name.**2;
18405 +                &_name = &_name_md;
18406 +          %end;
18407 +      %let dsid= %sysfunc(close(&dsid));
18408 +      run;
18409 +      proc datasets lib = work nolist;
18410 +           delete corr_tmp;
18411 +      run;
18412 +
18413 +    %end;
18414 +     quit;
18415 +%mend MakeClusStructCorrData;
18416 +
18417 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18418 +    data &outdata(drop= _NCL_  _TYPE_);
18419 +       set &indata;
18420 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18421 +       rename _NAME_ = Cluster;
18422 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18423 +    run;
18424 +    data corr_tmp;
18425 +        set &outdata;
18426 +    run;
18427 +
18428 +    %let dsid = %sysfunc(open(work.corr_tmp));
18429 +    %let nclus2= %eval(&ncluster+1);
18430 +    data &outdata;
18431 +         set &outdata;
18432 +          %do i = 2 %to &nclus2;
18433 +          %let i_1 = %eval(&i-1);
18434 +            %let _name = %sysfunc(varname(&dsid, &i));
18435 +            %let _newName = Clus&i_1;
18436 +                rename &_name = &_newName; ;
18437 +                *label &_name ="Cluster &i_1";
18438 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18439 +          %end;
18440 +          keep Cluster
18441 +          %do i = 2 %to &nclus2;
18442 +                %let _name = %sysfunc(varname(&dsid, &i));
18443 +                &_name
18444 +          %end;
18445 +          ;
18446 +    %let dsid= %sysfunc(close(&dsid));
18447 +     run;
18448 +     quit;
18449 +
18450 +    %if &RSquare eq Y %then %do;
18451 +
18452 +       data corr_tmp;
18453 +        set &outdata;
18454 +     run;
18455 +
18456 +     data &outdata(drop=i);
18457 +          set &outdata;
18458 +          %let dsid = %sysfunc(open(work.corr_tmp));
18459 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18460 +          %do i = 2 %to &nvar;
18461 +            %let _name = %sysfunc(varname(&dsid, &i));
18462 +            %let _name_md = &_name.**2;
18463 +                &_name = &_name_md;
18464 +          %end;
18465 +      %let dsid= %sysfunc(close(&dsid));
18466 +      run;
18467 +    %end;
18468 +
18469 +    %if &makeplotds eq Y %then %do;
18470 +     proc transpose data = &outdata
18471 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18472 +          by cluster;
18473 +     run;
18474 +     data &plotds;
18475 +          set  &plotds;
18476 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18477 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18478 +     run;
18479 +     %end;
18480 +     proc datasets lib = work nolist;
18481 +           delete corr_tmp;
18482 +     run;
18483 +     quit;
18484 +%mend MakeInterClusCorrData;
18485 +
18486 +
18487 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18488 +
18489 +data &outlink(drop = Selected);
18490 +     set &indata;
18491 +     LINKID = _N_;
18492 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18493 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18494 +run;
18495 +data &outnode(keep=NODEID TYPE LABEL);
18496 +    set &indata;
18497 +    length TYPE $16;
18498 +    rename Variable = NODEID;
18499 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18500 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18501 +    then  TYPE = "CLUSTER";
18502 +    else  TYPE="VARIABLE";
18503 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18504 +run;
18505 +quit;
18506 +%mend MakeClusConstellData;
18507 +
18508 +
18509 +
18510 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18511 +
18512 +data &outlink(drop = Selected);
18513 +     set &indata;
18514 +     LINKID = _N_;
18515 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18516 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18517 +run;
18518 +data &outnode(keep=NODEID TYPE LABEL);
18519 +    set &indata;
18520 +    length TYPE $16;
18521 +    rename Variable = NODEID;
18522 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18523 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18524 +    then  TYPE = "CLUSTER";
18525 +    else  TYPE="VARIABLE";
18526 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18527 +run;
18528 +quit;
18529 +%mend MakeClusConstellData;
18530 +
18531 +
18532 +/*--- This will work only when inds is not a view data -------
18533 +
18534 +%macro getNVarNObs(inds=, nvar=, nobs=);
18535 +
18536 +    %global &nvar;
18537 +    %global &nobs;
18538 +    data _null_;
18539 +         dsid = open("&inds");
18540 +         nv = attrn(dsid, 'NVAR');
18541 +         no = attrn(dsid, 'NOBS');
18542 +         dsid = close(dsid);
18543 +         call symput("&nvar", nv);
18544 +         call symput("&nobs", no);
18545 +    run;
18546 +    quit;
18547 +%mend  getNVarNObs;
18548 +
18549 ++---------------------------------------------------------------*/
18550 +
18551 +
18552 +%macro getNVar(inds=, nvar=);
18553 +    %global &nvar;
18554 +    data _null_;
18555 +         dsid = open("&inds");
18556 +         nv = attrn(dsid, 'NVAR');
18557 +         dsid = close(dsid);
18558 +         call symput("&nvar", nv);
18559 +    run;
18560 +    quit;
18561 +%mend  getNVar;
18562 +
18563 +
18564 +
18565 +%macro getNObs(inds=, nobs=);
18566 +    %global &nobs;
18567 +    data _null_;
18568 +        set &inds end=eof;
18569 +        if eof then call symput("&nobs", _N_);
18570 +    run;
18571 +    quit;
18572 +%mend  getNObs;
18573 +
18574 +%Macro CreateVarclusMeta(trainnum=);
18575 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18576 +    data &EM_USER_VARCLUSMETA;
18577 +         length TrainNum 8.;
18578 +         length NewTrain $8;
18579 +         length NGCluster 8.;
18580 +         length ExportedComp $16;
18581 +         length HideVariable $8;
18582 +         TrainNum = &trainnum;
18583 +         NewTrain = "Y";
18584 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18585 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18586 +         NGCluster = 0; /* zero means no twostage */
18587 +   run;
18588 +   quit;
18589 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18590 +
18591 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18592 +    data &outdata(drop= _NCL_  _TYPE_);
18593 +       set &indata;
18594 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18595 +       %if &globalclusid ne %then %do;
18596 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18597 +       rename _NAME_ = Cluster;
18598 +       %end;
18599 +       %else %do;
18600 +        _NAME_ = upcase(_NAME_);
18601 +       rename _NAME_ = Cluster;
18602 +       %end;
18603 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18604 +    run;
18605 +    data corr_tmp;
18606 +        set &outdata;
18607 +    run;
18608 +
18609 +    %let dsid = %sysfunc(open(work.corr_tmp));
18610 +    %let nclus2= %eval(&ncluster+1);
18611 +    data &outdata;
18612 +         set &outdata;
18613 +          %do i = 2 %to &nclus2;
18614 +          %let i_1 = %eval(&i-1);
18615 +            %let _name = %sysfunc(varname(&dsid, &i));
18616 +            %if &globalclusid ne %then
18617 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18618 +                     rename &_name = &_newName;
18619 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18620 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18621 +                %end;
18622 +            %else
18623 +                %do; %let _newName = CLUS&i_1;
18624 +                     rename &_name = &_newName;
18625 +                     *label &_name ="Cluster &i_1";
18626 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18627 +                %end;
18628 +          %end;
18629 +          keep Cluster
18630 +          %do i = 2 %to &nclus2;
18631 +                %let _name = %sysfunc(varname(&dsid, &i));
18632 +                &_name
18633 +          %end;
18634 +          ;
18635 +    %let dsid= %sysfunc(close(&dsid));
18636 +     run;
18637 +     quit;
18638 +
18639 +    %if &RSquare eq Y %then %do;
18640 +
18641 +       data corr_tmp;
18642 +        set &outdata;
18643 +     run;
18644 +
18645 +     data &outdata;
18646 +          set &outdata;
18647 +          %let dsid = %sysfunc(open(work.corr_tmp));
18648 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18649 +          %do i = 2 %to &nvar;
18650 +            %let _name = %sysfunc(varname(&dsid, &i));
18651 +            %let _name_md = &_name.**2;
18652 +                &_name = &_name_md;
18653 +          %end;
18654 +      %let dsid= %sysfunc(close(&dsid));
18655 +      run;
18656 +    %end;
18657 +
18658 +    %if &makeplotds eq Y %then %do;
18659 +     proc transpose data = &outdata
18660 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18661 +          by cluster;
18662 +     run;
18663 +     data &plotds;
18664 +          set  &plotds;
18665 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18666 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18667 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18668 +     run;
18669 +     %end;
18670 +     proc datasets lib = work nolist;
18671 +           delete corr_tmp;
18672 +     run;
18673 +     quit;
18674 +%mend MakeInterClusCorrData;
18675 +
18676 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18677 +    data _tmpds(drop= _NCL_);
18678 +       set &indata;
18679 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18680 +       %if &globalclusid ne %then %do;
18681 +           _NAME_ = "GC&globalclusid.";
18682 +       rename _NAME_ = Cluster;
18683 +       %end;
18684 +       %else %do;
18685 +        _NAME_ = "CLUS";
18686 +        rename _NAME_ = Cluster;
18687 +       %end;
18688 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18689 +    run;
18690 +    proc transpose data =_tmpds out =&outdata;
18691 +    run;
18692 +
18693 +    data &outdata(drop=COL1);
18694 +        %if &globalclusid ne %then %do;
18695 +        length GCluster $16;
18696 +        %end;
18697 +        length Cluster $32;
18698 +        length _NAME_ $32;
18699 +         set &outdata;
18700 +         _NAME_ = upcase(_NAME_);
18701 +         rename _NAME_=Variable;
18702 +         *label _NAME_="Variable";
18703 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18704 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18705 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18706 +
18707 +         %if &globalclusid ne %then %do;
18708 +          GCluster = "GC&globalclusid";
18709 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18710 +         %end;
18711 +         %else %do;
18712 +         Cluster = "CLUS"||strip(COL1);
18713 +        %end;
18714 +         rename COL2 = RSqWithOwnClusComp;
18715 +         *label COL2 = "R-Square With Own Cluster Component";
18716 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18717 +
18718 +   run;
18719 +   proc sort data =&outdata;
18720 +        by Cluster RSqWithOwnClusComp;
18721 +   run;
18722 +   proc datasets lib = work nolist;
18723 +           delete _tmpds;
18724 +   run;
18725 +   quit;
18726 +%mend MakeOwnRSquare;
18727 +
18728 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18729 +    data &outdata(drop= _NCL_  _TYPE_);
18730 +       %if &globalclusid ne %then %do;
18731 +        length GCluster $16;
18732 +        %end;
18733 +       set &indata;
18734 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18735 +       %if &globalclusid ne %then %do;
18736 +         GCluster = "GC&globalclusid";
18737 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18738 +         rename _NAME_ = Cluster;
18739 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18740 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18741 +
18742 +       %end;
18743 +       %else %do;
18744 +         _NAME_ = upcase(_NAME_);
18745 +         rename _NAME_ = Cluster;
18746 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18747 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18748 +
18749 +       %end;
18750 +     run;
18751 +    %if &RSquare eq Y %then %do;
18752 +     data corr_tmp;
18753 +          set &outdata;
18754 +     run;
18755 +     %let istart = 2;
18756 +     %if &globalclusid ne %then %let istart = 3;
18757 +     data &outdata;
18758 +          set &outdata;
18759 +          %let dsid = %sysfunc(open(work.corr_tmp));
18760 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18761 +          %do i =&istart %to &nvar;
18762 +            %let _name = %sysfunc(varname(&dsid, &i));
18763 +            %let _name_md = &_name.**2;
18764 +                &_name = &_name_md;
18765 +          %end;
18766 +      %let dsid= %sysfunc(close(&dsid));
18767 +      run;
18768 +      proc datasets lib = work nolist;
18769 +           delete corr_tmp;
18770 +      run;
18771 +    %end;
18772 +     quit;
18773 +%mend MakeClusStructCorrData;
18774 +
18775 +/*
18776 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18777 +*/
18778 +
18779 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18780 +
18781 +     /* The indata should be the outdata
18782 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18783 +
18784 +     proc sort data =&indata out=_tmpclusRsq;
18785 +     by cluster;
18786 +     run;
18787 +
18788 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18789 +      by cluster;
18790 +     run;
18791 +
18792 +     proc sort data=_tmpclusRsq;
18793 +        by _NAME_ COL1;
18794 +     run;
18795 +
18796 +     data _tmpclusRsq;
18797 +         length _NAME_ $32;
18798 +         set _tmpclusRsq; by _NAME_;
18799 +          _NAME_ = upcase(_NAME_);
18800 +          %if &ncluster ne 1 %then %do;
18801 +             if last._NAME_ then delete;
18802 +          %end;
18803 +          %else %do;
18804 +             COL1 = 0;
18805 +          %end;
18806 +     run;
18807 +     /* need to sort again */
18808 +     proc sort data=_tmpclusRsq;
18809 +        by _NAME_ COL1;
18810 +     run;
18811 +
18812 +     data &outdata;
18813 +         set _tmpclusRsq; by _NAME_;
18814 +         Cluster = upcase(Cluster);
18815 +         if last._NAME_ then output;
18816 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18817 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18818 +         rename COL1 = RSqWithNextClusComp;
18819 +         Cluster = upcase(Cluster);
18820 +         rename Cluster = ClosestCluster;
18821 +         *label  Cluster = "Next Closest Cluster";
18822 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18823 +         rename _NAME_ = Variable;
18824 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18825 +    run;
18826 +
18827 +
18828 +    %if &globalclusid ne %then %do;
18829 +    data &outdata;
18830 +       length GCluster $16;
18831 +       set &outdata;
18832 +       GCluster = "GC&globalclusid";
18833 +       run;
18834 +    %end;
18835 +    proc datasets lib = work nolist;
18836 +           delete _tmpclusRsq;
18837 +    run;
18838 +    quit;
18839 +%mend FindNextClosestClusByVar;
18840 +
18841 +
18842 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18843 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18844 +     proc sort data =&indata out=_tmpclusRsq;
18845 +     by cluster;
18846 +     run;
18847 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18848 +     by cluster;
18849 +     run;
18850 +     proc sort data=_tmpclusRsq;
18851 +        by _NAME_ col1;
18852 +     run;
18853 +     data _tmpclusRsq;
18854 +         length _NAME_ $32;
18855 +         set _tmpclusRsq; by _NAME_;
18856 +          _NAME_ = upcase(_NAME_);
18857 +          %if &ncluster ne 1 %then %do;
18858 +             if last._NAME_ then delete;
18859 +          %end;
18860 +          %else %do;
18861 +             COL1 = 0;
18862 +          %end;
18863 +     run;
18864 +     data &outdata;
18865 +         set _tmpclusRsq; by _NAME_;
18866 +         Cluster = upcase(Cluster);
18867 +         if last._NAME_ then output;
18868 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18869 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18870 +         rename COL1 = RSqWithNextClusComp;
18871 +         Cluster = upcase(Cluster);
18872 +         rename Cluster = ClosestCluster;
18873 +         *label  Cluster = "Next Closest Cluster";
18874 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18875 +         rename _NAME_ = Variable;
18876 +         *label  _NAME_ = "Variable";
18877 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18878 +
18879 +    run;
18880 +    %if &globalclusid ne %then %do;
18881 +    data &outdata;
18882 +       length GCluster $16;
18883 +       set &outdata;
18884 +       GCluster = "GC&globalclusid";
18885 +       run;
18886 +    %end;
18887 +
18888 +    proc datasets lib = work nolist;
18889 +           delete _tmpclusRsq;
18890 +    run;
18891 +
18892 +    quit;
18893 +%mend FindNextClosestClusByCluster;
18894 +
18895 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18896 +/*----
18897 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18898 +-----------*/
18899 +
18900 +proc sort data =&indata1;
18901 +    by Variable;
18902 +run;
18903 +proc sort data =&indata2;
18904 +    by Variable;
18905 +run;
18906 +data &outdata;
18907 +    merge &indata1 &indata2;
18908 +    by Variable;
18909 +    length Type $16;
18910 +    Type = 'Variable';
18911 +    *label Type ='Type';
18912 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18913 +run;
18914 +
18915 +
18916 +data &indata3;
18917 +    set  &indata3 ;
18918 +    length RSqWithOwnClusComp 8.;
18919 +    Cluster = Variable;
18920 +    RSqWithOwnClusComp = 1;
18921 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18922 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18923 +    length Type $16;
18924 +    Type = 'ClusterComp';
18925 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18926 +
18927 +;
18928 +run;
18929 +
18930 +proc sort data=&outdata;
18931 +    by Cluster;
18932 +run;
18933 +proc sort data =&indata3;
18934 +    by Cluster;
18935 +run;
18936 +
18937 +data &outdata;
18938 +     set &outdata &indata3;
18939 +     by Cluster;
18940 +run;
18941 +
18942 +
18943 +/* Create the Selected variable with all YES */
18944 +
18945 +data &outdata;
18946 +     set &outdata;
18947 +     length RsqRatio 8.;
18948 +     length Selected $8;
18949 +     *label RSqRatio = "1-R**2 Ratio";
18950 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18951 +     *label Selected = "Variable Selected";
18952 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18953 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18954 +     Selected ='YES';
18955 +     rename _LABEL_ = Label;
18956 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18957 +run;
18958 +
18959 +
18960 +/*----  Selected = Y/N will be assigened at the %score                   -------+
18961 +        Just create the Selected variable with all YES at the step above
18962 + +------------------------------------------------------------------------------+
18963 +
18964 +proc sort data=&outdata;
18965 +    by Cluster RsqRatio;
18966 +run;
18967 +
18968 +%if &selectedcomp eq CLUSTERCOMP %then %do;
18969 +data &outdata;
18970 +     set &outdata; by Cluster;
18971 +     length Selected $8;
18972 +     label Selected = "Variable Selected";
18973 +     if  first.Cluster then Selected ='Yes';
18974 +     else Selected = 'No';
18975 +    run;
18976 +%end;
18977 +%else %do;
18978 +data &outdata(drop = _var _varchange);
18979 +     set &outdata; retain _var 0; by Cluster;
18980 +     length Selected $8;
18981 +     label Selected = "Variable Selected";
18982 +     if first.Cluster then  _varchange = 0;
18983 +     else _varchange =1;
18984 +     if _var ne _varchange then  Selected  = 'Yes';
18985 +     else Selected = 'No';
18986 +     if last.cluster then  _var = 0;
18987 +     else _var = _varchange;
18988 +run;
18989 +%end;
18990 +
18991 +--------------------------------------------------------------*/
18992 +
18993 +quit;
18994 +%mend MakeVarClusResultTable;
18995 +
18996 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18997 +     proc sort data =&indata;
18998 +        by cluster;
18999 +     run;
19000 +     proc transpose data =&indata
19001 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19002 +          by cluster;
19003 +     run;
19004 +     data &outdata;
19005 +          set  &outdata;
19006 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19007 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19008 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
19009 +     run;
19010 +     %if &globalclusid ne %then %do;
19011 +     data &outdata;
19012 +          Length GCluster $16;
19013 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19014 +          set  &outdata;
19015 +          GCluster ="GC&globalclusid.";
19016 +          run;
19017 +     %end;
19018 +
19019 +%Mend MakePlotDataFromCorrTable;
19020 +
19021 +
19022 +%macro MakeCorrelation(indata=,
19023 +                       outstat=_tmpoutstat,
19024 +                       corrmatrix=N,
19025 +                       outcorr=_tmpoutcorr,
19026 +                       includeclassvar=N,
19027 +                       target=,
19028 +                       freq=,
19029 +                       weight=);
19030 +   %if &target eq  %then %do;
19031 +
19032 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19033 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19034 +       %if &includeclassvar eq Y %then %do;
19035 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19036 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19037 +          %do i = 2 %to &nvar;
19038 +          %let varname = %sysfunc(varname(&dsid, &i));
19039 +          &varname
19040 +          %end;
19041 +       %end;
19042 +       ;
19043 +      %if &freq ne  %then %do;
19044 +          freq &freq;
19045 +      %end;
19046 +      %if &weight ne  %then %do;
19047 +          weight &weight;
19048 +      %end;
19049 +
19050 +      run;
19051 +      %if &corrmatrix eq Y %then %do;
19052 +      data  &outcorr (drop = _NCL_ _TYPE_);
19053 +           set  &outstat ;
19054 +           if _TYPE_ ='CORR' then output;
19055 +      run;
19056 +      %end;
19057 +    %end;
19058 +    %else %do;
19059 +       proc corr data=&indata outp=&outstat noprint;
19060 +            var
19061 +       %let dsid = %sysfunc(open(&indata));
19062 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19063 +          %do i = 1 %to &nvar;
19064 +              %let _name = %sysfunc(varname(&dsid, &i));
19065 +              %if &_name ne &target %then;
19066 +              &_name
19067 +           %end;
19068 +        %let dsid= %sysfunc(close(&dsid));
19069 +        ;
19070 +        with &target;
19071 +        run;
19072 +    %end;
19073 +    quit;
19074 +%mend MakeCorrelation;
19075 +
19076 +
19077 +%macro MakeCorrelationDistance(indata=,
19078 +                               outdata=,
19079 +                               rsquare = N
19080 +                               );
19081 +    data corr_tmp;
19082 +        set &indata;
19083 +        if _N_ = 1 then do;
19084 +           output;
19085 +           stop;
19086 +         end;
19087 +    run;
19088 +    %if &outdata ne  %then %let  _outdata = &outdata;
19089 +    %else %let _outdata = &indata;
19090 +
19091 +    data &_outdata;
19092 +         set &indata;
19093 +
19094 +         %let dsid = %sysfunc(open(work.corr_tmp));
19095 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19096 +          %do i = 2 %to &nvar;
19097 +              %let _name = %sysfunc(varname(&dsid, &i));
19098 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19099 +              %else  %let _name_md = &_name;
19100 +              &_name = 1- &_name_md;
19101 +          %end;
19102 +      %let dsid= %sysfunc(close(&dsid));
19103 +      run;
19104 +      proc datasets lib = work nolist;
19105 +           delete corr_tmp;
19106 +      run;
19107 +      quit;
19108 +  %mend MakeCorrelationDistance;
19109 +
19110 +
19111 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19112 +                                   rsquare = N
19113 +                                   );
19114 +    data corr_tmp;
19115 +        set &indata;
19116 +    run;
19117 +    proc sql noprint;
19118 +           update &indata
19119 +           set
19120 +     %let dsid = %sysfunc(open(work.corr_tmp));
19121 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19122 +          %do i = 4 %to &nvar;
19123 +          %let _name = %sysfunc(varname(&dsid, &i));
19124 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19125 +            %else  %let _name_md = &_name;
19126 +            %if &i < &nvar %then %do;
19127 +               &_name = 1- &_name_md ,
19128 +            %end;
19129 +            %else %do;
19130 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19131 +            %end;
19132 +          %end;
19133 +      %let dsid= %sysfunc(close(&dsid));
19134 +
19135 +      select * from &indata;
19136 +      run;
19137 +     data &indata( drop = _NCL_);
19138 +           set &indata;
19139 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19140 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19141 +     run;
19142 +     data &indata(DROP = _NCL_);
19143 +           set &indata;
19144 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19145 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19146 +           rename _NAME_ = _VAR_;
19147 +     run;
19148 +     proc datasets lib = work nolist;
19149 +           delete corr_tmp;
19150 +     run;
19151 +     quit;
19152 + %mend UpdateOutStatCorrToDistance;
19153 +
19154 +
19155 +%macro HierClusWithCorr(indata= ,
19156 +                        ncluster=,
19157 +                        method = Ward,
19158 +                        outtree = _outtree,
19159 +                        idvar =_VAR_,
19160 +                        outdata=,
19161 +                        rescore = N,
19162 +                        newncluster=
19163 +                        );
19164 +      %global &newncluster;
19165 +      %if &rescore ne Y %then %do;
19166 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19167 +                   method=&method outtree=&outtree noprint;
19168 +           id &idvar;
19169 +      run;
19170 +      %end;
19171 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19172 +      run;
19173 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19174 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19175 +      run;
19176 +      data _outcontent;
19177 +          set _outcontent;
19178 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19179 +          index = 1;
19180 +          rename NAME = _NAME_;
19181 +      run;
19182 +      proc sort data=_outcontent;
19183 +          by _NAME_;
19184 +      run;
19185 +      proc sort data =&outdata;
19186 +           by _NAME_;
19187 +      run;
19188 +      data &outdata(drop=index);
19189 +          merge &outdata _outcontent;
19190 +          by _NAME_;
19191 +          if index = . then delete;
19192 +      run;
19193 +      /*-----------------------------------------------------------*/
19194 +      data &outdata;
19195 +           length CLUSNAME $16;
19196 +           set &outdata;
19197 +           if CLUSTER > &ncluster then delete;
19198 +           CLUSNAME='GC'||strip(CLUSTER);
19199 +           *label CLUSNAME = "Cluster Name";
19200 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19201 +           rename _NAME_ = VARIABLE ;
19202 +           *label _NAME_ = "Variable";
19203 +           *label CLUSTER = "Cluster";
19204 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19205 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19206 +      run;
19207 +      proc sort data=&outdata out=&outdata;
19208 +           by CLUSTER;
19209 +      run;
19210 +      proc means data =&outdata noprint;
19211 +           output out=_meanout;
19212 +      run;
19213 +      data _null_;
19214 +            set _meanout;
19215 +            if strip(_STAT_) eq 'MAX' then do;
19216 +            call symput("&newncluster", CLUSTER);
19217 +            stop;
19218 +            end;
19219 +      run;
19220 +
19221 +      proc datasets lib = work nolist;
19222 +           delete _outcontent _meanout;
19223 +      run;
19224 +      quit;
19225 +%mend  HierClusWithCorr;
19226 +
19227 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19228 +
19229 +     data _tmpindata;
19230 +          set &indata;
19231 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19232 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19233 +          if _TYPE_ = 'STD' then _NAME_='STD';
19234 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19235 +          DROP _TYPE_ _NCL_;
19236 +     run;
19237 +
19238 +     filename _file_  "&fileRef";
19239 +
19240 +     data _null_;
19241 +        FILE _file_ MOD;
19242 +        put ' ';
19243 +        put "/*-------------------------------------------------*/";
19244 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19245 +        put "/*-------------------------------------------------*/";
19246 +        put ' ';
19247 +        %let dsid = %sysfunc(open(work._tmpindata));
19248 +
19249 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19250 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19251 +        %let k = 1;
19252 +        %do %while(^%sysfunc(fetch(&dsid)));
19253 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19254 +               %if &k > 2 %then %do;
19255 +                %let cn = %eval(&k-2);
19256 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19257 +                %end;
19258 +                %let k = %eval(&k+1);
19259 +
19260 +        %end;
19261 +        %let rc = %sysfunc(rewind(&dsid));
19262 +
19263 +        %do j= 2 %to &nvar;
19264 +            %let _varname = %sysfunc(varname(&dsid, &j));
19265 +            %do %while(^%sysfunc(fetch(&dsid)));
19266 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19267 +                %if &_name = MEAN %then
19268 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19269 +                %else %if &_name = STD %then
19270 +                %let _std = %sysfunc(getvarn(&dsid, &j));
19271 +                %else %do;
19272 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19273 +                      %let abscoeff = %sysfunc(abs(&coeff));
19274 +                          %if &abscoeff >  0 %then %do;
19275 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19276 +                           %end;
19277 +                 %end;
19278 +             %end;
19279 +             %let rc = %sysfunc(rewind(&dsid));
19280 +         %end;
19281 +
19282 +        %let dsid= %sysfunc(close(&dsid));
19283 +
19284 +     run;
19285 +
19286 +     filename _file_;
19287 +     proc datasets lib = work nolist;
19288 +           delete _tmpindata;
19289 +     run;
19290 +     quit;
19291 +%mend CreateScoreCode2;
19292 +
19293 +
19294 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19295 +
19296 +     /*--- Build Code to Modify Metadata ---*/
19297 +     filename X "&deltacodefile";
19298 +     data _null_;
19299 +        FILE X;
19300 +        set &groupds end=eof;
19301 +        if _N_=1 then do;
19302 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19303 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19304 +           %end;
19305 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19306 +           put "if upcase(strip(NAME)) in (";
19307 +        end;
19308 +        if Strip(upcase(Selected)) eq 'YES' then do;
19309 +           string = '"'!!trim(left(VARIABLE))!!'"';
19310 +           put string;
19311 +        end;
19312 +        if eof then do;
19313 +           put ') then ROLE="INPUT";';
19314 +           put 'else ROLE="REJECTED";';
19315 +           put 'end;';
19316 +
19317 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19318 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19319 +           %end;
19320 +        end;
19321 +     run;
19322 +     quit;
19323 +
19324 +     filename X;
19325 +     quit;
19326 +%mend MakeDeltaCode2;
19327 +
19328 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19329 +  %global &ngc;
19330 +  data _null_;
19331 +  %if &indata ne %then %do;
19332 +      %let dsid = %sysfunc(open(&indata));
19333 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19334 +      %let dsid = %sysfunc(close(&dsid));
19335 +  %end;
19336 +  %else %do;
19337 +       %let nvar = %eval(&ninput+&ndummy); ;
19338 +  %end;
19339 +  %let numgc = %eval(&nvar/&div+2);
19340 +  %let &ngc = &numgc;
19341 +   run;
19342 +  quit;
19343 +%mend getInitialGClusterNumber;
19344 +
19345 +
19346 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19347 +data &outlink(drop = Selected);
19348 +     set &indata;
19349 +     LINKID = _N_;
19350 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19351 +run;
19352 +data &outnode(keep=NODEID TYPE LABEL);
19353 +    set &indata;
19354 +    length TYPE $16;
19355 +    rename VARIABLE = NODEID;
19356 +    *label  CLUSNAME="Node ID";
19357 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19358 +    TYPE = "VARIABLE";
19359 +    *label TYPE = "Node Type";
19360 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19361 +    run;
19362 +data _tmp(keep=NODEID TYPE LABEL);
19363 +    set &indata;
19364 +    length TYPE $16;
19365 +    rename CLUSNAME = NODEID;
19366 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19367 +    TYPE = "GCLUSTER";
19368 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19369 +    run;
19370 +proc sort data=_tmp;
19371 +    by NODEID;
19372 +run;
19373 +data _tmp;
19374 +    set _tmp; by NODEID;
19375 +    if first.NODEID then output;
19376 +run;
19377 +proc sort data=&outnode;
19378 +    by NODEID;
19379 +run;
19380 +data  &outnode;
19381 +    set _tmp &outnode;
19382 +run;
19383 +proc datasets lib = work nolist;
19384 +     delete _tmp;
19385 +run;
19386 +quit;
19387 +%mend MakeGobalConstellData;
19388 +
19389 +/* Make contellation plot data among GCLUSTERS */
19390 +
19391 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19392 +
19393 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19394 +     set &indata;
19395 +     LINKID = _N_;
19396 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19397 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19398 +     end;
19399 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19400 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19401 +     end;
19402 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19403 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19404 +    end;
19405 +run;
19406 +
19407 +data _tmp_outrsquare;
19408 +        set &inoutrsq;
19409 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19410 +run;
19411 +
19412 +proc freq data =_tmp_outrsquare noprint;
19413 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19414 +run;
19415 +
19416 +data &outnode(keep=_NAME_ TYPE LABEL);
19417 +    set &outlink;
19418 +    length TYPE $16;
19419 +    length LABEL $100;
19420 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19421 +
19422 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19423 +    TYPE = "GCLUSTER";
19424 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19425 +    end;
19426 +    else do;
19427 +    TYPE= "ROOT";
19428 +    LABEL= _NAME_;
19429 +    end;
19430 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19431 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19432 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19433 +    run;
19434 +
19435 +proc sort data=&outnode;
19436 +     by _NAME_;
19437 +proc sort data=_tmp_GCLUSFREQ;
19438 +     by _NAME_;
19439 +run;
19440 +
19441 +data  &outnode;
19442 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19443 +     if COUNT=. then COUNT=1;
19444 +run;
19445 +
19446 +proc datasets lib = work nolist;
19447 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19448 +run;
19449 +
19450 +quit;
19451 +%Mend MakeGClusterConstData;
19452 +
19453 +
19454 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19455 +
19456 +    data _gscoretmpds;
19457 +          set &indata;
19458 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19459 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19460 +          if _TYPE_ = 'STD' then _NAME_='STD';
19461 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19462 +          DROP _TYPE_ _NCL_;
19463 +     run;
19464 +
19465 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19466 +        GCluster Component &globalclusid ------ */
19467 +
19468 +    filename _file_  "&fileref";
19469 +
19470 +    data _null_;
19471 +        %if &globalclusid eq 1 %then %do;
19472 +          FILE _file_;
19473 +        %end;
19474 +        %else %do;
19475 +          FILE _file_ MOD;
19476 +        %end;
19477 +
19478 +        %let dsid = %sysfunc(open(work._gscoretmpds));
19479 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19480 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19481 +
19482 +        %let k = 1;
19483 +        %do %while(^%sysfunc(fetch(&dsid)));
19484 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19485 +                %if &k > 2 %then %do;
19486 +                put "&_name = 0 ; ";
19487 +                %end;
19488 +                %let k = %eval(&k+1);
19489 +        %end;
19490 +
19491 +        %let rc = %sysfunc(rewind(&dsid));
19492 +        %do i= 2 %to &nvar;
19493 +            %let _varname =  %sysfunc(varname(&dsid, &i));
19494 +            %do %while(^%sysfunc(fetch(&dsid)));
19495 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19496 +                %if &_name = MEAN %then
19497 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19498 +                %else %if &_name = STD %then
19499 +                %let _std = %sysfunc(getvarn(&dsid, &i));
19500 +                %else %do;
19501 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19502 +                      %let abscoeff = %sysfunc(abs(&coeff));
19503 +                          %if &abscoeff >  0 %then %do;
19504 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19505 +                           %end;
19506 +                 %end;
19507 +             %end;
19508 +             %let rc = %sysfunc(rewind(&dsid));
19509 +
19510 +         %end;
19511 +
19512 +        %let dsid= %sysfunc(close(&dsid));
19513 +       run;
19514 +
19515 +
19516 +       proc datasets lib=work nolist;
19517 +            delete _gscoretmpds;
19518 +       run;
19519 +      quit;
19520 +
19521 +%mend CreateGClusterScoreCode;
19522 +
19523 +
19524 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19525 +
19526 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19527 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19528 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19529 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19530 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19531 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19532 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19533 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19534 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19535 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19536 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19537 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19538 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19539 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19540 +
19541 +   filename gsfile "&gscorecode";
19542 +
19543 +   data &EM_USER_GSCORE;
19544 +             set &indata;
19545 +             %include  gsfile;
19546 +        keep
19547 +        %do i=1 %to &ngcluster;
19548 +         %let gcvarname = GC&i;
19549 +         &gcvarname
19550 +        %end;
19551 +     ;
19552 +   run;
19553 +
19554 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19555 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19556 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19557 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19558 +    noprint  ;
19559 +     var
19560 +       %do i=1 %to &ngcluster;
19561 +         %let gcvarname = GC&i;
19562 +         &gcvarname
19563 +        %end;
19564 +   ;
19565 +   run;
19566 +
19567 +
19568 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19569 +   data &EM_USER_GSCORECORRPLOT ;
19570 +        set &EM_USER_GSCORECORRPLOT;
19571 +        rename _X_ = X;
19572 +        rename _Y_ = Y;
19573 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19574 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19575 +   run;
19576 +
19577 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19578 +
19579 +   data &EM_USER_GSCORETREE;
19580 +        length _NAME_ $32;
19581 +        length _LABEL_ $100;
19582 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19583 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19584 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19585 +        end;else do;
19586 +         _LABEL_ = _NAME_;
19587 +        end;
19588 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19589 +
19590 +   run;
19591 +
19592 +   quit;
19593 +
19594 +%mend MakeGClusterCorrelation;
19595 +
19596 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19597 +%macro score;
19598 +
19599 +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19600 +%include temp;
19601 +filename temp;
19602 +
19603 +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19604 +
19605 +data _null_;
19606 +         set &EM_USER_VARCLUSMETA;
19607 +         if _N_=1 then
19608 +         call symput('_trainnum', TrainNum);
19609 +         call symput('_exportedcomp', ExportedComp);
19610 +         call symput('_hidevariable', HideVariable);
19611 +         call symput('_newTrain', NewTrain);
19612 +run;
19613 +
19614 +%if &_newTrain = N %then %do;
19615 +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19616 +        %else %let _exportedCompChanged = Y;
19617 +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19618 +        %else  %let _hideVariableChanged = Y;
19619 +%end;
19620 +%else %do;
19621 +        %let _exportedCompChanged = Y;
19622 +        %let _hideVariableChanged = Y;
19623 +%end;
19624 +
19625 +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19626 +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19627 +     %include temp;
19628 +     filename temp;
19629 +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19630 +%end;
19631 +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19632 +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19633 +     %include temp;
19634 +     filename temp;
19635 +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19636 +%end;
19637 +
19638 +  /* store  current property values */
19639 + data &EM_USER_VARCLUSMETA;
19640 +       set &EM_USER_VARCLUSMETA;
19641 +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19642 +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19643 + run;
19644 +
19645 +%mend score;
19646 +
19647 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19648 +
19649 +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19650 +     proc sort data =&indata;
19651 +              by Cluster RsqRatio Type;
19652 +     run;
19653 +     /*----------------------------------------------------------------------
19654 +      The Type variabe is used becuse the variable need to be selected
19655 +        instead of Cluster component when only one variable is in the cluster
19656 +     +-----------------------------------------------------------------------*/
19657 +
19658 +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
19659 +         data &indata;
19660 +              set &indata; by cluster;
19661 +              if first.Cluster then Selected = 'YES';
19662 +              else Selected = 'NO';
19663 +         run;
19664 +         quit;
19665 +    %end;
19666 +    %else %do;
19667 +         data &indata(drop = _var _varchange);
19668 +              set &indata; retain _var 0; by Cluster;
19669 +             if first.Cluster then  _varchange = 0;
19670 +                 else _varchange =1;
19671 +             if _var ne _varchange then  Selected  = 'YES';
19672 +             else Selected = 'NO';
19673 +             if last.cluster then  _var = 0;
19674 +             else _var = _varchange;
19675 +         run;
19676 +         quit;
19677 +    %end;
19678 +%mend ChangeVariableSelectionFlag;
19679 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
19680 +
19681 +%macro score1(ExportedCompChanged=,
19682 +              HideVariableChanged=);
19683 +
19684 +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
19685 +   %if &ExportedCompChanged = Y %then %do;
19686 +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
19687 +   %end;
19688 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
19689 +
19690 +%mend score1;
19691 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTRSQUARE has 131 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12Dec2017:12:42:54,
      Create Time=12Dec2017:12:37:22
 
NOTE: 40 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 93.
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS4.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
19692  *------------------------------------------------------------*;
19693  * End SCORE: VarClus;
19694  *------------------------------------------------------------*;
19695
 
19696  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas";
19697  *------------------------------------------------------------*;
19698  * VarClus: Scoring DATA data;
19699  *------------------------------------------------------------*;
19700  data EMWS4.VarClus_TRAIN
19701  / view=EMWS4.VarClus_TRAIN
19702  ;
19703  set EMWS4.Part_TRAIN
19704  ;
19705  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas.
19706 +*** Begin Class Look-up, Standardization, Replacement ;
19707 +
19708 +*** Generate dummy variables for BOTHPAYM ;
19709 +label BOTHPAYM0 = 'BOTHPAYM=0' ;
19710 +label BOTHPAYM1 = 'BOTHPAYM=1' ;
19711 +if missing( BOTHPAYM ) then do;
19712 +   BOTHPAYM0 = .;
19713 +   BOTHPAYM1 = .;
19714 +end;
19715 +else do;
19716 +   length _dm4 $ 4; drop _dm4 ;
19717 +   _dm4 = put( BOTHPAYM , $4. );
19718 +   %DMNORMIP( _dm4 )
19719 +   if _dm4 = '0'  then do;
19720 +      BOTHPAYM0 = 1;
19721 +      BOTHPAYM1 = 0;
19722 +   end;
19723 +   else if _dm4 = '1'  then do;
19724 +      BOTHPAYM0 = 0;
19725 +      BOTHPAYM1 = 1;
19726 +   end;
19727 +   else do;
19728 +      delete;
19729 +   end;
19730 +end;
19731 +
19732 +*** Generate dummy variables for CCPAYM ;
19733 +label CCPAYM0 = 'CCPAYM=0' ;
19734 +label CCPAYM1 = 'CCPAYM=1' ;
19735 +if missing( CCPAYM ) then do;
19736 +   CCPAYM0 = .;
19737 +   CCPAYM1 = .;
19738 +end;
19739 +else do;
19740 +   length _dm4 $ 4; drop _dm4 ;
19741 +   _dm4 = put( CCPAYM , $4. );
19742 +   %DMNORMIP( _dm4 )
19743 +   if _dm4 = '0'  then do;
19744 +      CCPAYM0 = 1;
19745 +      CCPAYM1 = 0;
19746 +   end;
19747 +   else if _dm4 = '1'  then do;
19748 +      CCPAYM0 = 0;
19749 +      CCPAYM1 = 1;
19750 +   end;
19751 +   else do;
19752 +      delete;
19753 +   end;
19754 +end;
19755 +
19756 +*** Generate dummy variables for METHPAYM ;
19757 +label METHPAYMCC = 'METHPAYM=CC' ;
19758 +label METHPAYMCK = 'METHPAYM=CK' ;
19759 +label METHPAYMDK = 'METHPAYM=DK' ;
19760 +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
19761 +*** encoding is sparse, initialize to zero;
19762 +METHPAYMCC = 0;
19763 +METHPAYMCK = 0;
19764 +METHPAYMDK = 0;
19765 +METHPAYMXBOT = 0;
19766 +if missing( METHPAYM ) then do;
19767 +   METHPAYMCC = .;
19768 +   METHPAYMCK = .;
19769 +   METHPAYMDK = .;
19770 +   METHPAYMXBOT = .;
19771 +end;
19772 +else do;
19773 +   length _dm4 $ 4; drop _dm4 ;
19774 +   _dm4 = put( METHPAYM , $4. );
19775 +   %DMNORMIP( _dm4 )
19776 +   if _dm4 = 'CC'  then do;
19777 +      METHPAYMCC = 1;
19778 +   end;
19779 +   else if _dm4 = 'CK'  then do;
19780 +      METHPAYMCK = 1;
19781 +   end;
19782 +   else if _dm4 = 'XBOT'  then do;
19783 +      METHPAYMXBOT = 1;
19784 +   end;
19785 +   else if _dm4 = 'DK'  then do;
19786 +      METHPAYMDK = 1;
19787 +   end;
19788 +   else do;
19789 +      delete;
19790 +   end;
19791 +end;
19792 +
19793 +*** Generate dummy variables for PCPAYM ;
19794 +label PCPAYM0 = 'PCPAYM=0' ;
19795 +label PCPAYM1 = 'PCPAYM=1' ;
19796 +if missing( PCPAYM ) then do;
19797 +   PCPAYM0 = .;
19798 +   PCPAYM1 = .;
19799 +end;
19800 +else do;
19801 +   length _dm4 $ 4; drop _dm4 ;
19802 +   _dm4 = put( PCPAYM , $4. );
19803 +   %DMNORMIP( _dm4 )
19804 +   if _dm4 = '0'  then do;
19805 +      PCPAYM0 = 1;
19806 +      PCPAYM1 = 0;
19807 +   end;
19808 +   else if _dm4 = '1'  then do;
19809 +      PCPAYM0 = 0;
19810 +      PCPAYM1 = 1;
19811 +   end;
19812 +   else do;
19813 +      delete;
19814 +   end;
19815 +end;
19816 +
19817 +*** End Class Look-up, Standardization, Replacement ;
19818 +
19819 +
19820 +/*-------------------------------------------------*/
19821 +/* Varclus Score Code Begins*/
19822 +/*-------------------------------------------------*/
19823 +
19824 +Clus1 = 0 ; /*---Cluster Component 1------ */
19825 +Clus2 = 0 ; /*---Cluster Component 2------ */
19826 +Clus3 = 0 ; /*---Cluster Component 3------ */
19827 +Clus4 = 0 ; /*---Cluster Component 4------ */
19828 +Clus5 = 0 ; /*---Cluster Component 5------ */
19829 +Clus6 = 0 ; /*---Cluster Component 6------ */
19830 +Clus7 = 0 ; /*---Cluster Component 7------ */
19831 +Clus8 = 0 ; /*---Cluster Component 8------ */
19832 +Clus9 = 0 ; /*---Cluster Component 9------ */
19833 +Clus10 = 0 ; /*---Cluster Component 10------ */
19834 +Clus11 = 0 ; /*---Cluster Component 11------ */
19835 +Clus12 = 0 ; /*---Cluster Component 12------ */
19836 +Clus13 = 0 ; /*---Cluster Component 13------ */
19837 +Clus14 = 0 ; /*---Cluster Component 14------ */
19838 +Clus15 = 0 ; /*---Cluster Component 15------ */
19839 +Clus16 = 0 ; /*---Cluster Component 16------ */
19840 +Clus17 = 0 ; /*---Cluster Component 17------ */
19841 +Clus18 = 0 ; /*---Cluster Component 18------ */
19842 +Clus19 = 0 ; /*---Cluster Component 19------ */
19843 +Clus20 = 0 ; /*---Cluster Component 20------ */
19844 +Clus21 = 0 ; /*---Cluster Component 21------ */
19845 +Clus22 = 0 ; /*---Cluster Component 22------ */
19846 +Clus23 = 0 ; /*---Cluster Component 23------ */
19847 +Clus24 = 0 ; /*---Cluster Component 24------ */
19848 +Clus25 = 0 ; /*---Cluster Component 25------ */
19849 +Clus26 = 0 ; /*---Cluster Component 26------ */
19850 +Clus27 = 0 ; /*---Cluster Component 27------ */
19851 +Clus28 = 0 ; /*---Cluster Component 28------ */
19852 +Clus29 = 0 ; /*---Cluster Component 29------ */
19853 +Clus30 = 0 ; /*---Cluster Component 30------ */
19854 +Clus31 = 0 ; /*---Cluster Component 31------ */
19855 +Clus32 = 0 ; /*---Cluster Component 32------ */
19856 +Clus33 = 0 ; /*---Cluster Component 33------ */
19857 +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
19858 +Clus27 = Clus27+0.2102032557169 * (BUYPROP - 0.18928931964407)/0.25656954904129;
19859 +Clus1 = Clus1+0.13961478444576 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
19860 +Clus2 = Clus2+0.26053380861573 * (DAYLAST - 1182.17608189855)/1226.0780195912;
19861 +Clus30 = Clus30+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
19862 +Clus30 = Clus30+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
19863 +Clus30 = Clus30+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
19864 +Clus30 = Clus30+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
19865 +Clus30 = Clus30+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
19866 +Clus1 = Clus1+0.08539360410374 * (DEPT06 - 0.85925236544129)/1.98131768775175;
19867 +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
19868 +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
19869 +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
19870 +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
19871 +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
19872 +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
19873 +Clus1 = Clus1+0.10265921945045 * (DEPT13 - 1.30395532805956)/2.58742913517547;
19874 +Clus1 = Clus1+0.09382483235441 * (DEPT14 - 0.83527221963704)/2.18699342328426;
19875 +Clus1 = Clus1+0.06295443147815 * (DEPT15 - 0.28949899177912)/1.23869079532202;
19876 +Clus1 = Clus1+0.06325473542235 * (DEPT16 - 0.22491081123002)/1.0272304883634;
19877 +Clus1 = Clus1+0.05685701687127 * (DEPT17 - 0.19466418489219)/0.960753111967;
19878 +Clus33 = Clus33+0.55584809459247 * (DEPT18 - 0.1317512021095)/0.70116887678934;
19879 +Clus33 = Clus33+0.47715127706675 * (DEPT19 - 0.07324336900884)/0.59281735227563;
19880 +Clus33 = Clus33+0.46283809727038 * (DEPT20 - 0.02956413835892)/0.31025698407933;
19881 +Clus33 = Clus33+0.38062270827744 * (DEPT21 - 0.01821002016441)/0.24509272697267;
19882 +Clus1 = Clus1+0.11270007233835 * (DEPT22 - 2.12771831859779)/3.55134640550257;
19883 +Clus32 = Clus32+0.60605266548224 * (DEPT23 - 2.14223669923995)/3.81941288304535;
19884 +Clus32 = Clus32+0.60605266548224 * (DEPT24 - 0.64039087947882)/1.70711269742472;
19885 +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
19886 +Clus10 = Clus10+0.26679703902057 * (DEPT26 - 0.19075539010392)/0.91270742425277;
19887 +Clus1 = Clus1+0.07540932251311 * (DEPT27 - 0.58712579494338)/1.55259848403997;
19888 +Clus8 = Clus8+0.50586446117948 * (DOLINDEA - 47.8585866898046)/37.591191668842;
19889 +Clus1 = Clus1+0.14866842285081 * (DOLINDET - 197.869031487513)/314.244548218948;
19890 +Clus5 = Clus5+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
19891 +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969907)/18.9572343997303;
19892 +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
19893 +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
19894 +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
19895 +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
19896 +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
19897 +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
19898 +Clus28 = Clus28+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
19899 +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640238;
19900 +Clus9 = Clus9+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
19901 +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974562)/20.8177653006881;
19902 +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
19903 +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
19904 +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
19905 +Clus7 = Clus7+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
19906 +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166279)/31.0104071776129;
19907 +Clus5 = Clus5+0.44436827521592 * (DOLLARQ17 - 5.57017403443462)/26.1415799982751;
19908 +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
19909 +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
19910 +Clus10 = Clus10+0.47928623815107 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
19911 +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.7463651310687)/24.268088572003;
19912 +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
19913 +Clus8 = Clus8+0.50586446117948 * (DOLNETDA - 45.411597554134)/36.1502695431938;
19914 +Clus1 = Clus1+0.14795449132882 * (DOLNETDT - 189.18095548317)/303.615750735174;
19915 +Clus2 = Clus2+-0.26053652561954 * (DTBUYLST - 16579.2557778811)/1226.01924677542;
19916 +Clus27 = Clus27+0.44209782255401 * (DTBUYORG - 15219.1123002947)/1827.11395772537;
19917 +Clus1 = Clus1+0.13748025428471 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
19918 +Clus2 = Clus2+0.26053524523571 * (MONLAST - 38.7579959671164)/40.2783526824403;
19919 +Clus27 = Clus27+-0.44211365169848 * (TENURE - 83.4682798200713)/60.0499642836247;
19920 +Clus24 = Clus24+0.53431022831306 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
19921 +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
19922 +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
19923 +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
19924 +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
19925 +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
19926 +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
19927 +Clus28 = Clus28+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
19928 +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
19929 +Clus9 = Clus9+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
19930 +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
19931 +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
19932 +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
19933 +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
19934 +Clus7 = Clus7+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
19935 +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
19936 +Clus5 = Clus5+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
19937 +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
19938 +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
19939 +Clus10 = Clus10+0.48436605619674 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
19940 +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
19941 +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
19942 +Clus1 = Clus1+0.14704520640825 * (UNITSIDD - 10.9602916085)/17.1055734908767;
19943 +Clus2 = Clus2+0.11350135065976 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
19944 +Clus27 = Clus27+0.14816580906294 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
19945 +Clus4 = Clus4+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
19946 +Clus4 = Clus4+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
19947 +Clus3 = Clus3+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
19948 +Clus3 = Clus3+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
19949 +Clus3 = Clus3+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
19950 +Clus29 = Clus29+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
19951 +Clus2 = Clus2+0.22295808801358 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
19952 +Clus4 = Clus4+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
19953 +Clus29 = Clus29+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
19954 +Clus29 = Clus29+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
NOTE: %INCLUDE (level 1) ending.
19955  run;
 
NOTE: DATA STEP view saved on file EMWS4.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
 
19956  quit;
19957  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19958  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas";
19959  *------------------------------------------------------------*;
19960  * VarClus: Scoring VALIDATE data;
19961  *------------------------------------------------------------*;
19962  data EMWS4.VarClus_VALIDATE
19963  / view=EMWS4.VarClus_VALIDATE
19964  ;
19965  set EMWS4.Part_VALIDATE
19966  ;
19967  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics_modified\Workspaces\EMWS4\VarClus\EMFLOWSCORE.sas.
19968 +*** Begin Class Look-up, Standardization, Replacement ;
19969 +
19970 +*** Generate dummy variables for BOTHPAYM ;
19971 +label BOTHPAYM0 = 'BOTHPAYM=0' ;
19972 +label BOTHPAYM1 = 'BOTHPAYM=1' ;
19973 +if missing( BOTHPAYM ) then do;
19974 +   BOTHPAYM0 = .;
19975 +   BOTHPAYM1 = .;
19976 +end;
19977 +else do;
19978 +   length _dm4 $ 4; drop _dm4 ;
19979 +   _dm4 = put( BOTHPAYM , $4. );
19980 +   %DMNORMIP( _dm4 )
19981 +   if _dm4 = '0'  then do;
19982 +      BOTHPAYM0 = 1;
19983 +      BOTHPAYM1 = 0;
19984 +   end;
19985 +   else if _dm4 = '1'  then do;
19986 +      BOTHPAYM0 = 0;
19987 +      BOTHPAYM1 = 1;
19988 +   end;
19989 +   else do;
19990 +      delete;
19991 +   end;
19992 +end;
19993 +
19994 +*** Generate dummy variables for CCPAYM ;
19995 +label CCPAYM0 = 'CCPAYM=0' ;
19996 +label CCPAYM1 = 'CCPAYM=1' ;
19997 +if missing( CCPAYM ) then do;
19998 +   CCPAYM0 = .;
19999 +   CCPAYM1 = .;
20000 +end;
20001 +else do;
20002 +   length _dm4 $ 4; drop _dm4 ;
20003 +   _dm4 = put( CCPAYM , $4. );
20004 +   %DMNORMIP( _dm4 )
20005 +   if _dm4 = '0'  then do;
20006 +      CCPAYM0 = 1;
20007 +      CCPAYM1 = 0;
20008 +   end;
20009 +   else if _dm4 = '1'  then do;
20010 +      CCPAYM0 = 0;
20011 +      CCPAYM1 = 1;
20012 +   end;
20013 +   else do;
20014 +      delete;
20015 +   end;
20016 +end;
20017 +
20018 +*** Generate dummy variables for METHPAYM ;
20019 +label METHPAYMCC = 'METHPAYM=CC' ;
20020 +label METHPAYMCK = 'METHPAYM=CK' ;
20021 +label METHPAYMDK = 'METHPAYM=DK' ;
20022 +label METHPAYMXBOT = 'METHPAYM=XBOT' ;
20023 +*** encoding is sparse, initialize to zero;
20024 +METHPAYMCC = 0;
20025 +METHPAYMCK = 0;
20026 +METHPAYMDK = 0;
20027 +METHPAYMXBOT = 0;
20028 +if missing( METHPAYM ) then do;
20029 +   METHPAYMCC = .;
20030 +   METHPAYMCK = .;
20031 +   METHPAYMDK = .;
20032 +   METHPAYMXBOT = .;
20033 +end;
20034 +else do;
20035 +   length _dm4 $ 4; drop _dm4 ;
20036 +   _dm4 = put( METHPAYM , $4. );
20037 +   %DMNORMIP( _dm4 )
20038 +   if _dm4 = 'CC'  then do;
20039 +      METHPAYMCC = 1;
20040 +   end;
20041 +   else if _dm4 = 'CK'  then do;
20042 +      METHPAYMCK = 1;
20043 +   end;
20044 +   else if _dm4 = 'XBOT'  then do;
20045 +      METHPAYMXBOT = 1;
20046 +   end;
20047 +   else if _dm4 = 'DK'  then do;
20048 +      METHPAYMDK = 1;
20049 +   end;
20050 +   else do;
20051 +      delete;
20052 +   end;
20053 +end;
20054 +
20055 +*** Generate dummy variables for PCPAYM ;
20056 +label PCPAYM0 = 'PCPAYM=0' ;
20057 +label PCPAYM1 = 'PCPAYM=1' ;
20058 +if missing( PCPAYM ) then do;
20059 +   PCPAYM0 = .;
20060 +   PCPAYM1 = .;
20061 +end;
20062 +else do;
20063 +   length _dm4 $ 4; drop _dm4 ;
20064 +   _dm4 = put( PCPAYM , $4. );
20065 +   %DMNORMIP( _dm4 )
20066 +   if _dm4 = '0'  then do;
20067 +      PCPAYM0 = 1;
20068 +      PCPAYM1 = 0;
20069 +   end;
20070 +   else if _dm4 = '1'  then do;
20071 +      PCPAYM0 = 0;
20072 +      PCPAYM1 = 1;
20073 +   end;
20074 +   else do;
20075 +      delete;
20076 +   end;
20077 +end;
20078 +
20079 +*** End Class Look-up, Standardization, Replacement ;
20080 +
20081 +
20082 +/*-------------------------------------------------*/
20083 +/* Varclus Score Code Begins*/
20084 +/*-------------------------------------------------*/
20085 +
20086 +Clus1 = 0 ; /*---Cluster Component 1------ */
20087 +Clus2 = 0 ; /*---Cluster Component 2------ */
20088 +Clus3 = 0 ; /*---Cluster Component 3------ */
20089 +Clus4 = 0 ; /*---Cluster Component 4------ */
20090 +Clus5 = 0 ; /*---Cluster Component 5------ */
20091 +Clus6 = 0 ; /*---Cluster Component 6------ */
20092 +Clus7 = 0 ; /*---Cluster Component 7------ */
20093 +Clus8 = 0 ; /*---Cluster Component 8------ */
20094 +Clus9 = 0 ; /*---Cluster Component 9------ */
20095 +Clus10 = 0 ; /*---Cluster Component 10------ */
20096 +Clus11 = 0 ; /*---Cluster Component 11------ */
20097 +Clus12 = 0 ; /*---Cluster Component 12------ */
20098 +Clus13 = 0 ; /*---Cluster Component 13------ */
20099 +Clus14 = 0 ; /*---Cluster Component 14------ */
20100 +Clus15 = 0 ; /*---Cluster Component 15------ */
20101 +Clus16 = 0 ; /*---Cluster Component 16------ */
20102 +Clus17 = 0 ; /*---Cluster Component 17------ */
20103 +Clus18 = 0 ; /*---Cluster Component 18------ */
20104 +Clus19 = 0 ; /*---Cluster Component 19------ */
20105 +Clus20 = 0 ; /*---Cluster Component 20------ */
20106 +Clus21 = 0 ; /*---Cluster Component 21------ */
20107 +Clus22 = 0 ; /*---Cluster Component 22------ */
20108 +Clus23 = 0 ; /*---Cluster Component 23------ */
20109 +Clus24 = 0 ; /*---Cluster Component 24------ */
20110 +Clus25 = 0 ; /*---Cluster Component 25------ */
20111 +Clus26 = 0 ; /*---Cluster Component 26------ */
20112 +Clus27 = 0 ; /*---Cluster Component 27------ */
20113 +Clus28 = 0 ; /*---Cluster Component 28------ */
20114 +Clus29 = 0 ; /*---Cluster Component 29------ */
20115 +Clus30 = 0 ; /*---Cluster Component 30------ */
20116 +Clus31 = 0 ; /*---Cluster Component 31------ */
20117 +Clus32 = 0 ; /*---Cluster Component 32------ */
20118 +Clus33 = 0 ; /*---Cluster Component 33------ */
20119 +Clus6 = Clus6+0.31049469798101 * (ACTBUY - 0.99109663409337)/1.16003174926523;
20120 +Clus27 = Clus27+0.2102032557169 * (BUYPROP - 0.18928931964407)/0.25656954904129;
20121 +Clus1 = Clus1+0.13961478444576 * (CATALOGCNT - 3.77161470451372)/3.12899556544539;
20122 +Clus2 = Clus2+0.26053380861573 * (DAYLAST - 1182.17608189855)/1226.0780195912;
20123 +Clus30 = Clus30+0.32606352949113 * (DEPT01 - 0.50547541492166)/1.82274128473225;
20124 +Clus30 = Clus30+0.31475903553413 * (DEPT02 - 0.29257018768419)/1.15307534710204;
20125 +Clus30 = Clus30+0.35680641258699 * (DEPT03 - 1.08161935784085)/2.82203775857088;
20126 +Clus30 = Clus30+0.31539445831064 * (DEPT04 - 0.68006824879789)/2.28175674515779;
20127 +Clus30 = Clus30+0.29360569691748 * (DEPT05 - 0.54295020939972)/1.52515347226129;
20128 +Clus1 = Clus1+0.08539360410374 * (DEPT06 - 0.85925236544129)/1.98131768775175;
20129 +Clus31 = Clus31+0.21799066207907 * (DEPT07 - 0.02559329920893)/0.31536747776311;
20130 +Clus31 = Clus31+0.33993271338746 * (DEPT08 - 0.31512331316891)/1.29408639394269;
20131 +Clus31 = Clus31+0.34186033539386 * (DEPT09 - 0.2486427795874)/1.20923480324609;
20132 +Clus31 = Clus31+0.35421920019149 * (DEPT10 - 0.39066232356134)/1.7648701612552;
20133 +Clus31 = Clus31+0.28393608567866 * (DEPT11 - 0.15141926477431)/0.76300583506574;
20134 +Clus31 = Clus31+0.38386073638767 * (DEPT12 - 0.21448735846129)/0.89341788675275;
20135 +Clus1 = Clus1+0.10265921945045 * (DEPT13 - 1.30395532805956)/2.58742913517547;
20136 +Clus1 = Clus1+0.09382483235441 * (DEPT14 - 0.83527221963704)/2.18699342328426;
20137 +Clus1 = Clus1+0.06295443147815 * (DEPT15 - 0.28949899177912)/1.23869079532202;
20138 +Clus1 = Clus1+0.06325473542235 * (DEPT16 - 0.22491081123002)/1.0272304883634;
20139 +Clus1 = Clus1+0.05685701687127 * (DEPT17 - 0.19466418489219)/0.960753111967;
20140 +Clus33 = Clus33+0.55584809459247 * (DEPT18 - 0.1317512021095)/0.70116887678934;
20141 +Clus33 = Clus33+0.47715127706675 * (DEPT19 - 0.07324336900884)/0.59281735227563;
20142 +Clus33 = Clus33+0.46283809727038 * (DEPT20 - 0.02956413835892)/0.31025698407933;
20143 +Clus33 = Clus33+0.38062270827744 * (DEPT21 - 0.01821002016441)/0.24509272697267;
20144 +Clus1 = Clus1+0.11270007233835 * (DEPT22 - 2.12771831859779)/3.55134640550257;
20145 +Clus32 = Clus32+0.60605266548224 * (DEPT23 - 2.14223669923995)/3.81941288304535;
20146 +Clus32 = Clus32+0.60605266548224 * (DEPT24 - 0.64039087947882)/1.70711269742472;
20147 +Clus6 = Clus6+0.26635393730034 * (DEPT25 - 1.77676438653637)/4.75421718243184;
20148 +Clus10 = Clus10+0.26679703902057 * (DEPT26 - 0.19075539010392)/0.91270742425277;
20149 +Clus1 = Clus1+0.07540932251311 * (DEPT27 - 0.58712579494338)/1.55259848403997;
20150 +Clus8 = Clus8+0.50586446117948 * (DOLINDEA - 47.8585866898046)/37.591191668842;
20151 +Clus1 = Clus1+0.14866842285081 * (DOLINDET - 197.869031487513)/314.244548218948;
20152 +Clus5 = Clus5+0.34040516245314 * (DOLL24 - 45.4938073522568)/93.9875146751151;
20153 +Clus24 = Clus24+0.53431022831305 * (DOLLARQ01 - 3.60255901969907)/18.9572343997303;
20154 +Clus23 = Clus23+0.53635920804358 * (DOLLARQ02 - 3.71090770901194)/20.7285900605152;
20155 +Clus11 = Clus11+0.53251837592186 * (DOLLARQ03 - 2.77052582596556)/15.8095808048519;
20156 +Clus16 = Clus16+0.53398718553838 * (DOLLARQ04 - 4.67856274236079)/22.181986153492;
20157 +Clus17 = Clus17+0.53548666653293 * (DOLLARQ05 - 4.32741461144718)/21.5182033567075;
20158 +Clus13 = Clus13+0.53337003658551 * (DOLLARQ06 - 3.88379649449356)/20.0626675130808;
20159 +Clus25 = Clus25+0.53620252678703 * (DOLLARQ07 - 4.19153187529083)/21.9984516452687;
20160 +Clus28 = Clus28+0.54119921647341 * (DOLLARQ08 - 6.15043803319373)/27.3333023843591;
20161 +Clus22 = Clus22+0.5349541071483 * (DOLLARQ09 - 4.29424383434155)/20.7683103640238;
20162 +Clus9 = Clus9+0.53279724233879 * (DOLLARQ10 - 3.64839584302776)/18.9957061824675;
20163 +Clus15 = Clus15+0.53532885078822 * (DOLLARQ11 - 4.15352411974562)/20.8177653006881;
20164 +Clus6 = Clus6+0.3683415196646 * (DOLLARQ12 - 6.39860555297037)/27.403980773023;
20165 +Clus26 = Clus26+0.54383527719424 * (DOLLARQ13 - 5.38680471537149)/25.9110809016436;
20166 +Clus20 = Clus20+0.54398954027119 * (DOLLARQ14 - 4.43791499922444)/23.752188577194;
20167 +Clus7 = Clus7+0.53531614157592 * (DOLLARQ15 - 4.90567023421746)/23.5349065932921;
20168 +Clus18 = Clus18+0.53714970024584 * (DOLLARQ16 - 7.79008624166279)/31.0104071776129;
20169 +Clus5 = Clus5+0.44436827521592 * (DOLLARQ17 - 5.57017403443462)/26.1415799982751;
20170 +Clus19 = Clus19+0.53306278493927 * (DOLLARQ18 - 4.78568140220257)/22.3927978593641;
20171 +Clus14 = Clus14+0.53462067704059 * (DOLLARQ19 - 4.33358802543818)/21.704742358276;
20172 +Clus10 = Clus10+0.47928623815107 * (DOLLARQ20 - 8.71046657360012)/32.6472704396304;
20173 +Clus21 = Clus21+0.53908041935557 * (DOLLARQ21 - 4.7463651310687)/24.268088572003;
20174 +Clus12 = Clus12+0.53808320116509 * (DOLLARQ22 - 4.88413153404684)/24.8521912523649;
20175 +Clus8 = Clus8+0.50586446117948 * (DOLNETDA - 45.411597554134)/36.1502695431938;
20176 +Clus1 = Clus1+0.14795449132882 * (DOLNETDT - 189.18095548317)/303.615750735174;
20177 +Clus2 = Clus2+-0.26053652561954 * (DTBUYLST - 16579.2557778811)/1226.01924677542;
20178 +Clus27 = Clus27+0.44209782255401 * (DTBUYORG - 15219.1123002947)/1827.11395772537;
20179 +Clus1 = Clus1+0.13748025428471 * (FREQPRCH - 4.18160384675042)/5.31459540671444;
20180 +Clus2 = Clus2+0.26053524523571 * (MONLAST - 38.7579959671164)/40.2783526824403;
20181 +Clus27 = Clus27+-0.44211365169848 * (TENURE - 83.4682798200713)/60.0499642836247;
20182 +Clus24 = Clus24+0.53431022831306 * (TOTORDQ01 - 0.07833100666976)/0.31375640071534;
20183 +Clus23 = Clus23+0.53635920804358 * (TOTORDQ02 - 0.07383279044516)/0.30498525646648;
20184 +Clus11 = Clus11+0.53251837592187 * (TOTORDQ03 - 0.05841476655808)/0.25663649019308;
20185 +Clus16 = Clus16+0.53398718553838 * (TOTORDQ04 - 0.09058476810919)/0.33923460400983;
20186 +Clus17 = Clus17+0.53548666653293 * (TOTORDQ05 - 0.08766868310842)/0.32373427535999;
20187 +Clus13 = Clus13+0.53337003658551 * (TOTORDQ06 - 0.08068869241507)/0.31127041208068;
20188 +Clus25 = Clus25+0.53620252678703 * (TOTORDQ07 - 0.08583837443772)/0.3225455818214;
20189 +Clus28 = Clus28+0.54119921647341 * (TOTORDQ08 - 0.11782224290367)/0.39692742169452;
20190 +Clus22 = Clus22+0.5349541071483 * (TOTORDQ09 - 0.09120521172638)/0.32676782706381;
20191 +Clus9 = Clus9+0.53279724233879 * (TOTORDQ10 - 0.07501163331782)/0.2991488551838;
20192 +Clus15 = Clus15+0.53532885078822 * (TOTORDQ11 - 0.08630370715061)/0.31791570298113;
20193 +Clus6 = Clus6+0.38864318218989 * (TOTORDQ12 - 0.12619823173569)/0.4074226605598;
20194 +Clus26 = Clus26+0.54383527719424 * (TOTORDQ13 - 0.10832945556072)/0.35251925488707;
20195 +Clus20 = Clus20+0.54398954027119 * (TOTORDQ14 - 0.08894059252365)/0.31938115502111;
20196 +Clus7 = Clus7+0.53531614157592 * (TOTORDQ15 - 0.09821622460058)/0.342400248125;
20197 +Clus18 = Clus18+0.53714970024584 * (TOTORDQ16 - 0.14620753838994)/0.42506049526083;
20198 +Clus5 = Clus5+0.42389042465751 * (TOTORDQ17 - 0.108267411199)/0.35925036974258;
20199 +Clus19 = Clus19+0.53306278493927 * (TOTORDQ18 - 0.09319063130138)/0.32753587031264;
20200 +Clus14 = Clus14+0.53462067704059 * (TOTORDQ19 - 0.08217775709632)/0.30645832771871;
20201 +Clus10 = Clus10+0.48436605619674 * (TOTORDQ20 - 0.15985729796804)/0.46170113594525;
20202 +Clus21 = Clus21+0.53908041935557 * (TOTORDQ21 - 0.09182565534357)/0.32980785722872;
20203 +Clus12 = Clus12+0.53808320116509 * (TOTORDQ22 - 0.08611757406545)/0.31443413012517;
20204 +Clus1 = Clus1+0.14704520640825 * (UNITSIDD - 10.9602916085)/17.1055734908767;
20205 +Clus2 = Clus2+0.11350135065976 * (UNITSLAP - 22.0808611006276)/19.5877886329162;
20206 +Clus27 = Clus27+0.14816580906294 * (UNTLANPO - 2.67912081406979)/2.42439611488132;
20207 +Clus4 = Clus4+-0.33333333333333 * (BOTHPAYM0 - 0.80645261361873)/0.39508434277919;
20208 +Clus4 = Clus4+0.33333333333333 * (BOTHPAYM1 - 0.19354738638126)/0.39508434277919;
20209 +Clus3 = Clus3+-0.33333333333333 * (CCPAYM0 - 0.58303086706995)/0.49306532733706;
20210 +Clus3 = Clus3+0.33333333333333 * (CCPAYM1 - 0.41696913293004)/0.49306532733706;
20211 +Clus3 = Clus3+0.33333333333333 * (METHPAYMCC - 0.41696913293004)/0.49306532733706;
20212 +Clus29 = Clus29+0.33333333333333 * (METHPAYMCK - 0.3029315960912)/0.45953301856693;
20213 +Clus2 = Clus2+0.22295808801358 * (METHPAYMDK - 0.08655188459748)/0.28118162916549;
20214 +Clus4 = Clus4+0.33333333333333 * (METHPAYMXBOT - 0.19354738638126)/0.39508434277919;
20215 +Clus29 = Clus29+-0.33333333333333 * (PCPAYM0 - 0.69706840390879)/0.45953301856693;
20216 +Clus29 = Clus29+0.33333333333333 * (PCPAYM1 - 0.3029315960912)/0.45953301856693;
NOTE: %INCLUDE (level 1) ending.
20217   run;
 
NOTE: DATA STEP view saved on file EMWS4.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
20218   quit;
20219   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
20221   *------------------------------------------------------------*;
20222   * VarClus: Computing metadata for TRAIN data;
20223   *------------------------------------------------------------*;
 
NOTE: View EMWS4.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS4.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                12:42:51
*------------------------------------------------------------*
20624   %let EMEXCEPTIONSTRING=;
20625   *------------------------------------------------------------*;
20626   * REPORT: VarClus;
20627   *------------------------------------------------------------*;
20628   %let EM_ACTION = REPORT;
20629   %let syscc = 0;
20630
20631   %macro main;
20632
20633      filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
20634      %include temp;
20635      filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
20636      %include temp;
20637      filename temp;
20638
20639     %SetProperties;
20640
20641      %if %upcase(&EM_ACTION) = CREATE %then %do;
20642          filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
20643          %include temp;
20644          filename temp;
20645          %create;
20646      %end;
20647      %else
20648      %if %upcase(&EM_ACTION) = TRAIN %then %do;
20649           filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
20650              %include temp;
20651              filename temp;
20652              %train;
20653      %end;
20654      %else
20655      %if %upcase(&EM_ACTION) = SCORE %then %do;
20656              filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
20657              %include temp;
20658              filename temp;
20659              %score;
20660      %end;
20661      %else
20662      %if %upcase(&EM_ACTION) = REPORT %then %do;
20663              filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
20664              %include temp;
20665              filename temp;
20666              %report;
20667      %end;
20668      /*
20669      %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
20670          %put 'OPENING TABLE';
20671      %end;
20672      %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
20673          %put 'CLOSE TABLE';
20674      %end;
20675      */
20676   %mend main;
20677   %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
20678  +
20679  +/* Initialize property macro variables */
20680  +%macro SetProperties;
20681  +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
20682  +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
20683  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
20684  +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
20685  +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
20686  +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
20687  +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
20688  +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
20689  +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
20690  +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
20691  +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
20692  +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
20693  +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
20694  +
20695  +%mend SetProperties;
20696  +
20697  +%Macro MakeDummyVariables(indata=,
20698  +                          outvar=,
20699  +                          outdata=,
20700  +                          fileref=,
20701  +                          recreatecmeta=N, /* optional */
20702  +                          incmeta=,     /* optional */
20703  +                          outcmeta=,    /* optional */
20704  +                          ndummyvars=_ndummyvars
20705  +                          );
20706  +    %global &ndummyvars;
20707  +
20708  +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
20709  +       class
20710  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20711  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20712  +    ;
20713  +    run;
20714  +    %let &ndummyvars = 0;
20715  +    data _null_;
20716  +    %let dsid = %sysfunc(open(work._classout));
20717  +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
20718  +    %let dsid = %sysfunc(close(&dsid));
20719  +    run;
20720  +
20721  +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
20722  +       input
20723  +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20724  +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20725  +        / level=nominal stdize=no;
20726  +       make outvar = &outvar;
20727  +       score data = &indata out =&outdata;
20728  +       code  file=  "&fileref";
20729  +    run;
20730  +    %if &recreatecmeta eq Y %then %do;
20731  +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
20732  +    data _tmpds;
20733  +        set _tmpds;
20734  +           ROLE = 'INPUT';
20735  +           LEVEL = 'INTERVAL';
20736  +           CREATOR='DMZIP';
20737  +           if NAME = '_TYPE_' then delete;
20738  +    run;
20739  +    data &outcmeta;
20740  +         set &incmeta _tmpds;
20741  +    run;
20742  +    %end;
20743  +    proc datasets lib=work nolist;
20744  +      delete  _dmdbdat _dmdbcat _classout
20745  +    %if &recreatecmeta eq Y %then %do;
20746  +    _tmpds
20747  +    %end;
20748  +    ;
20749  +    quit;
20750  +%Mend MakeDummyVariables;
20751  +
20752  +/*--- Determine Optimal Number of Cluster ----
20753  +%macro FindClusNum(statds=, groupds=, minvariation=);
20754  +   %global optnclus;
20755  +   data varclus_tmp(drop=_NAME_);
20756  +      set &statDs;
20757  +      where _type_ ='PROPOR';
20758  +   run;
20759  +   proc sort data=varclus_tmp;
20760  +      by _NCL_;
20761  +   run;
20762  +   proc transpose data=varclus_tmp out=varclus_tmp;
20763  +      by _NCL_;
20764  +      var %EM_INTERVAL_INPUT
20765  +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20766  +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
20767  +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
20768  +          %do i = 2 %to &nvar;
20769  +          %let varname = %sysfunc(varname(&dsid, &i));
20770  +          &varname
20771  +          %end;
20772  +      %end;
20773  +   ;
20774  +   run;
20775  +
20776  +   %if &minVariation eq %then %do;
20777  +       %let minVariation = &EM_PROPERTY_MINVARIATION;
20778  +   %end;
20779  +   %if ^(0<&minVariation<100) %then %do;
20780  +       %let minVariation = 90;
20781  +   %end;
20782  +
20783  +   data _null_;
20784  +      set varclus_tmp end=eof;
20785  +      by _NCL_;
20786  +      retain flag 0;
20787  +      if first._ncl_ then flag=0;
20788  +      if .<col1 < &minVariation then flag=1;
20789  +      if last._ncl_ and ^flag then do;
20790  +         call symput('OPTNCL', _ncl_);
20791  +         stop;
20792  +      end;
20793  +     if eof then call symput('OPTNCL', _ncl_);
20794  +   run;
20795  +
20796  +   %let optnclus = &OPTNCL;
20797  +
20798  +   data varclus_tmp(drop=_NCL_ _NAME_);
20799  +      set &statDs;
20800  +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
20801  +   run;
20802  +   proc sort data=varclus_tmp;
20803  +      by _TYPE_;
20804  +   run;
20805  +   proc transpose data=varclus_tmp out=varclus_tmp;
20806  +      by _TYPE_;
20807  +   run;
20808  +   proc sort data=varclus_tmp;
20809  +      by _name_ _type_;
20810  +   run;
20811  +
20812  +  proc transpose data=varclus_tmp out=&groupds;
20813  +      by _NAME_;
20814  +   run;
20815  +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
20816  +      by Cluster descending Rsquare;
20817  +      where Cluster ne 0;
20818  +   run;
20819  +   proc datasets lib=work nolist mt=(DATA VIEW);
20820  +      delete varclus_tmp;
20821  +   run;
20822  +   quit;
20823  +%mend findClusNum;
20824  +*/
20825  +
20826  +%macro getNclusfromTrain(inoutstat=, nc=);
20827  +%global &nc;
20828  +data _null_;
20829  +    set &inoutstat end=eof;
20830  +    if eof then do;
20831  +    call symput("&nc", _ncl_);
20832  +    end;
20833  +run;
20834  +%mend  getNclusfromTrain;
20835  +
20836  +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
20837  +
20838  +     *--- Build Code to Modify Metadata ---*;
20839  +     filename X "&deltacodefile";
20840  +     data _null_;
20841  +        FILE X;
20842  +        set &groupds end=eof;
20843  +        /*by Cluster;*/
20844  +         if _N_=1 then do;
20845  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20846  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
20847  +           %end;
20848  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
20849  +           put "if upcase(strip(NAME)) in (";
20850  +        end;
20851  +        if Strip(upcase(Selected)) eq 'YES' then do;
20852  +           string = '"'!!trim(left(VARIABLE))!!'"';
20853  +           put string;
20854  +        end;
20855  +        if eof then do;
20856  +           put ') then ROLE="INPUT";';
20857  +           put 'else ROLE="REJECTED";';
20858  +           put 'end;';
20859  +
20860  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
20861  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
20862  +           %end;
20863  +        end;
20864  +     run;
20865  +     quit;
20866  +
20867  +     filename X;
20868  +
20869  +     quit;
20870  +%mend MakeDeltaCode;
20871  +
20872  +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
20873  +    %if ^%sysfunc(exist(&statds)) %then %do;
20874  +         %goto doendc;
20875  +    %end;
20876  +
20877  +    data &corrds(drop=_TYPE_ _NCL_) ;
20878  +       set &statds;
20879  +       where _type_ eq 'CORR' ;
20880  +    run ;
20881  +    proc sort data=&corrds;
20882  +       by _NAME_ ;
20883  +    run ;
20884  +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
20885  +      BY _NAME_ ;
20886  +    run ;
20887  +    data &corrplotds;
20888  +       length _Y_ $100;
20889  +       set &corrplotDs;
20890  +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
20891  +    run ;
20892  +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
20893  +       set &corrplotds;
20894  +       where _LABEL_ ne '' ;
20895  +       keep _TMP_ _LABEL_ ;
20896  +    run ;
20897  +    data _null_;
20898  +       nobs=0;
20899  +       dsid = open('varclus_match');
20900  +       if dsid then do;
20901  +          nobs = attrn(dsid, 'NOBS');
20902  +          dsid = close(dsid);
20903  +       end;
20904  +       call symput ('CORR_NOBS', nobs);
20905  +    run;
20906  +    %if &corr_nobs %then %do;
20907  +        proc sort data=varclus_match;
20908  +           by _name_;
20909  +        run ;
20910  +        proc sort data=&corrplotds;
20911  +           by _name_;
20912  +        run ;
20913  +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
20914  +           merge varclus_match &corrplotds;
20915  +           by _NAME_ ;
20916  +           if _X_ eq '' then _X_=_NAME_ ;
20917  +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20918  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20919  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20920  +
20921  +       run ;
20922  +    %end;
20923  +    %else %do;
20924  +        proc sort data=&corrplotds;
20925  +           by _name_;
20926  +        run ;
20927  +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
20928  +           set &corrplotds;
20929  +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20930  +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20931  +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20932  +
20933  +        run ;
20934  +    %end;
20935  +    proc sort data=&corrplotds;
20936  +       by _X_ _Y_;
20937  +    run ;
20938  +    proc datasets lib=work nolist mt=(DATA VIEW);
20939  +       delete varclus_match;
20940  +    run;
20941  +    quit;
20942  +
20943  +%doendc:
20944  +
20945  +%mend MakeVarClusCorrData;
20946  +
20947  +%macro MakeStatPlotData(statds= , outstatplotds=);
20948  +   %if %sysfunc(exist(&statds)) %then %do;
20949  +
20950  +       data varclus_tmp(drop=_NAME_ _NCL_) ;
20951  +          set &statDs;
20952  +          where _type_ in('MEAN', 'STD', 'N');
20953  +       run ;
20954  +       proc transpose data=varclus_tmp out=&outstatplotds;
20955  +          id _TYPE_ ;
20956  +       run ;
20957  +       data &outstatplotds;
20958  +          set &outstatplotds(obs=1000);
20959  +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
20960  +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
20961  +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
20962  +          else SCALEDSTD= STD ;
20963  +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
20964  +       run ;
20965  +       proc sort data=&outstatplotds;
20966  +          by descending SCALEDSTD ;
20967  +       run ;
20968  +       proc datasets lib=work nolist mt=(DATA VIEW);
20969  +          delete varclus_tmp;
20970  +       run;
20971  +       quit;
20972  +    %end;
20973  +
20974  +%mend MakeStatPlotData;
20975  +
20976  +
20977  +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
20978  +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
20979  +    data &EM_USER_OUTSTATSCORE;
20980  +          set &indata;
20981  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
20982  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
20983  +          if _TYPE_ = 'STD' then _NAME_='STD';
20984  +          DROP _TYPE_ _NCL_;
20985  +     run;
20986  +
20987  +     filename _file_  "&fileRef";
20988  +
20989  +     data _null_;
20990  +        FILE _file_ MOD;
20991  +        put ' ';
20992  +        put '/*-------------------------------------------------*/';
20993  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
20994  +        put '/*-------------------------------------------------*/';
20995  +        put ' ';
20996  +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
20997  +
20998  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20999  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21000  +
21001  +        %let k = 1;
21002  +        %do %while(^%sysfunc(fetch(&dsid)));
21003  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21004  +                %if &k > 2 %then %do;
21005  +                 %let cn = %eval(&k-2);
21006  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
21007  +                %end;
21008  +                %let k = %eval(&k+1);
21009  +        %end;
21010  +
21011  +        %let rc = %sysfunc(rewind(&dsid));
21012  +
21013  +        %do i= 2 %to &nvar;
21014  +            %let _varname =  %sysfunc(varname(&dsid, &i));
21015  +            %do %while(^%sysfunc(fetch(&dsid)));
21016  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21017  +                %if &_name = MEAN %then
21018  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21019  +                %else %if &_name = STD %then
21020  +                %let _std = %sysfunc(getvarn(&dsid, &i));
21021  +                %else %do;
21022  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21023  +                      %let abscoeff = %sysfunc(abs(&coeff));
21024  +                          %if &abscoeff >  0 %then %do;
21025  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21026  +                           %end;
21027  +                 %end;
21028  +             %end;
21029  +             %let rc = %sysfunc(rewind(&dsid));
21030  +         %end;
21031  +
21032  +        %let dsid= %sysfunc(close(&dsid));
21033  +       run;
21034  +%mend CreateScoreCode;
21035  +
21036  +
21037  +
21038  +/*----------------------------------------------------------
21039  +    Instead of using %MakeRSquareData,
21040  +    %MakeVarClusResultTable at macro2.source is used
21041  + +----------------------------------------------------------*/
21042  +
21043  +
21044  +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
21045  +
21046  +/* modifying  from ods rsquare = data */
21047  +
21048  +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
21049  +    Length Cluster $16;
21050  +    length Variable $32;
21051  +    Length VariableLabel $64;
21052  +    set &indata; retain CurrentCluster;
21053  +    if NumberOfClusters ^= &ncluster then delete;
21054  +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
21055  +    CurrentCluster = Cluster;
21056  +   run;
21057  +proc sort data =&outdata ;
21058  +     by Cluster RsquareRatio;
21059  +run;
21060  +data _tmprsq(drop=index);
21061  +     set &outdata; by Cluster;
21062  +     if first.Cluster then do;
21063  +     index = strip(scan(Cluster,2 ));
21064  +     Variable = "Clus"||index;
21065  +     VariableLabel = "Cluster Component "||index;
21066  +     OwnCluster = 1;
21067  +     NextClosest = .;
21068  +     RsquareRatio = 0;
21069  +     output;
21070  +     end;
21071  +run;
21072  +
21073  +proc sort data = _tmprsq ;
21074  +     by Cluster RsquareRatio;
21075  +run;
21076  +data &outdata;
21077  +     set &outdata _tmprsq;
21078  +by Cluster;
21079  +run;
21080  +
21081  +
21082  +/* Just create the Selected variable with all YES */
21083  +
21084  +data &outdata;
21085  +    set &outdata; by cluster;
21086  +    length Selected $8;
21087  +    Selected = 'YES';
21088  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21089  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21090  +    rename OwnCluster = RSqWithClusterComp;
21091  +    rename NextClosest = RSqWithNextClusComp;
21092  +run;
21093  +
21094  +
21095  +/* Selected = Y/N will be done %score section -----
21096  +
21097  +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
21098  +data &outdata;
21099  +    set &outdata; by cluster;
21100  +    length Selected $8;
21101  +    if first.Cluster then Selected = 'YES';
21102  +    else Selected = 'NO';
21103  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21104  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21105  +    rename OwnCluster = RSqWithClusterComp;
21106  +    rename NextClosest = RSqWithNextClusComp;
21107  +run;
21108  +%end;
21109  +%else %do;
21110  +data &outdata;
21111  +    set &outdata; by cluster;
21112  +    if last.Cluster then Selected = 'YES';
21113  +    else Selected = 'NO';
21114  +    label  OwnCluster = 'R-Sqaure with Cluster Component';
21115  +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
21116  +    rename OwnCluster = RSqWithClusterComp;
21117  +    rename NextClosest = RSqWithNextClusComp;
21118  +run;
21119  +%end;
21120  +---------------------------------------------------------------*/
21121  +
21122  +%if %sysfunc(exist(&inClusRSquare)) %then %do;
21123  +/* to calculate NextClosestClusRsq */
21124  +proc transpose data = &inClusRSquare  out=_clusRsq;
21125  +      by cluster;
21126  +      run;
21127  +data _clusRsq;
21128  +     set _clusRsq;
21129  +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
21130  +run;
21131  +
21132  +proc sort data=_clusRsq;
21133  +    by cluster col1;
21134  +    run;
21135  +data _clusRsq(drop=_NAME_ _LABEL_);
21136  +     set _clusRsq; by cluster;
21137  +     if last.Cluster then output;
21138  +     label  COL1 = 'R-Sqaure with Next Cluster Component';
21139  +     rename COL1 = RSqWithNextClusComp;
21140  +     rename Cluster = Variable;
21141  +     label  Cluster = "Variable";
21142  +run;
21143  +
21144  +proc sort data =&outdata;
21145  +     by Variable;
21146  +run;
21147  +data &outdata;
21148  +    merge &outdata _clusRsq;
21149  +    by Variable;
21150  +run;
21151  +proc sort data =&outdata;
21152  +by Cluster  RsquareRatio;
21153  +run;
21154  +quit;
21155  +%end;
21156  +
21157  +proc datasets lib = work nolist;
21158  +     delete _tmprsq _clusRsq;
21159  +     run;
21160  +quit;
21161  +
21162  +%mend MakeRSquareData;
21163  +
21164  +
21165  +/*-------------------------------------------------------------------------*/
21166  +
21167  +
21168  +
21169  +%macro ModifyCorr(indata=,
21170  +                  outdata=,
21171  +                  rsquare = Y
21172  +                  );
21173  +    data corr_tmp;
21174  +        set &indata;
21175  +    run;
21176  +     proc sql;
21177  +           update &indata
21178  +           set
21179  +     %let dsid = %sysfunc(open(work.corr_tmp));
21180  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21181  +          %do i = 4 %to &nvar;
21182  +          %let _name = %sysfunc(varname(&dsid, &i));
21183  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21184  +            %else  %let _name_md = &_name;
21185  +            %if &i < &nvar %then %do;
21186  +               &_name = 1- &_name_md ,
21187  +            %end;
21188  +            %else %do;
21189  +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
21190  +            %end;
21191  +          %end;
21192  +      %let dsid= %sysfunc(close(&dsid));
21193  +
21194  +      select * from &indata;
21195  +      run;
21196  +      proc datasets lib = work nolist;
21197  +           delete corr_tmp;
21198  +      run;
21199  +      quit;
21200  +
21201  + %mend ModifyCorr;
21202  +
21203  + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
21204  +    data &outdata(drop= _NCL_  _TYPE_);
21205  +       set &indata;
21206  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21207  +       rename _NAME_ = Cluster;
21208  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21209  +    run;
21210  +    %if &RSquare eq Y %then %do;
21211  +     data corr_tmp;
21212  +        set &outdata;
21213  +     run;
21214  +
21215  +     data &outdata(drop=i);
21216  +          set &outdata;
21217  +          %let dsid = %sysfunc(open(work.corr_tmp));
21218  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21219  +          %do i = 2 %to &nvar;
21220  +            %let _name = %sysfunc(varname(&dsid, &i));
21221  +            %let _name_md = &_name.**2;
21222  +                &_name = &_name_md;
21223  +          %end;
21224  +      %let dsid= %sysfunc(close(&dsid));
21225  +      run;
21226  +      proc datasets lib = work nolist;
21227  +           delete corr_tmp;
21228  +      run;
21229  +
21230  +    %end;
21231  +     quit;
21232  +%mend MakeClusStructCorrData;
21233  +
21234  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
21235  +    data &outdata(drop= _NCL_  _TYPE_);
21236  +       set &indata;
21237  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21238  +       rename _NAME_ = Cluster;
21239  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21240  +    run;
21241  +    data corr_tmp;
21242  +        set &outdata;
21243  +    run;
21244  +
21245  +    %let dsid = %sysfunc(open(work.corr_tmp));
21246  +    %let nclus2= %eval(&ncluster+1);
21247  +    data &outdata;
21248  +         set &outdata;
21249  +          %do i = 2 %to &nclus2;
21250  +          %let i_1 = %eval(&i-1);
21251  +            %let _name = %sysfunc(varname(&dsid, &i));
21252  +            %let _newName = Clus&i_1;
21253  +                rename &_name = &_newName; ;
21254  +                *label &_name ="Cluster &i_1";
21255  +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21256  +          %end;
21257  +          keep Cluster
21258  +          %do i = 2 %to &nclus2;
21259  +                %let _name = %sysfunc(varname(&dsid, &i));
21260  +                &_name
21261  +          %end;
21262  +          ;
21263  +    %let dsid= %sysfunc(close(&dsid));
21264  +     run;
21265  +     quit;
21266  +
21267  +    %if &RSquare eq Y %then %do;
21268  +
21269  +       data corr_tmp;
21270  +        set &outdata;
21271  +     run;
21272  +
21273  +     data &outdata(drop=i);
21274  +          set &outdata;
21275  +          %let dsid = %sysfunc(open(work.corr_tmp));
21276  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21277  +          %do i = 2 %to &nvar;
21278  +            %let _name = %sysfunc(varname(&dsid, &i));
21279  +            %let _name_md = &_name.**2;
21280  +                &_name = &_name_md;
21281  +          %end;
21282  +      %let dsid= %sysfunc(close(&dsid));
21283  +      run;
21284  +    %end;
21285  +
21286  +    %if &makeplotds eq Y %then %do;
21287  +     proc transpose data = &outdata
21288  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21289  +          by cluster;
21290  +     run;
21291  +     data &plotds;
21292  +          set  &plotds;
21293  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21294  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21295  +     run;
21296  +     %end;
21297  +     proc datasets lib = work nolist;
21298  +           delete corr_tmp;
21299  +     run;
21300  +     quit;
21301  +%mend MakeInterClusCorrData;
21302  +
21303  +
21304  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21305  +
21306  +data &outlink(drop = Selected);
21307  +     set &indata;
21308  +     LINKID = _N_;
21309  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21310  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21311  +run;
21312  +data &outnode(keep=NODEID TYPE LABEL);
21313  +    set &indata;
21314  +    length TYPE $16;
21315  +    rename Variable = NODEID;
21316  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21317  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21318  +    then  TYPE = "CLUSTER";
21319  +    else  TYPE="VARIABLE";
21320  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21321  +run;
21322  +quit;
21323  +%mend MakeClusConstellData;
21324  +
21325  +
21326  +
21327  +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21328  +
21329  +data &outlink(drop = Selected);
21330  +     set &indata;
21331  +     LINKID = _N_;
21332  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21333  +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21334  +run;
21335  +data &outnode(keep=NODEID TYPE LABEL);
21336  +    set &indata;
21337  +    length TYPE $16;
21338  +    rename Variable = NODEID;
21339  +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21340  +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21341  +    then  TYPE = "CLUSTER";
21342  +    else  TYPE="VARIABLE";
21343  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21344  +run;
21345  +quit;
21346  +%mend MakeClusConstellData;
21347  +
21348  +
21349  +/*--- This will work only when inds is not a view data -------
21350  +
21351  +%macro getNVarNObs(inds=, nvar=, nobs=);
21352  +
21353  +    %global &nvar;
21354  +    %global &nobs;
21355  +    data _null_;
21356  +         dsid = open("&inds");
21357  +         nv = attrn(dsid, 'NVAR');
21358  +         no = attrn(dsid, 'NOBS');
21359  +         dsid = close(dsid);
21360  +         call symput("&nvar", nv);
21361  +         call symput("&nobs", no);
21362  +    run;
21363  +    quit;
21364  +%mend  getNVarNObs;
21365  +
21366  ++---------------------------------------------------------------*/
21367  +
21368  +
21369  +%macro getNVar(inds=, nvar=);
21370  +    %global &nvar;
21371  +    data _null_;
21372  +         dsid = open("&inds");
21373  +         nv = attrn(dsid, 'NVAR');
21374  +         dsid = close(dsid);
21375  +         call symput("&nvar", nv);
21376  +    run;
21377  +    quit;
21378  +%mend  getNVar;
21379  +
21380  +
21381  +
21382  +%macro getNObs(inds=, nobs=);
21383  +    %global &nobs;
21384  +    data _null_;
21385  +        set &inds end=eof;
21386  +        if eof then call symput("&nobs", _N_);
21387  +    run;
21388  +    quit;
21389  +%mend  getNObs;
21390  +
21391  +%Macro CreateVarclusMeta(trainnum=);
21392  +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21393  +    data &EM_USER_VARCLUSMETA;
21394  +         length TrainNum 8.;
21395  +         length NewTrain $8;
21396  +         length NGCluster 8.;
21397  +         length ExportedComp $16;
21398  +         length HideVariable $8;
21399  +         TrainNum = &trainnum;
21400  +         NewTrain = "Y";
21401  +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
21402  +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
21403  +         NGCluster = 0; /* zero means no twostage */
21404  +   run;
21405  +   quit;
21406  +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
21407  +
21408  +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
21409  +    data &outdata(drop= _NCL_  _TYPE_);
21410  +       set &indata;
21411  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21412  +       %if &globalclusid ne %then %do;
21413  +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21414  +       rename _NAME_ = Cluster;
21415  +       %end;
21416  +       %else %do;
21417  +        _NAME_ = upcase(_NAME_);
21418  +       rename _NAME_ = Cluster;
21419  +       %end;
21420  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21421  +    run;
21422  +    data corr_tmp;
21423  +        set &outdata;
21424  +    run;
21425  +
21426  +    %let dsid = %sysfunc(open(work.corr_tmp));
21427  +    %let nclus2= %eval(&ncluster+1);
21428  +    data &outdata;
21429  +         set &outdata;
21430  +          %do i = 2 %to &nclus2;
21431  +          %let i_1 = %eval(&i-1);
21432  +            %let _name = %sysfunc(varname(&dsid, &i));
21433  +            %if &globalclusid ne %then
21434  +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
21435  +                     rename &_name = &_newName;
21436  +                     *label &_name ="GC &globalclusid : Cluster &i_1";
21437  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
21438  +                %end;
21439  +            %else
21440  +                %do; %let _newName = CLUS&i_1;
21441  +                     rename &_name = &_newName;
21442  +                     *label &_name ="Cluster &i_1";
21443  +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21444  +                %end;
21445  +          %end;
21446  +          keep Cluster
21447  +          %do i = 2 %to &nclus2;
21448  +                %let _name = %sysfunc(varname(&dsid, &i));
21449  +                &_name
21450  +          %end;
21451  +          ;
21452  +    %let dsid= %sysfunc(close(&dsid));
21453  +     run;
21454  +     quit;
21455  +
21456  +    %if &RSquare eq Y %then %do;
21457  +
21458  +       data corr_tmp;
21459  +        set &outdata;
21460  +     run;
21461  +
21462  +     data &outdata;
21463  +          set &outdata;
21464  +          %let dsid = %sysfunc(open(work.corr_tmp));
21465  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21466  +          %do i = 2 %to &nvar;
21467  +            %let _name = %sysfunc(varname(&dsid, &i));
21468  +            %let _name_md = &_name.**2;
21469  +                &_name = &_name_md;
21470  +          %end;
21471  +      %let dsid= %sysfunc(close(&dsid));
21472  +      run;
21473  +    %end;
21474  +
21475  +    %if &makeplotds eq Y %then %do;
21476  +     proc transpose data = &outdata
21477  +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21478  +          by cluster;
21479  +     run;
21480  +     data &plotds;
21481  +          set  &plotds;
21482  +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21483  +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21484  +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21485  +     run;
21486  +     %end;
21487  +     proc datasets lib = work nolist;
21488  +           delete corr_tmp;
21489  +     run;
21490  +     quit;
21491  +%mend MakeInterClusCorrData;
21492  +
21493  +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
21494  +    data _tmpds(drop= _NCL_);
21495  +       set &indata;
21496  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
21497  +       %if &globalclusid ne %then %do;
21498  +           _NAME_ = "GC&globalclusid.";
21499  +       rename _NAME_ = Cluster;
21500  +       %end;
21501  +       %else %do;
21502  +        _NAME_ = "CLUS";
21503  +        rename _NAME_ = Cluster;
21504  +       %end;
21505  +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21506  +    run;
21507  +    proc transpose data =_tmpds out =&outdata;
21508  +    run;
21509  +
21510  +    data &outdata(drop=COL1);
21511  +        %if &globalclusid ne %then %do;
21512  +        length GCluster $16;
21513  +        %end;
21514  +        length Cluster $32;
21515  +        length _NAME_ $32;
21516  +         set &outdata;
21517  +         _NAME_ = upcase(_NAME_);
21518  +         rename _NAME_=Variable;
21519  +         *label _NAME_="Variable";
21520  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21521  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21522  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21523  +
21524  +         %if &globalclusid ne %then %do;
21525  +          GCluster = "GC&globalclusid";
21526  +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
21527  +         %end;
21528  +         %else %do;
21529  +         Cluster = "CLUS"||strip(COL1);
21530  +        %end;
21531  +         rename COL2 = RSqWithOwnClusComp;
21532  +         *label COL2 = "R-Square With Own Cluster Component";
21533  +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21534  +
21535  +   run;
21536  +   proc sort data =&outdata;
21537  +        by Cluster RSqWithOwnClusComp;
21538  +   run;
21539  +   proc datasets lib = work nolist;
21540  +           delete _tmpds;
21541  +   run;
21542  +   quit;
21543  +%mend MakeOwnRSquare;
21544  +
21545  +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
21546  +    data &outdata(drop= _NCL_  _TYPE_);
21547  +       %if &globalclusid ne %then %do;
21548  +        length GCluster $16;
21549  +        %end;
21550  +       set &indata;
21551  +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21552  +       %if &globalclusid ne %then %do;
21553  +         GCluster = "GC&globalclusid";
21554  +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21555  +         rename _NAME_ = Cluster;
21556  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21557  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21558  +
21559  +       %end;
21560  +       %else %do;
21561  +         _NAME_ = upcase(_NAME_);
21562  +         rename _NAME_ = Cluster;
21563  +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21564  +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21565  +
21566  +       %end;
21567  +     run;
21568  +    %if &RSquare eq Y %then %do;
21569  +     data corr_tmp;
21570  +          set &outdata;
21571  +     run;
21572  +     %let istart = 2;
21573  +     %if &globalclusid ne %then %let istart = 3;
21574  +     data &outdata;
21575  +          set &outdata;
21576  +          %let dsid = %sysfunc(open(work.corr_tmp));
21577  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21578  +          %do i =&istart %to &nvar;
21579  +            %let _name = %sysfunc(varname(&dsid, &i));
21580  +            %let _name_md = &_name.**2;
21581  +                &_name = &_name_md;
21582  +          %end;
21583  +      %let dsid= %sysfunc(close(&dsid));
21584  +      run;
21585  +      proc datasets lib = work nolist;
21586  +           delete corr_tmp;
21587  +      run;
21588  +    %end;
21589  +     quit;
21590  +%mend MakeClusStructCorrData;
21591  +
21592  +/*
21593  +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
21594  +*/
21595  +
21596  +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
21597  +
21598  +     /* The indata should be the outdata
21599  +        from %MakeClusStructCorrData(indata=, outdata=, ); */
21600  +
21601  +     proc sort data =&indata out=_tmpclusRsq;
21602  +     by cluster;
21603  +     run;
21604  +
21605  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21606  +      by cluster;
21607  +     run;
21608  +
21609  +     proc sort data=_tmpclusRsq;
21610  +        by _NAME_ COL1;
21611  +     run;
21612  +
21613  +     data _tmpclusRsq;
21614  +         length _NAME_ $32;
21615  +         set _tmpclusRsq; by _NAME_;
21616  +          _NAME_ = upcase(_NAME_);
21617  +          %if &ncluster ne 1 %then %do;
21618  +             if last._NAME_ then delete;
21619  +          %end;
21620  +          %else %do;
21621  +             COL1 = 0;
21622  +          %end;
21623  +     run;
21624  +     /* need to sort again */
21625  +     proc sort data=_tmpclusRsq;
21626  +        by _NAME_ COL1;
21627  +     run;
21628  +
21629  +     data &outdata;
21630  +         set _tmpclusRsq; by _NAME_;
21631  +         Cluster = upcase(Cluster);
21632  +         if last._NAME_ then output;
21633  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21634  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21635  +         rename COL1 = RSqWithNextClusComp;
21636  +         Cluster = upcase(Cluster);
21637  +         rename Cluster = ClosestCluster;
21638  +         *label  Cluster = "Next Closest Cluster";
21639  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21640  +         rename _NAME_ = Variable;
21641  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21642  +    run;
21643  +
21644  +
21645  +    %if &globalclusid ne %then %do;
21646  +    data &outdata;
21647  +       length GCluster $16;
21648  +       set &outdata;
21649  +       GCluster = "GC&globalclusid";
21650  +       run;
21651  +    %end;
21652  +    proc datasets lib = work nolist;
21653  +           delete _tmpclusRsq;
21654  +    run;
21655  +    quit;
21656  +%mend FindNextClosestClusByVar;
21657  +
21658  +
21659  +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
21660  +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
21661  +     proc sort data =&indata out=_tmpclusRsq;
21662  +     by cluster;
21663  +     run;
21664  +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21665  +     by cluster;
21666  +     run;
21667  +     proc sort data=_tmpclusRsq;
21668  +        by _NAME_ col1;
21669  +     run;
21670  +     data _tmpclusRsq;
21671  +         length _NAME_ $32;
21672  +         set _tmpclusRsq; by _NAME_;
21673  +          _NAME_ = upcase(_NAME_);
21674  +          %if &ncluster ne 1 %then %do;
21675  +             if last._NAME_ then delete;
21676  +          %end;
21677  +          %else %do;
21678  +             COL1 = 0;
21679  +          %end;
21680  +     run;
21681  +     data &outdata;
21682  +         set _tmpclusRsq; by _NAME_;
21683  +         Cluster = upcase(Cluster);
21684  +         if last._NAME_ then output;
21685  +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21686  +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21687  +         rename COL1 = RSqWithNextClusComp;
21688  +         Cluster = upcase(Cluster);
21689  +         rename Cluster = ClosestCluster;
21690  +         *label  Cluster = "Next Closest Cluster";
21691  +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21692  +         rename _NAME_ = Variable;
21693  +         *label  _NAME_ = "Variable";
21694  +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21695  +
21696  +    run;
21697  +    %if &globalclusid ne %then %do;
21698  +    data &outdata;
21699  +       length GCluster $16;
21700  +       set &outdata;
21701  +       GCluster = "GC&globalclusid";
21702  +       run;
21703  +    %end;
21704  +
21705  +    proc datasets lib = work nolist;
21706  +           delete _tmpclusRsq;
21707  +    run;
21708  +
21709  +    quit;
21710  +%mend FindNextClosestClusByCluster;
21711  +
21712  +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
21713  +/*----
21714  +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
21715  +-----------*/
21716  +
21717  +proc sort data =&indata1;
21718  +    by Variable;
21719  +run;
21720  +proc sort data =&indata2;
21721  +    by Variable;
21722  +run;
21723  +data &outdata;
21724  +    merge &indata1 &indata2;
21725  +    by Variable;
21726  +    length Type $16;
21727  +    Type = 'Variable';
21728  +    *label Type ='Type';
21729  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21730  +run;
21731  +
21732  +
21733  +data &indata3;
21734  +    set  &indata3 ;
21735  +    length RSqWithOwnClusComp 8.;
21736  +    Cluster = Variable;
21737  +    RSqWithOwnClusComp = 1;
21738  +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
21739  +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21740  +    length Type $16;
21741  +    Type = 'ClusterComp';
21742  +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21743  +
21744  +;
21745  +run;
21746  +
21747  +proc sort data=&outdata;
21748  +    by Cluster;
21749  +run;
21750  +proc sort data =&indata3;
21751  +    by Cluster;
21752  +run;
21753  +
21754  +data &outdata;
21755  +     set &outdata &indata3;
21756  +     by Cluster;
21757  +run;
21758  +
21759  +
21760  +/* Create the Selected variable with all YES */
21761  +
21762  +data &outdata;
21763  +     set &outdata;
21764  +     length RsqRatio 8.;
21765  +     length Selected $8;
21766  +     *label RSqRatio = "1-R**2 Ratio";
21767  +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
21768  +     *label Selected = "Variable Selected";
21769  +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
21770  +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
21771  +     Selected ='YES';
21772  +     rename _LABEL_ = Label;
21773  +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21774  +run;
21775  +
21776  +
21777  +/*----  Selected = Y/N will be assigened at the %score                   -------+
21778  +        Just create the Selected variable with all YES at the step above
21779  + +------------------------------------------------------------------------------+
21780  +
21781  +proc sort data=&outdata;
21782  +    by Cluster RsqRatio;
21783  +run;
21784  +
21785  +%if &selectedcomp eq CLUSTERCOMP %then %do;
21786  +data &outdata;
21787  +     set &outdata; by Cluster;
21788  +     length Selected $8;
21789  +     label Selected = "Variable Selected";
21790  +     if  first.Cluster then Selected ='Yes';
21791  +     else Selected = 'No';
21792  +    run;
21793  +%end;
21794  +%else %do;
21795  +data &outdata(drop = _var _varchange);
21796  +     set &outdata; retain _var 0; by Cluster;
21797  +     length Selected $8;
21798  +     label Selected = "Variable Selected";
21799  +     if first.Cluster then  _varchange = 0;
21800  +     else _varchange =1;
21801  +     if _var ne _varchange then  Selected  = 'Yes';
21802  +     else Selected = 'No';
21803  +     if last.cluster then  _var = 0;
21804  +     else _var = _varchange;
21805  +run;
21806  +%end;
21807  +
21808  +--------------------------------------------------------------*/
21809  +
21810  +quit;
21811  +%mend MakeVarClusResultTable;
21812  +
21813  +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
21814  +     proc sort data =&indata;
21815  +        by cluster;
21816  +     run;
21817  +     proc transpose data =&indata
21818  +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21819  +          by cluster;
21820  +     run;
21821  +     data &outdata;
21822  +          set  &outdata;
21823  +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21824  +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21825  +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
21826  +     run;
21827  +     %if &globalclusid ne %then %do;
21828  +     data &outdata;
21829  +          Length GCluster $16;
21830  +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21831  +          set  &outdata;
21832  +          GCluster ="GC&globalclusid.";
21833  +          run;
21834  +     %end;
21835  +
21836  +%Mend MakePlotDataFromCorrTable;
21837  +
21838  +
21839  +%macro MakeCorrelation(indata=,
21840  +                       outstat=_tmpoutstat,
21841  +                       corrmatrix=N,
21842  +                       outcorr=_tmpoutcorr,
21843  +                       includeclassvar=N,
21844  +                       target=,
21845  +                       freq=,
21846  +                       weight=);
21847  +   %if &target eq  %then %do;
21848  +
21849  +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
21850  +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
21851  +       %if &includeclassvar eq Y %then %do;
21852  +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21853  +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21854  +          %do i = 2 %to &nvar;
21855  +          %let varname = %sysfunc(varname(&dsid, &i));
21856  +          &varname
21857  +          %end;
21858  +       %end;
21859  +       ;
21860  +      %if &freq ne  %then %do;
21861  +          freq &freq;
21862  +      %end;
21863  +      %if &weight ne  %then %do;
21864  +          weight &weight;
21865  +      %end;
21866  +
21867  +      run;
21868  +      %if &corrmatrix eq Y %then %do;
21869  +      data  &outcorr (drop = _NCL_ _TYPE_);
21870  +           set  &outstat ;
21871  +           if _TYPE_ ='CORR' then output;
21872  +      run;
21873  +      %end;
21874  +    %end;
21875  +    %else %do;
21876  +       proc corr data=&indata outp=&outstat noprint;
21877  +            var
21878  +       %let dsid = %sysfunc(open(&indata));
21879  +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
21880  +          %do i = 1 %to &nvar;
21881  +              %let _name = %sysfunc(varname(&dsid, &i));
21882  +              %if &_name ne &target %then;
21883  +              &_name
21884  +           %end;
21885  +        %let dsid= %sysfunc(close(&dsid));
21886  +        ;
21887  +        with &target;
21888  +        run;
21889  +    %end;
21890  +    quit;
21891  +%mend MakeCorrelation;
21892  +
21893  +
21894  +%macro MakeCorrelationDistance(indata=,
21895  +                               outdata=,
21896  +                               rsquare = N
21897  +                               );
21898  +    data corr_tmp;
21899  +        set &indata;
21900  +        if _N_ = 1 then do;
21901  +           output;
21902  +           stop;
21903  +         end;
21904  +    run;
21905  +    %if &outdata ne  %then %let  _outdata = &outdata;
21906  +    %else %let _outdata = &indata;
21907  +
21908  +    data &_outdata;
21909  +         set &indata;
21910  +
21911  +         %let dsid = %sysfunc(open(work.corr_tmp));
21912  +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
21913  +          %do i = 2 %to &nvar;
21914  +              %let _name = %sysfunc(varname(&dsid, &i));
21915  +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
21916  +              %else  %let _name_md = &_name;
21917  +              &_name = 1- &_name_md;
21918  +          %end;
21919  +      %let dsid= %sysfunc(close(&dsid));
21920  +      run;
21921  +      proc datasets lib = work nolist;
21922  +           delete corr_tmp;
21923  +      run;
21924  +      quit;
21925  +  %mend MakeCorrelationDistance;
21926  +
21927  +
21928  +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
21929  +                                   rsquare = N
21930  +                                   );
21931  +    data corr_tmp;
21932  +        set &indata;
21933  +    run;
21934  +    proc sql noprint;
21935  +           update &indata
21936  +           set
21937  +     %let dsid = %sysfunc(open(work.corr_tmp));
21938  +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21939  +          %do i = 4 %to &nvar;
21940  +          %let _name = %sysfunc(varname(&dsid, &i));
21941  +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21942  +            %else  %let _name_md = &_name;
21943  +            %if &i < &nvar %then %do;
21944  +               &_name = 1- &_name_md ,
21945  +            %end;
21946  +            %else %do;
21947  +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
21948  +            %end;
21949  +          %end;
21950  +      %let dsid= %sysfunc(close(&dsid));
21951  +
21952  +      select * from &indata;
21953  +      run;
21954  +     data &indata( drop = _NCL_);
21955  +           set &indata;
21956  +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
21957  +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
21958  +     run;
21959  +     data &indata(DROP = _NCL_);
21960  +           set &indata;
21961  +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
21962  +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
21963  +           rename _NAME_ = _VAR_;
21964  +     run;
21965  +     proc datasets lib = work nolist;
21966  +           delete corr_tmp;
21967  +     run;
21968  +     quit;
21969  + %mend UpdateOutStatCorrToDistance;
21970  +
21971  +
21972  +%macro HierClusWithCorr(indata= ,
21973  +                        ncluster=,
21974  +                        method = Ward,
21975  +                        outtree = _outtree,
21976  +                        idvar =_VAR_,
21977  +                        outdata=,
21978  +                        rescore = N,
21979  +                        newncluster=
21980  +                        );
21981  +      %global &newncluster;
21982  +      %if &rescore ne Y %then %do;
21983  +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
21984  +                   method=&method outtree=&outtree noprint;
21985  +           id &idvar;
21986  +      run;
21987  +      %end;
21988  +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
21989  +      run;
21990  +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
21991  +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
21992  +      run;
21993  +      data _outcontent;
21994  +          set _outcontent;
21995  +          if NAME in ('_TYPE_' , '_VAR_') then delete;
21996  +          index = 1;
21997  +          rename NAME = _NAME_;
21998  +      run;
21999  +      proc sort data=_outcontent;
22000  +          by _NAME_;
22001  +      run;
22002  +      proc sort data =&outdata;
22003  +           by _NAME_;
22004  +      run;
22005  +      data &outdata(drop=index);
22006  +          merge &outdata _outcontent;
22007  +          by _NAME_;
22008  +          if index = . then delete;
22009  +      run;
22010  +      /*-----------------------------------------------------------*/
22011  +      data &outdata;
22012  +           length CLUSNAME $16;
22013  +           set &outdata;
22014  +           if CLUSTER > &ncluster then delete;
22015  +           CLUSNAME='GC'||strip(CLUSTER);
22016  +           *label CLUSNAME = "Cluster Name";
22017  +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
22018  +           rename _NAME_ = VARIABLE ;
22019  +           *label _NAME_ = "Variable";
22020  +           *label CLUSTER = "Cluster";
22021  +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
22022  +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
22023  +      run;
22024  +      proc sort data=&outdata out=&outdata;
22025  +           by CLUSTER;
22026  +      run;
22027  +      proc means data =&outdata noprint;
22028  +           output out=_meanout;
22029  +      run;
22030  +      data _null_;
22031  +            set _meanout;
22032  +            if strip(_STAT_) eq 'MAX' then do;
22033  +            call symput("&newncluster", CLUSTER);
22034  +            stop;
22035  +            end;
22036  +      run;
22037  +
22038  +      proc datasets lib = work nolist;
22039  +           delete _outcontent _meanout;
22040  +      run;
22041  +      quit;
22042  +%mend  HierClusWithCorr;
22043  +
22044  +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
22045  +
22046  +     data _tmpindata;
22047  +          set &indata;
22048  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
22049  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22050  +          if _TYPE_ = 'STD' then _NAME_='STD';
22051  +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
22052  +          DROP _TYPE_ _NCL_;
22053  +     run;
22054  +
22055  +     filename _file_  "&fileRef";
22056  +
22057  +     data _null_;
22058  +        FILE _file_ MOD;
22059  +        put ' ';
22060  +        put "/*-------------------------------------------------*/";
22061  +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
22062  +        put "/*-------------------------------------------------*/";
22063  +        put ' ';
22064  +        %let dsid = %sysfunc(open(work._tmpindata));
22065  +
22066  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22067  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22068  +        %let k = 1;
22069  +        %do %while(^%sysfunc(fetch(&dsid)));
22070  +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22071  +               %if &k > 2 %then %do;
22072  +                %let cn = %eval(&k-2);
22073  +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
22074  +                %end;
22075  +                %let k = %eval(&k+1);
22076  +
22077  +        %end;
22078  +        %let rc = %sysfunc(rewind(&dsid));
22079  +
22080  +        %do j= 2 %to &nvar;
22081  +            %let _varname = %sysfunc(varname(&dsid, &j));
22082  +            %do %while(^%sysfunc(fetch(&dsid)));
22083  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22084  +                %if &_name = MEAN %then
22085  +                %let _mean = %sysfunc(getvarn(&dsid, &j));
22086  +                %else %if &_name = STD %then
22087  +                %let _std = %sysfunc(getvarn(&dsid, &j));
22088  +                %else %do;
22089  +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
22090  +                      %let abscoeff = %sysfunc(abs(&coeff));
22091  +                          %if &abscoeff >  0 %then %do;
22092  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22093  +                           %end;
22094  +                 %end;
22095  +             %end;
22096  +             %let rc = %sysfunc(rewind(&dsid));
22097  +         %end;
22098  +
22099  +        %let dsid= %sysfunc(close(&dsid));
22100  +
22101  +     run;
22102  +
22103  +     filename _file_;
22104  +     proc datasets lib = work nolist;
22105  +           delete _tmpindata;
22106  +     run;
22107  +     quit;
22108  +%mend CreateScoreCode2;
22109  +
22110  +
22111  +%macro MakeDeltaCode2(groupds=,deltacodefile=);
22112  +
22113  +     /*--- Build Code to Modify Metadata ---*/
22114  +     filename X "&deltacodefile";
22115  +     data _null_;
22116  +        FILE X;
22117  +        set &groupds end=eof;
22118  +        if _N_=1 then do;
22119  +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
22120  +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
22121  +           %end;
22122  +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
22123  +           put "if upcase(strip(NAME)) in (";
22124  +        end;
22125  +        if Strip(upcase(Selected)) eq 'YES' then do;
22126  +           string = '"'!!trim(left(VARIABLE))!!'"';
22127  +           put string;
22128  +        end;
22129  +        if eof then do;
22130  +           put ') then ROLE="INPUT";';
22131  +           put 'else ROLE="REJECTED";';
22132  +           put 'end;';
22133  +
22134  +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
22135  +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
22136  +           %end;
22137  +        end;
22138  +     run;
22139  +     quit;
22140  +
22141  +     filename X;
22142  +     quit;
22143  +%mend MakeDeltaCode2;
22144  +
22145  +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
22146  +  %global &ngc;
22147  +  data _null_;
22148  +  %if &indata ne %then %do;
22149  +      %let dsid = %sysfunc(open(&indata));
22150  +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
22151  +      %let dsid = %sysfunc(close(&dsid));
22152  +  %end;
22153  +  %else %do;
22154  +       %let nvar = %eval(&ninput+&ndummy); ;
22155  +  %end;
22156  +  %let numgc = %eval(&nvar/&div+2);
22157  +  %let &ngc = &numgc;
22158  +   run;
22159  +  quit;
22160  +%mend getInitialGClusterNumber;
22161  +
22162  +
22163  +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
22164  +data &outlink(drop = Selected);
22165  +     set &indata;
22166  +     LINKID = _N_;
22167  +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
22168  +run;
22169  +data &outnode(keep=NODEID TYPE LABEL);
22170  +    set &indata;
22171  +    length TYPE $16;
22172  +    rename VARIABLE = NODEID;
22173  +    *label  CLUSNAME="Node ID";
22174  +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22175  +    TYPE = "VARIABLE";
22176  +    *label TYPE = "Node Type";
22177  +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22178  +    run;
22179  +data _tmp(keep=NODEID TYPE LABEL);
22180  +    set &indata;
22181  +    length TYPE $16;
22182  +    rename CLUSNAME = NODEID;
22183  +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22184  +    TYPE = "GCLUSTER";
22185  +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22186  +    run;
22187  +proc sort data=_tmp;
22188  +    by NODEID;
22189  +run;
22190  +data _tmp;
22191  +    set _tmp; by NODEID;
22192  +    if first.NODEID then output;
22193  +run;
22194  +proc sort data=&outnode;
22195  +    by NODEID;
22196  +run;
22197  +data  &outnode;
22198  +    set _tmp &outnode;
22199  +run;
22200  +proc datasets lib = work nolist;
22201  +     delete _tmp;
22202  +run;
22203  +quit;
22204  +%mend MakeGobalConstellData;
22205  +
22206  +/* Make contellation plot data among GCLUSTERS */
22207  +
22208  +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
22209  +
22210  +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
22211  +     set &indata;
22212  +     LINKID = _N_;
22213  +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
22214  +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
22215  +     end;
22216  +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
22217  +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
22218  +     end;
22219  +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
22220  +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
22221  +    end;
22222  +run;
22223  +
22224  +data _tmp_outrsquare;
22225  +        set &inoutrsq;
22226  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22227  +run;
22228  +
22229  +proc freq data =_tmp_outrsquare noprint;
22230  +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
22231  +run;
22232  +
22233  +data &outnode(keep=_NAME_ TYPE LABEL);
22234  +    set &outlink;
22235  +    length TYPE $16;
22236  +    length LABEL $100;
22237  +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
22238  +
22239  +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22240  +    TYPE = "GCLUSTER";
22241  +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22242  +    end;
22243  +    else do;
22244  +    TYPE= "ROOT";
22245  +    LABEL= _NAME_;
22246  +    end;
22247  +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22248  +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22249  +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22250  +    run;
22251  +
22252  +proc sort data=&outnode;
22253  +     by _NAME_;
22254  +proc sort data=_tmp_GCLUSFREQ;
22255  +     by _NAME_;
22256  +run;
22257  +
22258  +data  &outnode;
22259  +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
22260  +     if COUNT=. then COUNT=1;
22261  +run;
22262  +
22263  +proc datasets lib = work nolist;
22264  +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
22265  +run;
22266  +
22267  +quit;
22268  +%Mend MakeGClusterConstData;
22269  +
22270  +
22271  +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
22272  +
22273  +    data _gscoretmpds;
22274  +          set &indata;
22275  +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
22276  +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22277  +          if _TYPE_ = 'STD' then _NAME_='STD';
22278  +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
22279  +          DROP _TYPE_ _NCL_;
22280  +     run;
22281  +
22282  +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
22283  +        GCluster Component &globalclusid ------ */
22284  +
22285  +    filename _file_  "&fileref";
22286  +
22287  +    data _null_;
22288  +        %if &globalclusid eq 1 %then %do;
22289  +          FILE _file_;
22290  +        %end;
22291  +        %else %do;
22292  +          FILE _file_ MOD;
22293  +        %end;
22294  +
22295  +        %let dsid = %sysfunc(open(work._gscoretmpds));
22296  +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22297  +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22298  +
22299  +        %let k = 1;
22300  +        %do %while(^%sysfunc(fetch(&dsid)));
22301  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22302  +                %if &k > 2 %then %do;
22303  +                put "&_name = 0 ; ";
22304  +                %end;
22305  +                %let k = %eval(&k+1);
22306  +        %end;
22307  +
22308  +        %let rc = %sysfunc(rewind(&dsid));
22309  +        %do i= 2 %to &nvar;
22310  +            %let _varname =  %sysfunc(varname(&dsid, &i));
22311  +            %do %while(^%sysfunc(fetch(&dsid)));
22312  +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22313  +                %if &_name = MEAN %then
22314  +                %let _mean = %sysfunc(getvarn(&dsid, &i));
22315  +                %else %if &_name = STD %then
22316  +                %let _std = %sysfunc(getvarn(&dsid, &i));
22317  +                %else %do;
22318  +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
22319  +                      %let abscoeff = %sysfunc(abs(&coeff));
22320  +                          %if &abscoeff >  0 %then %do;
22321  +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22322  +                           %end;
22323  +                 %end;
22324  +             %end;
22325  +             %let rc = %sysfunc(rewind(&dsid));
22326  +
22327  +         %end;
22328  +
22329  +        %let dsid= %sysfunc(close(&dsid));
22330  +       run;
22331  +
22332  +
22333  +       proc datasets lib=work nolist;
22334  +            delete _gscoretmpds;
22335  +       run;
22336  +      quit;
22337  +
22338  +%mend CreateGClusterScoreCode;
22339  +
22340  +
22341  +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
22342  +
22343  +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
22344  +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
22345  +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
22346  +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
22347  +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
22348  +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
22349  +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
22350  +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
22351  +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
22352  +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
22353  +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
22354  +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
22355  +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
22356  +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
22357  +
22358  +   filename gsfile "&gscorecode";
22359  +
22360  +   data &EM_USER_GSCORE;
22361  +             set &indata;
22362  +             %include  gsfile;
22363  +        keep
22364  +        %do i=1 %to &ngcluster;
22365  +         %let gcvarname = GC&i;
22366  +         &gcvarname
22367  +        %end;
22368  +     ;
22369  +   run;
22370  +
22371  +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
22372  +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
22373  +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
22374  +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
22375  +    noprint  ;
22376  +     var
22377  +       %do i=1 %to &ngcluster;
22378  +         %let gcvarname = GC&i;
22379  +         &gcvarname
22380  +        %end;
22381  +   ;
22382  +   run;
22383  +
22384  +
22385  +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
22386  +   data &EM_USER_GSCORECORRPLOT ;
22387  +        set &EM_USER_GSCORECORRPLOT;
22388  +        rename _X_ = X;
22389  +        rename _Y_ = Y;
22390  +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22391  +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22392  +   run;
22393  +
22394  +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
22395  +
22396  +   data &EM_USER_GSCORETREE;
22397  +        length _NAME_ $32;
22398  +        length _LABEL_ $100;
22399  +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
22400  +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22401  +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22402  +        end;else do;
22403  +         _LABEL_ = _NAME_;
22404  +        end;
22405  +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
22406  +
22407  +   run;
22408  +
22409  +   quit;
22410  +
22411  +%mend MakeGClusterCorrelation;
22412  +
22413  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
22414  +%macro report;
22415  +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
22416  +
22417  +    data _null_;
22418  +         set &EM_USER_VARCLUSMETA;
22419  +         if _N_=1 then
22420  +         call symput('_trainnum', TrainNum);
22421  +    run;
22422  +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
22423  +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
22424  +           %include temp;
22425  +           filename temp;
22426  +           %report1;
22427  +       %end;
22428  +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
22429  +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
22430  +           %include temp;
22431  +           filename temp;
22432  +           %report2;
22433  +    %end;
22434  +
22435  +   /* End of all runs, change the flag of newtrain to N */
22436  +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
22437  +    data &EM_USER_VARCLUSMETA;
22438  +         set &EM_USER_VARCLUSMETA;
22439  +         NewTrain = "N";
22440  +    run;
22441  +    quit;
22442  +%mend report;
22443  +
22444  +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      103910:166
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
22445  +%macro report1;
22447  +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
22448  +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
22449  +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
22451  +   data &EM_USER_OUTVARSEL;
22452  +        set &EM_USER_OUTRSQUARE;
22453  +        if upcase(strip(SELECTED)) = 'YES' then output;
22454  +   run;
22456  +   data _tmp_outrsquare;
22457  +        set &EM_USER_OUTRSQUARE;
22458  +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22459  +   run;
22461  +   proc freq data =_tmp_outrsquare noprint;
22462  +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
22463  +   run;
22465  +   proc datasets lib = work nolist;
22466  +     delete _tmp_outrsquare;
22467  +   run;
22469  +   data &EM_USER_CLUSFREQ;
22470  +       set &EM_USER_CLUSFREQ;
22471  +       label
22472  +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
22473  +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
22474  +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
22475  +       ;
22476  +   run;
22478  +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
22479  +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
22480  +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
22482  +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
22483  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
22484  +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
22485  +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
22486  +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
22487  +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
22488  +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
22489  +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
22491  +   /*
22492  +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
22493  +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
22494  +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
22497  +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_OUTVARSEL has 33 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 131 observations read from the data set EMWS4.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 98 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 98 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS4.VARCLUS_CLUSFREQ has 33 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS4.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS4.VARCLUS_CLUSFREQ has 33 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS4.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS4.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
22500   *------------------------------------------------------------*;
22501   * End REPORT: VarClus;
22502   *------------------------------------------------------------*;
22503
 
22504   /* Reset EM Options */
22505   options formchar="|----|+|---+=|-/\<>*";
22506   options nocenter ls=256 ps=10000;
22507   goptions reset=all device=GIF NODISPLAY;
 
22508   proc sort data=WORK.EM_USER_REPORT;
22509   by ID VIEW;
22510   run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
