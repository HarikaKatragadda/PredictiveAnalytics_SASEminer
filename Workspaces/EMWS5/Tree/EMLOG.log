*------------------------------------------------------------*
User:                hkatrag1
Date:                December 12, 2017
Time:                11:41:35
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 12, 2017
Time:                11:41:27
*------------------------------------------------------------*
14715  proc freq data=EMWS5.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14754  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS5.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14769  title9 ' ';
14770  proc print data=WORK.Tree_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14775  title10;
 
"No decisions defined for target "TargetBuy"."
14776  proc print data = EMWS5.Ids_TargetBuy_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;
 
NOTE: There were 7 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14783  title10;
 
14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15309  *------------------------------------------------------------*;
15310  * Tree: Generation of macros and macro variables;
15311  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15312  *------------------------------------------------------------*;
 
15313  %let EMEXCEPTIONSTRING=;
15314  *------------------------------------------------------------*;
15315  * TRAIN: Tree;
15316  *------------------------------------------------------------*;
15317  %let EM_ACTION = TRAIN;
15318  %let syscc = 0;
15319  %macro main;
15320
15321    %if %upcase(&EM_ACTION) = CREATE %then %do;
15322      filename temp catalog 'sashelp.emmodl.tree_create.source';
15323      %include temp;
15324      filename temp;
15325
15326      %em_tree_create;
15327    %end;
15328
15329     %else
15330     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15331
15332         filename temp catalog 'sashelp.emmodl.tree_train.source';
15333         %include temp;
15334         filename temp;
15335         %em_tree_train;
15336     %end;
15337
15338    %else
15339    %if %upcase(&EM_ACTION) = SCORE %then %do;
15340      filename temp catalog 'sashelp.emmodl.tree_score.source';
15341      %include temp;
15342      filename temp;
15343
15344      %em_tree_score;
15345
15346    %end;
15347
15348    %else
15349    %if %upcase(&EM_ACTION) = REPORT %then %do;
15350
15351         filename temp catalog 'sashelp.emmodl.tree_report.source';
15352         %include temp;
15353         filename temp;
15354
15355         %em_tree_report;
15356     %end;
15357
15358    %else
15359    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15360
15361         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15362         %include temp;
15363         filename temp;
15364         %EM_TREE_OPENTREEVIEWER;
15365
15366     %end;
15367
15368    %else
15369    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15370
15371         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15372         %include temp;
15373         filename temp;
15374         %EM_TREE_CLOSETREEVIEWER;
15375
15376     %end;
15377
15378
15379     %doendm:
15380  %mend main;
15381
15382  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15384 +%macro em_tree_train;
15386 +   %if &EM_IMPORT_DATA eq %then %do;
15387 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15388 +       %put &em_codebar;
15389 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15390 +       %put &errormsg;
15391 +       %put &em_codebar;
15392 +       %goto doendm;
15393 +   %end;
15394 +   %else
15395 +       %let EMEXCEPTIONSTRING =;
15397 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15398 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15399 +        %put &em_codebar;
15400 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15401 +        %put &errormsg;
15402 +        %put &em_codebar;
15403 +        %goto doendm;
15404 +   %end;
15406 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15407 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15408 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15409 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15410 +        %put &em_codebar;
15411 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15412 +        %put &errormsg;
15413 +        %put &em_codebar;
15414 +        %goto doendm;
15415 +   %end;
15417 +   /* Initialize property macro variables */
15418 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15419 +   %include temp;
15420 +   filename temp;
15422 +   %EM_SetProperties;
15424 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15425 +   %EM_GETNAME(key=EMTREE, type=DATA);
15426 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15427 +     /* if import eq Y and no importtable defined, throw an exception */
15428 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15429 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15430 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15431 +         %put &em_codebar;
15432 +         %put &errmsg;
15433 +         %put &em_codebar;
15434 +         %goto doendm;
15435 +      %end;
15436 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15437 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15438 +         %put &em_codebar;
15439 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15440 +         %put &errormsg;
15441 +         %put &em_codebar;
15442 +         %goto doendm;
15443 +      %end;
15444 +      %else %do;
15445 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15446 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15447 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15448 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15449 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15450 +         %let dsid = %sysfunc(close(&dsid));
15451 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15452 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15453 +            %put &em_codebar;
15454 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15455 +            %put &errormsg;
15456 +            %put &em_codebar;
15457 +            %goto doendm;
15458 +         %end;
15459 +      %end;
15460 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15461 +         proc delete data=&EM_USER_EMTREE;
15462 +         run;
15463 +      %end;
15464 +   %end;
15465 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15466 +      proc delete data=&EM_USER_EMTREE;
15467 +      run;
15468 +   %end;
15470 +   /* load tree macros */
15471 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15472 +   %include temp;
15473 +   filename temp;
15475 +   /* data sets */
15476 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15477 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15478 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15480 +   /* files */
15481 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15483 +   /* check actual num of target levels */
15484 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15485 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15486 +                              nLevel=_nTargetLevel );
15487 +      %if &_nTargetLevel  > 2 %then %do;
15488 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15489 +        %put &em_codebar;
15490 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15491 +        %put &errormsg;
15492 +        %put &em_codebar;
15493 +        %goto doendm;
15494 +      %end;
15495 +   %end;
15497 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15498 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15499 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15500 +        %let costflag=0;
15501 +        data _null_;
15502 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15503 +          if eof then call symput("costflag", _N_);
15504 +        run;
15505 +        %if &costflag gt 0 %then %do;
15506 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15507 +          %put &em_codebar;
15508 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15509 +          %put &errormsg;
15510 +          %put &em_codebar;
15511 +          %goto doendm;
15512 +       %end;
15513 +     %end;
15514 +   %end;
15516 +   /* determine if multiple targets will be processed */
15517 +   %let em_tree_multipleTargets=N;
15518 +   %let em_tree_numTarget = 1;
15519 +   %let em_tree_targetVars=;
15521 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15522 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15523 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15524 +         %let em_tree_multipleTargets=N;
15525 +      %end;
15526 +      %else %do;
15527 +         /* create macro array of targets  */
15528 +         data _null_;
15529 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15530 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15531 +           if eof then
15532 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15533 +        run;
15535 +        %if &em_tree_numTarget gt 1 %then %do;
15536 +           %let em_tree_multipleTargets=Y;
15537 +        %end;
15538 +      %end;
15539 +   %end;
15541 +   /* create view of only necessary variable for performance reasons */
15542 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15543 +   data &tempData / view=&tempData;
15544 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15545 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15546 +       %EM_TARGET
15547 +     %end;
15548 +     %else %do;
15549 +       %if &em_tree_numTarget ne 0 %then %do;
15550 +         %do i=1 %to &em_tree_numTarget;
15551 +            &&em_tree_targetVars&i
15552 +         %end;
15553 +       %end;
15554 +     %end;
15555 +     );
15556 +   run;
15558 +   /* run Tree procedure */
15559 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15561 +   /* Check return code and throw exception if error is detected */
15562 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15563 +   %if &syserr %then %do;
15564 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15565 +     %goto doendm;
15566 +   %end;
15568 +   /* add decision score code if multiple targets are processed */
15569 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15570 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15571 +   %end;
15573 +   /* create outfit dataset if multiple score statements have been executed */
15574 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15576 +   /* create English Rules */
15577 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15578 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15579 +       %em_tree_makeEnglishRules;
15581 +       /* English Rules */
15582 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15584 +     %end;
15585 +   filename x;
15587 +   %doendm:
15588 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15589 +%macro EM_SetProperties;
15591 +   /* train properties */
15592 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15634 +   /* properties for interactive sample */
15635 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15640 +   /* report properties */
15641 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15655 +   /* score properties */
15656 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15659 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS5.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15661 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15662 +  %global &nLevel;
15663 +  proc dmdb batch data=&indata
15664 +    classout=_tmp_dmdbout;
15665 +    class &target;
15666 +  run;
15667 +  data _tmp_dmdbout;
15668 +    set _tmp_dmdbout;
15669 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15670 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15671 +  run;
15672 +  data _null_;
15673 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15674 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15675 +    %let dsid = %sysfunc(close(&dsid));
15676 +     call symput("&nLevel", put(&_obs, Best12.));
15677 +  run;
15679 +  proc datasets lib=work nolist;
15680 +     delete _tmp_dmdbout;
15681 +  run;
15682 +  quit;
15683 +%Mend EM_CheckBinaryTargetLevel;
15686 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15688 +  /* determine the number of obs in training data */
15689 +  proc sql;
15690 +    reset noprint;
15691 +    select count(*) into :em_nobs from &indata;
15692 +  quit;
15694 +  /* determine the number of input variables */
15695 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15696 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15698 +  /* retrieve targetEvent from decmeta */
15699 +  %let targetEvent=;
15700 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15701 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15702 +      data _null_;
15703 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15704 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15705 +      run;
15706 +    %end;
15707 +  %end;
15709 +  /* create targetTable if multipleTar eq Y */
15710 +  data temptarget;
15711 +    set &EM_DATA_VARIABLESET;
15712 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15713 +  run;
15715 + /* data sets */
15716 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15717 + %EM_GETNAME(key=EMTREE,        type=DATA);
15718 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15719 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15720 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15721 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15722 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15723 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15724 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15725 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15727 + /* files */
15728 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15729 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15731 + /* turn on pmml if requested */
15732 + %let nnpmml=0;
15733 + %if %symexist(EM_PMML) %then %do;
15734 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15735 +       %let nnpmml=1;
15737 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15738 +%end;
15740 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15742 + %if &nnpmml or &numClassTarget %then %do;
15744 +       /* create dmdb needed for pmml generation */
15745 +       %let tree_maxlevel = 512;
15746 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15747 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15748 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15749 +         %end;
15750 +       %end;
15751 +       %if &tree_maxlevel gt 0 %then %do;
15752 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15753 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15754 +       %end;
15756 +       %let targetOrderString =;
15757 +       %let targetString = ;
15758 +       data _null_;
15759 +          length orderString nameString $10000;
15760 +          retain orderString nameString;
15761 +          set &em_data_variableset end=eof;
15762 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15763 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15764 +          %end;
15765 +          %else %do;
15766 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15767 +          %end;          select(order);
15768 +            when('')        order ='DESC';
15769 +            when('FMTASC')  order='ASCFMT';
15770 +            when('FMTDESC') order='DESFMT';
15771 +            otherwise;
15772 +          end;
15773 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15774 +          nameString = trim(nameString)!!' '!!trim(NAME);
15776 +          if eof then do;
15777 +             call symput('targetOrderString', trim(orderString));
15778 +             call symput('targetString', trim(nameString));
15779 +          end;
15780 +       run;
15782 +       %let arborkluge= "work._treeDMDB";
15784 +       proc dmdb batch data=&indata
15785 +       %if &nnpmml %then %do;
15786 +           PMML
15787 +       %end;
15788 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15791 +   %if &nnpmml %then %do;
15792 +        %if "%EM_ID" ne "" %then %do;
15793 +          id %EM_ID;
15794 +        %end;
15795 +        %if &EM_NUM_CLASS gt 0 %then %do;
15796 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15797 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15798 +               &targetOrderString;
15799 +        %end;
15800 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15801 +          var %EM_INTERVAL;
15802 +        %end;
15803 +        target &targetString %EM_INTERVAL_TARGET;
15804 +        %if "%EM_FREQ" ne "" %then %do;
15805 +          freq %EM_FREQ;
15806 +        %end;
15807 +  %end;
15808 +  %else %do;
15809 +      class  &targetOrderString;
15810 +      target &targetString %EM_INTERVAL_TARGET;
15811 +  %end;
15812 +       run;
15813 +       quit;
15815 +       proc datasets lib=work nolist;
15816 +          delete classout varout;
15817 +       run;
15818 +       quit;
15820 +    %end;
15821 + %end;
15823 + /* run Arbor procedure */
15824 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15825 +  proc arbor data=&INDATA
15827 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15828 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15829 +  %end;
15831 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15832 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15833 +  %end;
15835 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15836 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15837 +  %end;
15839 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15840 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15841 +  %end;
15843 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15844 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15845 +  %end;
15847 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15848 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15849 +  %end;
15850 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15851 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15852 +  %end;
15853 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15854 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15855 +  %end;
15857 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15858 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15859 +      alpha = &EM_PROPERTY_SIGLEVEL
15860 +    %end;
15861 +  %end;
15863 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15864 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15865 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15866 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15867 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15869 +        padjust =
15870 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15871 +          &chaid
15872 +        %end;
15873 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15874 +          DEPTH
15875 +        %end;
15876 +      %end;
15877 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15878 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15879 +         pvars = &num_inputs
15880 +      %end;
15881 +    %end;
15882 +  %end;
15883 +  %else %do;
15884 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15885 +         padjust = NONE
15886 +      %end;
15887 +  %end;
15889 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15890 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15891 +    Maxrules = &num_nrules
15892 +  %end;
15894 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15895 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15896 +    Maxsurrs = &num_nsurrs
15897 +  %end;
15899 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15900 +     Missing=&EM_PROPERTY_MISSINGVALUE
15901 +  %end;
15903 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15904 +     USEVARONCE
15905 +  %end;
15907 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15908 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15909 +  %end;
15912 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15913 +    event = "&targetEvent"
15914 +  %end;
15916 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15917 +     DECSEARCH
15918 +  %end;
15920 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15921 +     PRIORSSEARCH
15922 +  %end;
15924 +  %if &arbor_1 ne %then %do;
15925 +    &arbor_1
15926 +  %end;
15928 +  %if &em_arbor ne %then %do;
15929 +     &em_arbor
15930 +  %end;
15931 +  ;
15932 + %end;
15933 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15934 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15935 +       interact;
15936 + %end;
15937 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15938 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15939 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15940 +    %put &em_codebar;
15941 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15942 +    %put &errormsg;
15943 +    %put &em_codebar;
15944 +    %goto doendm;
15945 +   %end;
15946 +   %else %do;
15947 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15948 +       interact;
15949 +   %end;
15950 + %end;
15952 + %else %do;
15953 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15954 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15955 +    %put &em_codebar;
15956 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15957 +    %put &errormsg;
15958 +    %put &em_codebar;
15959 +    %goto doendm;
15960 +   %end;
15961 +   %else %do;
15962 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15963 +        interact;
15964 +   %end;
15965 + %end;
15967 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15968 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15969 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15970 +    %end;
15972 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15973 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15974 +    %end;
15976 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15977 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15978 +    %end;
15980 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15981 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15982 +    %end;
15984 +    %if "%EM_FREQ" ne "" %then %do;
15985 +       freq %EM_FREQ;
15986 +    %end;
15988 +    %if "&multipleTar" eq "Y" %then %do;
15989 +       /* cycle through all target vars in variableset */
15990 +       %let tdsid = %sysfunc(open(temptarget));
15991 +       %if &tdsid %then %do;
15992 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15993 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15994 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15995 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15996 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15997 +             target &var / level = &lvl
15998 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15999 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16000 +             %end;
16001 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16002 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16003 +             %end;
16004 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16005 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16006 +             %end;
16007 +          %end;
16008 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16009 +       %end;
16010 +       useTarget variable = %EM_TARGET;
16011 +    %end;
16012 +    %else %do;
16013 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16014 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16015 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16016 +      %end;
16017 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16018 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16019 +      %end;
16020 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16021 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16022 +      %end;
16023 +    %end;
16025 +    %if "&multipleTar" eq "N" %then %do;
16026 +      &EM_DEC_STATEMENT;
16027 +    %end;
16029 +    Performance &EM_PROPERTY_PERFORMANCE
16030 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16031 +      nodesize=&EM_PROPERTY_NODESAMPLE
16032 +    %end;
16033 +    ;
16035 +    %if "&intFlag" eq "Y" %then %do;
16036 +       INTERACT Largest;
16037 +       Train maxnewdepth=0;
16038 +    %end;
16040 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16041 +         Assess
16042 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16043 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16044 +              %put &em_codebar;
16045 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16046 +              %put &errormsg;
16047 +              %put &em_codebar;
16048 +            %end;
16049 +            %else %do;
16050 +               Validata=&EM_IMPORT_VALIDATE
16051 +            %end;
16052 +         %end;
16053 +         %else %do;
16054 +           NoValidata
16055 +         %end;
16056 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16057 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16058 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16059 +               %if &dsid %then %do;
16060 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16061 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16062 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16063 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16064 +                   %else %do;
16065 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16066 +                      %else %let measure= MISC;
16067 +                   %end;
16068 +                 %end;
16069 +               %end;
16070 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16071 +            %end;
16072 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16073 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16074 +                 %let measure=ASE;
16075 +              %end;
16076 +              %else %do;
16077 +                 %let measure=MISC;
16078 +              %end;
16079 +            %end;
16080 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16081 +              %let measure=ASE;
16082 +            %end;
16083 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16084 +               %let measure = LIFT;
16085 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16086 +               %if &dsid %then %do;
16087 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16088 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16089 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16090 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16091 +                 %end;
16092 +               %end;
16093 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16094 +            %end;
16095 +            measure=&measure
16096 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16097 +               event = "&targetEvent"
16098 +            %end;
16099 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16100 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16101 +            %end;
16102 +         %end;
16103 +         %if "&multipleTar" eq "N" %then %do;
16104 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16105 +               CV
16106 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16107 +                 CVNITer = &EM_PROPERTY_CVNITER
16108 +               %end;
16109 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16110 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16111 +               %end;
16112 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16113 +                 CVSeed = &EM_PROPERTY_CVSEED
16114 +               %end;
16115 +            %end;
16116 +         %end;
16117 +       %end;
16118 +      ;
16120 +      %if "&intFlag" ne "Y" %then %do;
16121 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16122 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16123 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16124 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16126 +          SUBTREE &subtree
16127 +          %if "&subtree" eq "NLEAVES" %then %do;
16128 +            =&EM_PROPERTY_NSUBTREE
16129 +          %end;
16130 +          ;
16131 +        %end;
16133 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16134 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16135 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16136 +          %end;
16137 +       %end;
16138 +      %end;
16139 + %end;
16142 + MakeMacro nleaves = nleaves;
16143 + save
16144 + %if "&EM_USER_EMTREE" ne "" %then %do;
16145 +   MODEL=&EM_USER_EMTREE
16146 + %end;
16147 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16148 +   SEQUENCE=&EM_USER_OUTSEQ
16149 + %end;
16150 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16151 +   IMPORTANCE=&EM_USER_OUTIMPORT
16152 + %end;
16153 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16154 +   NODESTAT=&EM_USER_OUTNODES
16155 + %end;
16156 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16157 +   SUMMARY=&EM_USER_OUTSUMMARY
16158 + %end;
16159 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16160 +   STATSBYNODE=&EM_USER_OUTSTATS
16161 + %end;
16162 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16163 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16164 + %end;
16165 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16166 +   Pathlistnonmissing=&EM_USER_OUTPATH
16167 + %end;
16168 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16169 +   RULES = &EM_USER_OUTRULES
16170 + %end;
16171 + ;
16173 + %if "&intFlag" ne "Y" %then %do;
16175 +   %let lookupString = ;
16176 +   %if ^%symexist(EM_OPTION) %then
16177 +      %let EM_OPTION=;
16179 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16180 +      %let lookupString = LOOKUP=SELECT;
16181 +   %end;
16183 +   %let codetext=;
16184 +   %let norescodetxt=;
16186 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16187 +     %let codetext=&codetext DUMMY;
16188 +     %let norescodetxt=&norescodetxt DUMMY;
16189 +   %end;
16190 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16191 +     %let codetext=&codetext NOLEAFID;
16192 +     %let norescodetxt=&norescodetxt NOLEAFID;
16193 +   %end;
16194 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16195 +     %let norescodetxt=&norescodetxt NOPRED;
16196 +   %end;
16198 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16199 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16201 +   %if &nnpmml %then %do;
16202 +     code pmml;
16203 +   %end;
16205 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16206 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16207 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16208 +   %end;
16209 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16210 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16211 +   %end;
16212 + %end;
16214 + run;
16215 + quit;
16217 + /*%em_checkerror(); */
16218 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16219 +   /* Delete DMDB catalog */
16220 +   proc datasets lib=work nolist;
16221 +       delete _treeDMDB / mt=cat;
16222 +  run;
16223 +  %end;
16225 + %if &nnpmml %then %do;
16226 +    ods pmml close;
16227 + %end;
16229 +  %doendm:
16231 +%mend em_tree_runTreeProcedure;
16233 +%macro em_tree_createFitStats( multipleTar= );
16236 +  /* create targetTable is multipleTar eq Y */
16237 +  data temptarget;
16238 +    set &EM_DATA_VARIABLESET;
16239 +    where ROLE="TARGET";
16240 +  run;
16242 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16243 +   data &EM_USER_EMOUTFIT;
16244 +     length target $32;
16245 +     merge work.fit_train
16246 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16247 +       work.fit_valid
16248 +     %end;
16249 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16250 +       work.fit_test
16251 +     %end;
16252 +     ;
16253 +     %if "&multipleTar" eq "N" %then %do;
16254 +       target="%EM_TARGET";
16255 +     %end;
16256 +     %else %do;
16257 +       target = _TARGET_;
16258 +     %end;
16259 +     drop _NW_ _SUMW_
16260 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16261 +        _VSUMW_
16262 +     %end;
16263 +     ;
16264 +   run;
16266 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16267 +     proc datasets library=work nolist;
16268 +       delete fit_valid;
16269 +     run;
16270 +   %end;
16271 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16272 +     proc datasets library=work nolist;
16273 +       delete fit_test;
16274 +     run;
16275 +   %end;
16277 +%mend em_tree_createFitStats;
16280 +%macro em_tree_makeEnglishRules;
16282 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16283 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16285 +  /* verify that necessary tables exist and if not, skip processing */
16286 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16287 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16288 +    %goto doendm;
16289 +  %end;
16290 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16291 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16292 +    %goto doendm;
16293 +  %end;
16295 +  /* determine length of variable in outpath dataset */
16296 +  %let vlength= ;
16297 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16298 +  %if &dsid ne %then %do;
16299 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16300 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16301 +  %end;
16302 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16304 +  data tempoutpath;
16305 +    length varname $&vlength;
16306 +    retain varname;
16307 +    set &EM_USER_OUTPATH;
16309 +    if ^missing(variable) then varname=variable;
16310 +    else if ^missing(var_name) then varname=var_name;
16311 +    output;
16312 +  run;
16314 +  /* create an array of generated predicted variable names */
16315 +  %let tree_pred_vars = ;
16316 +  %let tree_pred_label = ;
16317 +  %let numpred= 0;
16318 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16320 +    data _null_;
16321 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16322 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16323 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16324 +     if eof then
16325 +       call symput('numpred', strip(put(_N_, BEST.)));
16326 +    run;
16327 +  %end;
16329 +  /* determine if NPRIORS exists in outnodes  */
16330 +  %local nprior_flag;
16331 +  data _null_;
16332 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16333 +    if eof then do;
16334 +      call symput('nprior_flag', strip(put(npriors, best.)));
16335 +    end;
16336 +  run;
16338 +  proc sort data=tempoutpath; by node; run;
16339 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16341 +  data tempoutpath;
16342 +    merge tempoutpath(in=_a) outnodes(keep= node
16343 +    %if "&nprior_flag" ne "." %then %do;
16344 +      NPRIORS
16345 +    %end;
16346 +    %else %do;
16347 +      N
16348 +    %end;
16349 +    %if &numpred gt 0 %then %do;
16350 +      %do i=1 %to &numpred;
16351 +        &&tree_pred_vars&i
16352 +      %end;
16353 +    %end;
16354 +    );
16355 +    by node;
16356 +    if _a;
16357 +  run;
16359 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16361 +  data _null_;
16362 +    file x;
16363 +    set tempoutpath;
16364 +    by node descending varname;
16365 +    retain origvar oldnode string;
16366 +    length origvar $32 oldnode 8 string $200;
16368 +    if _N_ = 1 then do;
16369 +      origvar = varname;
16370 +      oldnode = node;
16371 +    end;
16373 +    if first.node then do;
16374 +       put "&EM_CODEBAR";
16375 +       put " Node = " node;
16376 +       put "&EM_CODEBAR";
16377 +    end;
16379 +      if first.varname then do;
16380 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16381 +            if MISSING(CHARACTER_VALUE) then do;
16382 +             if NUMERIC_VALUE ne .  then do;
16383 +              if ^first.node then do;
16384 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16385 +              end;
16386 +              else do;
16387 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16388 +              end;
16389 +             end;
16390 +            end;
16391 +            else do;
16392 +              if ^first.node then do;
16393 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16394 +              end;
16395 +              else do;
16396 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16397 +              end;
16398 +             end;
16399 +         end;
16400 +         else if RELATION in ("=") then do;
16401 +            if ^first.node then do;
16402 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16403 +            end;
16404 +            else do;
16405 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16406 +            end;
16407 +         end;
16408 +         else if RELATION in ("ISMISSING") then do;
16409 +            if ^first.node then do;
16410 +              string = " AND "|| strip(varname) || " equals Missing";
16411 +            end;
16412 +            else do;
16413 +              string = "if "|| strip(varname) ||" equals Missing";
16414 +            end;
16415 +         end;
16416 +         else if RELATION in ("ISNOTMISSING") then do;
16417 +            if ^first.node then do;
16418 +              string = " AND "|| strip(varname) || " equals All Values";
16419 +            end;
16420 +            else do;
16421 +              string = "if "|| strip(varname) ||" equals All Values";
16422 +            end;
16423 +         end;
16424 +         if ^missing(varname) then origvar = varname;
16425 +         oldnode=node;
16427 +      end;
16428 +      else do;
16429 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16430 +          if MISSING(CHARACTER_VALUE) then do;
16431 +           if  NUMERIC_VALUE ne .  then do;
16432 +            if ^MISSING(string) then
16433 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16434 +            else
16435 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16436 +           end;
16437 +          end;
16438 +          else do;
16439 +            if ^MISSING(string) then
16440 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16441 +            else
16442 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16443 +          end;
16445 +         end;
16446 +         else if RELATION in ("=") then do;
16447 +           string = strip(string)||", "||strip(character_value);
16448 +         end;
16449 +         else if RELATION in ("ISMISSING") then do;
16451 +         end;
16452 +         if ^missing(varname) then origvar = varname;
16453 +         oldnode=node;
16454 +      end;
16455 +      if last.varname then do;
16456 +         if RELATION in ("ISMISSING") then do;
16457 +           if ^first.varname then do;
16458 +             string = strip(string) || " or MISSING";
16459 +           end;
16460 +         end;
16461 +         put string;
16462 +         if ^missing(varname) then origvar = varname;
16463 +         oldnode=node;
16464 +      end;
16466 +      if last.node then do;
16467 +         put "then ";
16468 +         put " Tree Node Identifier   = " node;
16470 +         %if "&nprior_flag" ne "." %then %do;
16471 +           put " Number of Observations = " NPRIORS;
16472 +         %end;
16473 +         %else %do;
16474 +           put " Number of Observations = " N;
16475 +         %end;
16477 +         %if &numpred gt 0 %then %do;
16478 +           %do i=1 %to &numpred;
16479 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16480 +           %end;
16481 +         %end;
16483 +         put " ";
16484 +         if ^missing(varname) then origvar = varname;
16485 +         oldnode=node;
16486 +      end;
16488 +  run;
16490 +  proc datasets lib=work nolist;
16491 +    delete tempoutpath outnodes;
16492 +  run;
16494 +  %doendm:
16495 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 14445 out of 14445 training cases.
NOTE: Using memory pool with 188175360 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 3707216 bytes of work memory.
NOTE: The subtree sequence contains 32 subtrees. The largest has 63 nodes and 32 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Created macro variable NLEAVES equal to 14.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS5.TREE_EMTREE has 1654 observations and 4 variables.
NOTE: The data set EMWS5.TREE_OUTNODES has 27 observations and 24 variables.
NOTE: The data set EMWS5.TREE_OUTPATH has 90 observations and 7 variables.
NOTE: The data set EMWS5.TREE_OUTRULES has 370 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: The data set EMWS5.TREE_OUTSTATS has 189 observations and 5 variables.
NOTE: The data set EMWS5.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTTOPOLOGY has 27 observations and 5 variables.
NOTE: External file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\TREEFLOW.sas opened.
NOTE: External file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           1.26 seconds
      cpu time            0.67 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.27 seconds
      cpu time            0.68 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set EMWS5.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 27 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 90 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=12Dec2017:11:41:34,
      Create Time=12Dec2017:11:41:34
 
NOTE: 165 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 90 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16497
16498  *------------------------------------------------------------*;
16499  * End TRAIN: Tree;
16500  *------------------------------------------------------------*;
 
16501  *------------------------------------------------------------*;
16502  * Close any missing semi colons;
16503  *------------------------------------------------------------*;
16504  ;
16505  ;
16506  ;
16507  ;
16508  quit;
16509  *------------------------------------------------------------*;
16510  * Close any unbalanced quotes;
16511  *------------------------------------------------------------*;
16512  /*; *"; *'; */
16513  ;
16514  run;
16515  quit;
16516  /* Reset EM Options */
16517  options formchar="|----|+|---+=|-/\<>*";
16518  options nocenter ls=256 ps=10000;
16519  goptions reset=all device=GIF NODISPLAY;
 
16520  proc sort data=WORK.EM_USER_REPORT;
16521  by ID VIEW;
16522  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 12, 2017
Time:                11:41:31
*------------------------------------------------------------*
16624  %let EMEXCEPTIONSTRING=;
16625  *------------------------------------------------------------*;
16626  * SCORE: Tree;
16627  *------------------------------------------------------------*;
16628  %let EM_ACTION = SCORE;
16629  %let syscc = 0;
16630  %macro main;
16631
16632    %if %upcase(&EM_ACTION) = CREATE %then %do;
16633      filename temp catalog 'sashelp.emmodl.tree_create.source';
16634      %include temp;
16635      filename temp;
16636
16637      %em_tree_create;
16638    %end;
16639
16640     %else
16641     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16642
16643         filename temp catalog 'sashelp.emmodl.tree_train.source';
16644         %include temp;
16645         filename temp;
16646         %em_tree_train;
16647     %end;
16648
16649    %else
16650    %if %upcase(&EM_ACTION) = SCORE %then %do;
16651      filename temp catalog 'sashelp.emmodl.tree_score.source';
16652      %include temp;
16653      filename temp;
16654
16655      %em_tree_score;
16656
16657    %end;
16658
16659    %else
16660    %if %upcase(&EM_ACTION) = REPORT %then %do;
16661
16662         filename temp catalog 'sashelp.emmodl.tree_report.source';
16663         %include temp;
16664         filename temp;
16665
16666         %em_tree_report;
16667     %end;
16668
16669    %else
16670    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16671
16672         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16673         %include temp;
16674         filename temp;
16675         %EM_TREE_OPENTREEVIEWER;
16676
16677     %end;
16678
16679    %else
16680    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16681
16682         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16683         %include temp;
16684         filename temp;
16685         %EM_TREE_CLOSETREEVIEWER;
16686
16687     %end;
16688
16689
16690     %doendm:
16691  %mend main;
16692
16693  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16695 +%macro em_tree_score;
16697 +   /* determine if multiple targets will be processed */
16698 +   %let em_tree_multipleTargets=N;
16699 +   %let em_tree_numTarget=1;
16700 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16701 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16702 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16703 +         %let em_tree_multipleTargets=N;
16704 +      %end;
16705 +      %else %do;
16706 +         /* create macro array of targets  */
16707 +         data _null_;
16708 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16709 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16710 +           if eof then
16711 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16712 +        run;
16714 +        %if &em_tree_numTarget gt 1 %then %do;
16715 +           %let em_tree_multipleTargets=Y;
16716 +        %end;
16717 +      %end;
16718 +   %end;
16720 +   /* build flow and publish scoring code */
16721 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16722 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16724 +   filename treeflow "&EM_USER_TREEFLOW";
16725 +   filename treepub "&EM_USER_TREEPUBLISH";
16727 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16728 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16730 +   %em_copyfile(infref=treeflow, outfref=flowref);
16731 +   %em_copyfile(infref=treepub, outfref=pubref);
16733 +   filename treeflow;
16734 +   filename treepub;
16736 +   /* if priors are used, add code to generate unadjusted residuals in export */
16737 +   %let useAdjPriors = N;
16738 +   data _null_;
16739 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16740 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16741 +   run;
16742 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16743 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16744 +      %include temp;
16745 +      filename temp;
16747 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16748 +      filename adjref "&EM_USER_adjResidualCode";
16749 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16751 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16753 +      filename adjref;
16754 +   %end;
16756 +   /* LEAF */
16757 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16758 +      data _null_;
16759 +        file flowref mod;
16760 +        put 'drop _LEAF_;';
16761 +      run;
16763 +      data _null_;
16764 +        file pubref mod;
16765 +        put 'drop _LEAF_;';
16766 +      run;
16768 +   %end;
16770 +   filename flowref;
16771 +   filename pubref;
16773 +   /* em_metachange code */
16774 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16775 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16776 +   %end;
16778 +   /* variable selection based on importance stat    */
16779 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16780 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16781 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16782 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16783 +     %let obs = %sysfunc(fetch(&dsid));
16784 +     %do %while(&obs=0);
16785 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16786 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16787 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16788 +       %let obs = %sysfunc(fetch(&dsid));
16789 +     %end;
16790 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16791 +   %end;
16793 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16794 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16795 +    %let tree_pred_vars = ;
16796 +    %let tree_pred_lvl =;
16797 +    %let numpred= 0;
16799 +    data _null_;
16800 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16801 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16802 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16803 +     if eof then
16804 +       call symput('numpred', strip(put(_N_, BEST.)));
16805 +    run;
16806 +   %end;
16808 +   %if &numpred ne 0 %then %do;
16809 +    %do i=1 %to &numpred;
16810 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16811 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16812 +    %end;
16813 +   %end;
16815 +   /* determine if multiple targets will be processed */
16816 +   %let em_tree_multipleTargets=N;
16817 +   %let em_tree_numTarget=1;
16818 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16819 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16820 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16821 +         %let em_tree_multipleTargets=N;
16822 +      %end;
16823 +      %else %do;
16824 +        data _null_;
16825 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16826 +          if eof then
16827 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16828 +        run;
16830 +        %if &em_tree_numTarget gt 1 %then %do;
16831 +           %let em_tree_multipleTargets=Y;
16832 +        %end;
16833 +     %end;
16834 +   %end;
16836 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16837 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16839 +      /* variable importance */
16840 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16841 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16843 +         %let validexist=0;
16844 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16845 +           %let validexist=1;
16846 +         %end;
16848 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16849 +         /* and the columns may not be generated                                                                                 */
16850 +         %let em_tree_cvexists=;
16851 +         %let em_tree_surrexists=.;
16852 +         data _null_;
16853 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16854 +            if eof then do ;
16855 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16856 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16857 +            end;
16858 +         run;
16860 +         data &EM_USER_OUTIMPORT;
16861 +            set &EM_USER_OUTIMPORT;
16863 +            /* format columns based on Precison value specified */
16864 +            format importance 15.&EM_PROPERTY_PRECISION
16865 +                 %if &validexist %then %do;
16866 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16867 +                 %end;
16868 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16869 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16870 +                 %end;
16871 +            ;
16872 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16873 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16874 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16875 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16876 +                 %if "&em_tree_surrexists" ne "" %then %do;
16877 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16878 +                 %end;
16879 +                 %if &validexist %then %do;
16880 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16881 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16882 +                 %end;
16883 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16884 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16885 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16886 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16887 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16888 +                 %end;
16889 +            ;
16890 +         run;
16892 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16893 +      %end;
16894 +   %end;
16896 +   %doendm:
16897 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2017:11:41:34,
      Create Time=12Dec2017:11:41:34
 
NOTE: 266 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2017:11:41:34,
      Create Time=12Dec2017:11:41:34
 
NOTE: 244 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10088,
      Last Modified=12Dec2017:11:41:34,
      Create Time=12Dec2017:11:41:34
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9415,
      Last Modified=12Dec2017:11:41:34,
      Create Time=12Dec2017:11:41:34
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
16898
16899  *------------------------------------------------------------*;
16900  * End SCORE: Tree;
16901  *------------------------------------------------------------*;
 
16902  proc sort data=WORK.EM_METACHANGE;
16903  by key uname;
16904  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16905  filename x "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
16906  data _null_;
16907  file x;
16908  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
16909  put 'ROLE = "REJECTED";';
16910  put 'end;';
16911  put 'else ';
16912  put 'if upcase(NAME) = "DEMREG" then do;';
16913  put 'ROLE = "REJECTED";';
16914  put 'end;';
16915  put 'else ';
16916  put 'if upcase(NAME) = "DEMTVREG" then do;';
16917  put 'ROLE = "REJECTED";';
16918  put 'end;';
16919  put 'else ';
16920  put 'if upcase(NAME) = "PROMCLASS" then do;';
16921  put 'ROLE = "REJECTED";';
16922  put 'end;';
16923  put 'else ';
16924  put 'if upcase(NAME) = "PROMSPEND" then do;';
16925  put 'ROLE = "REJECTED";';
16926  put 'end;';
16927  put 'else ';
16928  put 'if upcase(NAME) = "PROMTIME" then do;';
16929  put 'ROLE = "REJECTED";';
16930  put 'end;';
16931  put 'else ';
16932  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
16933  put 'ROLE = "ASSESS";';
16934  put 'end;';
16935  put 'else ';
16936  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
16937  put 'ROLE = "ASSESS";';
16938  put 'end;';
16939  put 'else ';
16940  put 'if upcase(NAME) = "_NODE_" then do;';
16941  put 'ROLE = "SEGMENT";';
16942  put 'LEVEL = "NOMINAL";';
16943  put 'end;';
16944  run;
 
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12Dec2017:11:41:35,
      Create Time=12Dec2017:11:36:22
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16945  filename x;
NOTE: Fileref X has been deassigned.
 
16946  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
16947  *------------------------------------------------------------*;
16948  * Tree: Scoring DATA data;
16949  *------------------------------------------------------------*;
16950  data EMWS5.Tree_TRAIN
16951  / view=EMWS5.Tree_TRAIN
16952  ;
16953  set EMWS5.Part_TRAIN
16954  ;
16955  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
16956 +****************************************************************;
16957 +******             DECISION TREE SCORING CODE             ******;
16958 +****************************************************************;
16959 +
16960 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16961 +LENGTH F_TargetBuy  $   12;
16962 +LENGTH I_TargetBuy  $   12;
16963 +LENGTH _WARN_  $    4;
16964 +
16965 +******              LABELS FOR NEW VARIABLES              ******;
16966 +label _NODE_ = 'Node' ;
16967 +label _LEAF_ = 'Leaf' ;
16968 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
16969 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
16970 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
16971 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
16972 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
16973 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
16974 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
16975 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
16976 +label F_TargetBuy = 'From: TargetBuy' ;
16977 +label I_TargetBuy = 'Into: TargetBuy' ;
16978 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
16979 +label _WARN_ = 'Warnings' ;
16980 +
16981 +
16982 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16983 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
16984 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
16985 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
16986 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
16987 +
16988 +
16989 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
16990 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
16991 +
16992 +******             ASSIGN OBSERVATION TO NODE             ******;
16993 +IF  NOT MISSING(DemAge ) AND
16994 +  DemAge  <                 44.5 THEN DO;
16995 +  IF  NOT MISSING(DemAffl ) AND
16996 +    DemAffl  <                  9.5 THEN DO;
16997 +    _ARBFMT_1 = PUT( DemGender , $1.);
16998 +     %DMNORMIP( _ARBFMT_1);
16999 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17000 +      IF  NOT MISSING(DemAffl ) AND
17001 +        DemAffl  <                  6.5 THEN DO;
17002 +        _NODE_  =                   18;
17003 +        _LEAF_  =                    2;
17004 +        P_TargetBuy0  =      0.6383495145631;
17005 +        P_TargetBuy1  =     0.36165048543689;
17006 +        Q_TargetBuy0  =      0.6383495145631;
17007 +        Q_TargetBuy1  =     0.36165048543689;
17008 +        V_TargetBuy0  =     0.60089686098654;
17009 +        V_TargetBuy1  =     0.39910313901345;
17010 +        I_TargetBuy  = '0' ;
17011 +        U_TargetBuy  =                    0;
17012 +        END;
17013 +      ELSE DO;
17014 +        IF  NOT MISSING(DemAge ) AND
17015 +                          39.5 <= DemAge  THEN DO;
17016 +          _NODE_  =                   35;
17017 +          _LEAF_  =                    4;
17018 +          P_TargetBuy0  =     0.56326530612244;
17019 +          P_TargetBuy1  =     0.43673469387755;
17020 +          Q_TargetBuy0  =     0.56326530612244;
17021 +          Q_TargetBuy1  =     0.43673469387755;
17022 +          V_TargetBuy0  =     0.58273381294964;
17023 +          V_TargetBuy1  =     0.41726618705035;
17024 +          I_TargetBuy  = '0' ;
17025 +          U_TargetBuy  =                    0;
17026 +          END;
17027 +        ELSE DO;
17028 +          _NODE_  =                   34;
17029 +          _LEAF_  =                    3;
17030 +          P_TargetBuy0  =     0.39285714285714;
17031 +          P_TargetBuy1  =     0.60714285714285;
17032 +          Q_TargetBuy0  =     0.39285714285714;
17033 +          Q_TargetBuy1  =     0.60714285714285;
17034 +          V_TargetBuy0  =     0.36507936507936;
17035 +          V_TargetBuy1  =     0.63492063492063;
17036 +          I_TargetBuy  = '1' ;
17037 +          U_TargetBuy  =                    1;
17038 +          END;
17039 +        END;
17040 +      END;
17041 +    ELSE DO;
17042 +      _NODE_  =                    8;
17043 +      _LEAF_  =                    1;
17044 +      P_TargetBuy0  =     0.77363515312916;
17045 +      P_TargetBuy1  =     0.22636484687083;
17046 +      Q_TargetBuy0  =     0.77363515312916;
17047 +      Q_TargetBuy1  =     0.22636484687083;
17048 +      V_TargetBuy0  =     0.79864253393665;
17049 +      V_TargetBuy1  =     0.20135746606334;
17050 +      I_TargetBuy  = '0' ;
17051 +      U_TargetBuy  =                    0;
17052 +      END;
17053 +    END;
17054 +  ELSE DO;
17055 +    _ARBFMT_1 = PUT( DemGender , $1.);
17056 +     %DMNORMIP( _ARBFMT_1);
17057 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17058 +      _NODE_  =                   11;
17059 +      _LEAF_  =                    9;
17060 +      P_TargetBuy0  =     0.21991341991341;
17061 +      P_TargetBuy1  =     0.78008658008658;
17062 +      Q_TargetBuy0  =     0.21991341991341;
17063 +      Q_TargetBuy1  =     0.78008658008658;
17064 +      V_TargetBuy0  =     0.20677966101694;
17065 +      V_TargetBuy1  =     0.79322033898305;
17066 +      I_TargetBuy  = '1' ;
17067 +      U_TargetBuy  =                    1;
17068 +      END;
17069 +    ELSE DO;
17070 +      IF  NOT MISSING(DemAffl ) AND
17071 +                        14.5 <= DemAffl  THEN DO;
17072 +        _NODE_  =                   21;
17073 +        _LEAF_  =                    8;
17074 +        P_TargetBuy0  =     0.14666666666666;
17075 +        P_TargetBuy1  =     0.85333333333333;
17076 +        Q_TargetBuy0  =     0.14666666666666;
17077 +        Q_TargetBuy1  =     0.85333333333333;
17078 +        V_TargetBuy0  =     0.15094339622641;
17079 +        V_TargetBuy1  =     0.84905660377358;
17080 +        I_TargetBuy  = '1' ;
17081 +        U_TargetBuy  =                    1;
17082 +        END;
17083 +      ELSE DO;
17084 +        IF  NOT MISSING(DemAffl ) AND
17085 +                          11.5 <= DemAffl  THEN DO;
17086 +          _ARBFMT_1 = PUT( DemGender , $1.);
17087 +           %DMNORMIP( _ARBFMT_1);
17088 +          IF _ARBFMT_1 IN ('M' ) THEN DO;
17089 +            _NODE_  =                   51;
17090 +            _LEAF_  =                    7;
17091 +            P_TargetBuy0  =     0.36521739130434;
17092 +            P_TargetBuy1  =     0.63478260869565;
17093 +            Q_TargetBuy0  =     0.36521739130434;
17094 +            Q_TargetBuy1  =     0.63478260869565;
17095 +            V_TargetBuy0  =                 0.45;
17096 +            V_TargetBuy1  =                 0.55;
17097 +            I_TargetBuy  = '1' ;
17098 +            U_TargetBuy  =                    1;
17099 +            END;
17100 +          ELSE DO;
17101 +            _NODE_  =                   50;
17102 +            _LEAF_  =                    6;
17103 +            P_TargetBuy0  =      0.6590909090909;
17104 +            P_TargetBuy1  =     0.34090909090909;
17105 +            Q_TargetBuy0  =      0.6590909090909;
17106 +            Q_TargetBuy1  =     0.34090909090909;
17107 +            V_TargetBuy0  =     0.72222222222222;
17108 +            V_TargetBuy1  =     0.27777777777777;
17109 +            I_TargetBuy  = '0' ;
17110 +            U_TargetBuy  =                    0;
17111 +            END;
17112 +          END;
17113 +        ELSE DO;
17114 +          _NODE_  =                   36;
17115 +          _LEAF_  =                    5;
17116 +          P_TargetBuy0  =      0.6156462585034;
17117 +          P_TargetBuy1  =     0.38435374149659;
17118 +          Q_TargetBuy0  =      0.6156462585034;
17119 +          Q_TargetBuy1  =     0.38435374149659;
17120 +          V_TargetBuy0  =      0.6936416184971;
17121 +          V_TargetBuy1  =     0.30635838150289;
17122 +          I_TargetBuy  = '0' ;
17123 +          U_TargetBuy  =                    0;
17124 +          END;
17125 +        END;
17126 +      END;
17127 +    END;
17128 +  END;
17129 +ELSE DO;
17130 +  IF  NOT MISSING(DemAffl ) AND
17131 +                    12.5 <= DemAffl  THEN DO;
17132 +    IF  NOT MISSING(DemAffl ) AND
17133 +                      15.5 <= DemAffl  THEN DO;
17134 +      IF  NOT MISSING(DemAffl ) AND
17135 +                        18.5 <= DemAffl  THEN DO;
17136 +        _NODE_  =                   31;
17137 +        _LEAF_  =                   14;
17138 +        P_TargetBuy0  =     0.06779661016949;
17139 +        P_TargetBuy1  =      0.9322033898305;
17140 +        Q_TargetBuy0  =     0.06779661016949;
17141 +        Q_TargetBuy1  =      0.9322033898305;
17142 +        V_TargetBuy0  =     0.15151515151515;
17143 +        V_TargetBuy1  =     0.84848484848484;
17144 +        I_TargetBuy  = '1' ;
17145 +        U_TargetBuy  =                    1;
17146 +        END;
17147 +      ELSE DO;
17148 +        _ARBFMT_1 = PUT( DemGender , $1.);
17149 +         %DMNORMIP( _ARBFMT_1);
17150 +        IF _ARBFMT_1 IN ('F' ) THEN DO;
17151 +          _NODE_  =                   48;
17152 +          _LEAF_  =                   12;
17153 +          P_TargetBuy0  =     0.28971962616822;
17154 +          P_TargetBuy1  =     0.71028037383177;
17155 +          Q_TargetBuy0  =     0.28971962616822;
17156 +          Q_TargetBuy1  =     0.71028037383177;
17157 +          V_TargetBuy0  =     0.29411764705882;
17158 +          V_TargetBuy1  =     0.70588235294117;
17159 +          I_TargetBuy  = '1' ;
17160 +          U_TargetBuy  =                    1;
17161 +          END;
17162 +        ELSE DO;
17163 +          _NODE_  =                   49;
17164 +          _LEAF_  =                   13;
17165 +          P_TargetBuy0  =     0.54054054054054;
17166 +          P_TargetBuy1  =     0.45945945945945;
17167 +          Q_TargetBuy0  =     0.54054054054054;
17168 +          Q_TargetBuy1  =     0.45945945945945;
17169 +          V_TargetBuy0  =     0.77142857142857;
17170 +          V_TargetBuy1  =     0.22857142857142;
17171 +          I_TargetBuy  = '0' ;
17172 +          U_TargetBuy  =                    0;
17173 +          END;
17174 +        END;
17175 +      END;
17176 +    ELSE DO;
17177 +      _NODE_  =                   14;
17178 +      _LEAF_  =                   11;
17179 +      P_TargetBuy0  =     0.63975155279503;
17180 +      P_TargetBuy1  =     0.36024844720496;
17181 +      Q_TargetBuy0  =     0.63975155279503;
17182 +      Q_TargetBuy1  =     0.36024844720496;
17183 +      V_TargetBuy0  =     0.58256880733944;
17184 +      V_TargetBuy1  =     0.41743119266055;
17185 +      I_TargetBuy  = '0' ;
17186 +      U_TargetBuy  =                    0;
17187 +      END;
17188 +    END;
17189 +  ELSE DO;
17190 +    _NODE_  =                    6;
17191 +    _LEAF_  =                   10;
17192 +    P_TargetBuy0  =     0.87232532197545;
17193 +    P_TargetBuy1  =     0.12767467802454;
17194 +    Q_TargetBuy0  =     0.87232532197545;
17195 +    Q_TargetBuy1  =     0.12767467802454;
17196 +    V_TargetBuy0  =       0.872368670586;
17197 +    V_TargetBuy1  =     0.12763132941399;
17198 +    I_TargetBuy  = '0' ;
17199 +    U_TargetBuy  =                    0;
17200 +    END;
17201 +  END;
17202 +
17203 +*****  RESIDUALS R_ *************;
17204 +IF  F_TargetBuy  NE '0'
17205 +AND F_TargetBuy  NE '1'  THEN DO;
17206 +        R_TargetBuy0  = .;
17207 +        R_TargetBuy1  = .;
17208 + END;
17209 + ELSE DO;
17210 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17211 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17212 +       SELECT( F_TargetBuy  );
17213 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17214 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17215 +       END;
17216 + END;
17217 +
17218 +****************************************************************;
17219 +******          END OF DECISION TREE SCORING CODE         ******;
17220 +****************************************************************;
17221 +
17222 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17223  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17224  quit;
17225  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17226  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17227  *------------------------------------------------------------*;
17228  * Tree: Scoring VALIDATE data;
17229  *------------------------------------------------------------*;
17230  data EMWS5.Tree_VALIDATE
17231  / view=EMWS5.Tree_VALIDATE
17232  ;
17233  set EMWS5.Part_VALIDATE
17234  ;
17235  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17236 +****************************************************************;
17237 +******             DECISION TREE SCORING CODE             ******;
17238 +****************************************************************;
17239 +
17240 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17241 +LENGTH F_TargetBuy  $   12;
17242 +LENGTH I_TargetBuy  $   12;
17243 +LENGTH _WARN_  $    4;
17244 +
17245 +******              LABELS FOR NEW VARIABLES              ******;
17246 +label _NODE_ = 'Node' ;
17247 +label _LEAF_ = 'Leaf' ;
17248 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17249 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17250 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17251 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17252 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17253 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17254 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17255 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17256 +label F_TargetBuy = 'From: TargetBuy' ;
17257 +label I_TargetBuy = 'Into: TargetBuy' ;
17258 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17259 +label _WARN_ = 'Warnings' ;
17260 +
17261 +
17262 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17263 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17264 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17265 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17266 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17267 +
17268 +
17269 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17270 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17271 +
17272 +******             ASSIGN OBSERVATION TO NODE             ******;
17273 +IF  NOT MISSING(DemAge ) AND
17274 +  DemAge  <                 44.5 THEN DO;
17275 +  IF  NOT MISSING(DemAffl ) AND
17276 +    DemAffl  <                  9.5 THEN DO;
17277 +    _ARBFMT_1 = PUT( DemGender , $1.);
17278 +     %DMNORMIP( _ARBFMT_1);
17279 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17280 +      IF  NOT MISSING(DemAffl ) AND
17281 +        DemAffl  <                  6.5 THEN DO;
17282 +        _NODE_  =                   18;
17283 +        _LEAF_  =                    2;
17284 +        P_TargetBuy0  =      0.6383495145631;
17285 +        P_TargetBuy1  =     0.36165048543689;
17286 +        Q_TargetBuy0  =      0.6383495145631;
17287 +        Q_TargetBuy1  =     0.36165048543689;
17288 +        V_TargetBuy0  =     0.60089686098654;
17289 +        V_TargetBuy1  =     0.39910313901345;
17290 +        I_TargetBuy  = '0' ;
17291 +        U_TargetBuy  =                    0;
17292 +        END;
17293 +      ELSE DO;
17294 +        IF  NOT MISSING(DemAge ) AND
17295 +                          39.5 <= DemAge  THEN DO;
17296 +          _NODE_  =                   35;
17297 +          _LEAF_  =                    4;
17298 +          P_TargetBuy0  =     0.56326530612244;
17299 +          P_TargetBuy1  =     0.43673469387755;
17300 +          Q_TargetBuy0  =     0.56326530612244;
17301 +          Q_TargetBuy1  =     0.43673469387755;
17302 +          V_TargetBuy0  =     0.58273381294964;
17303 +          V_TargetBuy1  =     0.41726618705035;
17304 +          I_TargetBuy  = '0' ;
17305 +          U_TargetBuy  =                    0;
17306 +          END;
17307 +        ELSE DO;
17308 +          _NODE_  =                   34;
17309 +          _LEAF_  =                    3;
17310 +          P_TargetBuy0  =     0.39285714285714;
17311 +          P_TargetBuy1  =     0.60714285714285;
17312 +          Q_TargetBuy0  =     0.39285714285714;
17313 +          Q_TargetBuy1  =     0.60714285714285;
17314 +          V_TargetBuy0  =     0.36507936507936;
17315 +          V_TargetBuy1  =     0.63492063492063;
17316 +          I_TargetBuy  = '1' ;
17317 +          U_TargetBuy  =                    1;
17318 +          END;
17319 +        END;
17320 +      END;
17321 +    ELSE DO;
17322 +      _NODE_  =                    8;
17323 +      _LEAF_  =                    1;
17324 +      P_TargetBuy0  =     0.77363515312916;
17325 +      P_TargetBuy1  =     0.22636484687083;
17326 +      Q_TargetBuy0  =     0.77363515312916;
17327 +      Q_TargetBuy1  =     0.22636484687083;
17328 +      V_TargetBuy0  =     0.79864253393665;
17329 +      V_TargetBuy1  =     0.20135746606334;
17330 +      I_TargetBuy  = '0' ;
17331 +      U_TargetBuy  =                    0;
17332 +      END;
17333 +    END;
17334 +  ELSE DO;
17335 +    _ARBFMT_1 = PUT( DemGender , $1.);
17336 +     %DMNORMIP( _ARBFMT_1);
17337 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17338 +      _NODE_  =                   11;
17339 +      _LEAF_  =                    9;
17340 +      P_TargetBuy0  =     0.21991341991341;
17341 +      P_TargetBuy1  =     0.78008658008658;
17342 +      Q_TargetBuy0  =     0.21991341991341;
17343 +      Q_TargetBuy1  =     0.78008658008658;
17344 +      V_TargetBuy0  =     0.20677966101694;
17345 +      V_TargetBuy1  =     0.79322033898305;
17346 +      I_TargetBuy  = '1' ;
17347 +      U_TargetBuy  =                    1;
17348 +      END;
17349 +    ELSE DO;
17350 +      IF  NOT MISSING(DemAffl ) AND
17351 +                        14.5 <= DemAffl  THEN DO;
17352 +        _NODE_  =                   21;
17353 +        _LEAF_  =                    8;
17354 +        P_TargetBuy0  =     0.14666666666666;
17355 +        P_TargetBuy1  =     0.85333333333333;
17356 +        Q_TargetBuy0  =     0.14666666666666;
17357 +        Q_TargetBuy1  =     0.85333333333333;
17358 +        V_TargetBuy0  =     0.15094339622641;
17359 +        V_TargetBuy1  =     0.84905660377358;
17360 +        I_TargetBuy  = '1' ;
17361 +        U_TargetBuy  =                    1;
17362 +        END;
17363 +      ELSE DO;
17364 +        IF  NOT MISSING(DemAffl ) AND
17365 +                          11.5 <= DemAffl  THEN DO;
17366 +          _ARBFMT_1 = PUT( DemGender , $1.);
17367 +           %DMNORMIP( _ARBFMT_1);
17368 +          IF _ARBFMT_1 IN ('M' ) THEN DO;
17369 +            _NODE_  =                   51;
17370 +            _LEAF_  =                    7;
17371 +            P_TargetBuy0  =     0.36521739130434;
17372 +            P_TargetBuy1  =     0.63478260869565;
17373 +            Q_TargetBuy0  =     0.36521739130434;
17374 +            Q_TargetBuy1  =     0.63478260869565;
17375 +            V_TargetBuy0  =                 0.45;
17376 +            V_TargetBuy1  =                 0.55;
17377 +            I_TargetBuy  = '1' ;
17378 +            U_TargetBuy  =                    1;
17379 +            END;
17380 +          ELSE DO;
17381 +            _NODE_  =                   50;
17382 +            _LEAF_  =                    6;
17383 +            P_TargetBuy0  =      0.6590909090909;
17384 +            P_TargetBuy1  =     0.34090909090909;
17385 +            Q_TargetBuy0  =      0.6590909090909;
17386 +            Q_TargetBuy1  =     0.34090909090909;
17387 +            V_TargetBuy0  =     0.72222222222222;
17388 +            V_TargetBuy1  =     0.27777777777777;
17389 +            I_TargetBuy  = '0' ;
17390 +            U_TargetBuy  =                    0;
17391 +            END;
17392 +          END;
17393 +        ELSE DO;
17394 +          _NODE_  =                   36;
17395 +          _LEAF_  =                    5;
17396 +          P_TargetBuy0  =      0.6156462585034;
17397 +          P_TargetBuy1  =     0.38435374149659;
17398 +          Q_TargetBuy0  =      0.6156462585034;
17399 +          Q_TargetBuy1  =     0.38435374149659;
17400 +          V_TargetBuy0  =      0.6936416184971;
17401 +          V_TargetBuy1  =     0.30635838150289;
17402 +          I_TargetBuy  = '0' ;
17403 +          U_TargetBuy  =                    0;
17404 +          END;
17405 +        END;
17406 +      END;
17407 +    END;
17408 +  END;
17409 +ELSE DO;
17410 +  IF  NOT MISSING(DemAffl ) AND
17411 +                    12.5 <= DemAffl  THEN DO;
17412 +    IF  NOT MISSING(DemAffl ) AND
17413 +                      15.5 <= DemAffl  THEN DO;
17414 +      IF  NOT MISSING(DemAffl ) AND
17415 +                        18.5 <= DemAffl  THEN DO;
17416 +        _NODE_  =                   31;
17417 +        _LEAF_  =                   14;
17418 +        P_TargetBuy0  =     0.06779661016949;
17419 +        P_TargetBuy1  =      0.9322033898305;
17420 +        Q_TargetBuy0  =     0.06779661016949;
17421 +        Q_TargetBuy1  =      0.9322033898305;
17422 +        V_TargetBuy0  =     0.15151515151515;
17423 +        V_TargetBuy1  =     0.84848484848484;
17424 +        I_TargetBuy  = '1' ;
17425 +        U_TargetBuy  =                    1;
17426 +        END;
17427 +      ELSE DO;
17428 +        _ARBFMT_1 = PUT( DemGender , $1.);
17429 +         %DMNORMIP( _ARBFMT_1);
17430 +        IF _ARBFMT_1 IN ('F' ) THEN DO;
17431 +          _NODE_  =                   48;
17432 +          _LEAF_  =                   12;
17433 +          P_TargetBuy0  =     0.28971962616822;
17434 +          P_TargetBuy1  =     0.71028037383177;
17435 +          Q_TargetBuy0  =     0.28971962616822;
17436 +          Q_TargetBuy1  =     0.71028037383177;
17437 +          V_TargetBuy0  =     0.29411764705882;
17438 +          V_TargetBuy1  =     0.70588235294117;
17439 +          I_TargetBuy  = '1' ;
17440 +          U_TargetBuy  =                    1;
17441 +          END;
17442 +        ELSE DO;
17443 +          _NODE_  =                   49;
17444 +          _LEAF_  =                   13;
17445 +          P_TargetBuy0  =     0.54054054054054;
17446 +          P_TargetBuy1  =     0.45945945945945;
17447 +          Q_TargetBuy0  =     0.54054054054054;
17448 +          Q_TargetBuy1  =     0.45945945945945;
17449 +          V_TargetBuy0  =     0.77142857142857;
17450 +          V_TargetBuy1  =     0.22857142857142;
17451 +          I_TargetBuy  = '0' ;
17452 +          U_TargetBuy  =                    0;
17453 +          END;
17454 +        END;
17455 +      END;
17456 +    ELSE DO;
17457 +      _NODE_  =                   14;
17458 +      _LEAF_  =                   11;
17459 +      P_TargetBuy0  =     0.63975155279503;
17460 +      P_TargetBuy1  =     0.36024844720496;
17461 +      Q_TargetBuy0  =     0.63975155279503;
17462 +      Q_TargetBuy1  =     0.36024844720496;
17463 +      V_TargetBuy0  =     0.58256880733944;
17464 +      V_TargetBuy1  =     0.41743119266055;
17465 +      I_TargetBuy  = '0' ;
17466 +      U_TargetBuy  =                    0;
17467 +      END;
17468 +    END;
17469 +  ELSE DO;
17470 +    _NODE_  =                    6;
17471 +    _LEAF_  =                   10;
17472 +    P_TargetBuy0  =     0.87232532197545;
17473 +    P_TargetBuy1  =     0.12767467802454;
17474 +    Q_TargetBuy0  =     0.87232532197545;
17475 +    Q_TargetBuy1  =     0.12767467802454;
17476 +    V_TargetBuy0  =       0.872368670586;
17477 +    V_TargetBuy1  =     0.12763132941399;
17478 +    I_TargetBuy  = '0' ;
17479 +    U_TargetBuy  =                    0;
17480 +    END;
17481 +  END;
17482 +
17483 +*****  RESIDUALS R_ *************;
17484 +IF  F_TargetBuy  NE '0'
17485 +AND F_TargetBuy  NE '1'  THEN DO;
17486 +        R_TargetBuy0  = .;
17487 +        R_TargetBuy1  = .;
17488 + END;
17489 + ELSE DO;
17490 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17491 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17492 +       SELECT( F_TargetBuy  );
17493 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17494 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17495 +       END;
17496 + END;
17497 +
17498 +****************************************************************;
17499 +******          END OF DECISION TREE SCORING CODE         ******;
17500 +****************************************************************;
17501 +
17502 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17503  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17504  quit;
17505  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17507  proc sort data=WORK.EM_USER_REPORT;
17508  by ID VIEW;
17509  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17510  *------------------------------------------------------------*;
17511  * Tree: Computing metadata for TRAIN data;
17512  *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17896  data WORK.MODELTEMP_INFO;
17897  set EMWS5.Tree_EMINFO;
17898  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17899  run;
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17900  data EMWS5.Tree_EMINFO;
17901  length TARGET KEY $32 DATA $43;
17902  input TARGET KEY DATA $;
17903  cards;
 
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17907  run;
17908  data EMWS5.Tree_EMINFO;
17909  set EMWS5.Tree_EMINFO WORK.MODELTEMP_INFO;
17910  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
17911  proc sort data = EMWS5.Tree_EMINFO NOTHREADS;
17912  by TARGET KEY;
17913  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
17914  proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
17915  by TARGET KEY;
17916  run;
 
NOTE: There were 3 observations read from the data set EMWS5.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17917  proc sort data = EMWS5.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
17918  by TARGET KEY;
17919  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17920  data EMWS5.Tree_EMINFO;
17921  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
17922  by TARGET KEY;
17923  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17924  proc datasets lib=work nolist;
17925  delete TEMP_INFO SORTEDEMINFO;
17926  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
17927  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                11:41:32
*------------------------------------------------------------*
17951  data EMWS5.Tree_EMOUTFIT;
17952  set EMWS5.Tree_EMOUTFIT;
17953  length TargetLabel $200;
17954  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17955  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
17956  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17957  proc sort data=EMWS5.Tree_EMREPORTFIT nothreads;
17958  by TARGET;
17959  run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The data set EMWS5.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17960  %let _EMwarndup = 0;
17961  %let _EMtargetdup =;
17962  %let _EMASEtargetdup =;
17963  data _null_;
17964  set EMWS5.Tree_EMOUTFIT;
17965  if .<_ASE_<0.000001 then do;
17966  call symput('_EMwarndup', '1');
17967  call symput('_EMtargetdup', target);
17968  call symput('_EMASEtargetdup', put(_ASE_, best.));
17969  end;
17970  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17971  %let EMEXCEPTIONSTRING=;
17972  *------------------------------------------------------------*;
17973  * REPORT: Tree;
17974  *------------------------------------------------------------*;
17975  %let EM_ACTION = REPORT;
17976  %let syscc = 0;
17977  %macro main;
17978
17979    %if %upcase(&EM_ACTION) = CREATE %then %do;
17980      filename temp catalog 'sashelp.emmodl.tree_create.source';
17981      %include temp;
17982      filename temp;
17983
17984      %em_tree_create;
17985    %end;
17986
17987     %else
17988     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17989
17990         filename temp catalog 'sashelp.emmodl.tree_train.source';
17991         %include temp;
17992         filename temp;
17993         %em_tree_train;
17994     %end;
17995
17996    %else
17997    %if %upcase(&EM_ACTION) = SCORE %then %do;
17998      filename temp catalog 'sashelp.emmodl.tree_score.source';
17999      %include temp;
18000      filename temp;
18001
18002      %em_tree_score;
18003
18004    %end;
18005
18006    %else
18007    %if %upcase(&EM_ACTION) = REPORT %then %do;
18008
18009         filename temp catalog 'sashelp.emmodl.tree_report.source';
18010         %include temp;
18011         filename temp;
18012
18013         %em_tree_report;
18014     %end;
18015
18016    %else
18017    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18018
18019         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18020         %include temp;
18021         filename temp;
18022         %EM_TREE_OPENTREEVIEWER;
18023
18024     %end;
18025
18026    %else
18027    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18028
18029         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18030         %include temp;
18031         filename temp;
18032         %EM_TREE_CLOSETREEVIEWER;
18033
18034     %end;
18035
18036
18037     %doendm:
18038  %mend main;
18039
18040  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18042 +%macro em_tree_makePlotDs( multipleTar= );
18044 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18045 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18046 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18047 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18049 +  /* determine if validation statistics will be displayed */
18050 +  %let validflag=N;
18051 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18052 +    /* determine if validation data exists */
18053 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18054 +      %let validflag=Y;
18055 +    %end;
18056 +  %end;
18058 +   /* retrieve name of decmeta even in presence of multiple targets */
18059 +   %let decmeta = ;
18060 +   %if &EM_DEC_DECMETA eq %then %do;
18061 +     data _Target;
18062 +       set &em_data_variableset;
18063 +       where ROLE='TARGET' and USE in('D', 'Y');
18064 +       keep NAME;
18065 +     run;
18066 +     proc sort data=_Target;
18067 +       by NAME;
18068 +     run;
18069 +     proc sort data=EM_TARGETDECINFO;
18070 +       by TARGET;
18071 +     run;
18072 +     data _Target;
18073 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18074 +       by NAME;
18075 +       if _a then do;
18076 +         call symput('decmeta', trim(DECMETA));
18077 +       end;
18078 +     run;
18079 +     proc delete data=_Target;run;
18080 +   %end;
18081 +   %else %let decmeta = &EM_DEC_DECMETA;
18084 +  /* retrieve targetEvent from decmeta */
18085 +  %let targetEvent=;
18086 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18087 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18088 +      data _null_;
18089 +       set &DECMETA(where=(_TYPE_="TARGET"));
18090 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18091 +      run;
18092 +    %end;
18093 +  %end;
18095 +  /* retrieve predicted var for targetEvent from decmeta */
18096 +  %let predTarget=;
18097 +  %let predLvl=;
18098 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18099 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18100 +      data _null_;
18101 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18102 +       call symput('predTarget', strip(VARIABLE));
18103 +       call symput('predLvl', strip(LEVEL));
18104 +      run;
18105 +    %end;
18106 +  %end;
18107 +  %else %do;
18108 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18109 +      data _null_;
18110 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18111 +       call symput('predTarget', strip(VARIABLE));
18112 +      run;
18113 +    %end;
18114 +  %end;
18116 +  /* create BelowText value */
18117 +  data belowtext;
18118 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18119 +    keep node belowtext;
18120 +  run;
18122 +  /* relace belowtext with variable label if it exists */
18123 +  data belowtext2;
18124 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18125 +    keep node belowtextlbl;
18126 +  run;
18128 +  proc sort data=belowtext; by node; run;
18129 +  proc sort data=belowtext2; by node; run;
18131 +  data belowtext;
18132 +    merge belowtext belowtext2(in=_a);
18133 +    by node;
18134 +    if _a then belowtext=belowtextlbl;
18135 +    keep node belowtext;
18136 +  run;
18138 +  /* create AboveText value */
18139 +  data abovetext;
18140 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18141 +  run;
18142 +  proc sort data=abovetext; by node numeric_value; run;
18144 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18145 +  data abovetext;
18146 +    set abovetext(rename=(node=parent));
18147 +    by parent numeric_value;
18148 +    retain abovetext tempstring flag branch origval origchar ;
18149 +    length abovetext $256;
18150 +    length tempstring origchar $64;
18152 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18153 +      if first.parent then do;
18154 +        if missing(character_value) then do;
18155 +          numeric_value = round(numeric_value, &sp_precision);
18156 +          abovetext = "< "||strip(NUMERIC_VALUE);
18157 +          branch = 1;
18158 +          origval = numeric_value;
18159 +          output;
18160 +        end;
18161 +        else do;
18162 +          abovetext = "< "||strip(CHARACTER_VALUE);
18163 +          branch = 1;
18164 +          origchar = character_value;
18165 +          output;
18166 +        end;
18168 +        if first.parent AND last.parent then do;
18169 +          if missing(character_value) then do;
18170 +            numeric_value = round(numeric_value, &sp_precision);
18171 +            branch = branch + 1;
18172 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18173 +            output;
18174 +          end;
18175 +          else do;
18176 +            branch = branch + 1;
18177 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18178 +            output;
18179 +          end;
18180 +        end;
18181 +      end;
18182 +      else if last.parent then do;
18183 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18184 +          if missing(character_value) then do;
18185 +            numeric_value = round(numeric_value, &sp_precision);
18186 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18187 +          end;
18188 +          else do;
18189 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18190 +          end;
18191 +          branch = branch + 1;
18192 +          output;
18194 +          if missing(character_value) then do;
18195 +            numeric_value = round(numeric_value, &sp_precision);
18196 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18197 +          end;
18198 +          else do;
18199 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18200 +          end;
18201 +          branch = branch + 1;
18202 +          output;
18203 +        end;
18204 +        else do;
18205 +          if missing(character_value) then do;
18206 +            numeric_value = round(numeric_value, &sp_precision);
18207 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18208 +          end;
18209 +          else do;
18210 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18211 +          end;
18212 +          branch = branch + 1;
18213 +          output;
18214 +        end;
18215 +      end;
18216 +      else do;
18217 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18218 +          if missing(character_value) then do;
18219 +            numeric_value = round(numeric_value,&sp_precision);
18220 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18221 +            origval = numeric_value;
18222 +          end;
18223 +          else do;
18224 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18225 +            origchar = character_value;
18226 +          end;
18227 +          branch = branch + 1;
18228 +          output;
18230 +        end;
18231 +        else do;
18232 +          if missing(character_value) then do;
18233 +            numeric_value = round(numeric_value, &sp_precision);
18234 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18235 +            origval = numeric_value;
18236 +          end;
18237 +          else do;
18238 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18239 +            origval = character_value;
18240 +          end;
18241 +          branch = branch + 1;
18242 +          output;
18243 +        end;
18244 +      end;
18245 +    end;
18246 +    else do;
18247 +       if first.numeric_value then do;
18248 +         flag = 0;
18249 +         abovetext = strip(CHARACTER_VALUE);
18250 +         branch = numeric_value;
18251 +         if first.numeric_value AND last.numeric_value then do;
18252 +           output;
18253 +         end;
18254 +       end;
18255 +       else if last.numeric_value then do;
18256 +         if flag=0 then do;
18257 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18258 +           length = length(strip(tempstring));
18259 +           if length < 32 then do;
18260 +             abovetext = strip(tempstring);
18261 +           end;
18262 +           else do;
18263 +             abovetext = strip(abovetext)||", ...";
18264 +             flag = 1;
18265 +           end;
18266 +         end;
18267 +         branch = numeric_value;
18268 +         output;
18269 +       end;
18270 +       else do;
18271 +         if flag=0 then do;
18272 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18273 +           length = length(strip(tempstring));
18274 +           if length < 32 then do;
18275 +             abovetext = strip(tempstring);
18276 +           end;
18277 +           else do;
18278 +             abovetext = strip(abovetext)||", ...";
18279 +             flag=1;
18280 +           end;
18281 +         end;
18282 +         branch = numeric_value;
18283 +       end;
18284 +    end;
18285 +    keep parent branch abovetext;
18286 +  run;
18288 +  /* MIssing value to abovetext */
18289 +  data tempmissing;
18290 +    set &EM_USER_OUTRULES;
18291 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18292 +    rename node=parent numeric_value=branch character_value=misschar;
18293 +  run;
18296 +  proc sort data=abovetext; by parent branch; run;
18297 +  proc sort data=tempmissing; by parent branch; run;
18298 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18300 +  data tempoutnodes;
18301 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18302 +    by parent branch;
18303 +    length traintotal validtotal 8;
18304 +    retain traintotal validtotal;
18306 +    if _a then do;
18307 +      if ^MISSING(abovetext) then do;
18308 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18309 +      end;
18310 +      else do;
18311 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18312 +      end;
18313 +    end;
18314 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18316 +    if node=1 then do;
18317 +      traintotal = N;
18318 +      validtotal=VN;
18319 +    end;
18321 +    drop role rank stat misschar belowtext;
18322 +  run;
18323 +  proc sort data=tempoutnodes; by node; run;
18324 +  proc sort data=belowtext; by node; run;
18326 +  data tempoutnodes;
18327 +    merge tempoutnodes belowtext;
18328 +    by node;
18330 +  run;
18332 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18333 +  %let adjusted = N;
18334 +  %let npriors = 0;
18335 +  data _null_ ;
18336 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18337 +    if eof then do ;
18338 +      call symput("npriors" , strip(put(_N_,best.))) ;
18339 +    end;
18340 +  run;
18341 +  %if &npriors gt 0 %then %let adjusted=Y;
18344 +  /* create a table with targetUsed and targetLevel columns for each node */
18345 +  data temptarmeta;
18346 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18347 +    %if &multipleTar eq N %then %do;
18348 +      AND USE in ('D', 'Y')
18349 +    %end;
18350 +    ));
18351 +    length TARGET $32;
18352 +    Target=name;
18353 +    keep target level;
18354 +  run;
18356 +  %if &multipleTar eq Y %then %do;
18357 +    data temptargetused;
18358 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18359 +      keep node target;
18360 +    run;
18361 +    proc sort data=temptargetused; by target; run;
18362 +    proc sort data=temptarmeta; by target; run;
18363 +    data temptargetused;
18364 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18365 +      by target;
18366 +      if _a and _b;
18367 +    run;
18368 +  %end;
18369 +  %else %do;
18370 +    data temptargetused;
18371 +      set &EM_USER_OUTSTATS;
18372 +      length target $32 tarlevel $10;
18373 +      target="%EM_TARGET";
18374 +      tarlevel="%EM_TARGET_LEVEL";
18375 +      keep node target tarlevel;
18376 +    run;
18377 +    proc sort data=temptargetused nodupkey; by node; run;
18378 +  %end;
18380 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18381 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18382 +  proc sort data=temptargetused; by node; run;
18385 +  /* create tables for all interval targets as well as all class targets */
18386 +  data tempinterval tempclass;
18387 +    merge tempoutstats temptargetused( rename=(target=targetused));
18388 +    by node;
18389 +    %if "&multipleTar" eq "Y" %then %do;
18390 +      if ((missing(Target)) OR (target=targetused ));
18391 +    %end;
18393 +    if tarlevel="INTERVAL" then output tempinterval;
18394 +    else output tempclass;
18395 +  run;
18397 +  /* iniitalize intTarget and classTarget flags */
18398 +  %let em_intNobs =0;
18399 +  %let em_classNobs = 0;
18400 +  %let em_intTarget= N;
18401 +  %let em_classTarget= N;
18403 +  proc sql;
18404 +    reset noprint;
18405 +    select count(*) into :em_intNobs from tempinterval;
18406 +  quit;
18407 +  proc sql;
18408 +    reset noprint;
18409 +    select count(*) into :em_classNobs from tempclass;
18410 +  quit;
18412 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18413 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18415 +  /* retrieve all information for interval targets */
18416 +  %if &em_intTarget eq Y %then %do;
18418 +    /* determine if leaf variable exists */
18419 +    %let dsid=%sysfunc(open(tempinterval,i));
18420 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18421 +    %let rc=%sysfunc(close(&dsid));
18423 +    proc transpose data=tempinterval
18424 +      %if &leafexists %then %do;
18425 +        (drop=leaf)
18426 +      %end;
18427 +      %if &validexist %then %do;
18428 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18429 +      %end;
18430 +      %else %do;
18431 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18432 +      %end;
18433 +      by node;
18434 +      id statname;
18435 +    run;
18436 +    data tempinterval;
18437 +      set tempinterval;
18438 +      if missing(N) then delete;
18439 +    run;
18440 +  %end;
18442 +  /* retrieve all information for class targets */
18443 +  %if &em_classTarget eq Y %then %do;
18444 +    proc sort data=tempclass; by node category; run;
18445 +    %if &validflag eq N %then %do;
18446 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18447 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18448 +    %end;
18449 +    %else %do;
18450 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18451 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18452 +    %end;
18453 +      set tempclass;
18455 +      %if &validflag eq N %then %do;
18456 +        %if "&adjusted" eq "N" %then %do;
18457 +          if statname="N" then output tempn;
18458 +        %end;
18459 +        %else %do;
18460 +          if statname="NPRIORS" then output tempn;
18461 +        %end;
18462 +        else if statname="PREDICTION" then output temppredict;
18463 +        else if statname="PROBABILITY" then output tempprob;
18464 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18465 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18466 +      %end;
18467 +      %else %do;
18468 +        %if "&adjusted" eq "N" %then %do;
18469 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18470 +        %end;
18471 +        %else %do;
18472 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18473 +        %end;
18474 +        else if statname="PREDICTION" then output temppredict;
18475 +        else if statname="PROBABILITY" then output tempprob;
18476 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18477 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18478 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18479 +      %end;
18480 +    run;
18483 +    /* determine if profit/loss exists in tempprofit */
18484 +    %let em_profitflag=0;
18485 +    %let em_lossflag=0;
18486 +    proc sql;
18487 +      reset noprint;
18488 +      select count(*) into :em_profitflag from tempprofit;
18489 +    quit;
18490 +    proc sql;
18491 +      reset noprint;
18492 +      select count(*) into :em_lossflag from temploss;
18493 +    quit;
18495 +    %if &validFlag eq Y %then %do;
18496 +      proc transpose data=tempn
18497 +        %if "&adjusted" eq "N" %then %do;
18498 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18499 +        %end;
18500 +        %else %do;
18501 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18502 +        %end;
18503 +        by node;
18504 +        id statname;
18505 +      run;
18506 +      %if &em_profitflag ne 0 %then %do;
18507 +        proc transpose data=tempprofit out=tempprofit;
18508 +          by node category;
18509 +          id statname ;
18510 +        run;
18511 +      %end;
18512 +      %if &em_lossflag ne 0 %then %do;
18513 +        proc transpose data=temploss out=temploss;
18514 +          by node category;
18515 +          id statname ;
18516 +        run;
18517 +      %end;
18518 +      data tempprob;
18519 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18520 +        by node
18521 +        %if &multipleTar eq Y %then %do;
18522 +          target
18523 +        %end;
18524 +        category;
18525 +      run;
18526 +    %end;
18528 +    /* store percentcorrect value */
18529 +    data temppredict;
18530 +      merge tempprob temppredict(in=_a);
18531 +      by node category;
18532 +      if _a then do;
18533 +        percentCorrect = statvalue;
18534 +        %if &validFlag eq Y %then %do;
18535 +          vpercentCorrect= vstatvalue;
18536 +        %end;
18537 +      end;
18538 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18539 +      %if &validFlag eq Y %then %do;
18540 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18541 +      %end;
18542 +      ;
18543 +      if missing(percentCorrect) then delete;
18544 +      drop target;
18545 +    run;
18547 +    /* build profittext */
18548 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18549 +      data tempprofittext(keep= node profittext profitloss);
18550 +        length profittext $800 profitloss 8.;
18551 +        retain profittext profitloss;
18553 +        merge tempprob
18554 +        %if &em_profitflag ne 0 %then %do;
18555 +          tempprofit
18556 +        %end;
18557 +        %else %if &em_lossflag ne 0 %then %do;
18558 +          temploss
18559 +        %end;
18560 +        ;
18561 +        by node category;
18563 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18564 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18565 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18566 +          %let profittype = ALL;
18567 +        %end;
18569 +        /* create the profitloss variable for nodecolor if selected */
18570 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18572 +        %if "&profittype" eq "ALL" %then %do;
18573 +          if strip(CATEGORY)="&targetEvent" then do;
18574 +            profitloss=statvalue;
18575 +          end;
18576 +          if first.node then do;
18577 +            %if &validFlag eq N %then %do;
18578 +             %if &em_profitflag ne 0 %then %do;
18579 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18580 +             %end;
18581 +             %if &em_lossflag ne 0 %then %do;
18582 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18583 +             %end;
18584 +            %end;
18585 +            %else %do;
18586 +             %if &em_profitflag ne 0 %then %do;
18587 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18587!+;
18588 +             %end;
18589 +             %if &em_lossflag ne 0 %then %do;
18590 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18591 +             %end;
18592 +            %end;
18593 +          end;
18594 +          else if last.node then do;
18595 +            %if &validFlag eq N %then %do;
18596 +             %if &em_profitflag ne 0 %then %do;
18597 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18598 +             %end;
18599 +             %if &em_lossflag ne 0 %then %do;
18600 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18601 +             %end;
18602 +             /*if CATEGORY="&targetEvent" then do;
18603 +               profitloss=statvalue;
18604 +             end;*/
18605 +            %end;
18606 +            %else %do;
18607 +             %if &em_profitflag ne 0 %then %do;
18608 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18608!+14.&EM_PROPERTY_SPLITPRECISION);
18609 +                if CATEGORY="&targetEvent" then do;
18610 +                 profitloss=ALTERNATIVE_PROFIT;
18611 +                end;
18612 +             %end;
18613 +             %if &em_lossflag ne 0 %then %do;
18614 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18614!+14.&EM_PROPERTY_SPLITPRECISION);
18615 +                if CATEGORY="&targetEvent" then do;
18616 +                  profitloss=ALTERNATIVE_LOSS;
18617 +                end;
18618 +             %end;
18619 +            %end;
18620 +            output;
18621 +          end;
18622 +          else do;
18623 +            %if &validFlag eq N %then %do;
18624 +             %if &em_profitflag ne 0 %then %do;
18625 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18626 +             %end;
18627 +             %if &em_lossflag ne 0 %then %do;
18628 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18629 +             %end;
18630 +            %end;
18631 +            %else %do;
18632 +             %if &em_profitflag ne 0 %then %do;
18633 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18633!+14.&EM_PROPERTY_SPLITPRECISION);
18634 +             %end;
18635 +             %if &em_lossflag ne 0 %then %do;
18636 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18636!+14.&EM_PROPERTY_SPLITPRECISION);
18637 +             %end;
18638 +            %end;
18639 +          end;
18640 +        %end;
18641 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18642 +          if strip(CATEGORY) = "&targetevent" then do;
18643 +            %if &validFlag eq N %then %do;
18644 +             %if &em_profitflag ne 0 %then %do;
18645 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18646 +             %end;
18647 +             %if &em_lossflag ne 0 %then %do;
18648 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18649 +             %end;
18650 +             profitloss=statvalue;
18651 +            %end;
18652 +            %else %do;
18653 +             %if &em_profitflag ne 0 %then %do;
18654 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18654!+;
18655 +                profitloss=ALTERNATIVE_PROFIT;
18656 +             %end;
18657 +             %if &em_lossflag ne 0 %then %do;
18658 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18659 +                profitloss=ALTERNATIVE_LOSS;
18660 +             %end;
18661 +            %end;
18662 +            output;
18663 +          end;
18664 +        %end;
18665 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18666 +          if strip(CATEGORY) = "&targetevent" then do;
18667 +            %if &validFlag eq N %then %do;
18668 +             profitloss=statvalue;
18669 +            %end;
18670 +            %else %do;
18671 +             %if &em_profitflag ne 0 %then %do;
18672 +                profitloss=ALTERNATIVE_PROFIT;
18673 +             %end;
18674 +             %if &em_lossflag ne 0 %then %do;
18675 +                profitloss=ALTERNATIVE_LOSS;
18676 +             %end;
18677 +            %end;
18678 +            output;
18679 +          end;
18680 +        %end;
18681 +      run;
18682 +    %end;
18684 +    data tempprob(keep= node probtext);
18685 +      length probtext $800;
18686 +      retain probtext;
18687 +      set tempprob ;
18688 +      by node;
18690 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18691 +      %let probtype = &EM_PROPERTY_TARGET;
18692 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18693 +        %let probtype = ALL;
18694 +      %end;
18696 +      %if "&probtype" eq "ALL" %then %do;
18697 +        if first.node then do;
18698 +          %if &validFlag eq N %then %do;
18699 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18700 +          %end;
18701 +          %else %do;
18702 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18703 +          %end;
18704 +        end;
18705 +        else if last.node then do;
18706 +          %if &validFlag eq N %then %do;
18707 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18708 +          %end;
18709 +          %else %do;
18710 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18711 +          %end;
18712 +          output;
18713 +        end;
18714 +        else do;
18715 +          %if &validFlag eq N %then %do;
18716 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18717 +          %end;
18718 +          %else %do;
18719 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18720 +          %end;
18721 +        end;
18722 +      %end;
18723 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18724 +        if strip(CATEGORY) = "&targetevent" then do;
18725 +          %if &validFlag eq N %then %do;
18726 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18727 +          %end;
18728 +          %else %do;
18729 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18730 +          %end;
18731 +          output;
18732 +        end;
18733 +      %end;
18734 +      %else %if "&probtype" eq "NONE" %then %do;
18735 +        if last.node then do;
18736 +          output;
18737 +        end;
18738 +      %end;
18739 +    run;
18740 +  %end;
18742 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18744 +  %let oldexists=0;
18745 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18746 +     data old_tree_plot;
18747 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18748 +        rename nodecolor=oldnodecolor;
18749 +     run;
18751 +     proc sort data=old_tree_plot;
18752 +        by node;
18753 +     run;
18755 +     %let oldexists=1;
18756 +  %end;
18758 +  data &EM_USER_TREE_PLOT;
18759 +    length textall $800;
18760 +    merge tempoutnodes temptargetused
18762 +    %if &em_intTarget eq Y %then %do;
18763 +      tempinterval
18764 +    %end;
18766 +    %if &em_classTarget eq Y %then %do;
18768 +      %if &validFlag eq N %then %do;
18769 +        tempn(rename=(statvalue=N))
18770 +      %end;
18771 +      %else %do;
18772 +        tempn
18773 +      %end;
18775 +      temppredict tempprob
18777 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18778 +        tempprofittext
18779 +      %end;
18780 +    %end;
18781 +    ;
18782 +    by node;
18784 +    /* build nodetext based on user selection */
18785 +    textall="";
18787 +    %if &em_intTarget eq Y %then %do;
18788 +    if tarlevel="INTERVAL" then do;
18789 +      /* Nodeid */
18790 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18791 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18792 +      %end;
18794 +      /* Target identifier if multiple targets are used */
18795 +      %if "&multipleTar" eq "Y" %then %do;
18796 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18797 +      %end;
18799 +      %if &validFlag eq Y %then %do;
18800 +         /* Column labels displayed in validflag eq Y only */
18801 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18802 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18802!+noquote ))";
18803 +         %end;
18805 +         /* Average values */
18806 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18807 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18808 +         %end;
18810 +         /* RASE */
18811 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18812 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18813 +         %end;
18815 +         /* Count */
18816 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18817 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18818 +         %end;
18819 +      %end;
18820 +      %else %do;
18821 +         /* Average values */
18822 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18823 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18824 +         %end;
18826 +         /* RASE */
18827 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18828 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18829 +         %end;
18831 +         /* Count */
18832 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18833 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18834 +         %end;
18835 +      %end;
18837 +      /* nodecolor */
18838 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18839 +        nodecolor=PREDICTION;
18840 +      %end;
18841 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18842 +        nodecolor=RASE;
18843 +      %end;
18844 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18845 +        nodecolor=1;
18846 +      %end;
18848 +    end;
18849 +    %end;
18850 +    %if &em_classTarget eq Y %then %do;
18851 +    if tarlevel^="INTERVAL" then  do;
18853 +      /* Nodeid */
18854 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18855 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18856 +      %end;
18857 +      /* Target identifier if multiple targets are used */
18858 +      %if "&multipleTar" eq "Y" %then %do;
18859 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18860 +      %end;
18862 +      /* Predicted values */
18863 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18864 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18865 +      %end;
18867 +      /* Column labels displayed in validflag eq Y only */
18868 +      %if "&ValidFlag" eq "Y" %then %do;
18869 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18870 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18870!+noquote ))";
18871 +        %end;
18872 +      %end;
18874 +      /* Target Values */
18875 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18876 +        textall=strip(textall)||"0A"x||strip(probtext);
18877 +      %end;
18879 +      /* include profit or loss for all target levels */
18880 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18881 +        textall=strip(textall)||"0A"x||strip(profittext);
18882 +      %end;
18884 +      %if &validFlag eq N %then %do;
18885 +        /* Percent Correct */
18886 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18887 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18888 +        %end;
18890 +         /* Count */
18891 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18892 +          %if "&adjusted" eq "N" %then %do;
18893 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18894 +          %end;
18895 +          %else %do;
18896 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18897 +          %end;
18898 +         %end;
18899 +      %end;
18900 +      %else %do;
18901 +        /* Percent Correct */
18902 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18903 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18904 +        %end;
18906 +         /* Count */
18907 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18908 +          %if "&adjusted" eq "N" %then %do;
18909 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18910 +          %end;
18911 +          %else %do;
18912 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18913 +          %end;
18914 +         %end;
18915 +      %end;
18917 +      /* nodecolor */
18918 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18919 +       %if &multipleTar ne Y %then %do;
18920 +        nodecolor=&predTarget;
18921 +       %end;
18922 +       %else %do;
18923 +         nodecolor=percentcorrect;
18924 +       %end;
18925 +      %end;
18926 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18927 +        nodecolor=percentcorrect;
18928 +      %end;
18929 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18930 +        nodecolor=1;
18931 +      %end;
18932 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18933 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18934 +          nodecolor=percentcorrect;
18935 +        %end;
18936 +        %else %do;
18937 +          nodecolor=profitloss;
18938 +        %end;
18939 +      %end;
18941 +    end;
18942 +    %end;
18943 +    %if &em_intTarget eq Y %then %do;
18944 +     drop  PREDICTION  TARGET TARLEVEL
18945 +     %if &ValidFlag eq Y %then %do;
18946 +         VPREDICTION
18947 +     %end;
18948 +     ;
18949 +    %end;
18950 +    %if &em_classTarget eq Y %then %do;
18951 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18952 +     %if &ValidFlag eq Y %then %do;
18953 +         VSTATVALUE
18954 +     %end;
18955 +     ;
18956 +    %end;
18958 +  run;
18960 +  /* add leaf index information to plotds - based on primary target only*/
18961 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18962 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18963 +      set &EM_USER_OUTSTATS;
18964 +      if ((statname="PROBABILITY"
18965 +      %if &validexist %then %do;
18966 +       or statname="VALID: PROBABILITY"
18967 +      %end;
18968 +      ) AND (CATEGORY="&TARGETEVENT")
18969 +      %if "&multipleTar" eq "Y" %then %do;
18970 +        AND (Target="%EM_TARGET")
18971 +      %end;
18972 +      );
18973 +    run;
18975 +    %if &validexist %then %do;
18976 +      proc sort data=tempprob; by node; run;
18977 +      %let vpredTarget = V%substr(&predTarget, 2);
18978 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18979 +         by node;
18980 +         id statname;
18981 +      run;
18982 +    %end;
18983 +  %end;
18984 +  %else %do;
18985 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18986 +      set &EM_USER_OUTSTATS;
18987 +      if ((statname="PREDICTION"
18988 +      %if &validexist %then %do;
18989 +       or statname="VALID: PREDICTION"
18990 +      %end;
18991 +      )
18992 +      %if "&multipleTar" eq "Y" %then %do;
18993 +        AND (Target="%EM_TARGET")
18994 +      %end;
18995 +      );
18996 +    run;
18997 +    %if &validexist %then %do;
18998 +      proc sort data=tempprob; by node; run;
18999 +      %let vpredTarget = V%substr(&predTarget, 2);
19000 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19001 +         by node;
19002 +         id statname;
19003 +      run;
19004 +    %end;
19005 +  %end;
19007 +  proc sort data=tempprob; by node; run;
19008 +  data tempoutnodes;
19009 +    merge tempoutnodes tempprob;
19010 +    by node;
19011 +  run;
19013 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19014 +  data tempnodes;
19015 +    retain traintotal validtotal;
19016 +    set tempnodes(where=(leaf ne . ));
19017 +    tprob=round(&predTarget, .01);
19018 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19019 +      percevent_train=round(tprob*100, .01);
19020 +    %end;
19021 +    %else %do;
19022 +      percevent_train=tprob;
19023 +    %end;
19025 +    perc_train=round((n/traintotal)*100, 0.01);
19026 +    /* leafwidth already has a *10 multiplier */
19027 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19029 +    %if &validexist %then %do;
19030 +      %let vpredTarget = V%substr(&predTarget,2);
19031 +      vprob=round(&vpredTarget, .01);
19032 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19033 +        percevent_valid=round(vprob*100, .01);
19034 +      %end;
19035 +      %else %do;
19036 +        percevent_valid=vprob;
19037 +      %end;
19038 +      perc_valid=round((vn/validtotal)*100, .01);
19039 +    %end;
19041 +    index=_N_;
19042 +    keep node index tprob perc_train percevent_train
19043 +    %if &validexist %then %do;
19044 +        vprob percevent_valid perc_valid
19045 +    %end;
19046 +    ;
19047 +  run;
19048 +  proc sort data=tempnodes; by node; run;
19049 +  data &EM_USER_TREE_PLOT;
19050 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19051 +    by node;
19052 +    if missing(node) then delete;
19053 +    %if &oldexists %then %do;
19054 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19055 +      drop oldnodecolor;
19056 +    %end;
19057 +    abovetext = compbl(abovetext);
19059 +    /* add variable labels */
19060 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19061 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19062 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19063 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19064 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19065 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19067 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19068 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19069 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19070 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19071 +          %end;
19072 +          %else %do;
19073 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19074 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19075 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19076 +          %end;
19077 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19079 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19080 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19081 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19082 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19083 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19084 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19085 +          %end;
19086 +          %else %do;
19087 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19088 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19089 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19090 +          %end;
19091 +    ;
19092 +  run;
19094 +  /* delete temporary tables */
19095 +  proc datasets lib=work nolist;
19096 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19097 +  run;
19099 +%mend em_tree_makePlotDs;
19103 +%macro em_tree_report;
19105 +   /* report properties */
19106 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19107 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19108 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19109 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19110 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19111 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19112 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19113 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19114 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19115 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19116 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19117 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19118 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19120 +   %let validexist=0;
19121 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19122 +     %let validexist=1;
19123 +   %end;
19125 +   /* determine if multiple targets will be processed */
19126 +   %let em_tree_multipleTargets=N;
19127 +   %let em_tree_numTarget=1;
19128 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19129 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19130 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19131 +         %let em_tree_multipleTargets=N;
19132 +      %end;
19133 +      %else %do;
19134 +        data _null_;
19135 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19136 +          if eof then
19137 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19138 +        run;
19140 +        %if &em_tree_numTarget gt 1 %then %do;
19141 +           %let em_tree_multipleTargets=Y;
19142 +        %end;
19143 +     %end;
19144 +   %end;
19146 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19148 +   /* variable importance */
19149 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19150 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19152 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19153 +     /* and the columns may not be generated                                                                                 */
19154 +     %let em_tree_cvexists=;
19155 +     %let em_tree_surrexists=.;
19156 +     data _null_;
19157 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19158 +       if eof then do ;
19159 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19160 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19161 +       end;
19162 +     run;
19164 +     data &EM_USER_OUTIMPORT;
19165 +         set &EM_USER_OUTIMPORT;
19166 +         /* format columns based on Precison value specified */
19167 +         format importance 15.&EM_PROPERTY_PRECISION
19168 +              %if &validexist %then %do;
19169 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19170 +              %end;
19171 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19172 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19173 +              %end;
19174 +         ;
19175 +     run;
19177 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19178 +     proc print data=&EM_USER_OUTIMPORT
19179 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19180 +          (where=((nrules>0) OR (nsurrogates>0)))
19181 +        %end;
19182 +        %else %do;
19183 +           (where=(nrules>0))
19184 +        %end;
19185 +        label noobs
19186 +        ;
19187 +     run;
19188 +     title10;
19190 +   %end;
19192 +   /* Sequence */
19193 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19194 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19195 +   data _null_ ;
19196 +      set &EM_USER_outseq (obs=2) end=eof ;
19197 +      if eof then do ;
19198 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19199 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19200 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19201 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19202 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19203 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19204 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19205 +      end;
19206 +    run;
19208 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19209 +      data &EM_USER_OUTSEQ;
19210 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19211 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19212 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19213 +           _XMISC_=_VMISC_
19214 +        %end;
19215 +        %if "&em_tree_aprof" ne "."  %then %do;
19216 +           _XAPROF_=_VAPROF_
19217 +           _XPROF_ = _VPROF_
19218 +        %end;
19219 +        %if "&em_tree_aloss" ne "."  %then %do;
19220 +           _XALOSS_=_VALOSS_
19221 +        %end;
19222 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19223 +           _XPASE_ = _VPASE_
19224 +           _XPMISC_ = _VPMISC_
19225 +        %end;
19227 +        ));
19228 +     %end;
19229 +     %else %do;
19230 +        set &EM_USER_OUTSEQ;
19231 +     %end;
19233 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19234 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19235 +            _MISC_   15.&EM_PROPERTY_PRECISION
19236 +         %end;
19237 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19238 +            _PASE_  15.&EM_PROPERTY_PRECISION
19239 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19240 +         %end;
19241 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19242 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19243 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19244 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19245 +            %end;
19246 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19247 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19248 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19249 +            %end;
19250 +         %end;
19251 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19252 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19253 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19254 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19255 +            %end;
19256 +         %end;
19257 +         %if "&em_tree_seq" ne "." %then %do;
19258 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19259 +         %end;
19260 +         %if "&em_tree_vseq" ne "." %then %do;
19261 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19262 +         %end;
19263 +         %if "&em_tree_aprof" ne "." %then %do;
19264 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19265 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19266 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19267 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19268 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19269 +           %end;
19270 +         %end;
19271 +         %else %if "&em_tree_aloss" ne "." %then %do;
19272 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19273 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19274 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19275 +           %end;
19276 +         %end;
19277 +      ;
19278 +    run;
19279 +   %end;
19281 +   /* Observation Based Importance */
19282 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19284 +      /* need to check for 0 obs */
19285 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19286 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19287 +      %let rc=%sysfunc(close(&dsid));
19289 +      %if &onobs %then %do;
19290 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19291 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19293 +         data &EM_USER_OUTOBSIMP;
19294 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19295 +           if _a;
19296 +           by _INPUT1_;
19297 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19298 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19299 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19300 +                   %end;
19301 +                   ;
19302 +         run;
19303 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19304 +      %end;
19305 +   %end;
19307 +  %end;
19309 +  /* create dataset to support tree diagram and icicle plot */
19310 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19311 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19313 +  /* display tree diagram */
19314 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19315 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19317 +  /* display icicle diagram */
19318 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19319 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19321 +  /* Leaf Statistics Plot */
19322 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19324 +  /* print leaf information to output window */
19325 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19327 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19328 +       by descending N;
19329 +     run;
19331 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19332 +     %local vn;
19333 +     data _null_;
19334 +       set t (obs=2) end=eof;
19335 +       if eof then do;
19336 +         call symput("vn", strip(put(vn, best.)));
19337 +       end;
19338 +     run;
19340 +     data t;
19341 +       set t;
19342 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19343 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19344 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19345 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19346 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19347 +       %end;
19348 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19349 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19350 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19351 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19352 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19353 +          %end;
19354 +       %end;
19355 +       ;
19356 +     run;
19358 +     /* determine if rase is found in t */
19359 +    %let dsid=%sysfunc(open(t,i));
19360 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19361 +    %let rc=%sysfunc(close(&dsid));
19363 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19364 +     proc print data=t noobs label;
19365 +       where tprob ne .;
19366 +       var node depth N tprob
19367 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19368 +         %if "&vn" ne "." %then %do;
19369 +           VN
19370 +         %end;
19371 +         vprob
19372 +       %end;
19373 +       %if &raseexists %then %do;
19374 +            RASE
19375 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19376 +              VRASE
19377 +            %end;
19378 +       %end;
19379 +       ;
19380 +     run;
19381 +     title10;
19382 +  %end;
19384 +  /* create plots that are done during training of node */
19385 +  /* display iterative plot, including reference line */
19386 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19387 +   /* %if &nleaves eq  %then %do; */
19388 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19389 +      data _null_;
19390 +        set &EM_USER_OUTTOPOLOGY end=eof;
19391 +        if eof then do;
19392 +          call symput('nleaves', LEAF);
19393 +        end;
19394 +      run;
19395 +   /* %end; */
19397 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19398 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19399 +  %end;
19401 +  /* display leaf statistics */
19402 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19404 +  /* stats by node if multiple targets = Y */
19405 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19406 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19407 +    data &EM_USER_OUTSTATS;
19408 +      set &EM_USER_OUTSTATS;
19410 +     * if STATNAME="TARGET" then delete;
19411 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19412 +      drop leaf;
19413 +    run;
19414 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19416 +  %end;
19417 +  %else %do;
19418 +    /* add outstats and outdescribe to spk but not results */
19419 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19420 +  %end;
19422 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 32 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: The data set EMWS5.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 370 observations read from the data set EMWS5.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 189 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 162 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 189 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 54 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 27 observations read from the data set WORK.TEMPN.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 27 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19423
19424  *------------------------------------------------------------*;
19425  * End REPORT: Tree;
19426  *------------------------------------------------------------*;
 
19427  /* Reset EM Options */
19428  options formchar="|----|+|---+=|-/\<>*";
19429  options nocenter ls=256 ps=10000;
19430  goptions reset=all device=GIF NODISPLAY;
 
19431  proc sort data=WORK.EM_USER_REPORT;
19432  by ID VIEW;
19433  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19434  proc sort data=EMWS5.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19435  by NAME;
19436  run;
 
NOTE: There were 14 observations read from the data set EMWS5.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19437  proc sort data=EMWS5.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19438  by NAME;
19439  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19440  data WORK.ASSESS_META;
19441  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19442  by NAME;
19443  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19444  data EM_temp_assessMeta;
19445  set EMWS5.Tree_CMeta_TRAIN;
19446  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19447  run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19448  data EM_temp_assessdata;
19449  set EMWS5.Tree_TRAIN(keep=
19450  F_TargetBuy
19451  I_TargetBuy
19452  P_TargetBuy0
19453  P_TargetBuy1
19454  Q_TargetBuy0
19455  Q_TargetBuy1
19456  R_TargetBuy0
19457  R_TargetBuy1
19458  U_TargetBuy
19459  V_TargetBuy0
19460  V_TargetBuy1
19461  _WARN_
19462  TargetBuy
19463  );
19464  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 14445 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23749   data EM_temp_assessMeta;
23750   set EMWS5.Tree_CMeta_TRAIN;
23751   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23752   run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23753   data EM_temp_assessdata;
23754   set EMWS5.Tree_VALIDATE(keep=
23755   F_TargetBuy
23756   I_TargetBuy
23757   P_TargetBuy0
23758   P_TargetBuy1
23759   Q_TargetBuy0
23760   Q_TargetBuy1
23761   R_TargetBuy0
23762   R_TargetBuy1
23763   U_TargetBuy
23764   V_TargetBuy0
23765   V_TargetBuy1
23766   _WARN_
23767   TargetBuy
23768   );
23769   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 7778 observations read from the data set EMWS5.PART_VALIDATE.
NOTE: There were 7778 observations read from the data set EMWS5.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7778 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28063   %let _cn = %sysfunc(getoption(CENTER));
28064   options nocenter;
28065   proc print data=EMWS5.Tree_EMREPORTFIT noobs label;
28066   var STAT LABEL TRAIN
28067   VALIDATE
28068   ;
28069   by TARGET TARGETLABEL;
28070   title9 ' ';
28071   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28072   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28073   title10;
28074   options &_cn;
 
28075   proc sort data=EMWS5.Tree_EMCLASSIFICATION nothreads;
28076   by DATAROLE TARGET TARGETLABEL;
28077   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28078   %let _cn = %sysfunc(getoption(CENTER));
28079   options nocenter;
28080   proc print data=EMWS5.Tree_EMCLASSIFICATION noobs label;
28081   var from into pct_row pct_col count percent
28082   ;
28083   by DATAROLE TARGET TARGETLABEL;
28084   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28085   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28086   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28087   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28088   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28089   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28090   where _TYPE_='PREDICTION';
28091   title9 ' ';
28092   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28093   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28094   title9;
28095   title10;
28096   options &_cn;
 
28097   %let _cn = %sysfunc(getoption(CENTER));
28098   options nocenter;
28099   data EMWS5.Tree_EMEVENTREPORT;
28100   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28100 !  8;
28101   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28101 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28101 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28101 ! FALSEEVENT
28102   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28102 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28102 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28103      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28104   FALSEEVENT=0;
28105   FALSENEVENT=0;
28106   TRUEEVENT=0;
28107   TRUENEVENT=0;
28108   set EMWS5.Tree_EMEVENTREPORT;
28109   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28110   proc print data=EMWS5.Tree_EMEVENTREPORT noobs label;
28111   title9 ' ';
28112   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28113   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28114   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28115   title10;
28116   options &_cn;
 
28117   proc datasets library=EMWS5 nolist;
28118   modify Tree_EMRANK;
28119   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28120   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28121   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMRANK.DATA.
28122   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
28123   %let _cn = %sysfunc(getoption(CENTER));
28124   options nocenter;
28125   proc print data=EMWS5.Tree_EMRANK label noobs;
28126   var
28127   decile gain lift liftc resp respc N _meanP_;
28128   by
28129   notsorted DATAROLE
28130   notsorted TARGET
28131   notsorted TARGETLABEL
28132   ;
28133   title9 ' ';
28134   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28135   run;
 
NOTE: There were 40 observations read from the data set EMWS5.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28136   title10;
28137   options &_cn;
 
28138   proc datasets library=EMWS5 nolist;
28139   modify Tree_EMSCOREDIST;
28140   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28141   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28142   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMSCOREDIST.DATA.
28143   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
