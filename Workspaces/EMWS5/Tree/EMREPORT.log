*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                11:41:32
*------------------------------------------------------------*
17951  data EMWS5.Tree_EMOUTFIT;
17952  set EMWS5.Tree_EMOUTFIT;
17953  length TargetLabel $200;
17954  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17955  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
17956  run;

NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

17957  proc sort data=EMWS5.Tree_EMREPORTFIT nothreads;
17958  by TARGET;
17959  run;

NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The data set EMWS5.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

17960  %let _EMwarndup = 0;
17961  %let _EMtargetdup =;
17962  %let _EMASEtargetdup =;
17963  data _null_;
17964  set EMWS5.Tree_EMOUTFIT;
17965  if .<_ASE_<0.000001 then do;
17966  call symput('_EMwarndup', '1');
17967  call symput('_EMtargetdup', target);
17968  call symput('_EMASEtargetdup', put(_ASE_, best.));
17969  end;
17970  run;

NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

17971  %let EMEXCEPTIONSTRING=;
17972  *------------------------------------------------------------*;
17973  * REPORT: Tree;
17974  *------------------------------------------------------------*;
17975  %let EM_ACTION = REPORT;
17976  %let syscc = 0;
17977  %macro main;
17978  
17979    %if %upcase(&EM_ACTION) = CREATE %then %do;
17980      filename temp catalog 'sashelp.emmodl.tree_create.source';
17981      %include temp;
17982      filename temp;
17983  
17984      %em_tree_create;
17985    %end;
17986  
17987     %else
17988     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17989  
17990         filename temp catalog 'sashelp.emmodl.tree_train.source';
17991         %include temp;
17992         filename temp;
17993         %em_tree_train;
17994     %end;
17995  
17996    %else
17997    %if %upcase(&EM_ACTION) = SCORE %then %do;
17998      filename temp catalog 'sashelp.emmodl.tree_score.source';
17999      %include temp;
18000      filename temp;
18001  
18002      %em_tree_score;
18003  
18004    %end;
18005  
18006    %else
18007    %if %upcase(&EM_ACTION) = REPORT %then %do;
18008  
18009         filename temp catalog 'sashelp.emmodl.tree_report.source';
18010         %include temp;
18011         filename temp;
18012  
18013         %em_tree_report;
18014     %end;
18015  
18016    %else
18017    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18018  
18019         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18020         %include temp;
18021         filename temp;
18022         %EM_TREE_OPENTREEVIEWER;
18023  
18024     %end;
18025  
18026    %else
18027    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18028  
18029         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18030         %include temp;
18031         filename temp;
18032         %EM_TREE_CLOSETREEVIEWER;
18033  
18034     %end;
18035  
18036  
18037     %doendm:
18038  %mend main;
18039  
18040  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18042 +%macro em_tree_makePlotDs( multipleTar= );
18044 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18045 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18046 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18047 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18049 +  /* determine if validation statistics will be displayed */
18050 +  %let validflag=N;
18051 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18052 +    /* determine if validation data exists */
18053 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18054 +      %let validflag=Y;
18055 +    %end;
18056 +  %end;
18058 +   /* retrieve name of decmeta even in presence of multiple targets */
18059 +   %let decmeta = ;
18060 +   %if &EM_DEC_DECMETA eq %then %do;
18061 +     data _Target;
18062 +       set &em_data_variableset;
18063 +       where ROLE='TARGET' and USE in('D', 'Y');
18064 +       keep NAME;
18065 +     run;
18066 +     proc sort data=_Target;
18067 +       by NAME;
18068 +     run;
18069 +     proc sort data=EM_TARGETDECINFO;
18070 +       by TARGET;
18071 +     run;
18072 +     data _Target;
18073 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18074 +       by NAME;
18075 +       if _a then do;
18076 +         call symput('decmeta', trim(DECMETA));
18077 +       end;
18078 +     run;
18079 +     proc delete data=_Target;run;
18080 +   %end;
18081 +   %else %let decmeta = &EM_DEC_DECMETA;
18084 +  /* retrieve targetEvent from decmeta */
18085 +  %let targetEvent=;
18086 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18087 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18088 +      data _null_;
18089 +       set &DECMETA(where=(_TYPE_="TARGET"));
18090 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18091 +      run;
18092 +    %end;
18093 +  %end;
18095 +  /* retrieve predicted var for targetEvent from decmeta */
18096 +  %let predTarget=;
18097 +  %let predLvl=;
18098 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18099 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18100 +      data _null_;
18101 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18102 +       call symput('predTarget', strip(VARIABLE));
18103 +       call symput('predLvl', strip(LEVEL));
18104 +      run;
18105 +    %end;
18106 +  %end;
18107 +  %else %do;
18108 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18109 +      data _null_;
18110 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18111 +       call symput('predTarget', strip(VARIABLE));
18112 +      run;
18113 +    %end;
18114 +  %end;
18116 +  /* create BelowText value */
18117 +  data belowtext;
18118 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18119 +    keep node belowtext;
18120 +  run;
18122 +  /* relace belowtext with variable label if it exists */
18123 +  data belowtext2;
18124 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18125 +    keep node belowtextlbl;
18126 +  run;
18128 +  proc sort data=belowtext; by node; run;
18129 +  proc sort data=belowtext2; by node; run;
18131 +  data belowtext;
18132 +    merge belowtext belowtext2(in=_a);
18133 +    by node;
18134 +    if _a then belowtext=belowtextlbl;
18135 +    keep node belowtext;
18136 +  run;
18138 +  /* create AboveText value */
18139 +  data abovetext;
18140 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18141 +  run;
18142 +  proc sort data=abovetext; by node numeric_value; run;
18144 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18145 +  data abovetext;
18146 +    set abovetext(rename=(node=parent));
18147 +    by parent numeric_value;
18148 +    retain abovetext tempstring flag branch origval origchar ;
18149 +    length abovetext $256;
18150 +    length tempstring origchar $64;
18152 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18153 +      if first.parent then do;
18154 +        if missing(character_value) then do;
18155 +          numeric_value = round(numeric_value, &sp_precision);
18156 +          abovetext = "< "||strip(NUMERIC_VALUE);
18157 +          branch = 1;
18158 +          origval = numeric_value;
18159 +          output;
18160 +        end;
18161 +        else do;
18162 +          abovetext = "< "||strip(CHARACTER_VALUE);
18163 +          branch = 1;
18164 +          origchar = character_value;
18165 +          output;
18166 +        end;
18168 +        if first.parent AND last.parent then do;
18169 +          if missing(character_value) then do;
18170 +            numeric_value = round(numeric_value, &sp_precision);
18171 +            branch = branch + 1;
18172 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18173 +            output;
18174 +          end;
18175 +          else do;
18176 +            branch = branch + 1;
18177 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18178 +            output;
18179 +          end;
18180 +        end;
18181 +      end;
18182 +      else if last.parent then do;
18183 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18184 +          if missing(character_value) then do;
18185 +            numeric_value = round(numeric_value, &sp_precision);
18186 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18187 +          end;
18188 +          else do;
18189 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18190 +          end;
18191 +          branch = branch + 1;
18192 +          output;
18194 +          if missing(character_value) then do;
18195 +            numeric_value = round(numeric_value, &sp_precision);
18196 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18197 +          end;
18198 +          else do;
18199 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18200 +          end;
18201 +          branch = branch + 1;
18202 +          output;
18203 +        end;
18204 +        else do;
18205 +          if missing(character_value) then do;
18206 +            numeric_value = round(numeric_value, &sp_precision);
18207 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18208 +          end;
18209 +          else do;
18210 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18211 +          end;
18212 +          branch = branch + 1;
18213 +          output;
18214 +        end;
18215 +      end;
18216 +      else do;
18217 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18218 +          if missing(character_value) then do;
18219 +            numeric_value = round(numeric_value,&sp_precision);
18220 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18221 +            origval = numeric_value;
18222 +          end;
18223 +          else do;
18224 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18225 +            origchar = character_value;
18226 +          end;
18227 +          branch = branch + 1;
18228 +          output;
18230 +        end;
18231 +        else do;
18232 +          if missing(character_value) then do;
18233 +            numeric_value = round(numeric_value, &sp_precision);
18234 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18235 +            origval = numeric_value;
18236 +          end;
18237 +          else do;
18238 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18239 +            origval = character_value;
18240 +          end;
18241 +          branch = branch + 1;
18242 +          output;
18243 +        end;
18244 +      end;
18245 +    end;
18246 +    else do;
18247 +       if first.numeric_value then do;
18248 +         flag = 0;
18249 +         abovetext = strip(CHARACTER_VALUE);
18250 +         branch = numeric_value;
18251 +         if first.numeric_value AND last.numeric_value then do;
18252 +           output;
18253 +         end;
18254 +       end;
18255 +       else if last.numeric_value then do;
18256 +         if flag=0 then do;
18257 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18258 +           length = length(strip(tempstring));
18259 +           if length < 32 then do;
18260 +             abovetext = strip(tempstring);
18261 +           end;
18262 +           else do;
18263 +             abovetext = strip(abovetext)||", ...";
18264 +             flag = 1;
18265 +           end;
18266 +         end;
18267 +         branch = numeric_value;
18268 +         output;
18269 +       end;
18270 +       else do;
18271 +         if flag=0 then do;
18272 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18273 +           length = length(strip(tempstring));
18274 +           if length < 32 then do;
18275 +             abovetext = strip(tempstring);
18276 +           end;
18277 +           else do;
18278 +             abovetext = strip(abovetext)||", ...";
18279 +             flag=1;
18280 +           end;
18281 +         end;
18282 +         branch = numeric_value;
18283 +       end;
18284 +    end;
18285 +    keep parent branch abovetext;
18286 +  run;
18288 +  /* MIssing value to abovetext */
18289 +  data tempmissing;
18290 +    set &EM_USER_OUTRULES;
18291 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18292 +    rename node=parent numeric_value=branch character_value=misschar;
18293 +  run;
18296 +  proc sort data=abovetext; by parent branch; run;
18297 +  proc sort data=tempmissing; by parent branch; run;
18298 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18300 +  data tempoutnodes;
18301 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18302 +    by parent branch;
18303 +    length traintotal validtotal 8;
18304 +    retain traintotal validtotal;
18306 +    if _a then do;
18307 +      if ^MISSING(abovetext) then do;
18308 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18309 +      end;
18310 +      else do;
18311 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18312 +      end;
18313 +    end;
18314 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18316 +    if node=1 then do;
18317 +      traintotal = N;
18318 +      validtotal=VN;
18319 +    end;
18321 +    drop role rank stat misschar belowtext;
18322 +  run;
18323 +  proc sort data=tempoutnodes; by node; run;
18324 +  proc sort data=belowtext; by node; run;
18326 +  data tempoutnodes;
18327 +    merge tempoutnodes belowtext;
18328 +    by node;
18330 +  run;
18332 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18333 +  %let adjusted = N;
18334 +  %let npriors = 0;
18335 +  data _null_ ;
18336 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18337 +    if eof then do ;
18338 +      call symput("npriors" , strip(put(_N_,best.))) ;
18339 +    end;
18340 +  run;
18341 +  %if &npriors gt 0 %then %let adjusted=Y;
18344 +  /* create a table with targetUsed and targetLevel columns for each node */
18345 +  data temptarmeta;
18346 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18347 +    %if &multipleTar eq N %then %do;
18348 +      AND USE in ('D', 'Y')
18349 +    %end;
18350 +    ));
18351 +    length TARGET $32;
18352 +    Target=name;
18353 +    keep target level;
18354 +  run;
18356 +  %if &multipleTar eq Y %then %do;
18357 +    data temptargetused;
18358 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18359 +      keep node target;
18360 +    run;
18361 +    proc sort data=temptargetused; by target; run;
18362 +    proc sort data=temptarmeta; by target; run;
18363 +    data temptargetused;
18364 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18365 +      by target;
18366 +      if _a and _b;
18367 +    run;
18368 +  %end;
18369 +  %else %do;
18370 +    data temptargetused;
18371 +      set &EM_USER_OUTSTATS;
18372 +      length target $32 tarlevel $10;
18373 +      target="%EM_TARGET";
18374 +      tarlevel="%EM_TARGET_LEVEL";
18375 +      keep node target tarlevel;
18376 +    run;
18377 +    proc sort data=temptargetused nodupkey; by node; run;
18378 +  %end;
18380 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18381 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18382 +  proc sort data=temptargetused; by node; run;
18385 +  /* create tables for all interval targets as well as all class targets */
18386 +  data tempinterval tempclass;
18387 +    merge tempoutstats temptargetused( rename=(target=targetused));
18388 +    by node;
18389 +    %if "&multipleTar" eq "Y" %then %do;
18390 +      if ((missing(Target)) OR (target=targetused ));
18391 +    %end;
18393 +    if tarlevel="INTERVAL" then output tempinterval;
18394 +    else output tempclass;
18395 +  run;
18397 +  /* iniitalize intTarget and classTarget flags */
18398 +  %let em_intNobs =0;
18399 +  %let em_classNobs = 0;
18400 +  %let em_intTarget= N;
18401 +  %let em_classTarget= N;
18403 +  proc sql;
18404 +    reset noprint;
18405 +    select count(*) into :em_intNobs from tempinterval;
18406 +  quit;
18407 +  proc sql;
18408 +    reset noprint;
18409 +    select count(*) into :em_classNobs from tempclass;
18410 +  quit;
18412 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18413 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18415 +  /* retrieve all information for interval targets */
18416 +  %if &em_intTarget eq Y %then %do;
18418 +    /* determine if leaf variable exists */
18419 +    %let dsid=%sysfunc(open(tempinterval,i));
18420 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18421 +    %let rc=%sysfunc(close(&dsid));
18423 +    proc transpose data=tempinterval
18424 +      %if &leafexists %then %do;
18425 +        (drop=leaf)
18426 +      %end;
18427 +      %if &validexist %then %do;
18428 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18429 +      %end;
18430 +      %else %do;
18431 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18432 +      %end;
18433 +      by node;
18434 +      id statname;
18435 +    run;
18436 +    data tempinterval;
18437 +      set tempinterval;
18438 +      if missing(N) then delete;
18439 +    run;
18440 +  %end;
18442 +  /* retrieve all information for class targets */
18443 +  %if &em_classTarget eq Y %then %do;
18444 +    proc sort data=tempclass; by node category; run;
18445 +    %if &validflag eq N %then %do;
18446 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18447 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18448 +    %end;
18449 +    %else %do;
18450 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18451 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18452 +    %end;
18453 +      set tempclass;
18455 +      %if &validflag eq N %then %do;
18456 +        %if "&adjusted" eq "N" %then %do;
18457 +          if statname="N" then output tempn;
18458 +        %end;
18459 +        %else %do;
18460 +          if statname="NPRIORS" then output tempn;
18461 +        %end;
18462 +        else if statname="PREDICTION" then output temppredict;
18463 +        else if statname="PROBABILITY" then output tempprob;
18464 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18465 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18466 +      %end;
18467 +      %else %do;
18468 +        %if "&adjusted" eq "N" %then %do;
18469 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18470 +        %end;
18471 +        %else %do;
18472 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18473 +        %end;
18474 +        else if statname="PREDICTION" then output temppredict;
18475 +        else if statname="PROBABILITY" then output tempprob;
18476 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18477 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18478 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18479 +      %end;
18480 +    run;
18483 +    /* determine if profit/loss exists in tempprofit */
18484 +    %let em_profitflag=0;
18485 +    %let em_lossflag=0;
18486 +    proc sql;
18487 +      reset noprint;
18488 +      select count(*) into :em_profitflag from tempprofit;
18489 +    quit;
18490 +    proc sql;
18491 +      reset noprint;
18492 +      select count(*) into :em_lossflag from temploss;
18493 +    quit;
18495 +    %if &validFlag eq Y %then %do;
18496 +      proc transpose data=tempn
18497 +        %if "&adjusted" eq "N" %then %do;
18498 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18499 +        %end;
18500 +        %else %do;
18501 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18502 +        %end;
18503 +        by node;
18504 +        id statname;
18505 +      run;
18506 +      %if &em_profitflag ne 0 %then %do;
18507 +        proc transpose data=tempprofit out=tempprofit;
18508 +          by node category;
18509 +          id statname ;
18510 +        run;
18511 +      %end;
18512 +      %if &em_lossflag ne 0 %then %do;
18513 +        proc transpose data=temploss out=temploss;
18514 +          by node category;
18515 +          id statname ;
18516 +        run;
18517 +      %end;
18518 +      data tempprob;
18519 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18520 +        by node
18521 +        %if &multipleTar eq Y %then %do;
18522 +          target
18523 +        %end;
18524 +        category;
18525 +      run;
18526 +    %end;
18528 +    /* store percentcorrect value */
18529 +    data temppredict;
18530 +      merge tempprob temppredict(in=_a);
18531 +      by node category;
18532 +      if _a then do;
18533 +        percentCorrect = statvalue;
18534 +        %if &validFlag eq Y %then %do;
18535 +          vpercentCorrect= vstatvalue;
18536 +        %end;
18537 +      end;
18538 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18539 +      %if &validFlag eq Y %then %do;
18540 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18541 +      %end;
18542 +      ;
18543 +      if missing(percentCorrect) then delete;
18544 +      drop target;
18545 +    run;
18547 +    /* build profittext */
18548 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18549 +      data tempprofittext(keep= node profittext profitloss);
18550 +        length profittext $800 profitloss 8.;
18551 +        retain profittext profitloss;
18553 +        merge tempprob
18554 +        %if &em_profitflag ne 0 %then %do;
18555 +          tempprofit
18556 +        %end;
18557 +        %else %if &em_lossflag ne 0 %then %do;
18558 +          temploss
18559 +        %end;
18560 +        ;
18561 +        by node category;
18563 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18564 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18565 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18566 +          %let profittype = ALL;
18567 +        %end;
18569 +        /* create the profitloss variable for nodecolor if selected */
18570 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18572 +        %if "&profittype" eq "ALL" %then %do;
18573 +          if strip(CATEGORY)="&targetEvent" then do;
18574 +            profitloss=statvalue;
18575 +          end;
18576 +          if first.node then do;
18577 +            %if &validFlag eq N %then %do;
18578 +             %if &em_profitflag ne 0 %then %do;
18579 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18580 +             %end;
18581 +             %if &em_lossflag ne 0 %then %do;
18582 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18583 +             %end;
18584 +            %end;
18585 +            %else %do;
18586 +             %if &em_profitflag ne 0 %then %do;
18587 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18587!+;
18588 +             %end;
18589 +             %if &em_lossflag ne 0 %then %do;
18590 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18591 +             %end;
18592 +            %end;
18593 +          end;
18594 +          else if last.node then do;
18595 +            %if &validFlag eq N %then %do;
18596 +             %if &em_profitflag ne 0 %then %do;
18597 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18598 +             %end;
18599 +             %if &em_lossflag ne 0 %then %do;
18600 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18601 +             %end;
18602 +             /*if CATEGORY="&targetEvent" then do;
18603 +               profitloss=statvalue;
18604 +             end;*/
18605 +            %end;
18606 +            %else %do;
18607 +             %if &em_profitflag ne 0 %then %do;
18608 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18608!+14.&EM_PROPERTY_SPLITPRECISION);
18609 +                if CATEGORY="&targetEvent" then do;
18610 +                 profitloss=ALTERNATIVE_PROFIT;
18611 +                end;
18612 +             %end;
18613 +             %if &em_lossflag ne 0 %then %do;
18614 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18614!+14.&EM_PROPERTY_SPLITPRECISION);
18615 +                if CATEGORY="&targetEvent" then do;
18616 +                  profitloss=ALTERNATIVE_LOSS;
18617 +                end;
18618 +             %end;
18619 +            %end;
18620 +            output;
18621 +          end;
18622 +          else do;
18623 +            %if &validFlag eq N %then %do;
18624 +             %if &em_profitflag ne 0 %then %do;
18625 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18626 +             %end;
18627 +             %if &em_lossflag ne 0 %then %do;
18628 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18629 +             %end;
18630 +            %end;
18631 +            %else %do;
18632 +             %if &em_profitflag ne 0 %then %do;
18633 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18633!+14.&EM_PROPERTY_SPLITPRECISION);
18634 +             %end;
18635 +             %if &em_lossflag ne 0 %then %do;
18636 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18636!+14.&EM_PROPERTY_SPLITPRECISION);
18637 +             %end;
18638 +            %end;
18639 +          end;
18640 +        %end;
18641 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18642 +          if strip(CATEGORY) = "&targetevent" then do;
18643 +            %if &validFlag eq N %then %do;
18644 +             %if &em_profitflag ne 0 %then %do;
18645 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18646 +             %end;
18647 +             %if &em_lossflag ne 0 %then %do;
18648 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18649 +             %end;
18650 +             profitloss=statvalue;
18651 +            %end;
18652 +            %else %do;
18653 +             %if &em_profitflag ne 0 %then %do;
18654 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18654!+;
18655 +                profitloss=ALTERNATIVE_PROFIT;
18656 +             %end;
18657 +             %if &em_lossflag ne 0 %then %do;
18658 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18659 +                profitloss=ALTERNATIVE_LOSS;
18660 +             %end;
18661 +            %end;
18662 +            output;
18663 +          end;
18664 +        %end;
18665 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18666 +          if strip(CATEGORY) = "&targetevent" then do;
18667 +            %if &validFlag eq N %then %do;
18668 +             profitloss=statvalue;
18669 +            %end;
18670 +            %else %do;
18671 +             %if &em_profitflag ne 0 %then %do;
18672 +                profitloss=ALTERNATIVE_PROFIT;
18673 +             %end;
18674 +             %if &em_lossflag ne 0 %then %do;
18675 +                profitloss=ALTERNATIVE_LOSS;
18676 +             %end;
18677 +            %end;
18678 +            output;
18679 +          end;
18680 +        %end;
18681 +      run;
18682 +    %end;
18684 +    data tempprob(keep= node probtext);
18685 +      length probtext $800;
18686 +      retain probtext;
18687 +      set tempprob ;
18688 +      by node;
18690 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18691 +      %let probtype = &EM_PROPERTY_TARGET;
18692 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18693 +        %let probtype = ALL;
18694 +      %end;
18696 +      %if "&probtype" eq "ALL" %then %do;
18697 +        if first.node then do;
18698 +          %if &validFlag eq N %then %do;
18699 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18700 +          %end;
18701 +          %else %do;
18702 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18703 +          %end;
18704 +        end;
18705 +        else if last.node then do;
18706 +          %if &validFlag eq N %then %do;
18707 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18708 +          %end;
18709 +          %else %do;
18710 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18711 +          %end;
18712 +          output;
18713 +        end;
18714 +        else do;
18715 +          %if &validFlag eq N %then %do;
18716 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18717 +          %end;
18718 +          %else %do;
18719 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18720 +          %end;
18721 +        end;
18722 +      %end;
18723 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18724 +        if strip(CATEGORY) = "&targetevent" then do;
18725 +          %if &validFlag eq N %then %do;
18726 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18727 +          %end;
18728 +          %else %do;
18729 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18730 +          %end;
18731 +          output;
18732 +        end;
18733 +      %end;
18734 +      %else %if "&probtype" eq "NONE" %then %do;
18735 +        if last.node then do;
18736 +          output;
18737 +        end;
18738 +      %end;
18739 +    run;
18740 +  %end;
18742 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18744 +  %let oldexists=0;
18745 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18746 +     data old_tree_plot;
18747 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18748 +        rename nodecolor=oldnodecolor;
18749 +     run;
18751 +     proc sort data=old_tree_plot;
18752 +        by node;
18753 +     run;
18755 +     %let oldexists=1;
18756 +  %end;
18758 +  data &EM_USER_TREE_PLOT;
18759 +    length textall $800;
18760 +    merge tempoutnodes temptargetused
18762 +    %if &em_intTarget eq Y %then %do;
18763 +      tempinterval
18764 +    %end;
18766 +    %if &em_classTarget eq Y %then %do;
18768 +      %if &validFlag eq N %then %do;
18769 +        tempn(rename=(statvalue=N))
18770 +      %end;
18771 +      %else %do;
18772 +        tempn
18773 +      %end;
18775 +      temppredict tempprob
18777 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18778 +        tempprofittext
18779 +      %end;
18780 +    %end;
18781 +    ;
18782 +    by node;
18784 +    /* build nodetext based on user selection */
18785 +    textall="";
18787 +    %if &em_intTarget eq Y %then %do;
18788 +    if tarlevel="INTERVAL" then do;
18789 +      /* Nodeid */
18790 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18791 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18792 +      %end;
18794 +      /* Target identifier if multiple targets are used */
18795 +      %if "&multipleTar" eq "Y" %then %do;
18796 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18797 +      %end;
18799 +      %if &validFlag eq Y %then %do;
18800 +         /* Column labels displayed in validflag eq Y only */
18801 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18802 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18802!+noquote ))";
18803 +         %end;
18805 +         /* Average values */
18806 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18807 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18808 +         %end;
18810 +         /* RASE */
18811 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18812 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18813 +         %end;
18815 +         /* Count */
18816 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18817 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18818 +         %end;
18819 +      %end;
18820 +      %else %do;
18821 +         /* Average values */
18822 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18823 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18824 +         %end;
18826 +         /* RASE */
18827 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18828 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18829 +         %end;
18831 +         /* Count */
18832 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18833 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18834 +         %end;
18835 +      %end;
18837 +      /* nodecolor */
18838 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18839 +        nodecolor=PREDICTION;
18840 +      %end;
18841 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18842 +        nodecolor=RASE;
18843 +      %end;
18844 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18845 +        nodecolor=1;
18846 +      %end;
18848 +    end;
18849 +    %end;
18850 +    %if &em_classTarget eq Y %then %do;
18851 +    if tarlevel^="INTERVAL" then  do;
18853 +      /* Nodeid */
18854 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18855 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18856 +      %end;
18857 +      /* Target identifier if multiple targets are used */
18858 +      %if "&multipleTar" eq "Y" %then %do;
18859 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18860 +      %end;
18862 +      /* Predicted values */
18863 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18864 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18865 +      %end;
18867 +      /* Column labels displayed in validflag eq Y only */
18868 +      %if "&ValidFlag" eq "Y" %then %do;
18869 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18870 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18870!+noquote ))";
18871 +        %end;
18872 +      %end;
18874 +      /* Target Values */
18875 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18876 +        textall=strip(textall)||"0A"x||strip(probtext);
18877 +      %end;
18879 +      /* include profit or loss for all target levels */
18880 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18881 +        textall=strip(textall)||"0A"x||strip(profittext);
18882 +      %end;
18884 +      %if &validFlag eq N %then %do;
18885 +        /* Percent Correct */
18886 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18887 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18888 +        %end;
18890 +         /* Count */
18891 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18892 +          %if "&adjusted" eq "N" %then %do;
18893 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18894 +          %end;
18895 +          %else %do;
18896 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18897 +          %end;
18898 +         %end;
18899 +      %end;
18900 +      %else %do;
18901 +        /* Percent Correct */
18902 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18903 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18904 +        %end;
18906 +         /* Count */
18907 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18908 +          %if "&adjusted" eq "N" %then %do;
18909 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18910 +          %end;
18911 +          %else %do;
18912 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18913 +          %end;
18914 +         %end;
18915 +      %end;
18917 +      /* nodecolor */
18918 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18919 +       %if &multipleTar ne Y %then %do;
18920 +        nodecolor=&predTarget;
18921 +       %end;
18922 +       %else %do;
18923 +         nodecolor=percentcorrect;
18924 +       %end;
18925 +      %end;
18926 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18927 +        nodecolor=percentcorrect;
18928 +      %end;
18929 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18930 +        nodecolor=1;
18931 +      %end;
18932 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18933 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18934 +          nodecolor=percentcorrect;
18935 +        %end;
18936 +        %else %do;
18937 +          nodecolor=profitloss;
18938 +        %end;
18939 +      %end;
18941 +    end;
18942 +    %end;
18943 +    %if &em_intTarget eq Y %then %do;
18944 +     drop  PREDICTION  TARGET TARLEVEL
18945 +     %if &ValidFlag eq Y %then %do;
18946 +         VPREDICTION
18947 +     %end;
18948 +     ;
18949 +    %end;
18950 +    %if &em_classTarget eq Y %then %do;
18951 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18952 +     %if &ValidFlag eq Y %then %do;
18953 +         VSTATVALUE
18954 +     %end;
18955 +     ;
18956 +    %end;
18958 +  run;
18960 +  /* add leaf index information to plotds - based on primary target only*/
18961 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18962 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18963 +      set &EM_USER_OUTSTATS;
18964 +      if ((statname="PROBABILITY"
18965 +      %if &validexist %then %do;
18966 +       or statname="VALID: PROBABILITY"
18967 +      %end;
18968 +      ) AND (CATEGORY="&TARGETEVENT")
18969 +      %if "&multipleTar" eq "Y" %then %do;
18970 +        AND (Target="%EM_TARGET")
18971 +      %end;
18972 +      );
18973 +    run;
18975 +    %if &validexist %then %do;
18976 +      proc sort data=tempprob; by node; run;
18977 +      %let vpredTarget = V%substr(&predTarget, 2);
18978 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18979 +         by node;
18980 +         id statname;
18981 +      run;
18982 +    %end;
18983 +  %end;
18984 +  %else %do;
18985 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18986 +      set &EM_USER_OUTSTATS;
18987 +      if ((statname="PREDICTION"
18988 +      %if &validexist %then %do;
18989 +       or statname="VALID: PREDICTION"
18990 +      %end;
18991 +      )
18992 +      %if "&multipleTar" eq "Y" %then %do;
18993 +        AND (Target="%EM_TARGET")
18994 +      %end;
18995 +      );
18996 +    run;
18997 +    %if &validexist %then %do;
18998 +      proc sort data=tempprob; by node; run;
18999 +      %let vpredTarget = V%substr(&predTarget, 2);
19000 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19001 +         by node;
19002 +         id statname;
19003 +      run;
19004 +    %end;
19005 +  %end;
19007 +  proc sort data=tempprob; by node; run;
19008 +  data tempoutnodes;
19009 +    merge tempoutnodes tempprob;
19010 +    by node;
19011 +  run;
19013 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19014 +  data tempnodes;
19015 +    retain traintotal validtotal;
19016 +    set tempnodes(where=(leaf ne . ));
19017 +    tprob=round(&predTarget, .01);
19018 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19019 +      percevent_train=round(tprob*100, .01);
19020 +    %end;
19021 +    %else %do;
19022 +      percevent_train=tprob;
19023 +    %end;
19025 +    perc_train=round((n/traintotal)*100, 0.01);
19026 +    /* leafwidth already has a *10 multiplier */
19027 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19029 +    %if &validexist %then %do;
19030 +      %let vpredTarget = V%substr(&predTarget,2);
19031 +      vprob=round(&vpredTarget, .01);
19032 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19033 +        percevent_valid=round(vprob*100, .01);
19034 +      %end;
19035 +      %else %do;
19036 +        percevent_valid=vprob;
19037 +      %end;
19038 +      perc_valid=round((vn/validtotal)*100, .01);
19039 +    %end;
19041 +    index=_N_;
19042 +    keep node index tprob perc_train percevent_train
19043 +    %if &validexist %then %do;
19044 +        vprob percevent_valid perc_valid
19045 +    %end;
19046 +    ;
19047 +  run;
19048 +  proc sort data=tempnodes; by node; run;
19049 +  data &EM_USER_TREE_PLOT;
19050 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19051 +    by node;
19052 +    if missing(node) then delete;
19053 +    %if &oldexists %then %do;
19054 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19055 +      drop oldnodecolor;
19056 +    %end;
19057 +    abovetext = compbl(abovetext);
19059 +    /* add variable labels */
19060 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19061 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19062 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19063 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19064 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19065 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19067 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19068 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19069 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19070 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19071 +          %end;
19072 +          %else %do;
19073 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19074 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19075 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19076 +          %end;
19077 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19079 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19080 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19081 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19082 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19083 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19084 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19085 +          %end;
19086 +          %else %do;
19087 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19088 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19089 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19090 +          %end;
19091 +    ;
19092 +  run;
19094 +  /* delete temporary tables */
19095 +  proc datasets lib=work nolist;
19096 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19097 +  run;
19099 +%mend em_tree_makePlotDs;
19103 +%macro em_tree_report;
19105 +   /* report properties */
19106 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19107 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19108 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19109 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19110 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19111 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19112 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19113 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19114 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19115 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19116 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19117 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19118 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19120 +   %let validexist=0;
19121 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19122 +     %let validexist=1;
19123 +   %end;
19125 +   /* determine if multiple targets will be processed */
19126 +   %let em_tree_multipleTargets=N;
19127 +   %let em_tree_numTarget=1;
19128 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19129 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19130 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19131 +         %let em_tree_multipleTargets=N;
19132 +      %end;
19133 +      %else %do;
19134 +        data _null_;
19135 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19136 +          if eof then
19137 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19138 +        run;
19140 +        %if &em_tree_numTarget gt 1 %then %do;
19141 +           %let em_tree_multipleTargets=Y;
19142 +        %end;
19143 +     %end;
19144 +   %end;
19146 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19148 +   /* variable importance */
19149 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19150 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19152 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19153 +     /* and the columns may not be generated                                                                                 */
19154 +     %let em_tree_cvexists=;
19155 +     %let em_tree_surrexists=.;
19156 +     data _null_;
19157 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19158 +       if eof then do ;
19159 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19160 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19161 +       end;
19162 +     run;
19164 +     data &EM_USER_OUTIMPORT;
19165 +         set &EM_USER_OUTIMPORT;
19166 +         /* format columns based on Precison value specified */
19167 +         format importance 15.&EM_PROPERTY_PRECISION
19168 +              %if &validexist %then %do;
19169 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19170 +              %end;
19171 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19172 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19173 +              %end;
19174 +         ;
19175 +     run;
19177 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19178 +     proc print data=&EM_USER_OUTIMPORT
19179 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19180 +          (where=((nrules>0) OR (nsurrogates>0)))
19181 +        %end;
19182 +        %else %do;
19183 +           (where=(nrules>0))
19184 +        %end;
19185 +        label noobs
19186 +        ;
19187 +     run;
19188 +     title10;
19190 +   %end;
19192 +   /* Sequence */
19193 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19194 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19195 +   data _null_ ;
19196 +      set &EM_USER_outseq (obs=2) end=eof ;
19197 +      if eof then do ;
19198 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19199 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19200 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19201 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19202 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19203 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19204 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19205 +      end;
19206 +    run;
19208 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19209 +      data &EM_USER_OUTSEQ;
19210 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19211 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19212 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19213 +           _XMISC_=_VMISC_
19214 +        %end;
19215 +        %if "&em_tree_aprof" ne "."  %then %do;
19216 +           _XAPROF_=_VAPROF_
19217 +           _XPROF_ = _VPROF_
19218 +        %end;
19219 +        %if "&em_tree_aloss" ne "."  %then %do;
19220 +           _XALOSS_=_VALOSS_
19221 +        %end;
19222 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19223 +           _XPASE_ = _VPASE_
19224 +           _XPMISC_ = _VPMISC_
19225 +        %end;
19227 +        ));
19228 +     %end;
19229 +     %else %do;
19230 +        set &EM_USER_OUTSEQ;
19231 +     %end;
19233 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19234 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19235 +            _MISC_   15.&EM_PROPERTY_PRECISION
19236 +         %end;
19237 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19238 +            _PASE_  15.&EM_PROPERTY_PRECISION
19239 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19240 +         %end;
19241 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19242 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19243 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19244 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19245 +            %end;
19246 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19247 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19248 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19249 +            %end;
19250 +         %end;
19251 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19252 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19253 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19254 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19255 +            %end;
19256 +         %end;
19257 +         %if "&em_tree_seq" ne "." %then %do;
19258 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19259 +         %end;
19260 +         %if "&em_tree_vseq" ne "." %then %do;
19261 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19262 +         %end;
19263 +         %if "&em_tree_aprof" ne "." %then %do;
19264 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19265 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19266 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19267 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19268 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19269 +           %end;
19270 +         %end;
19271 +         %else %if "&em_tree_aloss" ne "." %then %do;
19272 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19273 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19274 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19275 +           %end;
19276 +         %end;
19277 +      ;
19278 +    run;
19279 +   %end;
19281 +   /* Observation Based Importance */
19282 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19284 +      /* need to check for 0 obs */
19285 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19286 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19287 +      %let rc=%sysfunc(close(&dsid));
19289 +      %if &onobs %then %do;
19290 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19291 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19293 +         data &EM_USER_OUTOBSIMP;
19294 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19295 +           if _a;
19296 +           by _INPUT1_;
19297 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19298 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19299 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19300 +                   %end;
19301 +                   ;
19302 +         run;
19303 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19304 +      %end;
19305 +   %end;
19307 +  %end;
19309 +  /* create dataset to support tree diagram and icicle plot */
19310 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19311 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19313 +  /* display tree diagram */
19314 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19315 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19317 +  /* display icicle diagram */
19318 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19319 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19321 +  /* Leaf Statistics Plot */
19322 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19324 +  /* print leaf information to output window */
19325 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19327 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19328 +       by descending N;
19329 +     run;
19331 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19332 +     %local vn;
19333 +     data _null_;
19334 +       set t (obs=2) end=eof;
19335 +       if eof then do;
19336 +         call symput("vn", strip(put(vn, best.)));
19337 +       end;
19338 +     run;
19340 +     data t;
19341 +       set t;
19342 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19343 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19344 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19345 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19346 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19347 +       %end;
19348 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19349 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19350 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19351 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19352 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19353 +          %end;
19354 +       %end;
19355 +       ;
19356 +     run;
19358 +     /* determine if rase is found in t */
19359 +    %let dsid=%sysfunc(open(t,i));
19360 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19361 +    %let rc=%sysfunc(close(&dsid));
19363 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19364 +     proc print data=t noobs label;
19365 +       where tprob ne .;
19366 +       var node depth N tprob
19367 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19368 +         %if "&vn" ne "." %then %do;
19369 +           VN
19370 +         %end;
19371 +         vprob
19372 +       %end;
19373 +       %if &raseexists %then %do;
19374 +            RASE
19375 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19376 +              VRASE
19377 +            %end;
19378 +       %end;
19379 +       ;
19380 +     run;
19381 +     title10;
19382 +  %end;
19384 +  /* create plots that are done during training of node */
19385 +  /* display iterative plot, including reference line */
19386 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19387 +   /* %if &nleaves eq  %then %do; */
19388 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19389 +      data _null_;
19390 +        set &EM_USER_OUTTOPOLOGY end=eof;
19391 +        if eof then do;
19392 +          call symput('nleaves', LEAF);
19393 +        end;
19394 +      run;
19395 +   /* %end; */
19397 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19398 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19399 +  %end;
19401 +  /* display leaf statistics */
19402 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19404 +  /* stats by node if multiple targets = Y */
19405 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19406 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19407 +    data &EM_USER_OUTSTATS;
19408 +      set &EM_USER_OUTSTATS;
19410 +     * if STATNAME="TARGET" then delete;
19411 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19412 +      drop leaf;
19413 +    run;
19414 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19416 +  %end;
19417 +  %else %do;
19418 +    /* add outstats and outdescribe to spk but not results */
19419 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19420 +  %end;
19422 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 9 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set EMWS5.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 32 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: The data set EMWS5.TREE_OUTSEQ has 32 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 20 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 370 observations read from the data set EMWS5.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS5.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 189 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 162 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 189 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 189 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 189 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 54 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 27 observations read from the data set WORK.TEMPN.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 27 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      


NOTE: There were 189 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 27 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 27 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 27 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 27 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 14 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 27 observations read from the data set EMWS5.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

19423  
19424  *------------------------------------------------------------*;
19425  * End REPORT: Tree;
19426  *------------------------------------------------------------*;

19427  /* Reset EM Options */
19428  options formchar="|----|+|---+=|-/\<>*";
19429  options nocenter ls=256 ps=10000;
19430  goptions reset=all device=GIF NODISPLAY;

19431  proc sort data=WORK.EM_USER_REPORT;
19432  by ID VIEW;
19433  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19434  proc sort data=EMWS5.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19435  by NAME;
19436  run;

NOTE: There were 14 observations read from the data set EMWS5.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19437  proc sort data=EMWS5.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19438  by NAME;
19439  run;

NOTE: There were 14 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19440  data WORK.ASSESS_META;
19441  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19442  by NAME;
19443  run;

NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19444  data EM_temp_assessMeta;
19445  set EMWS5.Tree_CMeta_TRAIN;
19446  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19447  run;

NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19448  data EM_temp_assessdata;
19449  set EMWS5.Tree_TRAIN(keep=
19450  F_TargetBuy
19451  I_TargetBuy
19452  P_TargetBuy0
19453  P_TargetBuy1
19454  Q_TargetBuy0
19455  Q_TargetBuy1
19456  R_TargetBuy0
19457  R_TargetBuy1
19458  U_TargetBuy
19459  V_TargetBuy0
19460  V_TargetBuy1
19461  _WARN_
19462  TargetBuy
19463  );
19464  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 14445 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
















23749   data EM_temp_assessMeta;
23750   set EMWS5.Tree_CMeta_TRAIN;
23751   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23752   run;

NOTE: There were 12 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23753   data EM_temp_assessdata;
23754   set EMWS5.Tree_VALIDATE(keep=
23755   F_TargetBuy
23756   I_TargetBuy
23757   P_TargetBuy0
23758   P_TargetBuy1
23759   Q_TargetBuy0
23760   Q_TargetBuy1
23761   R_TargetBuy0
23762   R_TargetBuy1
23763   U_TargetBuy
23764   V_TargetBuy0
23765   V_TargetBuy1
23766   _WARN_
23767   TargetBuy
23768   );
23769   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 7778 observations read from the data set EMWS5.PART_VALIDATE.
NOTE: There were 7778 observations read from the data set EMWS5.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7778 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
















28063   %let _cn = %sysfunc(getoption(CENTER));
28064   options nocenter;
28065   proc print data=EMWS5.Tree_EMREPORTFIT noobs label;
28066   var STAT LABEL TRAIN
28067   VALIDATE
28068   ;
28069   by TARGET TARGETLABEL;
28070   title9 ' ';
28071   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28072   run;

NOTE: There were 8 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28073   title10;
28074   options &_cn;

28075   proc sort data=EMWS5.Tree_EMCLASSIFICATION nothreads;
28076   by DATAROLE TARGET TARGETLABEL;
28077   run;

NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28078   %let _cn = %sysfunc(getoption(CENTER));
28079   options nocenter;
28080   proc print data=EMWS5.Tree_EMCLASSIFICATION noobs label;
28081   var from into pct_row pct_col count percent
28082   ;
28083   by DATAROLE TARGET TARGETLABEL;
28084   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28085   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28086   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28087   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28088   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28089   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28090   where _TYPE_='PREDICTION';
28091   title9 ' ';
28092   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28093   run;

NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28094   title9;
28095   title10;
28096   options &_cn;

28097   %let _cn = %sysfunc(getoption(CENTER));
28098   options nocenter;
28099   data EMWS5.Tree_EMEVENTREPORT;
28100   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28100 !  8;
28101   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28101 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28101 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28101 ! FALSEEVENT
28102   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28102 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28102 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28103      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28104   FALSEEVENT=0;
28105   FALSENEVENT=0;
28106   TRUEEVENT=0;
28107   TRUENEVENT=0;
28108   set EMWS5.Tree_EMEVENTREPORT;
28109   run;

NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

28110   proc print data=EMWS5.Tree_EMEVENTREPORT noobs label;
28111   title9 ' ';
28112   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28113   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28114   run;

NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28115   title10;
28116   options &_cn;

28117   proc datasets library=EMWS5 nolist;
28118   modify Tree_EMRANK;
28119   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28120   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28121   run;

NOTE: MODIFY was successful for EMWS5.TREE_EMRANK.DATA.
28122   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

28123   %let _cn = %sysfunc(getoption(CENTER));
28124   options nocenter;
28125   proc print data=EMWS5.Tree_EMRANK label noobs;
28126   var
28127   decile gain lift liftc resp respc N _meanP_;
28128   by
28129   notsorted DATAROLE
28130   notsorted TARGET
28131   notsorted TARGETLABEL
28132   ;
28133   title9 ' ';
28134   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28135   run;

NOTE: There were 40 observations read from the data set EMWS5.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28136   title10;
28137   options &_cn;

28138   proc datasets library=EMWS5 nolist;
28139   modify Tree_EMSCOREDIST;
28140   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28141   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28142   run;

NOTE: MODIFY was successful for EMWS5.TREE_EMSCOREDIST.DATA.
28143   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

