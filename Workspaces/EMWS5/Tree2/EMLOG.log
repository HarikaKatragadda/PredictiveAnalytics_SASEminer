*------------------------------------------------------------*
User:                hkatrag1
Date:                December 12, 2017
Time:                11:43:05
Site:                70117250
Platform:            X64_DSRV12
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 12, 2017
Time:                11:42:57
*------------------------------------------------------------*
14715  proc freq data=EMWS5.Tree2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree2META;
14717  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.Tree2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14754  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14755  length ORDER $20;
14756  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14757     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14758  set EMWS5.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
14759  NumLevels=2;
14760  select(upcase(ORDER));
14761  when('DESC') ORDER = 'Descending';
14762  when('ASC') ORDER = 'Ascending';
14763  when('FMTDESC') ORDER = 'Formatted Descending';
14764  when('FMTASC') ORDER = 'Formatted Ascending';
14765  otherwise ORDER = 'Descending';
14766  end;
14767  output;
14768  run;
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14769  title9 ' ';
14770  proc print data=WORK.Tree2_EVENT noobs label;
14771  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14772  title9 ' ';
14773  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14774  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14775  title10;
 
"No decisions defined for target "TargetBuy"."
14776  proc print data = EMWS5.Ids_TargetBuy_DM noobs label;
14777  var _type_ variable label;
14778  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14779  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14780  title9 ' ';
14781  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14782  run;
 
NOTE: There were 7 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14783  title10;
 
14784  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15309  *------------------------------------------------------------*;
15310  * Tree2: Generation of macros and macro variables;
15311  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15312  *------------------------------------------------------------*;
 
15313  %let EMEXCEPTIONSTRING=;
15314  *------------------------------------------------------------*;
15315  * TRAIN: Tree2;
15316  *------------------------------------------------------------*;
15317  %let EM_ACTION = TRAIN;
15318  %let syscc = 0;
15319  %macro main;
15320
15321    %if %upcase(&EM_ACTION) = CREATE %then %do;
15322      filename temp catalog 'sashelp.emmodl.tree_create.source';
15323      %include temp;
15324      filename temp;
15325
15326      %em_tree_create;
15327    %end;
15328
15329     %else
15330     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15331
15332         filename temp catalog 'sashelp.emmodl.tree_train.source';
15333         %include temp;
15334         filename temp;
15335         %em_tree_train;
15336     %end;
15337
15338    %else
15339    %if %upcase(&EM_ACTION) = SCORE %then %do;
15340      filename temp catalog 'sashelp.emmodl.tree_score.source';
15341      %include temp;
15342      filename temp;
15343
15344      %em_tree_score;
15345
15346    %end;
15347
15348    %else
15349    %if %upcase(&EM_ACTION) = REPORT %then %do;
15350
15351         filename temp catalog 'sashelp.emmodl.tree_report.source';
15352         %include temp;
15353         filename temp;
15354
15355         %em_tree_report;
15356     %end;
15357
15358    %else
15359    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15360
15361         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15362         %include temp;
15363         filename temp;
15364         %EM_TREE_OPENTREEVIEWER;
15365
15366     %end;
15367
15368    %else
15369    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15370
15371         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15372         %include temp;
15373         filename temp;
15374         %EM_TREE_CLOSETREEVIEWER;
15375
15376     %end;
15377
15378
15379     %doendm:
15380  %mend main;
15381
15382  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15384 +%macro em_tree_train;
15386 +   %if &EM_IMPORT_DATA eq %then %do;
15387 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15388 +       %put &em_codebar;
15389 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15390 +       %put &errormsg;
15391 +       %put &em_codebar;
15392 +       %goto doendm;
15393 +   %end;
15394 +   %else
15395 +       %let EMEXCEPTIONSTRING =;
15397 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15398 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15399 +        %put &em_codebar;
15400 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15401 +        %put &errormsg;
15402 +        %put &em_codebar;
15403 +        %goto doendm;
15404 +   %end;
15406 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15407 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15408 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15409 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15410 +        %put &em_codebar;
15411 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15412 +        %put &errormsg;
15413 +        %put &em_codebar;
15414 +        %goto doendm;
15415 +   %end;
15417 +   /* Initialize property macro variables */
15418 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15419 +   %include temp;
15420 +   filename temp;
15422 +   %EM_SetProperties;
15424 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15425 +   %EM_GETNAME(key=EMTREE, type=DATA);
15426 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15427 +     /* if import eq Y and no importtable defined, throw an exception */
15428 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15429 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15430 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15431 +         %put &em_codebar;
15432 +         %put &errmsg;
15433 +         %put &em_codebar;
15434 +         %goto doendm;
15435 +      %end;
15436 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15437 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15438 +         %put &em_codebar;
15439 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15440 +         %put &errormsg;
15441 +         %put &em_codebar;
15442 +         %goto doendm;
15443 +      %end;
15444 +      %else %do;
15445 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15446 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15447 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15448 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15449 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15450 +         %let dsid = %sysfunc(close(&dsid));
15451 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15452 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15453 +            %put &em_codebar;
15454 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15455 +            %put &errormsg;
15456 +            %put &em_codebar;
15457 +            %goto doendm;
15458 +         %end;
15459 +      %end;
15460 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15461 +         proc delete data=&EM_USER_EMTREE;
15462 +         run;
15463 +      %end;
15464 +   %end;
15465 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15466 +      proc delete data=&EM_USER_EMTREE;
15467 +      run;
15468 +   %end;
15470 +   /* load tree macros */
15471 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15472 +   %include temp;
15473 +   filename temp;
15475 +   /* data sets */
15476 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15477 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15478 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15480 +   /* files */
15481 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15483 +   /* check actual num of target levels */
15484 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15485 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15486 +                              nLevel=_nTargetLevel );
15487 +      %if &_nTargetLevel  > 2 %then %do;
15488 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15489 +        %put &em_codebar;
15490 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15491 +        %put &errormsg;
15492 +        %put &em_codebar;
15493 +        %goto doendm;
15494 +      %end;
15495 +   %end;
15497 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15498 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15499 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15500 +        %let costflag=0;
15501 +        data _null_;
15502 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15503 +          if eof then call symput("costflag", _N_);
15504 +        run;
15505 +        %if &costflag gt 0 %then %do;
15506 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15507 +          %put &em_codebar;
15508 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15509 +          %put &errormsg;
15510 +          %put &em_codebar;
15511 +          %goto doendm;
15512 +       %end;
15513 +     %end;
15514 +   %end;
15516 +   /* determine if multiple targets will be processed */
15517 +   %let em_tree_multipleTargets=N;
15518 +   %let em_tree_numTarget = 1;
15519 +   %let em_tree_targetVars=;
15521 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15522 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15523 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15524 +         %let em_tree_multipleTargets=N;
15525 +      %end;
15526 +      %else %do;
15527 +         /* create macro array of targets  */
15528 +         data _null_;
15529 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15530 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15531 +           if eof then
15532 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15533 +        run;
15535 +        %if &em_tree_numTarget gt 1 %then %do;
15536 +           %let em_tree_multipleTargets=Y;
15537 +        %end;
15538 +      %end;
15539 +   %end;
15541 +   /* create view of only necessary variable for performance reasons */
15542 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15543 +   data &tempData / view=&tempData;
15544 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15545 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15546 +       %EM_TARGET
15547 +     %end;
15548 +     %else %do;
15549 +       %if &em_tree_numTarget ne 0 %then %do;
15550 +         %do i=1 %to &em_tree_numTarget;
15551 +            &&em_tree_targetVars&i
15552 +         %end;
15553 +       %end;
15554 +     %end;
15555 +     );
15556 +   run;
15558 +   /* run Tree procedure */
15559 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15561 +   /* Check return code and throw exception if error is detected */
15562 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15563 +   %if &syserr %then %do;
15564 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15565 +     %goto doendm;
15566 +   %end;
15568 +   /* add decision score code if multiple targets are processed */
15569 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15570 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15571 +   %end;
15573 +   /* create outfit dataset if multiple score statements have been executed */
15574 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15576 +   /* create English Rules */
15577 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15578 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15579 +       %em_tree_makeEnglishRules;
15581 +       /* English Rules */
15582 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15584 +     %end;
15585 +   filename x;
15587 +   %doendm:
15588 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15589 +%macro EM_SetProperties;
15591 +   /* train properties */
15592 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15634 +   /* properties for interactive sample */
15635 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15640 +   /* report properties */
15641 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15655 +   /* score properties */
15656 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15659 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS5.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15661 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15662 +  %global &nLevel;
15663 +  proc dmdb batch data=&indata
15664 +    classout=_tmp_dmdbout;
15665 +    class &target;
15666 +  run;
15667 +  data _tmp_dmdbout;
15668 +    set _tmp_dmdbout;
15669 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15670 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15671 +  run;
15672 +  data _null_;
15673 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15674 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15675 +    %let dsid = %sysfunc(close(&dsid));
15676 +     call symput("&nLevel", put(&_obs, Best12.));
15677 +  run;
15679 +  proc datasets lib=work nolist;
15680 +     delete _tmp_dmdbout;
15681 +  run;
15682 +  quit;
15683 +%Mend EM_CheckBinaryTargetLevel;
15686 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15688 +  /* determine the number of obs in training data */
15689 +  proc sql;
15690 +    reset noprint;
15691 +    select count(*) into :em_nobs from &indata;
15692 +  quit;
15694 +  /* determine the number of input variables */
15695 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15696 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15698 +  /* retrieve targetEvent from decmeta */
15699 +  %let targetEvent=;
15700 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15701 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15702 +      data _null_;
15703 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15704 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15705 +      run;
15706 +    %end;
15707 +  %end;
15709 +  /* create targetTable if multipleTar eq Y */
15710 +  data temptarget;
15711 +    set &EM_DATA_VARIABLESET;
15712 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15713 +  run;
15715 + /* data sets */
15716 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15717 + %EM_GETNAME(key=EMTREE,        type=DATA);
15718 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15719 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15720 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15721 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15722 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15723 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15724 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15725 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15727 + /* files */
15728 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15729 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15731 + /* turn on pmml if requested */
15732 + %let nnpmml=0;
15733 + %if %symexist(EM_PMML) %then %do;
15734 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15735 +       %let nnpmml=1;
15737 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15738 +%end;
15740 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15742 + %if &nnpmml or &numClassTarget %then %do;
15744 +       /* create dmdb needed for pmml generation */
15745 +       %let tree_maxlevel = 512;
15746 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15747 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15748 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15749 +         %end;
15750 +       %end;
15751 +       %if &tree_maxlevel gt 0 %then %do;
15752 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15753 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15754 +       %end;
15756 +       %let targetOrderString =;
15757 +       %let targetString = ;
15758 +       data _null_;
15759 +          length orderString nameString $10000;
15760 +          retain orderString nameString;
15761 +          set &em_data_variableset end=eof;
15762 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15763 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15764 +          %end;
15765 +          %else %do;
15766 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15767 +          %end;          select(order);
15768 +            when('')        order ='DESC';
15769 +            when('FMTASC')  order='ASCFMT';
15770 +            when('FMTDESC') order='DESFMT';
15771 +            otherwise;
15772 +          end;
15773 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15774 +          nameString = trim(nameString)!!' '!!trim(NAME);
15776 +          if eof then do;
15777 +             call symput('targetOrderString', trim(orderString));
15778 +             call symput('targetString', trim(nameString));
15779 +          end;
15780 +       run;
15782 +       %let arborkluge= "work._treeDMDB";
15784 +       proc dmdb batch data=&indata
15785 +       %if &nnpmml %then %do;
15786 +           PMML
15787 +       %end;
15788 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15791 +   %if &nnpmml %then %do;
15792 +        %if "%EM_ID" ne "" %then %do;
15793 +          id %EM_ID;
15794 +        %end;
15795 +        %if &EM_NUM_CLASS gt 0 %then %do;
15796 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15797 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15798 +               &targetOrderString;
15799 +        %end;
15800 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15801 +          var %EM_INTERVAL;
15802 +        %end;
15803 +        target &targetString %EM_INTERVAL_TARGET;
15804 +        %if "%EM_FREQ" ne "" %then %do;
15805 +          freq %EM_FREQ;
15806 +        %end;
15807 +  %end;
15808 +  %else %do;
15809 +      class  &targetOrderString;
15810 +      target &targetString %EM_INTERVAL_TARGET;
15811 +  %end;
15812 +       run;
15813 +       quit;
15815 +       proc datasets lib=work nolist;
15816 +          delete classout varout;
15817 +       run;
15818 +       quit;
15820 +    %end;
15821 + %end;
15823 + /* run Arbor procedure */
15824 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15825 +  proc arbor data=&INDATA
15827 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15828 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15829 +  %end;
15831 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15832 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15833 +  %end;
15835 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15836 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15837 +  %end;
15839 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15840 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15841 +  %end;
15843 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15844 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15845 +  %end;
15847 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15848 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15849 +  %end;
15850 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15851 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15852 +  %end;
15853 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15854 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15855 +  %end;
15857 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15858 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15859 +      alpha = &EM_PROPERTY_SIGLEVEL
15860 +    %end;
15861 +  %end;
15863 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15864 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15865 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15866 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15867 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15869 +        padjust =
15870 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15871 +          &chaid
15872 +        %end;
15873 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15874 +          DEPTH
15875 +        %end;
15876 +      %end;
15877 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15878 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15879 +         pvars = &num_inputs
15880 +      %end;
15881 +    %end;
15882 +  %end;
15883 +  %else %do;
15884 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15885 +         padjust = NONE
15886 +      %end;
15887 +  %end;
15889 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15890 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15891 +    Maxrules = &num_nrules
15892 +  %end;
15894 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15895 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15896 +    Maxsurrs = &num_nsurrs
15897 +  %end;
15899 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15900 +     Missing=&EM_PROPERTY_MISSINGVALUE
15901 +  %end;
15903 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15904 +     USEVARONCE
15905 +  %end;
15907 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15908 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15909 +  %end;
15912 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15913 +    event = "&targetEvent"
15914 +  %end;
15916 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15917 +     DECSEARCH
15918 +  %end;
15920 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15921 +     PRIORSSEARCH
15922 +  %end;
15924 +  %if &arbor_1 ne %then %do;
15925 +    &arbor_1
15926 +  %end;
15928 +  %if &em_arbor ne %then %do;
15929 +     &em_arbor
15930 +  %end;
15931 +  ;
15932 + %end;
15933 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15934 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15935 +       interact;
15936 + %end;
15937 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15938 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15939 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15940 +    %put &em_codebar;
15941 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15942 +    %put &errormsg;
15943 +    %put &em_codebar;
15944 +    %goto doendm;
15945 +   %end;
15946 +   %else %do;
15947 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15948 +       interact;
15949 +   %end;
15950 + %end;
15952 + %else %do;
15953 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15954 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15955 +    %put &em_codebar;
15956 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15957 +    %put &errormsg;
15958 +    %put &em_codebar;
15959 +    %goto doendm;
15960 +   %end;
15961 +   %else %do;
15962 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15963 +        interact;
15964 +   %end;
15965 + %end;
15967 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15968 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15969 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15970 +    %end;
15972 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15973 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15974 +    %end;
15976 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15977 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15978 +    %end;
15980 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15981 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15982 +    %end;
15984 +    %if "%EM_FREQ" ne "" %then %do;
15985 +       freq %EM_FREQ;
15986 +    %end;
15988 +    %if "&multipleTar" eq "Y" %then %do;
15989 +       /* cycle through all target vars in variableset */
15990 +       %let tdsid = %sysfunc(open(temptarget));
15991 +       %if &tdsid %then %do;
15992 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15993 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15994 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15995 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15996 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15997 +             target &var / level = &lvl
15998 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15999 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16000 +             %end;
16001 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16002 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16003 +             %end;
16004 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16005 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16006 +             %end;
16007 +          %end;
16008 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16009 +       %end;
16010 +       useTarget variable = %EM_TARGET;
16011 +    %end;
16012 +    %else %do;
16013 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16014 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16015 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16016 +      %end;
16017 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16018 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16019 +      %end;
16020 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16021 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16022 +      %end;
16023 +    %end;
16025 +    %if "&multipleTar" eq "N" %then %do;
16026 +      &EM_DEC_STATEMENT;
16027 +    %end;
16029 +    Performance &EM_PROPERTY_PERFORMANCE
16030 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16031 +      nodesize=&EM_PROPERTY_NODESAMPLE
16032 +    %end;
16033 +    ;
16035 +    %if "&intFlag" eq "Y" %then %do;
16036 +       INTERACT Largest;
16037 +       Train maxnewdepth=0;
16038 +    %end;
16040 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16041 +         Assess
16042 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16043 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16044 +              %put &em_codebar;
16045 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16046 +              %put &errormsg;
16047 +              %put &em_codebar;
16048 +            %end;
16049 +            %else %do;
16050 +               Validata=&EM_IMPORT_VALIDATE
16051 +            %end;
16052 +         %end;
16053 +         %else %do;
16054 +           NoValidata
16055 +         %end;
16056 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16057 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16058 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16059 +               %if &dsid %then %do;
16060 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16061 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16062 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16063 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16064 +                   %else %do;
16065 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16066 +                      %else %let measure= MISC;
16067 +                   %end;
16068 +                 %end;
16069 +               %end;
16070 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16071 +            %end;
16072 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16073 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16074 +                 %let measure=ASE;
16075 +              %end;
16076 +              %else %do;
16077 +                 %let measure=MISC;
16078 +              %end;
16079 +            %end;
16080 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16081 +              %let measure=ASE;
16082 +            %end;
16083 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16084 +               %let measure = LIFT;
16085 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16086 +               %if &dsid %then %do;
16087 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16088 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16089 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16090 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16091 +                 %end;
16092 +               %end;
16093 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16094 +            %end;
16095 +            measure=&measure
16096 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16097 +               event = "&targetEvent"
16098 +            %end;
16099 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16100 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16101 +            %end;
16102 +         %end;
16103 +         %if "&multipleTar" eq "N" %then %do;
16104 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16105 +               CV
16106 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16107 +                 CVNITer = &EM_PROPERTY_CVNITER
16108 +               %end;
16109 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16110 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16111 +               %end;
16112 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16113 +                 CVSeed = &EM_PROPERTY_CVSEED
16114 +               %end;
16115 +            %end;
16116 +         %end;
16117 +       %end;
16118 +      ;
16120 +      %if "&intFlag" ne "Y" %then %do;
16121 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16122 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16123 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16124 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16126 +          SUBTREE &subtree
16127 +          %if "&subtree" eq "NLEAVES" %then %do;
16128 +            =&EM_PROPERTY_NSUBTREE
16129 +          %end;
16130 +          ;
16131 +        %end;
16133 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16134 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16135 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16136 +          %end;
16137 +       %end;
16138 +      %end;
16139 + %end;
16142 + MakeMacro nleaves = nleaves;
16143 + save
16144 + %if "&EM_USER_EMTREE" ne "" %then %do;
16145 +   MODEL=&EM_USER_EMTREE
16146 + %end;
16147 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16148 +   SEQUENCE=&EM_USER_OUTSEQ
16149 + %end;
16150 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16151 +   IMPORTANCE=&EM_USER_OUTIMPORT
16152 + %end;
16153 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16154 +   NODESTAT=&EM_USER_OUTNODES
16155 + %end;
16156 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16157 +   SUMMARY=&EM_USER_OUTSUMMARY
16158 + %end;
16159 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16160 +   STATSBYNODE=&EM_USER_OUTSTATS
16161 + %end;
16162 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16163 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16164 + %end;
16165 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16166 +   Pathlistnonmissing=&EM_USER_OUTPATH
16167 + %end;
16168 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16169 +   RULES = &EM_USER_OUTRULES
16170 + %end;
16171 + ;
16173 + %if "&intFlag" ne "Y" %then %do;
16175 +   %let lookupString = ;
16176 +   %if ^%symexist(EM_OPTION) %then
16177 +      %let EM_OPTION=;
16179 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16180 +      %let lookupString = LOOKUP=SELECT;
16181 +   %end;
16183 +   %let codetext=;
16184 +   %let norescodetxt=;
16186 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16187 +     %let codetext=&codetext DUMMY;
16188 +     %let norescodetxt=&norescodetxt DUMMY;
16189 +   %end;
16190 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16191 +     %let codetext=&codetext NOLEAFID;
16192 +     %let norescodetxt=&norescodetxt NOLEAFID;
16193 +   %end;
16194 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16195 +     %let norescodetxt=&norescodetxt NOPRED;
16196 +   %end;
16198 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16199 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16201 +   %if &nnpmml %then %do;
16202 +     code pmml;
16203 +   %end;
16205 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16206 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16207 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16208 +   %end;
16209 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16210 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16211 +   %end;
16212 + %end;
16214 + run;
16215 + quit;
16217 + /*%em_checkerror(); */
16218 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16219 +   /* Delete DMDB catalog */
16220 +   proc datasets lib=work nolist;
16221 +       delete _treeDMDB / mt=cat;
16222 +  run;
16223 +  %end;
16225 + %if &nnpmml %then %do;
16226 +    ods pmml close;
16227 + %end;
16229 +  %doendm:
16231 +%mend em_tree_runTreeProcedure;
16233 +%macro em_tree_createFitStats( multipleTar= );
16236 +  /* create targetTable is multipleTar eq Y */
16237 +  data temptarget;
16238 +    set &EM_DATA_VARIABLESET;
16239 +    where ROLE="TARGET";
16240 +  run;
16242 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16243 +   data &EM_USER_EMOUTFIT;
16244 +     length target $32;
16245 +     merge work.fit_train
16246 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16247 +       work.fit_valid
16248 +     %end;
16249 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16250 +       work.fit_test
16251 +     %end;
16252 +     ;
16253 +     %if "&multipleTar" eq "N" %then %do;
16254 +       target="%EM_TARGET";
16255 +     %end;
16256 +     %else %do;
16257 +       target = _TARGET_;
16258 +     %end;
16259 +     drop _NW_ _SUMW_
16260 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16261 +        _VSUMW_
16262 +     %end;
16263 +     ;
16264 +   run;
16266 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16267 +     proc datasets library=work nolist;
16268 +       delete fit_valid;
16269 +     run;
16270 +   %end;
16271 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16272 +     proc datasets library=work nolist;
16273 +       delete fit_test;
16274 +     run;
16275 +   %end;
16277 +%mend em_tree_createFitStats;
16280 +%macro em_tree_makeEnglishRules;
16282 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16283 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16285 +  /* verify that necessary tables exist and if not, skip processing */
16286 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16287 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16288 +    %goto doendm;
16289 +  %end;
16290 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16291 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16292 +    %goto doendm;
16293 +  %end;
16295 +  /* determine length of variable in outpath dataset */
16296 +  %let vlength= ;
16297 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16298 +  %if &dsid ne %then %do;
16299 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16300 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16301 +  %end;
16302 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16304 +  data tempoutpath;
16305 +    length varname $&vlength;
16306 +    retain varname;
16307 +    set &EM_USER_OUTPATH;
16309 +    if ^missing(variable) then varname=variable;
16310 +    else if ^missing(var_name) then varname=var_name;
16311 +    output;
16312 +  run;
16314 +  /* create an array of generated predicted variable names */
16315 +  %let tree_pred_vars = ;
16316 +  %let tree_pred_label = ;
16317 +  %let numpred= 0;
16318 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16320 +    data _null_;
16321 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16322 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16323 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16324 +     if eof then
16325 +       call symput('numpred', strip(put(_N_, BEST.)));
16326 +    run;
16327 +  %end;
16329 +  /* determine if NPRIORS exists in outnodes  */
16330 +  %local nprior_flag;
16331 +  data _null_;
16332 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16333 +    if eof then do;
16334 +      call symput('nprior_flag', strip(put(npriors, best.)));
16335 +    end;
16336 +  run;
16338 +  proc sort data=tempoutpath; by node; run;
16339 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16341 +  data tempoutpath;
16342 +    merge tempoutpath(in=_a) outnodes(keep= node
16343 +    %if "&nprior_flag" ne "." %then %do;
16344 +      NPRIORS
16345 +    %end;
16346 +    %else %do;
16347 +      N
16348 +    %end;
16349 +    %if &numpred gt 0 %then %do;
16350 +      %do i=1 %to &numpred;
16351 +        &&tree_pred_vars&i
16352 +      %end;
16353 +    %end;
16354 +    );
16355 +    by node;
16356 +    if _a;
16357 +  run;
16359 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16361 +  data _null_;
16362 +    file x;
16363 +    set tempoutpath;
16364 +    by node descending varname;
16365 +    retain origvar oldnode string;
16366 +    length origvar $32 oldnode 8 string $200;
16368 +    if _N_ = 1 then do;
16369 +      origvar = varname;
16370 +      oldnode = node;
16371 +    end;
16373 +    if first.node then do;
16374 +       put "&EM_CODEBAR";
16375 +       put " Node = " node;
16376 +       put "&EM_CODEBAR";
16377 +    end;
16379 +      if first.varname then do;
16380 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16381 +            if MISSING(CHARACTER_VALUE) then do;
16382 +             if NUMERIC_VALUE ne .  then do;
16383 +              if ^first.node then do;
16384 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16385 +              end;
16386 +              else do;
16387 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16388 +              end;
16389 +             end;
16390 +            end;
16391 +            else do;
16392 +              if ^first.node then do;
16393 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16394 +              end;
16395 +              else do;
16396 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16397 +              end;
16398 +             end;
16399 +         end;
16400 +         else if RELATION in ("=") then do;
16401 +            if ^first.node then do;
16402 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16403 +            end;
16404 +            else do;
16405 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16406 +            end;
16407 +         end;
16408 +         else if RELATION in ("ISMISSING") then do;
16409 +            if ^first.node then do;
16410 +              string = " AND "|| strip(varname) || " equals Missing";
16411 +            end;
16412 +            else do;
16413 +              string = "if "|| strip(varname) ||" equals Missing";
16414 +            end;
16415 +         end;
16416 +         else if RELATION in ("ISNOTMISSING") then do;
16417 +            if ^first.node then do;
16418 +              string = " AND "|| strip(varname) || " equals All Values";
16419 +            end;
16420 +            else do;
16421 +              string = "if "|| strip(varname) ||" equals All Values";
16422 +            end;
16423 +         end;
16424 +         if ^missing(varname) then origvar = varname;
16425 +         oldnode=node;
16427 +      end;
16428 +      else do;
16429 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16430 +          if MISSING(CHARACTER_VALUE) then do;
16431 +           if  NUMERIC_VALUE ne .  then do;
16432 +            if ^MISSING(string) then
16433 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16434 +            else
16435 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16436 +           end;
16437 +          end;
16438 +          else do;
16439 +            if ^MISSING(string) then
16440 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16441 +            else
16442 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16443 +          end;
16445 +         end;
16446 +         else if RELATION in ("=") then do;
16447 +           string = strip(string)||", "||strip(character_value);
16448 +         end;
16449 +         else if RELATION in ("ISMISSING") then do;
16451 +         end;
16452 +         if ^missing(varname) then origvar = varname;
16453 +         oldnode=node;
16454 +      end;
16455 +      if last.varname then do;
16456 +         if RELATION in ("ISMISSING") then do;
16457 +           if ^first.varname then do;
16458 +             string = strip(string) || " or MISSING";
16459 +           end;
16460 +         end;
16461 +         put string;
16462 +         if ^missing(varname) then origvar = varname;
16463 +         oldnode=node;
16464 +      end;
16466 +      if last.node then do;
16467 +         put "then ";
16468 +         put " Tree Node Identifier   = " node;
16470 +         %if "&nprior_flag" ne "." %then %do;
16471 +           put " Number of Observations = " NPRIORS;
16472 +         %end;
16473 +         %else %do;
16474 +           put " Number of Observations = " N;
16475 +         %end;
16477 +         %if &numpred gt 0 %then %do;
16478 +           %do i=1 %to &numpred;
16479 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16480 +           %end;
16481 +         %end;
16483 +         put " ";
16484 +         if ^missing(varname) then origvar = varname;
16485 +         oldnode=node;
16486 +      end;
16488 +  run;
16490 +  proc datasets lib=work nolist;
16491 +    delete tempoutpath outnodes;
16492 +  run;
16494 +  %doendm:
16495 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 14445   Memory used = 511K.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596892 kilobytes of physical memory.
NOTE: Will use 14445 out of 14445 training cases.
NOTE: Using memory pool with 188175360 bytes.
NOTE: Passed training data 11 times.
NOTE: Training used 3707720 bytes of work memory.
NOTE: The subtree sequence contains 39 subtrees. The largest has 66 nodes and 41 leaves.
NOTE: Using subtree with 25 nodes and 16 leaves.
NOTE: Using subtree with 25 nodes and 16 leaves.
NOTE: Created macro variable NLEAVES equal to 16.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS5.TREE2_EMTREE has 1628 observations and 4 variables.
NOTE: The data set EMWS5.TREE2_OUTNODES has 25 observations and 24 variables.
NOTE: The data set EMWS5.TREE2_OUTPATH has 93 observations and 7 variables.
NOTE: The data set EMWS5.TREE2_OUTRULES has 380 observations and 6 variables.
NOTE: The data set EMWS5.TREE2_OUTSEQ has 39 observations and 20 variables.
NOTE: The data set EMWS5.TREE2_OUTSTATS has 175 observations and 5 variables.
NOTE: The data set EMWS5.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS5.TREE2_OUTTOPOLOGY has 25 observations and 5 variables.
NOTE: External file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\TREEFLOW.sas opened.
NOTE: External file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\TREEPUBLISH.sas opened.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           1.07 seconds
      cpu time            0.78 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.09 seconds
      cpu time            0.79 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS5.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 93 observations read from the data set EMWS5.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 25 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 93 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=12Dec2017:11:43:04,
      Create Time=12Dec2017:11:43:04
 
NOTE: 186 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 93 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16497
16498  *------------------------------------------------------------*;
16499  * End TRAIN: Tree2;
16500  *------------------------------------------------------------*;
 
16501  *------------------------------------------------------------*;
16502  * Close any missing semi colons;
16503  *------------------------------------------------------------*;
16504  ;
16505  ;
16506  ;
16507  ;
16508  quit;
16509  *------------------------------------------------------------*;
16510  * Close any unbalanced quotes;
16511  *------------------------------------------------------------*;
16512  /*; *"; *'; */
16513  ;
16514  run;
16515  quit;
16516  /* Reset EM Options */
16517  options formchar="|----|+|---+=|-/\<>*";
16518  options nocenter ls=256 ps=10000;
16519  goptions reset=all device=GIF NODISPLAY;
 
16520  proc sort data=WORK.EM_USER_REPORT;
16521  by ID VIEW;
16522  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 12, 2017
Time:                11:43:00
*------------------------------------------------------------*
16624  %let EMEXCEPTIONSTRING=;
16625  *------------------------------------------------------------*;
16626  * SCORE: Tree2;
16627  *------------------------------------------------------------*;
16628  %let EM_ACTION = SCORE;
16629  %let syscc = 0;
16630  %macro main;
16631
16632    %if %upcase(&EM_ACTION) = CREATE %then %do;
16633      filename temp catalog 'sashelp.emmodl.tree_create.source';
16634      %include temp;
16635      filename temp;
16636
16637      %em_tree_create;
16638    %end;
16639
16640     %else
16641     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16642
16643         filename temp catalog 'sashelp.emmodl.tree_train.source';
16644         %include temp;
16645         filename temp;
16646         %em_tree_train;
16647     %end;
16648
16649    %else
16650    %if %upcase(&EM_ACTION) = SCORE %then %do;
16651      filename temp catalog 'sashelp.emmodl.tree_score.source';
16652      %include temp;
16653      filename temp;
16654
16655      %em_tree_score;
16656
16657    %end;
16658
16659    %else
16660    %if %upcase(&EM_ACTION) = REPORT %then %do;
16661
16662         filename temp catalog 'sashelp.emmodl.tree_report.source';
16663         %include temp;
16664         filename temp;
16665
16666         %em_tree_report;
16667     %end;
16668
16669    %else
16670    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16671
16672         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16673         %include temp;
16674         filename temp;
16675         %EM_TREE_OPENTREEVIEWER;
16676
16677     %end;
16678
16679    %else
16680    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16681
16682         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16683         %include temp;
16684         filename temp;
16685         %EM_TREE_CLOSETREEVIEWER;
16686
16687     %end;
16688
16689
16690     %doendm:
16691  %mend main;
16692
16693  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16695 +%macro em_tree_score;
16697 +   /* determine if multiple targets will be processed */
16698 +   %let em_tree_multipleTargets=N;
16699 +   %let em_tree_numTarget=1;
16700 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16701 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16702 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16703 +         %let em_tree_multipleTargets=N;
16704 +      %end;
16705 +      %else %do;
16706 +         /* create macro array of targets  */
16707 +         data _null_;
16708 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16709 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16710 +           if eof then
16711 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16712 +        run;
16714 +        %if &em_tree_numTarget gt 1 %then %do;
16715 +           %let em_tree_multipleTargets=Y;
16716 +        %end;
16717 +      %end;
16718 +   %end;
16720 +   /* build flow and publish scoring code */
16721 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16722 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16724 +   filename treeflow "&EM_USER_TREEFLOW";
16725 +   filename treepub "&EM_USER_TREEPUBLISH";
16727 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16728 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16730 +   %em_copyfile(infref=treeflow, outfref=flowref);
16731 +   %em_copyfile(infref=treepub, outfref=pubref);
16733 +   filename treeflow;
16734 +   filename treepub;
16736 +   /* if priors are used, add code to generate unadjusted residuals in export */
16737 +   %let useAdjPriors = N;
16738 +   data _null_;
16739 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16740 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16741 +   run;
16742 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16743 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16744 +      %include temp;
16745 +      filename temp;
16747 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16748 +      filename adjref "&EM_USER_adjResidualCode";
16749 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16751 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16753 +      filename adjref;
16754 +   %end;
16756 +   /* LEAF */
16757 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16758 +      data _null_;
16759 +        file flowref mod;
16760 +        put 'drop _LEAF_;';
16761 +      run;
16763 +      data _null_;
16764 +        file pubref mod;
16765 +        put 'drop _LEAF_;';
16766 +      run;
16768 +   %end;
16770 +   filename flowref;
16771 +   filename pubref;
16773 +   /* em_metachange code */
16774 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16775 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16776 +   %end;
16778 +   /* variable selection based on importance stat    */
16779 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16780 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16781 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16782 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16783 +     %let obs = %sysfunc(fetch(&dsid));
16784 +     %do %while(&obs=0);
16785 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16786 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16787 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16788 +       %let obs = %sysfunc(fetch(&dsid));
16789 +     %end;
16790 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16791 +   %end;
16793 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16794 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16795 +    %let tree_pred_vars = ;
16796 +    %let tree_pred_lvl =;
16797 +    %let numpred= 0;
16799 +    data _null_;
16800 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16801 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16802 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16803 +     if eof then
16804 +       call symput('numpred', strip(put(_N_, BEST.)));
16805 +    run;
16806 +   %end;
16808 +   %if &numpred ne 0 %then %do;
16809 +    %do i=1 %to &numpred;
16810 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16811 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16812 +    %end;
16813 +   %end;
16815 +   /* determine if multiple targets will be processed */
16816 +   %let em_tree_multipleTargets=N;
16817 +   %let em_tree_numTarget=1;
16818 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16819 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16820 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16821 +         %let em_tree_multipleTargets=N;
16822 +      %end;
16823 +      %else %do;
16824 +        data _null_;
16825 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16826 +          if eof then
16827 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16828 +        run;
16830 +        %if &em_tree_numTarget gt 1 %then %do;
16831 +           %let em_tree_multipleTargets=Y;
16832 +        %end;
16833 +     %end;
16834 +   %end;
16836 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16837 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16839 +      /* variable importance */
16840 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16841 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16843 +         %let validexist=0;
16844 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16845 +           %let validexist=1;
16846 +         %end;
16848 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16849 +         /* and the columns may not be generated                                                                                 */
16850 +         %let em_tree_cvexists=;
16851 +         %let em_tree_surrexists=.;
16852 +         data _null_;
16853 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16854 +            if eof then do ;
16855 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16856 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16857 +            end;
16858 +         run;
16860 +         data &EM_USER_OUTIMPORT;
16861 +            set &EM_USER_OUTIMPORT;
16863 +            /* format columns based on Precison value specified */
16864 +            format importance 15.&EM_PROPERTY_PRECISION
16865 +                 %if &validexist %then %do;
16866 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16867 +                 %end;
16868 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16869 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16870 +                 %end;
16871 +            ;
16872 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16873 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16874 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16875 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16876 +                 %if "&em_tree_surrexists" ne "" %then %do;
16877 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16878 +                 %end;
16879 +                 %if &validexist %then %do;
16880 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16881 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16882 +                 %end;
16883 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16884 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16885 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16886 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16887 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16888 +                 %end;
16889 +            ;
16890 +         run;
16892 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16893 +      %end;
16894 +   %end;
16896 +   %doendm:
16897 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2017:11:43:04,
      Create Time=12Dec2017:11:43:04
 
NOTE: 283 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=12Dec2017:11:43:04,
      Create Time=12Dec2017:11:43:04
 
NOTE: 261 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10415,
      Last Modified=12Dec2017:11:43:04,
      Create Time=12Dec2017:11:43:04
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9742,
      Last Modified=12Dec2017:11:43:04,
      Create Time=12Dec2017:11:43:04
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16898
16899  *------------------------------------------------------------*;
16900  * End SCORE: Tree2;
16901  *------------------------------------------------------------*;
 
16902  proc sort data=WORK.EM_METACHANGE;
16903  by key uname;
16904  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16905  filename x "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas";
16906  data _null_;
16907  file x;
16908  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
16909  put 'ROLE = "REJECTED";';
16910  put 'end;';
16911  put 'else ';
16912  put 'if upcase(NAME) = "DEMREG" then do;';
16913  put 'ROLE = "REJECTED";';
16914  put 'end;';
16915  put 'else ';
16916  put 'if upcase(NAME) = "DEMTVREG" then do;';
16917  put 'ROLE = "REJECTED";';
16918  put 'end;';
16919  put 'else ';
16920  put 'if upcase(NAME) = "PROMCLASS" then do;';
16921  put 'ROLE = "REJECTED";';
16922  put 'end;';
16923  put 'else ';
16924  put 'if upcase(NAME) = "PROMSPEND" then do;';
16925  put 'ROLE = "REJECTED";';
16926  put 'end;';
16927  put 'else ';
16928  put 'if upcase(NAME) = "PROMTIME" then do;';
16929  put 'ROLE = "REJECTED";';
16930  put 'end;';
16931  put 'else ';
16932  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
16933  put 'ROLE = "ASSESS";';
16934  put 'end;';
16935  put 'else ';
16936  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
16937  put 'ROLE = "ASSESS";';
16938  put 'end;';
16939  put 'else ';
16940  put 'if upcase(NAME) = "_NODE_" then do;';
16941  put 'ROLE = "SEGMENT";';
16942  put 'LEVEL = "NOMINAL";';
16943  put 'end;';
16944  run;
 
NOTE: The file X is:
      Filename=\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=12Dec2017:11:43:04,
      Create Time=12Dec2017:11:36:23
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16945  filename x;
NOTE: Fileref X has been deassigned.
 
16946  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
16947  *------------------------------------------------------------*;
16948  * Tree2: Scoring DATA data;
16949  *------------------------------------------------------------*;
16950  data EMWS5.Tree2_TRAIN
16951  / view=EMWS5.Tree2_TRAIN
16952  ;
16953  set EMWS5.Part_TRAIN
16954  ;
16955  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas.
16956 +****************************************************************;
16957 +******             DECISION TREE SCORING CODE             ******;
16958 +****************************************************************;
16959 +
16960 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16961 +LENGTH F_TargetBuy  $   12;
16962 +LENGTH I_TargetBuy  $   12;
16963 +LENGTH _WARN_  $    4;
16964 +
16965 +******              LABELS FOR NEW VARIABLES              ******;
16966 +label _NODE_ = 'Node' ;
16967 +label _LEAF_ = 'Leaf' ;
16968 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
16969 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
16970 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
16971 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
16972 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
16973 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
16974 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
16975 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
16976 +label F_TargetBuy = 'From: TargetBuy' ;
16977 +label I_TargetBuy = 'Into: TargetBuy' ;
16978 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
16979 +label _WARN_ = 'Warnings' ;
16980 +
16981 +
16982 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16983 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
16984 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
16985 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
16986 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
16987 +
16988 +
16989 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
16990 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
16991 +
16992 +******             ASSIGN OBSERVATION TO NODE             ******;
16993 +IF  NOT MISSING(DemAge ) AND
16994 +  DemAge  <                 39.5 THEN DO;
16995 +  IF  NOT MISSING(DemAffl ) AND
16996 +    DemAffl  <                  9.5 THEN DO;
16997 +    _ARBFMT_1 = PUT( DemGender , $1.);
16998 +     %DMNORMIP( _ARBFMT_1);
16999 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17000 +      _NODE_  =                   14;
17001 +      _LEAF_  =                    1;
17002 +      P_TargetBuy0  =     0.45839416058394;
17003 +      P_TargetBuy1  =     0.54160583941605;
17004 +      Q_TargetBuy0  =     0.45839416058394;
17005 +      Q_TargetBuy1  =     0.54160583941605;
17006 +      V_TargetBuy0  =     0.40431266846361;
17007 +      V_TargetBuy1  =     0.59568733153638;
17008 +      I_TargetBuy  = '1' ;
17009 +      U_TargetBuy  =                    1;
17010 +      END;
17011 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17012 +      _NODE_  =                   15;
17013 +      _LEAF_  =                    2;
17014 +      P_TargetBuy0  =     0.64157706093189;
17015 +      P_TargetBuy1  =      0.3584229390681;
17016 +      Q_TargetBuy0  =     0.64157706093189;
17017 +      Q_TargetBuy1  =      0.3584229390681;
17018 +      V_TargetBuy0  =                 0.64;
17019 +      V_TargetBuy1  =                 0.36;
17020 +      I_TargetBuy  = '0' ;
17021 +      U_TargetBuy  =                    0;
17022 +      END;
17023 +    ELSE DO;
17024 +      _NODE_  =                   16;
17025 +      _LEAF_  =                    3;
17026 +      P_TargetBuy0  =     0.84615384615384;
17027 +      P_TargetBuy1  =     0.15384615384615;
17028 +      Q_TargetBuy0  =     0.84615384615384;
17029 +      Q_TargetBuy1  =     0.15384615384615;
17030 +      V_TargetBuy0  =     0.85483870967741;
17031 +      V_TargetBuy1  =     0.14516129032258;
17032 +      I_TargetBuy  = '0' ;
17033 +      U_TargetBuy  =                    0;
17034 +      END;
17035 +    END;
17036 +  ELSE IF  NOT MISSING(DemAffl ) AND
17037 +                    14.5 <= DemAffl  THEN DO;
17038 +    _NODE_  =                    7;
17039 +    _LEAF_  =                    6;
17040 +    P_TargetBuy0  =     0.05220883534136;
17041 +    P_TargetBuy1  =     0.94779116465863;
17042 +    Q_TargetBuy0  =     0.05220883534136;
17043 +    Q_TargetBuy1  =     0.94779116465863;
17044 +    V_TargetBuy0  =     0.05839416058394;
17045 +    V_TargetBuy1  =     0.94160583941605;
17046 +    I_TargetBuy  = '1' ;
17047 +    U_TargetBuy  =                    1;
17048 +    END;
17049 +  ELSE DO;
17050 +    _ARBFMT_1 = PUT( DemGender , $1.);
17051 +     %DMNORMIP( _ARBFMT_1);
17052 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17053 +      _NODE_  =                   17;
17054 +      _LEAF_  =                    4;
17055 +      P_TargetBuy0  =      0.2125850340136;
17056 +      P_TargetBuy1  =     0.78741496598639;
17057 +      Q_TargetBuy0  =      0.2125850340136;
17058 +      Q_TargetBuy1  =     0.78741496598639;
17059 +      V_TargetBuy0  =     0.21518987341772;
17060 +      V_TargetBuy1  =     0.78481012658227;
17061 +      I_TargetBuy  = '1' ;
17062 +      U_TargetBuy  =                    1;
17063 +      END;
17064 +    ELSE DO;
17065 +      _NODE_  =                   18;
17066 +      _LEAF_  =                    5;
17067 +      P_TargetBuy0  =     0.50574712643678;
17068 +      P_TargetBuy1  =     0.49425287356321;
17069 +      Q_TargetBuy0  =     0.50574712643678;
17070 +      Q_TargetBuy1  =     0.49425287356321;
17071 +      V_TargetBuy0  =      0.5563909774436;
17072 +      V_TargetBuy1  =     0.44360902255639;
17073 +      I_TargetBuy  = '0' ;
17074 +      U_TargetBuy  =                    0;
17075 +      END;
17076 +    END;
17077 +  END;
17078 +ELSE IF  NOT MISSING(DemAge ) AND
17079 +                  44.5 <= DemAge  THEN DO;
17080 +  IF  NOT MISSING(DemAffl ) AND
17081 +                    10.5 <= DemAffl  AND
17082 +    DemAffl  <                 15.5 THEN DO;
17083 +    _NODE_  =                   12;
17084 +    _LEAF_  =                   13;
17085 +    P_TargetBuy0  =     0.73689516129032;
17086 +    P_TargetBuy1  =     0.26310483870967;
17087 +    Q_TargetBuy0  =     0.73689516129032;
17088 +    Q_TargetBuy1  =     0.26310483870967;
17089 +    V_TargetBuy0  =     0.71123491179201;
17090 +    V_TargetBuy1  =     0.28876508820798;
17091 +    I_TargetBuy  = '0' ;
17092 +    U_TargetBuy  =                    0;
17093 +    END;
17094 +  ELSE IF  NOT MISSING(DemAffl ) AND
17095 +                    15.5 <= DemAffl  THEN DO;
17096 +    IF  NOT MISSING(DemAffl ) AND
17097 +                      18.5 <= DemAffl  THEN DO;
17098 +      _NODE_  =                   33;
17099 +      _LEAF_  =                   16;
17100 +      P_TargetBuy0  =     0.04166666666666;
17101 +      P_TargetBuy1  =     0.95833333333333;
17102 +      Q_TargetBuy0  =     0.04166666666666;
17103 +      Q_TargetBuy1  =     0.95833333333333;
17104 +      V_TargetBuy0  =                 0.08;
17105 +      V_TargetBuy1  =                 0.92;
17106 +      I_TargetBuy  = '1' ;
17107 +      U_TargetBuy  =                    1;
17108 +      END;
17109 +    ELSE DO;
17110 +      _ARBFMT_1 = PUT( DemGender , $1.);
17111 +       %DMNORMIP( _ARBFMT_1);
17112 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17113 +        _NODE_  =                   57;
17114 +        _LEAF_  =                   14;
17115 +        P_TargetBuy0  =     0.29473684210526;
17116 +        P_TargetBuy1  =     0.70526315789473;
17117 +        Q_TargetBuy0  =     0.29473684210526;
17118 +        Q_TargetBuy1  =     0.70526315789473;
17119 +        V_TargetBuy0  =     0.31818181818181;
17120 +        V_TargetBuy1  =     0.68181818181818;
17121 +        I_TargetBuy  = '1' ;
17122 +        U_TargetBuy  =                    1;
17123 +        END;
17124 +      ELSE DO;
17125 +        _NODE_  =                   58;
17126 +        _LEAF_  =                   15;
17127 +        P_TargetBuy0  =      0.5820895522388;
17128 +        P_TargetBuy1  =     0.41791044776119;
17129 +        Q_TargetBuy0  =      0.5820895522388;
17130 +        Q_TargetBuy1  =     0.41791044776119;
17131 +        V_TargetBuy0  =     0.78787878787878;
17132 +        V_TargetBuy1  =     0.21212121212121;
17133 +        I_TargetBuy  = '0' ;
17134 +        U_TargetBuy  =                    0;
17135 +        END;
17136 +      END;
17137 +    END;
17138 +  ELSE DO;
17139 +    _NODE_  =                   11;
17140 +    _LEAF_  =                   12;
17141 +    P_TargetBuy0  =     0.89773169151004;
17142 +    P_TargetBuy1  =     0.10226830848995;
17143 +    Q_TargetBuy0  =     0.89773169151004;
17144 +    Q_TargetBuy1  =     0.10226830848995;
17145 +    V_TargetBuy0  =     0.90019333011116;
17146 +    V_TargetBuy1  =     0.09980666988883;
17147 +    I_TargetBuy  = '0' ;
17148 +    U_TargetBuy  =                    0;
17149 +    END;
17150 +  END;
17151 +ELSE DO;
17152 +  IF  NOT MISSING(DemAffl ) AND
17153 +    DemAffl  <                  9.5 THEN DO;
17154 +    _NODE_  =                    8;
17155 +    _LEAF_  =                    7;
17156 +    P_TargetBuy0  =     0.76952236542835;
17157 +    P_TargetBuy1  =     0.23047763457164;
17158 +    Q_TargetBuy0  =     0.76952236542835;
17159 +    Q_TargetBuy1  =     0.23047763457164;
17160 +    V_TargetBuy0  =     0.76997245179063;
17161 +    V_TargetBuy1  =     0.23002754820936;
17162 +    I_TargetBuy  = '0' ;
17163 +    U_TargetBuy  =                    0;
17164 +    END;
17165 +  ELSE IF  NOT MISSING(DemAffl ) AND
17166 +                    14.5 <= DemAffl  THEN DO;
17167 +    _NODE_  =                   10;
17168 +    _LEAF_  =                   11;
17169 +    P_TargetBuy0  =     0.21804511278195;
17170 +    P_TargetBuy1  =     0.78195488721804;
17171 +    Q_TargetBuy0  =     0.21804511278195;
17172 +    Q_TargetBuy1  =     0.78195488721804;
17173 +    V_TargetBuy0  =      0.1917808219178;
17174 +    V_TargetBuy1  =     0.80821917808219;
17175 +    I_TargetBuy  = '1' ;
17176 +    U_TargetBuy  =                    1;
17177 +    END;
17178 +  ELSE DO;
17179 +    _ARBFMT_1 = PUT( DemGender , $1.);
17180 +     %DMNORMIP( _ARBFMT_1);
17181 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17182 +      _NODE_  =                   23;
17183 +      _LEAF_  =                    8;
17184 +      P_TargetBuy0  =     0.42231075697211;
17185 +      P_TargetBuy1  =     0.57768924302788;
17186 +      Q_TargetBuy0  =     0.42231075697211;
17187 +      Q_TargetBuy1  =     0.57768924302788;
17188 +      V_TargetBuy0  =                  0.4;
17189 +      V_TargetBuy1  =                  0.6;
17190 +      I_TargetBuy  = '1' ;
17191 +      U_TargetBuy  =                    1;
17192 +      END;
17193 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17194 +      _NODE_  =                   24;
17195 +      _LEAF_  =                    9;
17196 +      P_TargetBuy0  =     0.64150943396226;
17197 +      P_TargetBuy1  =     0.35849056603773;
17198 +      Q_TargetBuy0  =     0.64150943396226;
17199 +      Q_TargetBuy1  =     0.35849056603773;
17200 +      V_TargetBuy0  =     0.73228346456692;
17201 +      V_TargetBuy1  =     0.26771653543307;
17202 +      I_TargetBuy  = '0' ;
17203 +      U_TargetBuy  =                    0;
17204 +      END;
17205 +    ELSE DO;
17206 +      _NODE_  =                   25;
17207 +      _LEAF_  =                   10;
17208 +      P_TargetBuy0  =      0.8015873015873;
17209 +      P_TargetBuy1  =     0.19841269841269;
17210 +      Q_TargetBuy0  =      0.8015873015873;
17211 +      Q_TargetBuy1  =     0.19841269841269;
17212 +      V_TargetBuy0  =     0.86486486486486;
17213 +      V_TargetBuy1  =     0.13513513513513;
17214 +      I_TargetBuy  = '0' ;
17215 +      U_TargetBuy  =                    0;
17216 +      END;
17217 +    END;
17218 +  END;
17219 +
17220 +*****  RESIDUALS R_ *************;
17221 +IF  F_TargetBuy  NE '0'
17222 +AND F_TargetBuy  NE '1'  THEN DO;
17223 +        R_TargetBuy0  = .;
17224 +        R_TargetBuy1  = .;
17225 + END;
17226 + ELSE DO;
17227 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17228 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17229 +       SELECT( F_TargetBuy  );
17230 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17231 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17232 +       END;
17233 + END;
17234 +
17235 +****************************************************************;
17236 +******          END OF DECISION TREE SCORING CODE         ******;
17237 +****************************************************************;
17238 +
17239 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17240  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17241  quit;
17242  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17243  filename emflow "\\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
17244  *------------------------------------------------------------*;
17245  * Tree2: Scoring VALIDATE data;
17246  *------------------------------------------------------------*;
17247  data EMWS5.Tree2_VALIDATE
17248  / view=EMWS5.Tree2_VALIDATE
17249  ;
17250  set EMWS5.Part_VALIDATE
17251  ;
17252  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file \\filer.uncc.edu\home\hkatrag1\Predictive Analytics1\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas.
17253 +****************************************************************;
17254 +******             DECISION TREE SCORING CODE             ******;
17255 +****************************************************************;
17256 +
17257 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17258 +LENGTH F_TargetBuy  $   12;
17259 +LENGTH I_TargetBuy  $   12;
17260 +LENGTH _WARN_  $    4;
17261 +
17262 +******              LABELS FOR NEW VARIABLES              ******;
17263 +label _NODE_ = 'Node' ;
17264 +label _LEAF_ = 'Leaf' ;
17265 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17266 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17267 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17268 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17269 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17270 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17271 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17272 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17273 +label F_TargetBuy = 'From: TargetBuy' ;
17274 +label I_TargetBuy = 'Into: TargetBuy' ;
17275 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17276 +label _WARN_ = 'Warnings' ;
17277 +
17278 +
17279 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17280 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17281 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17282 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17283 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17284 +
17285 +
17286 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17287 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17288 +
17289 +******             ASSIGN OBSERVATION TO NODE             ******;
17290 +IF  NOT MISSING(DemAge ) AND
17291 +  DemAge  <                 39.5 THEN DO;
17292 +  IF  NOT MISSING(DemAffl ) AND
17293 +    DemAffl  <                  9.5 THEN DO;
17294 +    _ARBFMT_1 = PUT( DemGender , $1.);
17295 +     %DMNORMIP( _ARBFMT_1);
17296 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17297 +      _NODE_  =                   14;
17298 +      _LEAF_  =                    1;
17299 +      P_TargetBuy0  =     0.45839416058394;
17300 +      P_TargetBuy1  =     0.54160583941605;
17301 +      Q_TargetBuy0  =     0.45839416058394;
17302 +      Q_TargetBuy1  =     0.54160583941605;
17303 +      V_TargetBuy0  =     0.40431266846361;
17304 +      V_TargetBuy1  =     0.59568733153638;
17305 +      I_TargetBuy  = '1' ;
17306 +      U_TargetBuy  =                    1;
17307 +      END;
17308 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17309 +      _NODE_  =                   15;
17310 +      _LEAF_  =                    2;
17311 +      P_TargetBuy0  =     0.64157706093189;
17312 +      P_TargetBuy1  =      0.3584229390681;
17313 +      Q_TargetBuy0  =     0.64157706093189;
17314 +      Q_TargetBuy1  =      0.3584229390681;
17315 +      V_TargetBuy0  =                 0.64;
17316 +      V_TargetBuy1  =                 0.36;
17317 +      I_TargetBuy  = '0' ;
17318 +      U_TargetBuy  =                    0;
17319 +      END;
17320 +    ELSE DO;
17321 +      _NODE_  =                   16;
17322 +      _LEAF_  =                    3;
17323 +      P_TargetBuy0  =     0.84615384615384;
17324 +      P_TargetBuy1  =     0.15384615384615;
17325 +      Q_TargetBuy0  =     0.84615384615384;
17326 +      Q_TargetBuy1  =     0.15384615384615;
17327 +      V_TargetBuy0  =     0.85483870967741;
17328 +      V_TargetBuy1  =     0.14516129032258;
17329 +      I_TargetBuy  = '0' ;
17330 +      U_TargetBuy  =                    0;
17331 +      END;
17332 +    END;
17333 +  ELSE IF  NOT MISSING(DemAffl ) AND
17334 +                    14.5 <= DemAffl  THEN DO;
17335 +    _NODE_  =                    7;
17336 +    _LEAF_  =                    6;
17337 +    P_TargetBuy0  =     0.05220883534136;
17338 +    P_TargetBuy1  =     0.94779116465863;
17339 +    Q_TargetBuy0  =     0.05220883534136;
17340 +    Q_TargetBuy1  =     0.94779116465863;
17341 +    V_TargetBuy0  =     0.05839416058394;
17342 +    V_TargetBuy1  =     0.94160583941605;
17343 +    I_TargetBuy  = '1' ;
17344 +    U_TargetBuy  =                    1;
17345 +    END;
17346 +  ELSE DO;
17347 +    _ARBFMT_1 = PUT( DemGender , $1.);
17348 +     %DMNORMIP( _ARBFMT_1);
17349 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17350 +      _NODE_  =                   17;
17351 +      _LEAF_  =                    4;
17352 +      P_TargetBuy0  =      0.2125850340136;
17353 +      P_TargetBuy1  =     0.78741496598639;
17354 +      Q_TargetBuy0  =      0.2125850340136;
17355 +      Q_TargetBuy1  =     0.78741496598639;
17356 +      V_TargetBuy0  =     0.21518987341772;
17357 +      V_TargetBuy1  =     0.78481012658227;
17358 +      I_TargetBuy  = '1' ;
17359 +      U_TargetBuy  =                    1;
17360 +      END;
17361 +    ELSE DO;
17362 +      _NODE_  =                   18;
17363 +      _LEAF_  =                    5;
17364 +      P_TargetBuy0  =     0.50574712643678;
17365 +      P_TargetBuy1  =     0.49425287356321;
17366 +      Q_TargetBuy0  =     0.50574712643678;
17367 +      Q_TargetBuy1  =     0.49425287356321;
17368 +      V_TargetBuy0  =      0.5563909774436;
17369 +      V_TargetBuy1  =     0.44360902255639;
17370 +      I_TargetBuy  = '0' ;
17371 +      U_TargetBuy  =                    0;
17372 +      END;
17373 +    END;
17374 +  END;
17375 +ELSE IF  NOT MISSING(DemAge ) AND
17376 +                  44.5 <= DemAge  THEN DO;
17377 +  IF  NOT MISSING(DemAffl ) AND
17378 +                    10.5 <= DemAffl  AND
17379 +    DemAffl  <                 15.5 THEN DO;
17380 +    _NODE_  =                   12;
17381 +    _LEAF_  =                   13;
17382 +    P_TargetBuy0  =     0.73689516129032;
17383 +    P_TargetBuy1  =     0.26310483870967;
17384 +    Q_TargetBuy0  =     0.73689516129032;
17385 +    Q_TargetBuy1  =     0.26310483870967;
17386 +    V_TargetBuy0  =     0.71123491179201;
17387 +    V_TargetBuy1  =     0.28876508820798;
17388 +    I_TargetBuy  = '0' ;
17389 +    U_TargetBuy  =                    0;
17390 +    END;
17391 +  ELSE IF  NOT MISSING(DemAffl ) AND
17392 +                    15.5 <= DemAffl  THEN DO;
17393 +    IF  NOT MISSING(DemAffl ) AND
17394 +                      18.5 <= DemAffl  THEN DO;
17395 +      _NODE_  =                   33;
17396 +      _LEAF_  =                   16;
17397 +      P_TargetBuy0  =     0.04166666666666;
17398 +      P_TargetBuy1  =     0.95833333333333;
17399 +      Q_TargetBuy0  =     0.04166666666666;
17400 +      Q_TargetBuy1  =     0.95833333333333;
17401 +      V_TargetBuy0  =                 0.08;
17402 +      V_TargetBuy1  =                 0.92;
17403 +      I_TargetBuy  = '1' ;
17404 +      U_TargetBuy  =                    1;
17405 +      END;
17406 +    ELSE DO;
17407 +      _ARBFMT_1 = PUT( DemGender , $1.);
17408 +       %DMNORMIP( _ARBFMT_1);
17409 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17410 +        _NODE_  =                   57;
17411 +        _LEAF_  =                   14;
17412 +        P_TargetBuy0  =     0.29473684210526;
17413 +        P_TargetBuy1  =     0.70526315789473;
17414 +        Q_TargetBuy0  =     0.29473684210526;
17415 +        Q_TargetBuy1  =     0.70526315789473;
17416 +        V_TargetBuy0  =     0.31818181818181;
17417 +        V_TargetBuy1  =     0.68181818181818;
17418 +        I_TargetBuy  = '1' ;
17419 +        U_TargetBuy  =                    1;
17420 +        END;
17421 +      ELSE DO;
17422 +        _NODE_  =                   58;
17423 +        _LEAF_  =                   15;
17424 +        P_TargetBuy0  =      0.5820895522388;
17425 +        P_TargetBuy1  =     0.41791044776119;
17426 +        Q_TargetBuy0  =      0.5820895522388;
17427 +        Q_TargetBuy1  =     0.41791044776119;
17428 +        V_TargetBuy0  =     0.78787878787878;
17429 +        V_TargetBuy1  =     0.21212121212121;
17430 +        I_TargetBuy  = '0' ;
17431 +        U_TargetBuy  =                    0;
17432 +        END;
17433 +      END;
17434 +    END;
17435 +  ELSE DO;
17436 +    _NODE_  =                   11;
17437 +    _LEAF_  =                   12;
17438 +    P_TargetBuy0  =     0.89773169151004;
17439 +    P_TargetBuy1  =     0.10226830848995;
17440 +    Q_TargetBuy0  =     0.89773169151004;
17441 +    Q_TargetBuy1  =     0.10226830848995;
17442 +    V_TargetBuy0  =     0.90019333011116;
17443 +    V_TargetBuy1  =     0.09980666988883;
17444 +    I_TargetBuy  = '0' ;
17445 +    U_TargetBuy  =                    0;
17446 +    END;
17447 +  END;
17448 +ELSE DO;
17449 +  IF  NOT MISSING(DemAffl ) AND
17450 +    DemAffl  <                  9.5 THEN DO;
17451 +    _NODE_  =                    8;
17452 +    _LEAF_  =                    7;
17453 +    P_TargetBuy0  =     0.76952236542835;
17454 +    P_TargetBuy1  =     0.23047763457164;
17455 +    Q_TargetBuy0  =     0.76952236542835;
17456 +    Q_TargetBuy1  =     0.23047763457164;
17457 +    V_TargetBuy0  =     0.76997245179063;
17458 +    V_TargetBuy1  =     0.23002754820936;
17459 +    I_TargetBuy  = '0' ;
17460 +    U_TargetBuy  =                    0;
17461 +    END;
17462 +  ELSE IF  NOT MISSING(DemAffl ) AND
17463 +                    14.5 <= DemAffl  THEN DO;
17464 +    _NODE_  =                   10;
17465 +    _LEAF_  =                   11;
17466 +    P_TargetBuy0  =     0.21804511278195;
17467 +    P_TargetBuy1  =     0.78195488721804;
17468 +    Q_TargetBuy0  =     0.21804511278195;
17469 +    Q_TargetBuy1  =     0.78195488721804;
17470 +    V_TargetBuy0  =      0.1917808219178;
17471 +    V_TargetBuy1  =     0.80821917808219;
17472 +    I_TargetBuy  = '1' ;
17473 +    U_TargetBuy  =                    1;
17474 +    END;
17475 +  ELSE DO;
17476 +    _ARBFMT_1 = PUT( DemGender , $1.);
17477 +     %DMNORMIP( _ARBFMT_1);
17478 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17479 +      _NODE_  =                   23;
17480 +      _LEAF_  =                    8;
17481 +      P_TargetBuy0  =     0.42231075697211;
17482 +      P_TargetBuy1  =     0.57768924302788;
17483 +      Q_TargetBuy0  =     0.42231075697211;
17484 +      Q_TargetBuy1  =     0.57768924302788;
17485 +      V_TargetBuy0  =                  0.4;
17486 +      V_TargetBuy1  =                  0.6;
17487 +      I_TargetBuy  = '1' ;
17488 +      U_TargetBuy  =                    1;
17489 +      END;
17490 +    ELSE IF _ARBFMT_1 IN ('M' ) THEN DO;
17491 +      _NODE_  =                   24;
17492 +      _LEAF_  =                    9;
17493 +      P_TargetBuy0  =     0.64150943396226;
17494 +      P_TargetBuy1  =     0.35849056603773;
17495 +      Q_TargetBuy0  =     0.64150943396226;
17496 +      Q_TargetBuy1  =     0.35849056603773;
17497 +      V_TargetBuy0  =     0.73228346456692;
17498 +      V_TargetBuy1  =     0.26771653543307;
17499 +      I_TargetBuy  = '0' ;
17500 +      U_TargetBuy  =                    0;
17501 +      END;
17502 +    ELSE DO;
17503 +      _NODE_  =                   25;
17504 +      _LEAF_  =                   10;
17505 +      P_TargetBuy0  =      0.8015873015873;
17506 +      P_TargetBuy1  =     0.19841269841269;
17507 +      Q_TargetBuy0  =      0.8015873015873;
17508 +      Q_TargetBuy1  =     0.19841269841269;
17509 +      V_TargetBuy0  =     0.86486486486486;
17510 +      V_TargetBuy1  =     0.13513513513513;
17511 +      I_TargetBuy  = '0' ;
17512 +      U_TargetBuy  =                    0;
17513 +      END;
17514 +    END;
17515 +  END;
17516 +
17517 +*****  RESIDUALS R_ *************;
17518 +IF  F_TargetBuy  NE '0'
17519 +AND F_TargetBuy  NE '1'  THEN DO;
17520 +        R_TargetBuy0  = .;
17521 +        R_TargetBuy1  = .;
17522 + END;
17523 + ELSE DO;
17524 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17525 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17526 +       SELECT( F_TargetBuy  );
17527 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17528 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17529 +       END;
17530 + END;
17531 +
17532 +****************************************************************;
17533 +******          END OF DECISION TREE SCORING CODE         ******;
17534 +****************************************************************;
17535 +
17536 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17537  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17538  quit;
17539  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17541  proc sort data=WORK.EM_USER_REPORT;
17542  by ID VIEW;
17543  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17544  *------------------------------------------------------------*;
17545  * Tree2: Computing metadata for TRAIN data;
17546  *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
17930  data WORK.MODELTEMP_INFO;
17931  set EMWS5.Tree2_EMINFO;
17932  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17933  run;
 
NOTE: There were 0 observations read from the data set EMWS5.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17934  data EMWS5.Tree2_EMINFO;
17935  length TARGET KEY $32 DATA $43;
17936  input TARGET KEY DATA $;
17937  cards;
 
NOTE: The data set EMWS5.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17941  run;
17942  data EMWS5.Tree2_EMINFO;
17943  set EMWS5.Tree2_EMINFO WORK.MODELTEMP_INFO;
17944  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS5.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
17945  proc sort data = EMWS5.Tree2_EMINFO NOTHREADS;
17946  by TARGET KEY;
17947  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE2_EMINFO.
NOTE: The data set EMWS5.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17948  proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
17949  by TARGET KEY;
17950  run;
 
NOTE: There were 3 observations read from the data set EMWS5.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17951  proc sort data = EMWS5.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
17952  by TARGET KEY;
17953  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17954  data EMWS5.Tree2_EMINFO;
17955  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
17956  by TARGET KEY;
17957  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE2_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17958  proc datasets lib=work nolist;
17959  delete TEMP_INFO SORTEDEMINFO;
17960  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
17961  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS5.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 12, 2017
Time:                11:43:02
*------------------------------------------------------------*
17985  data EMWS5.Tree2_EMOUTFIT;
17986  set EMWS5.Tree2_EMOUTFIT;
17987  length TargetLabel $200;
17988  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17989  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
17990  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMOUTFIT.
NOTE: The data set EMWS5.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
17991  proc sort data=EMWS5.Tree2_EMREPORTFIT nothreads;
17992  by TARGET;
17993  run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMREPORTFIT.
NOTE: The data set EMWS5.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
17994  %let _EMwarndup = 0;
17995  %let _EMtargetdup =;
17996  %let _EMASEtargetdup =;
17997  data _null_;
17998  set EMWS5.Tree2_EMOUTFIT;
17999  if .<_ASE_<0.000001 then do;
18000  call symput('_EMwarndup', '1');
18001  call symput('_EMtargetdup', target);
18002  call symput('_EMASEtargetdup', put(_ASE_, best.));
18003  end;
18004  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18005  %let EMEXCEPTIONSTRING=;
18006  *------------------------------------------------------------*;
18007  * REPORT: Tree2;
18008  *------------------------------------------------------------*;
18009  %let EM_ACTION = REPORT;
18010  %let syscc = 0;
18011  %macro main;
18012
18013    %if %upcase(&EM_ACTION) = CREATE %then %do;
18014      filename temp catalog 'sashelp.emmodl.tree_create.source';
18015      %include temp;
18016      filename temp;
18017
18018      %em_tree_create;
18019    %end;
18020
18021     %else
18022     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18023
18024         filename temp catalog 'sashelp.emmodl.tree_train.source';
18025         %include temp;
18026         filename temp;
18027         %em_tree_train;
18028     %end;
18029
18030    %else
18031    %if %upcase(&EM_ACTION) = SCORE %then %do;
18032      filename temp catalog 'sashelp.emmodl.tree_score.source';
18033      %include temp;
18034      filename temp;
18035
18036      %em_tree_score;
18037
18038    %end;
18039
18040    %else
18041    %if %upcase(&EM_ACTION) = REPORT %then %do;
18042
18043         filename temp catalog 'sashelp.emmodl.tree_report.source';
18044         %include temp;
18045         filename temp;
18046
18047         %em_tree_report;
18048     %end;
18049
18050    %else
18051    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18052
18053         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18054         %include temp;
18055         filename temp;
18056         %EM_TREE_OPENTREEVIEWER;
18057
18058     %end;
18059
18060    %else
18061    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18062
18063         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18064         %include temp;
18065         filename temp;
18066         %EM_TREE_CLOSETREEVIEWER;
18067
18068     %end;
18069
18070
18071     %doendm:
18072  %mend main;
18073
18074  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18076 +%macro em_tree_makePlotDs( multipleTar= );
18078 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18079 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18080 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18081 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18083 +  /* determine if validation statistics will be displayed */
18084 +  %let validflag=N;
18085 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18086 +    /* determine if validation data exists */
18087 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18088 +      %let validflag=Y;
18089 +    %end;
18090 +  %end;
18092 +   /* retrieve name of decmeta even in presence of multiple targets */
18093 +   %let decmeta = ;
18094 +   %if &EM_DEC_DECMETA eq %then %do;
18095 +     data _Target;
18096 +       set &em_data_variableset;
18097 +       where ROLE='TARGET' and USE in('D', 'Y');
18098 +       keep NAME;
18099 +     run;
18100 +     proc sort data=_Target;
18101 +       by NAME;
18102 +     run;
18103 +     proc sort data=EM_TARGETDECINFO;
18104 +       by TARGET;
18105 +     run;
18106 +     data _Target;
18107 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18108 +       by NAME;
18109 +       if _a then do;
18110 +         call symput('decmeta', trim(DECMETA));
18111 +       end;
18112 +     run;
18113 +     proc delete data=_Target;run;
18114 +   %end;
18115 +   %else %let decmeta = &EM_DEC_DECMETA;
18118 +  /* retrieve targetEvent from decmeta */
18119 +  %let targetEvent=;
18120 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18121 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18122 +      data _null_;
18123 +       set &DECMETA(where=(_TYPE_="TARGET"));
18124 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18125 +      run;
18126 +    %end;
18127 +  %end;
18129 +  /* retrieve predicted var for targetEvent from decmeta */
18130 +  %let predTarget=;
18131 +  %let predLvl=;
18132 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18133 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18134 +      data _null_;
18135 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18136 +       call symput('predTarget', strip(VARIABLE));
18137 +       call symput('predLvl', strip(LEVEL));
18138 +      run;
18139 +    %end;
18140 +  %end;
18141 +  %else %do;
18142 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18143 +      data _null_;
18144 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18145 +       call symput('predTarget', strip(VARIABLE));
18146 +      run;
18147 +    %end;
18148 +  %end;
18150 +  /* create BelowText value */
18151 +  data belowtext;
18152 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18153 +    keep node belowtext;
18154 +  run;
18156 +  /* relace belowtext with variable label if it exists */
18157 +  data belowtext2;
18158 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18159 +    keep node belowtextlbl;
18160 +  run;
18162 +  proc sort data=belowtext; by node; run;
18163 +  proc sort data=belowtext2; by node; run;
18165 +  data belowtext;
18166 +    merge belowtext belowtext2(in=_a);
18167 +    by node;
18168 +    if _a then belowtext=belowtextlbl;
18169 +    keep node belowtext;
18170 +  run;
18172 +  /* create AboveText value */
18173 +  data abovetext;
18174 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18175 +  run;
18176 +  proc sort data=abovetext; by node numeric_value; run;
18178 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18179 +  data abovetext;
18180 +    set abovetext(rename=(node=parent));
18181 +    by parent numeric_value;
18182 +    retain abovetext tempstring flag branch origval origchar ;
18183 +    length abovetext $256;
18184 +    length tempstring origchar $64;
18186 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18187 +      if first.parent then do;
18188 +        if missing(character_value) then do;
18189 +          numeric_value = round(numeric_value, &sp_precision);
18190 +          abovetext = "< "||strip(NUMERIC_VALUE);
18191 +          branch = 1;
18192 +          origval = numeric_value;
18193 +          output;
18194 +        end;
18195 +        else do;
18196 +          abovetext = "< "||strip(CHARACTER_VALUE);
18197 +          branch = 1;
18198 +          origchar = character_value;
18199 +          output;
18200 +        end;
18202 +        if first.parent AND last.parent then do;
18203 +          if missing(character_value) then do;
18204 +            numeric_value = round(numeric_value, &sp_precision);
18205 +            branch = branch + 1;
18206 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18207 +            output;
18208 +          end;
18209 +          else do;
18210 +            branch = branch + 1;
18211 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18212 +            output;
18213 +          end;
18214 +        end;
18215 +      end;
18216 +      else if last.parent then do;
18217 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18218 +          if missing(character_value) then do;
18219 +            numeric_value = round(numeric_value, &sp_precision);
18220 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18221 +          end;
18222 +          else do;
18223 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18224 +          end;
18225 +          branch = branch + 1;
18226 +          output;
18228 +          if missing(character_value) then do;
18229 +            numeric_value = round(numeric_value, &sp_precision);
18230 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18231 +          end;
18232 +          else do;
18233 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18234 +          end;
18235 +          branch = branch + 1;
18236 +          output;
18237 +        end;
18238 +        else do;
18239 +          if missing(character_value) then do;
18240 +            numeric_value = round(numeric_value, &sp_precision);
18241 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18242 +          end;
18243 +          else do;
18244 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18245 +          end;
18246 +          branch = branch + 1;
18247 +          output;
18248 +        end;
18249 +      end;
18250 +      else do;
18251 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18252 +          if missing(character_value) then do;
18253 +            numeric_value = round(numeric_value,&sp_precision);
18254 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18255 +            origval = numeric_value;
18256 +          end;
18257 +          else do;
18258 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18259 +            origchar = character_value;
18260 +          end;
18261 +          branch = branch + 1;
18262 +          output;
18264 +        end;
18265 +        else do;
18266 +          if missing(character_value) then do;
18267 +            numeric_value = round(numeric_value, &sp_precision);
18268 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18269 +            origval = numeric_value;
18270 +          end;
18271 +          else do;
18272 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18273 +            origval = character_value;
18274 +          end;
18275 +          branch = branch + 1;
18276 +          output;
18277 +        end;
18278 +      end;
18279 +    end;
18280 +    else do;
18281 +       if first.numeric_value then do;
18282 +         flag = 0;
18283 +         abovetext = strip(CHARACTER_VALUE);
18284 +         branch = numeric_value;
18285 +         if first.numeric_value AND last.numeric_value then do;
18286 +           output;
18287 +         end;
18288 +       end;
18289 +       else if last.numeric_value then do;
18290 +         if flag=0 then do;
18291 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18292 +           length = length(strip(tempstring));
18293 +           if length < 32 then do;
18294 +             abovetext = strip(tempstring);
18295 +           end;
18296 +           else do;
18297 +             abovetext = strip(abovetext)||", ...";
18298 +             flag = 1;
18299 +           end;
18300 +         end;
18301 +         branch = numeric_value;
18302 +         output;
18303 +       end;
18304 +       else do;
18305 +         if flag=0 then do;
18306 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18307 +           length = length(strip(tempstring));
18308 +           if length < 32 then do;
18309 +             abovetext = strip(tempstring);
18310 +           end;
18311 +           else do;
18312 +             abovetext = strip(abovetext)||", ...";
18313 +             flag=1;
18314 +           end;
18315 +         end;
18316 +         branch = numeric_value;
18317 +       end;
18318 +    end;
18319 +    keep parent branch abovetext;
18320 +  run;
18322 +  /* MIssing value to abovetext */
18323 +  data tempmissing;
18324 +    set &EM_USER_OUTRULES;
18325 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18326 +    rename node=parent numeric_value=branch character_value=misschar;
18327 +  run;
18330 +  proc sort data=abovetext; by parent branch; run;
18331 +  proc sort data=tempmissing; by parent branch; run;
18332 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18334 +  data tempoutnodes;
18335 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18336 +    by parent branch;
18337 +    length traintotal validtotal 8;
18338 +    retain traintotal validtotal;
18340 +    if _a then do;
18341 +      if ^MISSING(abovetext) then do;
18342 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18343 +      end;
18344 +      else do;
18345 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18346 +      end;
18347 +    end;
18348 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18350 +    if node=1 then do;
18351 +      traintotal = N;
18352 +      validtotal=VN;
18353 +    end;
18355 +    drop role rank stat misschar belowtext;
18356 +  run;
18357 +  proc sort data=tempoutnodes; by node; run;
18358 +  proc sort data=belowtext; by node; run;
18360 +  data tempoutnodes;
18361 +    merge tempoutnodes belowtext;
18362 +    by node;
18364 +  run;
18366 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18367 +  %let adjusted = N;
18368 +  %let npriors = 0;
18369 +  data _null_ ;
18370 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18371 +    if eof then do ;
18372 +      call symput("npriors" , strip(put(_N_,best.))) ;
18373 +    end;
18374 +  run;
18375 +  %if &npriors gt 0 %then %let adjusted=Y;
18378 +  /* create a table with targetUsed and targetLevel columns for each node */
18379 +  data temptarmeta;
18380 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18381 +    %if &multipleTar eq N %then %do;
18382 +      AND USE in ('D', 'Y')
18383 +    %end;
18384 +    ));
18385 +    length TARGET $32;
18386 +    Target=name;
18387 +    keep target level;
18388 +  run;
18390 +  %if &multipleTar eq Y %then %do;
18391 +    data temptargetused;
18392 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18393 +      keep node target;
18394 +    run;
18395 +    proc sort data=temptargetused; by target; run;
18396 +    proc sort data=temptarmeta; by target; run;
18397 +    data temptargetused;
18398 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18399 +      by target;
18400 +      if _a and _b;
18401 +    run;
18402 +  %end;
18403 +  %else %do;
18404 +    data temptargetused;
18405 +      set &EM_USER_OUTSTATS;
18406 +      length target $32 tarlevel $10;
18407 +      target="%EM_TARGET";
18408 +      tarlevel="%EM_TARGET_LEVEL";
18409 +      keep node target tarlevel;
18410 +    run;
18411 +    proc sort data=temptargetused nodupkey; by node; run;
18412 +  %end;
18414 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18415 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18416 +  proc sort data=temptargetused; by node; run;
18419 +  /* create tables for all interval targets as well as all class targets */
18420 +  data tempinterval tempclass;
18421 +    merge tempoutstats temptargetused( rename=(target=targetused));
18422 +    by node;
18423 +    %if "&multipleTar" eq "Y" %then %do;
18424 +      if ((missing(Target)) OR (target=targetused ));
18425 +    %end;
18427 +    if tarlevel="INTERVAL" then output tempinterval;
18428 +    else output tempclass;
18429 +  run;
18431 +  /* iniitalize intTarget and classTarget flags */
18432 +  %let em_intNobs =0;
18433 +  %let em_classNobs = 0;
18434 +  %let em_intTarget= N;
18435 +  %let em_classTarget= N;
18437 +  proc sql;
18438 +    reset noprint;
18439 +    select count(*) into :em_intNobs from tempinterval;
18440 +  quit;
18441 +  proc sql;
18442 +    reset noprint;
18443 +    select count(*) into :em_classNobs from tempclass;
18444 +  quit;
18446 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18447 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18449 +  /* retrieve all information for interval targets */
18450 +  %if &em_intTarget eq Y %then %do;
18452 +    /* determine if leaf variable exists */
18453 +    %let dsid=%sysfunc(open(tempinterval,i));
18454 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18455 +    %let rc=%sysfunc(close(&dsid));
18457 +    proc transpose data=tempinterval
18458 +      %if &leafexists %then %do;
18459 +        (drop=leaf)
18460 +      %end;
18461 +      %if &validexist %then %do;
18462 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18463 +      %end;
18464 +      %else %do;
18465 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18466 +      %end;
18467 +      by node;
18468 +      id statname;
18469 +    run;
18470 +    data tempinterval;
18471 +      set tempinterval;
18472 +      if missing(N) then delete;
18473 +    run;
18474 +  %end;
18476 +  /* retrieve all information for class targets */
18477 +  %if &em_classTarget eq Y %then %do;
18478 +    proc sort data=tempclass; by node category; run;
18479 +    %if &validflag eq N %then %do;
18480 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18481 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18482 +    %end;
18483 +    %else %do;
18484 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18485 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18486 +    %end;
18487 +      set tempclass;
18489 +      %if &validflag eq N %then %do;
18490 +        %if "&adjusted" eq "N" %then %do;
18491 +          if statname="N" then output tempn;
18492 +        %end;
18493 +        %else %do;
18494 +          if statname="NPRIORS" then output tempn;
18495 +        %end;
18496 +        else if statname="PREDICTION" then output temppredict;
18497 +        else if statname="PROBABILITY" then output tempprob;
18498 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18499 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18500 +      %end;
18501 +      %else %do;
18502 +        %if "&adjusted" eq "N" %then %do;
18503 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18504 +        %end;
18505 +        %else %do;
18506 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18507 +        %end;
18508 +        else if statname="PREDICTION" then output temppredict;
18509 +        else if statname="PROBABILITY" then output tempprob;
18510 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18511 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18512 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18513 +      %end;
18514 +    run;
18517 +    /* determine if profit/loss exists in tempprofit */
18518 +    %let em_profitflag=0;
18519 +    %let em_lossflag=0;
18520 +    proc sql;
18521 +      reset noprint;
18522 +      select count(*) into :em_profitflag from tempprofit;
18523 +    quit;
18524 +    proc sql;
18525 +      reset noprint;
18526 +      select count(*) into :em_lossflag from temploss;
18527 +    quit;
18529 +    %if &validFlag eq Y %then %do;
18530 +      proc transpose data=tempn
18531 +        %if "&adjusted" eq "N" %then %do;
18532 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18533 +        %end;
18534 +        %else %do;
18535 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18536 +        %end;
18537 +        by node;
18538 +        id statname;
18539 +      run;
18540 +      %if &em_profitflag ne 0 %then %do;
18541 +        proc transpose data=tempprofit out=tempprofit;
18542 +          by node category;
18543 +          id statname ;
18544 +        run;
18545 +      %end;
18546 +      %if &em_lossflag ne 0 %then %do;
18547 +        proc transpose data=temploss out=temploss;
18548 +          by node category;
18549 +          id statname ;
18550 +        run;
18551 +      %end;
18552 +      data tempprob;
18553 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18554 +        by node
18555 +        %if &multipleTar eq Y %then %do;
18556 +          target
18557 +        %end;
18558 +        category;
18559 +      run;
18560 +    %end;
18562 +    /* store percentcorrect value */
18563 +    data temppredict;
18564 +      merge tempprob temppredict(in=_a);
18565 +      by node category;
18566 +      if _a then do;
18567 +        percentCorrect = statvalue;
18568 +        %if &validFlag eq Y %then %do;
18569 +          vpercentCorrect= vstatvalue;
18570 +        %end;
18571 +      end;
18572 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18573 +      %if &validFlag eq Y %then %do;
18574 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18575 +      %end;
18576 +      ;
18577 +      if missing(percentCorrect) then delete;
18578 +      drop target;
18579 +    run;
18581 +    /* build profittext */
18582 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18583 +      data tempprofittext(keep= node profittext profitloss);
18584 +        length profittext $800 profitloss 8.;
18585 +        retain profittext profitloss;
18587 +        merge tempprob
18588 +        %if &em_profitflag ne 0 %then %do;
18589 +          tempprofit
18590 +        %end;
18591 +        %else %if &em_lossflag ne 0 %then %do;
18592 +          temploss
18593 +        %end;
18594 +        ;
18595 +        by node category;
18597 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18598 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18599 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18600 +          %let profittype = ALL;
18601 +        %end;
18603 +        /* create the profitloss variable for nodecolor if selected */
18604 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18606 +        %if "&profittype" eq "ALL" %then %do;
18607 +          if strip(CATEGORY)="&targetEvent" then do;
18608 +            profitloss=statvalue;
18609 +          end;
18610 +          if first.node then do;
18611 +            %if &validFlag eq N %then %do;
18612 +             %if &em_profitflag ne 0 %then %do;
18613 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18614 +             %end;
18615 +             %if &em_lossflag ne 0 %then %do;
18616 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18617 +             %end;
18618 +            %end;
18619 +            %else %do;
18620 +             %if &em_profitflag ne 0 %then %do;
18621 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18621!+;
18622 +             %end;
18623 +             %if &em_lossflag ne 0 %then %do;
18624 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18625 +             %end;
18626 +            %end;
18627 +          end;
18628 +          else if last.node then do;
18629 +            %if &validFlag eq N %then %do;
18630 +             %if &em_profitflag ne 0 %then %do;
18631 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18632 +             %end;
18633 +             %if &em_lossflag ne 0 %then %do;
18634 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18635 +             %end;
18636 +             /*if CATEGORY="&targetEvent" then do;
18637 +               profitloss=statvalue;
18638 +             end;*/
18639 +            %end;
18640 +            %else %do;
18641 +             %if &em_profitflag ne 0 %then %do;
18642 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18642!+14.&EM_PROPERTY_SPLITPRECISION);
18643 +                if CATEGORY="&targetEvent" then do;
18644 +                 profitloss=ALTERNATIVE_PROFIT;
18645 +                end;
18646 +             %end;
18647 +             %if &em_lossflag ne 0 %then %do;
18648 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18648!+14.&EM_PROPERTY_SPLITPRECISION);
18649 +                if CATEGORY="&targetEvent" then do;
18650 +                  profitloss=ALTERNATIVE_LOSS;
18651 +                end;
18652 +             %end;
18653 +            %end;
18654 +            output;
18655 +          end;
18656 +          else do;
18657 +            %if &validFlag eq N %then %do;
18658 +             %if &em_profitflag ne 0 %then %do;
18659 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18660 +             %end;
18661 +             %if &em_lossflag ne 0 %then %do;
18662 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18663 +             %end;
18664 +            %end;
18665 +            %else %do;
18666 +             %if &em_profitflag ne 0 %then %do;
18667 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18667!+14.&EM_PROPERTY_SPLITPRECISION);
18668 +             %end;
18669 +             %if &em_lossflag ne 0 %then %do;
18670 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18670!+14.&EM_PROPERTY_SPLITPRECISION);
18671 +             %end;
18672 +            %end;
18673 +          end;
18674 +        %end;
18675 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18676 +          if strip(CATEGORY) = "&targetevent" then do;
18677 +            %if &validFlag eq N %then %do;
18678 +             %if &em_profitflag ne 0 %then %do;
18679 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18680 +             %end;
18681 +             %if &em_lossflag ne 0 %then %do;
18682 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18683 +             %end;
18684 +             profitloss=statvalue;
18685 +            %end;
18686 +            %else %do;
18687 +             %if &em_profitflag ne 0 %then %do;
18688 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18688!+;
18689 +                profitloss=ALTERNATIVE_PROFIT;
18690 +             %end;
18691 +             %if &em_lossflag ne 0 %then %do;
18692 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18693 +                profitloss=ALTERNATIVE_LOSS;
18694 +             %end;
18695 +            %end;
18696 +            output;
18697 +          end;
18698 +        %end;
18699 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18700 +          if strip(CATEGORY) = "&targetevent" then do;
18701 +            %if &validFlag eq N %then %do;
18702 +             profitloss=statvalue;
18703 +            %end;
18704 +            %else %do;
18705 +             %if &em_profitflag ne 0 %then %do;
18706 +                profitloss=ALTERNATIVE_PROFIT;
18707 +             %end;
18708 +             %if &em_lossflag ne 0 %then %do;
18709 +                profitloss=ALTERNATIVE_LOSS;
18710 +             %end;
18711 +            %end;
18712 +            output;
18713 +          end;
18714 +        %end;
18715 +      run;
18716 +    %end;
18718 +    data tempprob(keep= node probtext);
18719 +      length probtext $800;
18720 +      retain probtext;
18721 +      set tempprob ;
18722 +      by node;
18724 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18725 +      %let probtype = &EM_PROPERTY_TARGET;
18726 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18727 +        %let probtype = ALL;
18728 +      %end;
18730 +      %if "&probtype" eq "ALL" %then %do;
18731 +        if first.node then do;
18732 +          %if &validFlag eq N %then %do;
18733 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18734 +          %end;
18735 +          %else %do;
18736 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18737 +          %end;
18738 +        end;
18739 +        else if last.node then do;
18740 +          %if &validFlag eq N %then %do;
18741 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18742 +          %end;
18743 +          %else %do;
18744 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18745 +          %end;
18746 +          output;
18747 +        end;
18748 +        else do;
18749 +          %if &validFlag eq N %then %do;
18750 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18751 +          %end;
18752 +          %else %do;
18753 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18754 +          %end;
18755 +        end;
18756 +      %end;
18757 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18758 +        if strip(CATEGORY) = "&targetevent" then do;
18759 +          %if &validFlag eq N %then %do;
18760 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18761 +          %end;
18762 +          %else %do;
18763 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18764 +          %end;
18765 +          output;
18766 +        end;
18767 +      %end;
18768 +      %else %if "&probtype" eq "NONE" %then %do;
18769 +        if last.node then do;
18770 +          output;
18771 +        end;
18772 +      %end;
18773 +    run;
18774 +  %end;
18776 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18778 +  %let oldexists=0;
18779 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18780 +     data old_tree_plot;
18781 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18782 +        rename nodecolor=oldnodecolor;
18783 +     run;
18785 +     proc sort data=old_tree_plot;
18786 +        by node;
18787 +     run;
18789 +     %let oldexists=1;
18790 +  %end;
18792 +  data &EM_USER_TREE_PLOT;
18793 +    length textall $800;
18794 +    merge tempoutnodes temptargetused
18796 +    %if &em_intTarget eq Y %then %do;
18797 +      tempinterval
18798 +    %end;
18800 +    %if &em_classTarget eq Y %then %do;
18802 +      %if &validFlag eq N %then %do;
18803 +        tempn(rename=(statvalue=N))
18804 +      %end;
18805 +      %else %do;
18806 +        tempn
18807 +      %end;
18809 +      temppredict tempprob
18811 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18812 +        tempprofittext
18813 +      %end;
18814 +    %end;
18815 +    ;
18816 +    by node;
18818 +    /* build nodetext based on user selection */
18819 +    textall="";
18821 +    %if &em_intTarget eq Y %then %do;
18822 +    if tarlevel="INTERVAL" then do;
18823 +      /* Nodeid */
18824 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18825 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18826 +      %end;
18828 +      /* Target identifier if multiple targets are used */
18829 +      %if "&multipleTar" eq "Y" %then %do;
18830 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18831 +      %end;
18833 +      %if &validFlag eq Y %then %do;
18834 +         /* Column labels displayed in validflag eq Y only */
18835 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18836 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18836!+noquote ))";
18837 +         %end;
18839 +         /* Average values */
18840 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18841 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18842 +         %end;
18844 +         /* RASE */
18845 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18846 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18847 +         %end;
18849 +         /* Count */
18850 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18851 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18852 +         %end;
18853 +      %end;
18854 +      %else %do;
18855 +         /* Average values */
18856 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18857 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18858 +         %end;
18860 +         /* RASE */
18861 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18862 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18863 +         %end;
18865 +         /* Count */
18866 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18867 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18868 +         %end;
18869 +      %end;
18871 +      /* nodecolor */
18872 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18873 +        nodecolor=PREDICTION;
18874 +      %end;
18875 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18876 +        nodecolor=RASE;
18877 +      %end;
18878 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18879 +        nodecolor=1;
18880 +      %end;
18882 +    end;
18883 +    %end;
18884 +    %if &em_classTarget eq Y %then %do;
18885 +    if tarlevel^="INTERVAL" then  do;
18887 +      /* Nodeid */
18888 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18889 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18890 +      %end;
18891 +      /* Target identifier if multiple targets are used */
18892 +      %if "&multipleTar" eq "Y" %then %do;
18893 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18894 +      %end;
18896 +      /* Predicted values */
18897 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18898 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18899 +      %end;
18901 +      /* Column labels displayed in validflag eq Y only */
18902 +      %if "&ValidFlag" eq "Y" %then %do;
18903 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18904 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18904!+noquote ))";
18905 +        %end;
18906 +      %end;
18908 +      /* Target Values */
18909 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18910 +        textall=strip(textall)||"0A"x||strip(probtext);
18911 +      %end;
18913 +      /* include profit or loss for all target levels */
18914 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18915 +        textall=strip(textall)||"0A"x||strip(profittext);
18916 +      %end;
18918 +      %if &validFlag eq N %then %do;
18919 +        /* Percent Correct */
18920 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18921 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18922 +        %end;
18924 +         /* Count */
18925 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18926 +          %if "&adjusted" eq "N" %then %do;
18927 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18928 +          %end;
18929 +          %else %do;
18930 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18931 +          %end;
18932 +         %end;
18933 +      %end;
18934 +      %else %do;
18935 +        /* Percent Correct */
18936 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18937 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18938 +        %end;
18940 +         /* Count */
18941 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18942 +          %if "&adjusted" eq "N" %then %do;
18943 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18944 +          %end;
18945 +          %else %do;
18946 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18947 +          %end;
18948 +         %end;
18949 +      %end;
18951 +      /* nodecolor */
18952 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18953 +       %if &multipleTar ne Y %then %do;
18954 +        nodecolor=&predTarget;
18955 +       %end;
18956 +       %else %do;
18957 +         nodecolor=percentcorrect;
18958 +       %end;
18959 +      %end;
18960 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18961 +        nodecolor=percentcorrect;
18962 +      %end;
18963 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18964 +        nodecolor=1;
18965 +      %end;
18966 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18967 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18968 +          nodecolor=percentcorrect;
18969 +        %end;
18970 +        %else %do;
18971 +          nodecolor=profitloss;
18972 +        %end;
18973 +      %end;
18975 +    end;
18976 +    %end;
18977 +    %if &em_intTarget eq Y %then %do;
18978 +     drop  PREDICTION  TARGET TARLEVEL
18979 +     %if &ValidFlag eq Y %then %do;
18980 +         VPREDICTION
18981 +     %end;
18982 +     ;
18983 +    %end;
18984 +    %if &em_classTarget eq Y %then %do;
18985 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18986 +     %if &ValidFlag eq Y %then %do;
18987 +         VSTATVALUE
18988 +     %end;
18989 +     ;
18990 +    %end;
18992 +  run;
18994 +  /* add leaf index information to plotds - based on primary target only*/
18995 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18996 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18997 +      set &EM_USER_OUTSTATS;
18998 +      if ((statname="PROBABILITY"
18999 +      %if &validexist %then %do;
19000 +       or statname="VALID: PROBABILITY"
19001 +      %end;
19002 +      ) AND (CATEGORY="&TARGETEVENT")
19003 +      %if "&multipleTar" eq "Y" %then %do;
19004 +        AND (Target="%EM_TARGET")
19005 +      %end;
19006 +      );
19007 +    run;
19009 +    %if &validexist %then %do;
19010 +      proc sort data=tempprob; by node; run;
19011 +      %let vpredTarget = V%substr(&predTarget, 2);
19012 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19013 +         by node;
19014 +         id statname;
19015 +      run;
19016 +    %end;
19017 +  %end;
19018 +  %else %do;
19019 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19020 +      set &EM_USER_OUTSTATS;
19021 +      if ((statname="PREDICTION"
19022 +      %if &validexist %then %do;
19023 +       or statname="VALID: PREDICTION"
19024 +      %end;
19025 +      )
19026 +      %if "&multipleTar" eq "Y" %then %do;
19027 +        AND (Target="%EM_TARGET")
19028 +      %end;
19029 +      );
19030 +    run;
19031 +    %if &validexist %then %do;
19032 +      proc sort data=tempprob; by node; run;
19033 +      %let vpredTarget = V%substr(&predTarget, 2);
19034 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19035 +         by node;
19036 +         id statname;
19037 +      run;
19038 +    %end;
19039 +  %end;
19041 +  proc sort data=tempprob; by node; run;
19042 +  data tempoutnodes;
19043 +    merge tempoutnodes tempprob;
19044 +    by node;
19045 +  run;
19047 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19048 +  data tempnodes;
19049 +    retain traintotal validtotal;
19050 +    set tempnodes(where=(leaf ne . ));
19051 +    tprob=round(&predTarget, .01);
19052 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19053 +      percevent_train=round(tprob*100, .01);
19054 +    %end;
19055 +    %else %do;
19056 +      percevent_train=tprob;
19057 +    %end;
19059 +    perc_train=round((n/traintotal)*100, 0.01);
19060 +    /* leafwidth already has a *10 multiplier */
19061 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19063 +    %if &validexist %then %do;
19064 +      %let vpredTarget = V%substr(&predTarget,2);
19065 +      vprob=round(&vpredTarget, .01);
19066 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19067 +        percevent_valid=round(vprob*100, .01);
19068 +      %end;
19069 +      %else %do;
19070 +        percevent_valid=vprob;
19071 +      %end;
19072 +      perc_valid=round((vn/validtotal)*100, .01);
19073 +    %end;
19075 +    index=_N_;
19076 +    keep node index tprob perc_train percevent_train
19077 +    %if &validexist %then %do;
19078 +        vprob percevent_valid perc_valid
19079 +    %end;
19080 +    ;
19081 +  run;
19082 +  proc sort data=tempnodes; by node; run;
19083 +  data &EM_USER_TREE_PLOT;
19084 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19085 +    by node;
19086 +    if missing(node) then delete;
19087 +    %if &oldexists %then %do;
19088 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19089 +      drop oldnodecolor;
19090 +    %end;
19091 +    abovetext = compbl(abovetext);
19093 +    /* add variable labels */
19094 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19095 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19096 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19097 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19098 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19099 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19101 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19102 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19103 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19104 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19105 +          %end;
19106 +          %else %do;
19107 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19108 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19109 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19110 +          %end;
19111 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19113 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19114 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19115 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19116 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19117 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19118 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19119 +          %end;
19120 +          %else %do;
19121 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19122 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19123 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19124 +          %end;
19125 +    ;
19126 +  run;
19128 +  /* delete temporary tables */
19129 +  proc datasets lib=work nolist;
19130 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19131 +  run;
19133 +%mend em_tree_makePlotDs;
19137 +%macro em_tree_report;
19139 +   /* report properties */
19140 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19141 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19142 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19143 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19144 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19145 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19146 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19147 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19148 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19149 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19150 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19151 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19152 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19154 +   %let validexist=0;
19155 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19156 +     %let validexist=1;
19157 +   %end;
19159 +   /* determine if multiple targets will be processed */
19160 +   %let em_tree_multipleTargets=N;
19161 +   %let em_tree_numTarget=1;
19162 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19163 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19164 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19165 +         %let em_tree_multipleTargets=N;
19166 +      %end;
19167 +      %else %do;
19168 +        data _null_;
19169 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19170 +          if eof then
19171 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19172 +        run;
19174 +        %if &em_tree_numTarget gt 1 %then %do;
19175 +           %let em_tree_multipleTargets=Y;
19176 +        %end;
19177 +     %end;
19178 +   %end;
19180 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19182 +   /* variable importance */
19183 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19184 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19186 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19187 +     /* and the columns may not be generated                                                                                 */
19188 +     %let em_tree_cvexists=;
19189 +     %let em_tree_surrexists=.;
19190 +     data _null_;
19191 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19192 +       if eof then do ;
19193 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19194 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19195 +       end;
19196 +     run;
19198 +     data &EM_USER_OUTIMPORT;
19199 +         set &EM_USER_OUTIMPORT;
19200 +         /* format columns based on Precison value specified */
19201 +         format importance 15.&EM_PROPERTY_PRECISION
19202 +              %if &validexist %then %do;
19203 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19204 +              %end;
19205 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19206 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19207 +              %end;
19208 +         ;
19209 +     run;
19211 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19212 +     proc print data=&EM_USER_OUTIMPORT
19213 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19214 +          (where=((nrules>0) OR (nsurrogates>0)))
19215 +        %end;
19216 +        %else %do;
19217 +           (where=(nrules>0))
19218 +        %end;
19219 +        label noobs
19220 +        ;
19221 +     run;
19222 +     title10;
19224 +   %end;
19226 +   /* Sequence */
19227 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19228 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19229 +   data _null_ ;
19230 +      set &EM_USER_outseq (obs=2) end=eof ;
19231 +      if eof then do ;
19232 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19233 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19234 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19235 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19236 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19237 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19238 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19239 +      end;
19240 +    run;
19242 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19243 +      data &EM_USER_OUTSEQ;
19244 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19245 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19246 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19247 +           _XMISC_=_VMISC_
19248 +        %end;
19249 +        %if "&em_tree_aprof" ne "."  %then %do;
19250 +           _XAPROF_=_VAPROF_
19251 +           _XPROF_ = _VPROF_
19252 +        %end;
19253 +        %if "&em_tree_aloss" ne "."  %then %do;
19254 +           _XALOSS_=_VALOSS_
19255 +        %end;
19256 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19257 +           _XPASE_ = _VPASE_
19258 +           _XPMISC_ = _VPMISC_
19259 +        %end;
19261 +        ));
19262 +     %end;
19263 +     %else %do;
19264 +        set &EM_USER_OUTSEQ;
19265 +     %end;
19267 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19268 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19269 +            _MISC_   15.&EM_PROPERTY_PRECISION
19270 +         %end;
19271 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19272 +            _PASE_  15.&EM_PROPERTY_PRECISION
19273 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19274 +         %end;
19275 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19276 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19277 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19278 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19279 +            %end;
19280 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19281 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19282 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19283 +            %end;
19284 +         %end;
19285 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19286 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19287 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19288 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19289 +            %end;
19290 +         %end;
19291 +         %if "&em_tree_seq" ne "." %then %do;
19292 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19293 +         %end;
19294 +         %if "&em_tree_vseq" ne "." %then %do;
19295 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19296 +         %end;
19297 +         %if "&em_tree_aprof" ne "." %then %do;
19298 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19299 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19300 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19301 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19302 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19303 +           %end;
19304 +         %end;
19305 +         %else %if "&em_tree_aloss" ne "." %then %do;
19306 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19307 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19308 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19309 +           %end;
19310 +         %end;
19311 +      ;
19312 +    run;
19313 +   %end;
19315 +   /* Observation Based Importance */
19316 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19318 +      /* need to check for 0 obs */
19319 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19320 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19321 +      %let rc=%sysfunc(close(&dsid));
19323 +      %if &onobs %then %do;
19324 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19325 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19327 +         data &EM_USER_OUTOBSIMP;
19328 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19329 +           if _a;
19330 +           by _INPUT1_;
19331 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19332 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19333 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19334 +                   %end;
19335 +                   ;
19336 +         run;
19337 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19338 +      %end;
19339 +   %end;
19341 +  %end;
19343 +  /* create dataset to support tree diagram and icicle plot */
19344 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19345 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19347 +  /* display tree diagram */
19348 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19349 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19351 +  /* display icicle diagram */
19352 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19353 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19355 +  /* Leaf Statistics Plot */
19356 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19358 +  /* print leaf information to output window */
19359 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19361 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19362 +       by descending N;
19363 +     run;
19365 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19366 +     %local vn;
19367 +     data _null_;
19368 +       set t (obs=2) end=eof;
19369 +       if eof then do;
19370 +         call symput("vn", strip(put(vn, best.)));
19371 +       end;
19372 +     run;
19374 +     data t;
19375 +       set t;
19376 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19377 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19378 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19379 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19380 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19381 +       %end;
19382 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19383 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19384 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19385 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19386 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19387 +          %end;
19388 +       %end;
19389 +       ;
19390 +     run;
19392 +     /* determine if rase is found in t */
19393 +    %let dsid=%sysfunc(open(t,i));
19394 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19395 +    %let rc=%sysfunc(close(&dsid));
19397 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19398 +     proc print data=t noobs label;
19399 +       where tprob ne .;
19400 +       var node depth N tprob
19401 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19402 +         %if "&vn" ne "." %then %do;
19403 +           VN
19404 +         %end;
19405 +         vprob
19406 +       %end;
19407 +       %if &raseexists %then %do;
19408 +            RASE
19409 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19410 +              VRASE
19411 +            %end;
19412 +       %end;
19413 +       ;
19414 +     run;
19415 +     title10;
19416 +  %end;
19418 +  /* create plots that are done during training of node */
19419 +  /* display iterative plot, including reference line */
19420 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19421 +   /* %if &nleaves eq  %then %do; */
19422 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19423 +      data _null_;
19424 +        set &EM_USER_OUTTOPOLOGY end=eof;
19425 +        if eof then do;
19426 +          call symput('nleaves', LEAF);
19427 +        end;
19428 +      run;
19429 +   /* %end; */
19431 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19432 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19433 +  %end;
19435 +  /* display leaf statistics */
19436 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19438 +  /* stats by node if multiple targets = Y */
19439 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19440 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19441 +    data &EM_USER_OUTSTATS;
19442 +      set &EM_USER_OUTSTATS;
19444 +     * if STATNAME="TARGET" then delete;
19445 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19446 +      drop leaf;
19447 +    run;
19448 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19450 +  %end;
19451 +  %else %do;
19452 +    /* add outstats and outdescribe to spk but not results */
19453 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19454 +  %end;
19456 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS5.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS5.TREE2_OUTSEQ.
NOTE: The data set EMWS5.TREE2_OUTSEQ has 39 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 21 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 380 observations read from the data set EMWS5.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 9 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 9 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 9 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS5.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 175 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 150 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 175 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 50 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 25 observations read from the data set WORK.TEMPN.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS5.TREE2_TREE_PLOT has 25 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 175 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 16 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 16 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_TREE_PLOT.
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE2_TREE_PLOT has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS5.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 25 observations read from the data set EMWS5.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
19457
19458  *------------------------------------------------------------*;
19459  * End REPORT: Tree2;
19460  *------------------------------------------------------------*;
 
19461  /* Reset EM Options */
19462  options formchar="|----|+|---+=|-/\<>*";
19463  options nocenter ls=256 ps=10000;
19464  goptions reset=all device=GIF NODISPLAY;
 
19465  proc sort data=WORK.EM_USER_REPORT;
19466  by ID VIEW;
19467  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19468  proc sort data=EMWS5.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19469  by NAME;
19470  run;
 
NOTE: There were 14 observations read from the data set EMWS5.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19471  proc sort data=EMWS5.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19472  by NAME;
19473  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19474  data WORK.ASSESS_META;
19475  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19476  by NAME;
19477  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19478  data EM_temp_assessMeta;
19479  set EMWS5.Tree2_CMeta_TRAIN;
19480  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19481  run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19482  data EM_temp_assessdata;
19483  set EMWS5.Tree2_TRAIN(keep=
19484  F_TargetBuy
19485  I_TargetBuy
19486  P_TargetBuy0
19487  P_TargetBuy1
19488  Q_TargetBuy0
19489  Q_TargetBuy1
19490  R_TargetBuy0
19491  R_TargetBuy1
19492  U_TargetBuy
19493  V_TargetBuy0
19494  V_TargetBuy1
19495  _WARN_
19496  TargetBuy
19497  );
19498  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14445 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 14445 observations read from the data set EMWS5.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 14445 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23783   data EM_temp_assessMeta;
23784   set EMWS5.Tree2_CMeta_TRAIN;
23785   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23786   run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23787   data EM_temp_assessdata;
23788   set EMWS5.Tree2_VALIDATE(keep=
23789   F_TargetBuy
23790   I_TargetBuy
23791   P_TargetBuy0
23792   P_TargetBuy1
23793   Q_TargetBuy0
23794   Q_TargetBuy1
23795   R_TargetBuy0
23796   R_TargetBuy1
23797   U_TargetBuy
23798   V_TargetBuy0
23799   V_TargetBuy1
23800   _WARN_
23801   TargetBuy
23802   );
23803   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 7778 observations read from the data set EMWS5.PART_VALIDATE.
NOTE: There were 7778 observations read from the data set EMWS5.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7778 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28097   %let _cn = %sysfunc(getoption(CENTER));
28098   options nocenter;
28099   proc print data=EMWS5.Tree2_EMREPORTFIT noobs label;
28100   var STAT LABEL TRAIN
28101   VALIDATE
28102   ;
28103   by TARGET TARGETLABEL;
28104   title9 ' ';
28105   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28106   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28107   title10;
28108   options &_cn;
 
28109   proc sort data=EMWS5.Tree2_EMCLASSIFICATION nothreads;
28110   by DATAROLE TARGET TARGETLABEL;
28111   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28112   %let _cn = %sysfunc(getoption(CENTER));
28113   options nocenter;
28114   proc print data=EMWS5.Tree2_EMCLASSIFICATION noobs label;
28115   var from into pct_row pct_col count percent
28116   ;
28117   by DATAROLE TARGET TARGETLABEL;
28118   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28119   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28120   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28121   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28122   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28123   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28124   where _TYPE_='PREDICTION';
28125   title9 ' ';
28126   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28127   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28128   title9;
28129   title10;
28130   options &_cn;
 
28131   %let _cn = %sysfunc(getoption(CENTER));
28132   options nocenter;
28133   data EMWS5.Tree2_EMEVENTREPORT;
28134   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28134 !  8;
28135   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28135 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28135 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28135 ! FALSEEVENT
28136   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28136 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28136 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28137      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28138   FALSEEVENT=0;
28139   FALSENEVENT=0;
28140   TRUEEVENT=0;
28141   TRUENEVENT=0;
28142   set EMWS5.Tree2_EMEVENTREPORT;
28143   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
28144   proc print data=EMWS5.Tree2_EMEVENTREPORT noobs label;
28145   title9 ' ';
28146   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28147   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28148   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28149   title10;
28150   options &_cn;
 
28151   proc datasets library=EMWS5 nolist;
28152   modify Tree2_EMRANK;
28153   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28154   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28155   run;
 
NOTE: MODIFY was successful for EMWS5.TREE2_EMRANK.DATA.
28156   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
28157   %let _cn = %sysfunc(getoption(CENTER));
28158   options nocenter;
28159   proc print data=EMWS5.Tree2_EMRANK label noobs;
28160   var
28161   decile gain lift liftc resp respc N _meanP_;
28162   by
28163   notsorted DATAROLE
28164   notsorted TARGET
28165   notsorted TARGETLABEL
28166   ;
28167   title9 ' ';
28168   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28169   run;
 
NOTE: There were 40 observations read from the data set EMWS5.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28170   title10;
28171   options &_cn;
 
28172   proc datasets library=EMWS5 nolist;
28173   modify Tree2_EMSCOREDIST;
28174   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28175   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28176   run;
 
NOTE: MODIFY was successful for EMWS5.TREE2_EMSCOREDIST.DATA.
28177   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
